{"2515": {"code": ["import math\n\ndef is_prime(n):\n    if n == 1:\n        return False\n    if n == 2 or n == 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    w = 2\n    while i * i <= n:\n        if n % i == 0:\n            return False\n        i += w\n        w = 6 - w\n    return True\n\ndef similar_to_2017(n):\n    half = (n + 1) // 2", "from sympy import isprime\n\ndef similar_to_2017(n):\n    half = (n + 1) // 2\n    return isprime(n) and isprime(half)\n\nq = int(input())\nfor _ in range(q):\n    l, r = map(int, input().split())\n    print(sum(similar_to_2017(n) for n in range(l, r + 1, 2)))\n\n\nThis solution uses the sympy library to check if a number is prime. It then checks if each odd", "from math import sqrt\nfrom sys import stdin\n\ndef sieve_of_eratosthenes(n):\n    primes = [True] * (n+1)\n    primes[0] = primes[1] = False\n    for i in range(2, int(sqrt(n))+1):\n        if primes[i]:\n            for j in range(i*i, n+1, i):\n                primes[j] = False\n    return primes\n\ndef similar_to_2017(n):\n    return primes", "import math\n\ndef is_prime(n):\n    if n == 2 or n == 3: return True\n    if n < 2 or n%2 == 0: return False\n    if n < 9: return True\n    if n%3 == 0: return False\n    r = int(n**0.5)\n    f = 5\n    while f <= r:\n        if n%f == 0: return False\n        if n%(f+2) == 0: return False\n        f +=6\n    return True \n\ndef similar_to_2017(n", "import math\n\ndef is_prime(n):\n    if n == 1:\n        return False\n    elif n == 2:\n        return True\n    elif n % 2 == 0:\n        return False\n    else:\n        for i in range(3, math.isqrt(n) + 1, 2):\n            if n % i == 0:\n                return False\n        return True\n\ndef similar_to_2017(n):\n    return is_prime(n) and is_prime((n+1)//2)\n\ndef solve(l"], "prompt": "\nQUESTION:\nWe say that a odd number N is similar to 2017 when both N and (N+1)/2 are prime.\nYou are given Q queries.\nIn the i-th query, given two odd numbers l_i and r_i, find the number of odd numbers x similar to 2017 such that l_i \u2264 x \u2264 r_i.\n\n-----Constraints-----\n - 1\u2264Q\u226410^5\n - 1\u2264l_i\u2264r_i\u226410^5\n - l_i and r_i are odd.\n - All input values are integers.\n\n-----Input-----\nInput is given from Standard Input in the following format:\nQ\nl_1 r_1\n:\nl_Q r_Q\n\n-----Output-----\nPrint Q lines. The i-th line (1\u2264i\u2264Q) should contain the response to the i-th query.\n\n-----Sample Input-----\n1\n3 7\n\n-----Sample Output-----\n2\n\n - 3 is similar to 2017, since both 3 and (3+1)/2=2 are prime.\n - 5 is similar to 2017, since both 5 and (5+1)/2=3 are prime.\n - 7 is not similar to 2017, since (7+1)/2=4 is not prime, although 7 is prime.\nThus, the response to the first query should be 2.\nPlease provide the solution as pure code only, without explanations or comments.\n\nANSWER:\n```python\n"}}