{"1369": {"code": ["import math\n\ndef min_circle_coverage(points):\n    def squared_distance(p1, p2):\n        return (p1[0] - p2[0]) ** 2 + (p1[1] - p2[1]) ** 2\n\n    def is_in_circle(circle, point):\n        return squared_distance(circle, point) <= circle[2] ** 2\n\n    def bounding_circle(points):\n        x_min, x_max = min(x for x, y in points), max(x for x, y in points)\n        y_min, y_max = min(y for x, y in points), max(y for x, y in points)\n        center_x = x_min + (x_max - x_min) / 2\n        center_y = y_min + (y_max - y_min) / 2\n        radius = math", "import numpy as np\nimport cvxpy as cp\n\nN = int(input())\npoints = np.array([input().split() for _ in range(N)], dtype=float)\n\nx = cp.Variable()\ny = cp.Variable()\nr = cp.Variable(nonneg=True)\n\nconstraints = [cp.sum_squares(points - np.array([x.value, y.value])) <= r.value**2]\n\nproblem = cp.Problem(cp.Minimize(r), constraints)\nproblem.solve()\n\nprint(r.value)\n\n\nThis code uses the cvxpy library to formulate and solve a convex optimization problem. The problem is to minimize the radius of a circle that encloses all given points. The constraint is that the squared Euclidean distance from each point to the center of the circle must be less than or equal to the square of the radius. The solution is then", "from scipy.optimize import minimize\nfrom math import pi, sqrt\n\nN = int(input())\npoints = [list(map(int, input().split())) for _ in range(N)]\n\ndef circle(x):\n    cx, cy, r = x\n    return sum(sqrt((px - cx) ** 2 + (py - cy) ** 2) - r for px, py in points) ** 2\n\nres = minimize(circle, [0, 0, 0], method='Nelder-Mead')\n\nprint(res.fun)\n\n\nThis code uses scipy's `minimize` function to find the minimum value of the circle function. The circle function calculates the sum of the squared differences between the distance of each point to the center of the circle and the radius of the circle, and the result is squared to make it a proper function for `minimize`. The initial", "from scipy.optimize import minimize\nfrom math import sqrt\n\ndef distance(x1, y1, x2, y2):\n    return sqrt((x1 - x2) ** 2 + (y1 - y2) ** 2)\n\nN = int(input())\npoints = [list(map(int, input().split())) for _ in range(N)]\n\ndef calc_radius(center):\n    return max(distance(x, y, center[0], center[1]) for x, y in points)\n\ndef total_distance(center):\n    return sum(calc_radius(center) for _ in range(N))\n\nresult = minimize(total_distance, [500, 500], method='Nelder-Mead')\n\nprint(result.fun / N)\n\n\nThis program uses the scipy library's minimize function to find the optimal center for the circle.", "import math\n\ndef distance(x1, y1, x2, y2):\n    return math.sqrt((x2 - x1)**2 + (y2 - y1)**2)\n\ndef min_radius(points):\n    min_radius = 0\n    for p1 in points:\n        max_distance = max(distance(p1[0], p1[1], p2[0], p2[1]) for p2 in points)\n        min_radius = max(min_radius, max_distance)\n    return min_radius\n\nN = int(input())\npoints = [list(map(int, input().split())) for _ in range(N)]\nprint(min_radius(points))\n\n\nThis python code uses the concept of the diameter of the smallest enclosing circle. It calculates the maximum distance from a point to all other points, and that maximum distance is the radius of the smallest enclosing circle."], "prompt": "\nQUESTION:\nGiven are N points (x_i, y_i) in a two-dimensional plane.\nFind the minimum radius of a circle such that all the points are inside or on it.\n\n-----Constraints-----\n - 2 \\leq N \\leq 50\n - 0 \\leq x_i \\leq 1000\n - 0 \\leq y_i \\leq 1000\n - The given N points are all different.\n - The values in input are all integers.\n\n-----Input-----\nInput is given from Standard Input in the following format:\nN\nx_1 y_1\n:\nx_N y_N\n\n-----Output-----\nPrint the minimum radius of a circle such that all the N points are inside or on it.\nYour output will be considered correct if the absolute or relative error from our answer is at most 10^{-6}.\n\n-----Sample Input-----\n2\n0 0\n1 0\n\n-----Sample Output-----\n0.500000000000000000\n\nBoth points are contained in the circle centered at (0.5,0) with a radius of 0.5.\nPlease provide the solution as pure code only, without explanations or comments.\n\nANSWER:\n```python\n"}}