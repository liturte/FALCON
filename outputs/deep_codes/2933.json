{"2933": {"code": ["n = int(input())\nweights = [int(input()) for _ in range(n)]\ntarget = 1000\n\nweights.sort()\nclosest_sum = min(weights, key=lambda x: abs(x - target))\n\nfor i in range(n):\n    for j in range(i+1, n):\n        if weights[i] + weights[j] == closest_sum:\n            print(weights[i] + weights[j])\n            exit(0)\n        if weights[i] + weights[j] > closest_sum:\n            break\n\n\nThe solution is to sort the weights and find the closest sum to the target weight. Then, it iterates through the sorted weights and finds two weights whose sum is closest to the closest_sum. If there are multiple pairs of weights whose sum is closest to the closest_sum, it selects the pair", "def closest_to_1000():\n    n = int(input())\n    weights = [int(input()) for _ in range(n)]\n    weights.sort()\n\n    left, right = 0, len(weights) - 1\n    while left < right:\n        total = weights[left] + weights[right]\n        if total == 1000:\n            return 1000\n        elif total < 1000:\n            left += 1\n        else:\n            right -= 1\n\n    return weights[left] if abs(weights[left] - 1000) <= abs(weights[right] - 1000) else weights[right]\n\nprint(closest_to_1000())\n\nThis code uses a binary search approach to find the two weights that sum to the closest possible to 100", "def closest_to_1000():\n    n = int(input())\n    weights = [int(input()) for _ in range(n)]\n    weights.sort()\n    closest = 0\n    for i in range(n):\n        closest = weights[i]\n        if i > 0 and weights[i] - weights[i-1] < weights[i+1] - weights[i] and weights[i] - 1000 < weights[i+1] - 1000:\n            closest = weights[i]\n        if i < n - 1 and weights[i+1] - weights[i] < weights[i] - weights[i-1] and weights[i+1] - 1000 < weights[i] - 1000:\n            closest = weights[i+1]\n    return closest\n\nprint(closest", "def closest_to_1000():\n    n = int(input())\n    weights = []\n    for i in range(n):\n        weights.append(int(input()))\n    weights.sort()\n    closest_weight = 0\n    for weight in weights:\n        if weight == 1000:\n            return 1000\n        elif weight > 1000:\n            if weight - 1000 < abs(closest_weight - 1000):\n                closest_weight = weight\n            else:\n                return closest_weight if closest_weight > weight else weight\n    return closest_weight\n\nprint(closest_to_1000())\n\n\nThis code first gets the number of weights and the weights themselves. It then sorts the weights in ascending order. It initializes the closest_weight variable to 0. It then iterates over", "def closest_to_1000():\n    n = int(input())\n    weights = [int(input()) for _ in range(n)]\n    weights.sort()\n\n    closest = float('inf')\n    closest_weight = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            total_weight = weights[i] + weights[j]\n            if abs(1000 - total_weight) < closest:\n                closest = abs(1000 - total_weight)\n                closest_weight = total_weight\n            elif abs(1000 - total_weight) == closest:\n                closest_weight = max(closest_weight, total_weight)\n\n    return closest_weight\n\nprint(closest_to_1000())\n\n\nThis Python program works by first sorting the list"], "prompt": "\nQUESTION:\nWallace the Weightlifting Walrus is training for a contest where it will have to lift $1000$ kg. Wallace has some weight plates lying around, possibly of different weights, and its goal is to add some of the plates to a bar so that it can train with a weight as close as possible to $1000$ kg.\n\nIn case there exist two such numbers which are equally close to $1000$ (e.g. $998$ and $1002$), Wallace will pick the greater one (in this case $1002$).\n\nHelp Wallace the Weightlifting Walrus and tell it which weight it will have to lift.\n\n-----Input-----\nThe first line of the input contains the number of plates $n$ ($1 \\leq n \\leq 1000$). Each of the following $n$ lines contains one positive integer less than or equal to $1000$, denoting the weight of each plate.\n\n-----Output-----\nOutput one integer, the combined weight closest to $1000$.\n\n-----Examples-----\nSample Input:\n4\n900\n500\n498\n4\nSample Output:\n1002\nPlease provide the solution as pure code only, without explanations or comments.\n\nANSWER:\n```python\n"}}