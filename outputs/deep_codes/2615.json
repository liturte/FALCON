{"2615": {"code": ["from math import gcd\n\ndef elegant_numbers(n):\n    prime_factors = [2", "def gcd(a, b):\n    if b==0:\n        return a\n    return gcd", "def solve(n):\n    dp = [0]*(n+1)\n    primes = [", "from math import gcd\n\ndef phi(n):\n    result = n\n    p = 2", "from math import gcd\n\ndef elegant_numbers(n):\n    dp = [0] *"], "prompt": "\nQUESTION:\nConsider some positive integer $x$. Its prime factorization will be of form $x = 2^{k_1} \\cdot 3^{k_2} \\cdot 5^{k_3} \\cdot \\dots$\n\nLet's call $x$ elegant if the greatest common divisor of the sequence $k_1, k_2, \\dots$ is equal to $1$. For example, numbers $5 = 5^1$, $12 = 2^2 \\cdot 3$, $72 = 2^3 \\cdot 3^2$ are elegant and numbers $8 = 2^3$ ($GCD = 3$), $2500 = 2^2 \\cdot 5^4$ ($GCD = 2$) are not.\n\nCount the number of elegant integers from $2$ to $n$.\n\nEach testcase contains several values of $n$, for each of them you are required to solve the problem separately.\n\n\n-----Input-----\n\nThe first line contains a single integer $T$ ($1 \\le T \\le 10^5$) \u2014 the number of values of $n$ in the testcase.\n\nEach of the next $T$ lines contains a single integer $n_i$ ($2 \\le n_i \\le 10^{18}$).\n\n\n-----Output-----\n\nPrint $T$ lines \u2014 the $i$-th line should contain the number of elegant numbers from $2$ to $n_i$.\n\n\n-----Example-----\nInput\n4\n4\n2\n72\n10\n\nOutput\n2\n1\n61\n6\n\n\n\n-----Note-----\n\nHere is the list of non-elegant numbers up to $10$:\n\n  $4 = 2^2, GCD = 2$;  $8 = 2^3, GCD = 3$;  $9 = 3^2, GCD = 2$. \n\nThe rest have $GCD = 1$.\nPlease provide the solution as pure code only, without explanations or comments.\n\nANSWER:\n```python\n"}}