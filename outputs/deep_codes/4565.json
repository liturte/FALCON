{"4565": {"code": ["N = int(input())\nS = input()\n\nleader = S[0]\nchanges = 0 if leader == 'E' else 1\n\nfor i in range(1, N):\n    if S[i] == leader:\n        changes += 1\n    else:\n        leader = S[i]\n\nprint(changes)\n\nThis code reads the number of people and their directions from the input, then calculates the minimum number of people who have to change their directions by counting the number of times the leader's direction changes. If the leader is facing east at the start, we start", "N = int(input())\nS = input()\n\n# Count the number of people facing east\neast_count = S.count('E')\n\n# Initialize the minimum number of people who have to change their directions to the maximum possible value\nmin_change = max(east_count, N-east_count)\n\n# For each person, calculate the number of people who have to change their directions if they are the leader\nfor i in range(N):\n    if S[i] == 'E':\n        east_count -= 1\n    else:\n        east_count += 1", "N = int(input())\nS = input()\n\n# Count the number of people facing west\nW = S.count('W')\n\n# Initialize the minimum number of people who have to change their directions to the maximum possible value\nmin_changes = max(W, N - W)\n\n# For each person, update the minimum number of people who have to change their directions\nfor i in range(N):\n    if S[i] == 'W':\n        W -= 1\n    else:\n        W += 1\n    min_changes = min(min_changes, max(W,", "N = int(input())\nS = input()\n\n# Initialize the count of people who have to change their directions\ncount = S.count('E')\n\n# Iterate over the string S\nfor i in range(N):\n    # If the current person is facing east, decrement the count\n    if S[i] == 'E':\n        count -= 1\n    # If the current person is facing west, increment the count\n    else:\n        count += 1\n    # Print the current minimum count\n    print(count)\n\n\nThis solution works by iterating over the", "N = int(input())\nS = input()\n\n# Count the number of 'E's and 'W's\nE = S.count('E')\nW = N - E\n\n# The leader is the person who faces the opposite direction of the most people\n# If the number of 'E's is more than 'W's, the leader is the person who faces 'W'\n# If the number of 'E's is less than 'W's, the leader is the person who faces 'E'\nleader = 'W' if W > E else 'E'\n\n#"], "prompt": "\nQUESTION:\nThere are N people standing in a row from west to east.\nEach person is facing east or west.\nThe directions of the people is given as a string S of length N.\nThe i-th person from the west is facing east if S_i = E, and west if S_i = W.\nYou will appoint one of the N people as the leader, then command the rest of them to face in the direction of the leader.\nHere, we do not care which direction the leader is facing.\nThe people in the row hate to change their directions, so you would like to select the leader so that the number of people who have to change their directions is minimized.\nFind the minimum number of people who have to change their directions.\n\n-----Constraints-----\n - 2 \\leq N \\leq 3 \\times 10^5\n - |S| = N\n - S_i is E or W.\n\n-----Input-----\nInput is given from Standard Input in the following format:\nN\nS\n\n-----Output-----\nPrint the minimum number of people who have to change their directions.\n\n-----Sample Input-----\n5\nWEEWW\n\n-----Sample Output-----\n1\n\nAssume that we appoint the third person from the west as the leader.\nThen, the first person from the west needs to face east and has to turn around.\nThe other people do not need to change their directions, so the number of people who have to change their directions is 1 in this case.\nIt is not possible to have 0 people who have to change their directions, so the answer is 1.\nPlease provide the solution as pure code only, without explanations or comments.\n\nANSWER:\n```python\n"}}