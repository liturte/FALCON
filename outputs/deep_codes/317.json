{"317": {"code": ["n = int(input())\ns = input()\n\nalphabet = set('abcdefghijklmnopqrstuvwxyz')\ns = set(s.lower())\n\nif alphabet <= s:\n    print('YES')\nelse:\n    print('NO')\n\n\nExplanation:\nThis solution works by first creating a set of all lowercase letters in the alphabet. Then it creates a set from the input string, converting all letters to lowercase. It checks if the set of all lowercase letters is a subset of the set of letters in the input string. If it is, it means every letter in the alphabet is in the string, so it prints \"YES\". Otherwise, it prints \"NO\".\n\nThis solution is efficient because it uses the set data structure, which has constant time complexity for the 'in' operation and the subset check operation.\n\nPlease note that this solution assumes that the input string does not contain any non-alphabetic characters. If this is not the case, you would need to add a line to remove these characters before", "n = int(input())\ns = input()\n\nalphabet = set('abcdefghijklmnopqrstuvwxyz')\ns = set(s.lower())\n\nif alphabet <= s:\n    print('YES')\nelse:\n    print('NO')\n\n\nThis solution works by first creating a set of all the lowercase letters in the alphabet. Then, it creates a set of all the lowercase letters in the input string. If every letter in the alphabet is in the input string, the input string is a pangram, so it prints \"YES\". Otherwise, it prints \"NO\".\n\nNote: The <= operator checks if the set on its left is a subset of the set on its right, meaning that every element of the set on its left is also in the set on its right.\n\nThe input string is converted to lowercase to ensure that the comparison is case-insensitive.\n\nThis solution assumes that the input string only contains letters and spaces. If there are any other characters in the string, they will not be considered when", "n = int(input())\ns = input()\n\nalphabet = set('abcdefghijklmnopqrstuvwxyz')\ns = set(s.lower())\n\nif alphabet <= s:\n    print('YES')\nelse:\n    print('NO')\n\n\nThis solution works by first defining the set of all lowercase letters in the alphabet. It then converts the input string to a set of its characters (converted to lowercase to account for uppercase letters), and checks if the set of all letters is a subset of the input string's set of characters. If it is, that means every letter of the alphabet appears at least once in the string, so it is a pangram and \"YES\" is printed. Otherwise, it is not a pangram and \"NO\" is printed.", "n = int(input())\ns = input()\n\nalphabet = set('abcdefghijklmnopqrstuvwxyz')\ns = set(s.lower())\n\nif alphabet <= s:\n    print('YES')\nelse:\n    print('NO')\n\n\nThis code first takes input for the number of characters and the string. It then creates a set of all lowercase letters in the English alphabet. It also converts the input string to a set of lowercase characters. It then checks if all the letters of the alphabet are in the string. If they are, it prints 'YES', otherwise it prints 'NO'.\n\nThe '<=' operator is used to check if all elements of the alphabet set are in the string set. If they are, the set of alphabet letters is a subset of the string set, so the string is a pangram.\n\nThe 'set' function is used to convert the string to a set of unique lowercase characters, and the 'input' function is used to take input from the user.", "n = int(input())\ns = input()\nprint('YES' if len(set(s.lower())) == 26 else 'NO')\n\n\nThis solution works by first converting the input string to lowercase with the `lower()` method, then converting it to a set. A set in Python is an unordered collection of unique elements. By converting the string to a set, we automatically remove any duplicate characters. The length of the set is then checked to see if it is 26 (the number of letters in the English alphabet). If it is, that means all the letters of the alphabet were found at least once in the string, so \"YES\" is printed. If the length of the set is not 26, that means not all the letters were found, so \"NO\" is printed.\n\nThis solution assumes that the string only contains letters and spaces, as per the problem statement. If the string could contain other characters, a check would need to be added to only consider letters when checking for pangram-ness."], "prompt": "\nQUESTION:\nA word or a sentence in some language is called a pangram if all the characters of the alphabet of this language appear in it at least once. Pangrams are often used to demonstrate fonts in printing or test the output devices.\n\nYou are given a string consisting of lowercase and uppercase Latin letters. Check whether this string is a pangram. We say that the string contains a letter of the Latin alphabet if this letter occurs in the string in uppercase or lowercase.\n\n\n-----Input-----\n\nThe first line contains a single integer n (1 \u2264 n \u2264 100)\u00a0\u2014 the number of characters in the string.\n\nThe second line contains the string. The string consists only of uppercase and lowercase Latin letters.\n\n\n-----Output-----\n\nOutput \"YES\", if the string is a pangram and \"NO\" otherwise.\n\n\n-----Examples-----\nInput\n12\ntoosmallword\n\nOutput\nNO\n\nInput\n35\nTheQuickBrownFoxJumpsOverTheLazyDog\n\nOutput\nYES\nPlease provide the solution as pure code only, without explanations or comments.\n\nANSWER:\n```python\n"}}