{"2878": {"code": ["def count_triplets(N, grid):\n    count = 0\n    for i in range(N):\n        for j in range(N):\n            if j+2 < N and grid[i][j] != '.' and grid[i][j+1] != '.' and grid[i][j+2] != '.':\n                count += 1\n            if i+2 < N and grid[i][j] != '.' and grid[i+1][j] != '.' and grid[i+2][j] != '.':\n                count += 1\n            if i+2 < N and j+2 < N and grid[i][j] != '.' and grid", "def count_triples(n, grid):\n    count = 0\n    for i in range(n):\n        for j in range(n):\n            for k in range(n):\n                if i != j and j != k and i != k:\n                    if grid[i][j] == grid[j][k] == grid[i][k] != '.':\n                        count += 1\n    return count // 3\n\nn = int(input())\ngrid = [input() for _ in range(n)]\nprint(count_triples(n, grid))\n\nIn this code, we define a function `count_triples` that takes the size of the grid and the grid itself as", "def count_triplets(N, grid):\n    triplets = 0\n    for i in range(N):\n        for j in range(N):\n            if i > 0 and j > 0 and i < N - 1 and j < N - 1:\n                if grid[i][j] != '.' and grid[i-1][j-1] != '.' and grid[i+1][j+1] != '.' and grid[i-1][j+1] != '.' and grid[i+1][j-1] != '.':\n                    triplets += 1\n    return triplets\n\nN = int(input())\ngrid = [input() for _ in", "def count_triplets(N, grid):\n    horizontals = [0] * N\n    verticals = [0] * N\n    diagonals = [0] * (2 * N - 1)\n    anti_diagonals = [0] * (2 * N - 1)\n\n    for i in range(N):\n        for j in range(N):\n            if grid[i][j] != '.':\n                horizontals[i] += 1\n                verticals[j] += 1\n                diagonals[i - j + N - 1] += 1\n                anti_diagonals[i + j] += 1\n\n    triplets = 0", "def count_triplets(grid):\n    n = len(grid)\n    rows = [0] * n\n    cols = [0] * n\n    diags = [0] * (2 * n - 1)\n    rev_diags = [0] * (2 * n - 1)\n\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] != '.':\n                rows[i] |= 1 << (ord(grid[i][j]) - ord('A'))\n                cols[j] |= 1 << (ord(grid[i][j]) - ord('A'))\n                if i >= j:"], "prompt": "\nQUESTION:\nMirko and Slavko are playing a new game, \u201cTrojke\u201d (Triplets, in English). First they use a chalk to draw an $N \\times N$ square grid on the road. Then they write letters into some of the squares. No letter is written more than once in the grid.\n\nThe game consists of trying to find three letters on a line as fast as possible. Three letters are considered to be on the same line if there is a line going through the centre of each of the three squares.\n\nAfter a while it gets harder to find new triplets. Mirko and Slavko need a program that counts all the triplets, so that they know if the game is over or they need to search further.\n\n-----Input-----\nThe first line contains an integer $N$ ($3 \\le N \\le 100$), the dimension of the grid.\n\nEach of the $N$ following lines contains $N$ characters describing the grid \u2013 uppercase letters and the character \u2019.\u2019 which marks an empty square.\n\n-----Output-----\nOutput the number of triples on a single line.\n\n-----Examples-----\nSample Input 1:\n4\n...D\n..C.\n.B..\nA...\nSample Output 1:\n4\n\nSample Input 2:\n5\n..T..\nA....\n.FE.R\n....X\nS....\nSample Output 2:\n3\nPlease provide the solution as pure code only, without explanations or comments.\n\nANSWER:\n```python\n"}}