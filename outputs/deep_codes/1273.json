{"1273": {"code": ["from collections import defaultdict\n\nN = int(input())\ngraph = defaultdict(list)\nfor _ in range(N - 1):\n    a, b = map(int, input().split())\n    graph[a].append(b)\n    graph[b].append(a)\n\ncolors = [0] * (N + 1)\ncolor = 1\nstack = [1]\nwhile stack:\n    node = stack.pop()\n    used_colors = set(colors[neighbor] for neighbor in graph[node] if colors[neighbor])\n    for candidate_color in range(1, N + 1):\n        if", "from collections import defaultdict\n\ndef solve(N, edges):\n    graph = defaultdict(list)\n    for a, b in edges:\n        graph[a].append(b)\n        graph[b].append(a)\n\n    colors = [-1] * (N+1)\n    color = 0\n    stack = [(1, color)]\n    while stack:\n        node, color = stack.pop()\n        if colors[node] != -1:\n            continue\n        colors[node] = color\n        color = (color + 1) % N\n        for neighbor in graph[node]:\n            if colors[neighbor] ==", "import sys\nfrom collections import defaultdict\n\ndef dfs(v, p):\n    color[v] = 1\n    for u in g[v]:\n        if u == p: continue\n        if color[u] == -1:\n            if not dfs(u, v): return False\n        elif color[u] == 1:\n            return False\n    color[v] = 0\n    return True\n\nn = int(sys.stdin.readline())\ng = defaultdict(list)\nfor _ in range(n-1):\n    a, b = map(int, sys.stdin.readline().split())\n    g", "from collections import defaultdict\n\nN = int(input())\nadj = defaultdict(list)\nfor _ in range(N - 1):\n    a, b = map(int, input().split())\n    adj[a].append(b)\n    adj[b].append(a)\n\ncolors = [0] * (N + 1)\ncolor_id = 1\nstack = [1]\nwhile stack:\n    node = stack.pop()\n    used = set()\n    for nei in adj[node]:\n        if colors[nei]:\n            used.add(colors[nei])\n    color = 1\n    while", "from collections import defaultdict\n\nN = int(input())\ngraph = defaultdict(list)\ncolors = [0] * N\n\nfor i in range(1, N):\n    a, b = map(int, input().split())\n    graph[a].append(b)\n    graph[b].append(a)\n\ncolor = 1\nfor i in range(1, N+1):\n    if colors[i-1] == 0:\n        colors[i-1] = color\n        q = [i]\n        while q:\n            node = q.pop()\n            for neighbour in graph[node]:\n                if colors["], "prompt": "\nQUESTION:\nGiven is a tree G with N vertices.\nThe vertices are numbered 1 through N, and the i-th edge connects Vertex a_i and Vertex b_i.\nConsider painting the edges in G with some number of colors.\nWe want to paint them so that, for each vertex, the colors of the edges incident to that vertex are all different.\nAmong the colorings satisfying the condition above, construct one that uses the minimum number of colors.\n\n-----Constraints-----\n -  2 \\le N \\le 10^5\n -  1 \\le a_i \\lt b_i \\le N\n - All values in input are integers.\n - The given graph is a tree.\n\n-----Input-----\nInput is given from Standard Input in the following format:\nN\na_1 b_1\na_2 b_2\n\\vdots\na_{N-1} b_{N-1}\n\n-----Output-----\nPrint N lines.\nThe first line should contain K, the number of colors used.\nThe (i+1)-th line (1 \\le i \\le N-1) should contain c_i, the integer representing the color of the i-th edge, where 1 \\le c_i \\le K must hold.\nIf there are multiple colorings with the minimum number of colors that satisfy the condition, printing any of them will be accepted.\n\n-----Sample Input-----\n3\n1 2\n2 3\n\n-----Sample Output-----\n2\n1\n2\n\nPlease provide the solution as pure code only, without explanations or comments.\n\nANSWER:\n```python\n"}}