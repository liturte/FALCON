{"4301": {"code": ["n = int(input())\na = [int(input()) for _ in range(n)]\nmax_a = max(a)\nprint(\"\\n\".join(map(str, [max_a] * (n-1))))\n\n\nThis code first reads the number of elements `n` and the elements themselves into the list `a`. It then finds the maximum value in `a` and prints this value `n-1` times. This is done by converting the list of maximum values into a string with the `join` method and printing this string.\n\nNote: This code assumes that the input is given as described in the problem statement. It does not handle any potential errors that might arise from invalid input.\n\nAlso, it's worth mentioning", "import sys\nfrom heapq import *\n\nn = int(input())\narr = [int(input()) for _ in range(n)]\nmax_heap = []\nfor num in arr:\n    heappush(max_heap, -num)\n\nres = [0]*n\nres[0] = -heappop(max_heap)\nfor i in range(1, n):\n    print(-max_heap[0])\n    heappushpop(max_heap, -arr[i])\n\n\nThe above code first reads in the input, which is stored in the list `arr`. It then creates a max heap `max_heap` from the input list. For each element in the input", "N = int(input())\nA = [int(input()) for _ in range(N)]\n\nmax_A = max(A)\nA_without_max = [a for a in A if a != max_A]\nmax_A_without_max = max(A_without_max)\n\nA_index = {a: i for i, a in enumerate(A)}\n\nfor a in A:\n    if a == max_A:\n        print(max_A_without_max)\n    else:\n        A[A_index[max_A]] = a\n        print(max(A))\n        A[A_index[max_A]] = max_A\n\n\nExplanation:", "import sys\n\nn = int(sys.stdin.readline().strip())\na = list(map(int, sys.stdin.readlines()))\n\nmax_a = max(a)\ncount = a.count(max_a)\n\nif count > 1:\n    print('\\n'.join([str(max_a)] * n))\nelse:\n    a.remove(max_a)\n    print('\\n'.join(map(str, [max(a)] * n)))\n\n\nThis code reads the input, finds the maximum value and counts its occurrences. If the maximum value occurs more than once, it means all other elements are the same, so it prints the maximum value for all queries. If the maximum", "import sys\nfrom collections import defaultdict\n\nn = int(sys.stdin.readline())\na = list(map(int, sys.stdin.readlines()))\n\ncnt = defaultdict(int)\nfor i in range(n):\n    cnt[a[i]] += 1\n\nmax_a = max(a)\nmax_count = cnt[max_a]\n\nfor i in range(n):\n    if a[i] == max_a:\n        if max_count == 1:\n            print(max(a[:i] + a[i+1:]))\n        else:\n            print(max_a)\n    else:\n        print(max_a)\n\n\nEx"], "prompt": "\nQUESTION:\nYou are given a sequence of length N: A_1, A_2, ..., A_N.\nFor each integer i between 1 and N (inclusive), answer the following question:\n - Find the maximum value among the N-1 elements other than A_i in the sequence.\n\n-----Constraints-----\n - 2 \\leq N \\leq 200000\n - 1 \\leq A_i \\leq 200000\n - All values in input are integers.\n\n-----Input-----\nInput is given from Standard Input in the following format:\nN\nA_1\n:\nA_N\n\n-----Output-----\nPrint N lines. The i-th line (1 \\leq i \\leq N) should contain the maximum value among the N-1 elements other than A_i in the sequence.\n\n-----Sample Input-----\n3\n1\n4\n3\n\n-----Sample Output-----\n4\n3\n4\n\n - The maximum value among the two elements other than A_1, that is, A_2 = 4 and A_3 = 3, is 4.\n - The maximum value among the two elements other than A_2, that is, A_1 = 1 and A_3 = 3, is 3.\n - The maximum value among the two elements other than A_3, that is, A_1 = 1 and A_2 = 4, is 4.\nPlease provide the solution as pure code only, without explanations or comments.\n\nANSWER:\n```python\n"}}