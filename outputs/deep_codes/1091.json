{"1091": {"code": ["def second_price_auction(n, prices):\n    max_price = max(prices)\n    prices.remove(max_price)\n    second_max_price = max(prices)\n    winner = prices.index(second_max_price) + 1\n    return winner, second_max_price\n\nn = int(input())\nprices = list(map(int, input().split()))\nwinner, price = second_price_auction(n, prices)\nprint(winner, price)", "n = int(input())\nprices = list(map(int, input().split()))\nmax_price = max(prices)\nprices.remove(max_price)\nwinner = prices.index(max(prices)) + 1\nprint(winner, max_price)\n\n\nThis code first reads the number of bidders `n` and the prices of the bidders from the input. It then removes the maximum price from the list of prices, because this is the price that the winner will not pay. The index of the second", "def second_price_auction(bidders):\n    highest_bid = max(bidders)\n    bidders.remove(highest_bid)\n    second_highest_bid = max(bidders)\n    winner = bidders.index(second_highest_bid) + 1\n    return winner, second_highest_bid\n\nn = int(input())\nbidders = list(map(int, input().split()))\nwinner, price = second_price_auction(bidders)", "def second_price_auction(n, prices):\n    highest_price = max(prices)\n    prices.remove(highest_price)\n    second_highest_price = max(prices)\n    winner = prices.index(second_highest_price) + 1\n    return winner, second_highest_price\n\nn = int(input())\nprices = list(map(int, input().split()))\nwinner, price = second_price_auction(n, prices)\nprint(winner, price)", "def second_price_auction(n, prices):\n    max_price = max(prices)\n    prices.remove(max_price)\n    second_price = max(prices)\n    winner = prices.index(second_price) + 1\n    return winner, second_price\n\nn = int(input())\nprices = list(map(int, input().split()))\nwinner, price = second_price_auction(n, prices)\nprint(winner, price)\n\n\nThis code works by first finding"], "prompt": "\nQUESTION:\nIn this problem we consider a special type of an auction, which is called the second-price auction. As in regular auction n bidders place a bid which is price a bidder ready to pay. The auction is closed, that is, each bidder secretly informs the organizer of the auction price he is willing to pay. After that, the auction winner is the participant who offered the highest price. However, he pay not the price he offers, but the highest price among the offers of other participants (hence the name: the second-price auction).\n\nWrite a program that reads prices offered by bidders and finds the winner and the price he will pay. Consider that all of the offered prices are different.\n\n\n-----Input-----\n\nThe first line of the input contains n (2 \u2264 n \u2264 1000) \u2014 number of bidders. The second line contains n distinct integer numbers p_1, p_2, ... p_{n}, separated by single spaces (1 \u2264 p_{i} \u2264 10000), where p_{i} stands for the price offered by the i-th bidder.\n\n\n-----Output-----\n\nThe single output line should contain two integers: index of the winner and the price he will pay. Indices are 1-based.\n\n\n-----Examples-----\nInput\n2\n5 7\n\nOutput\n2 5\n\nInput\n3\n10 2 8\n\nOutput\n1 8\n\nInput\n6\n3 8 2 9 4 14\n\nOutput\n6 9\nPlease provide the solution as pure code only, without explanations or comments.\n\nANSWER:\n```python\n"}}