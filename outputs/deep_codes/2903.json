{"2903": {"code": ["class FenwickTree:\n    def __init__(self, size):\n        self.size = size\n        self.tree = [0] * (size + 1)\n\n    def update(self, index, delta):\n        while index <= self.size:\n            self.tree[index] += delta\n            index += index & -index\n\n    def query(self, index):\n        result = 0\n        while index > 0:", "class FenwickTree:\n    def __init__(self, size):\n        self.size = size\n        self.tree = [0] * (size + 1)\n\n    def update(self, idx, delta):\n        while idx <= self.size:\n            self.tree[idx] += delta\n            idx += idx & -idx\n\n    def query(self, idx):\n        total = 0\n        while idx > 0:", "class FenwickTree:\n    def __init__(self, size):\n        self.size = size\n        self.tree = [0] * (size + 1)\n\n    def update(self, index, delta):\n        while index <= self.size:\n            self.tree[index] += delta\n            index += index & -index\n\n    def query(self, index):\n        result = 0\n        while index > 0:", "class FenwickTree:\n    def __init__(self, size):\n        self.size = size\n        self.tree = [0] * (size + 1)\n\n    def update(self, i, delta):\n        while i <= self.size:\n            self.tree[i] += delta\n            i += i & -i\n\n    def query(self, i):\n        res = 0\n        while i > 0:", "class FenwickTree:\n    def __init__(self, size):\n        self.size = size\n        self.tree = [0] * (size + 1)\n\n    def update(self, idx, delta):\n        while idx <= self.size:\n            self.tree[idx] += delta\n            idx += idx & -idx\n\n    def query(self, idx):\n        total = 0\n        while idx > 0:"], "prompt": "\nQUESTION:\nA Fenwick Tree (also known as a Binary Indexed Tree) is a data structure on an array which enables fast ($O(\\log n)$) updates and prefix sum queries on the underlying data.\n\nFor this problem, implement a Fenwick Tree to support operations of two types: (a) increment an element in the array or (b) query the prefix sum of a portion of the array.\n\n-----Input-----\nThe first line of input contains two integers $N$, $Q$, where $1 \\le N \\le 5000000$ is the length of the array and $0 \\le Q \\le 5000000$ is the number of operations. Then follow $Q$ lines giving the operations. There are two types of operations:\n - \u201c+ $i$ $\\delta $\u201d indicates that $a[i]$ is incremented by $\\delta $, where $0 \\le i < N$ and $-10^9 \\le \\delta \\le 10^9$ (both are integers)\n - \u201c? $i$\u201d is a query for the value of $a[0] + a[1] + \\ldots + a[i-1]$, where $0 \\le i \\le N$ (for $i = 0$ this is interpreted as an empty sum)\n\nYou should assume that every array entry is initially $0$.\n\n-----Output-----\nFor each query in the input, output one line giving the answer to that query.\n\n-----Examples-----\nSample Input:\n10 4\n+ 7 23\n? 8\n+ 3 17\n? 8\nSample Output:\n23\n40\nPlease provide the solution as pure code only, without explanations or comments.\n\nANSWER:\n```python\n"}}