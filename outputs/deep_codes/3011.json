{"3011": {"code": ["def hill_numbers(n):\n    if len(set(str(n))) == 1:\n        return n\n    if len(set(str(n))) > 2:\n        return -1\n    if len(set(str(n))) == 2:\n        a, b = sorted(set(str(n)))\n        if a == '0' or int(b) - int(a) > 1:\n            return -1\n        if int(b) - int(a) == 1:\n            return int(a) * 9 * 10 ** (len(str(n)) - 1)\n        if int(b) - int(a) == 0:\n            return", "def is_hill(n):\n    n = str(n)\n    return all(n[i] >= n[i+1] for i in range(len(n)-1)) or all(n[i] <= n[i+1] for i in range(len(n)-1))\n\ndef count_hill(n):\n    if not is_hill(n):\n        return -1\n    else:\n        return sum(1 for i in range(1, n+1) if is_hill(i))\n\nn = int(input().strip())\nprint(count_hill(n))\n\n\nThis code first checks if the given number is a hill number. If it is", "import re\ndef hill_numbers(n):\n    if n < 10:\n        return n\n    dp = [0] * (n+1)\n    dp[0] = dp[1] = 1\n    for i in range(2, n+1):\n        dp[i] = dp[i-1] + 2*dp[i-2]\n    s = str(n)\n    if re.match(r'\\d*\\d\\d*\\d', s) is None:\n        return -1\n    m = len(s)\n    res = 0\n    for i in range(m-1):\n        res += dp[i]", "def hill_numbers(n):\n    if n < 10:\n        return n\n    str_n = str(n)\n    len_n = len(str_n)\n    dp = [[[0]*2 for _ in range(len_n+1)] for _ in range(len_n+1)]\n    dp[0][0][0] = 1\n    for len_ in range(1, len_n+1):\n        for cnt in range(len_):\n            for rise in range(2):\n                for end in range(10):\n                    if rise == 1 and end < int(str_n[len_-len_cnt-1]", "def hill_numbers(n):\n    if n < 10:\n        return n\n    s = str(n)\n    len_s = len(s)\n    dp = [[0]*19 for _ in range(19)]\n    for i in range(10):\n        dp[1][i] = 1\n    for i in range(2, 19):\n        dp[i][0] = dp[i-1][0]*2\n        for j in range(1, 10):\n            dp[i][j] = dp[i-1][j]*2 + dp[i-1][j-1]"], "prompt": "\nQUESTION:\nA Hill Number is a positive integer, the digits of which possibly rise and then possibly fall, but never fall and then rise. For example:12321 is a hill number.\n\n12223 is a hill number.\n\n33322111 is a hill number.\n\n1232321 is not a hill number.\n\n\nGiven a positive integer, if it is a hill number, print the number of positive hill numbers less than or equal to it. If it is not a hill number, print -1.\n\n-----Input-----\nEach input will consist of a single test case. Note that your program may be run multiple times on different inputs. Each test case will consist of a single integer $n$ ($1 \\le n \\le 10^{18}$).\n\n-----Output-----\nOutput a single line with a single integer. If the input is a hill number, then output the number of hill numbers less than or equal to it. If the input is not a hill number, then output -1.\n\n-----Examples-----\nSample Input 1:\n10\nSample Output 1:\n10\n\nSample Input 2:\n55\nSample Output 2:\n55\n\nSample Input 3:\n101\nSample Output 3:\n-1\n\nSample Input 4:\n1234321\nSample Output 4:\n94708\nPlease provide the solution as pure code only, without explanations or comments.\n\nANSWER:\n```python\n"}}