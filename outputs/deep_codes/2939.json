{"2939": {"code": ["from collections import deque\n\nn = int(input())\ngrid = [list(map(int, input())) for _ in range(n)]\ndist = [[0]*n for _ in range(n)]\nresidential = []\ncommercial = []\n\n# get positions of residential and commercial zones\nfor i in range(n):\n    for j in range(n):\n        if grid[", "import heapq\n\ndef distance(matrix, start):\n    pq = [(0, start)]\n    dist = {(i, j): float('inf') for i in range(len(matrix)) for j in range(len(matrix[0]))}\n    dist[start] = 0\n    while pq:\n        d, (x, y) = heapq.heappop(", "import heapq\n\ndef solve(n, grid):\n    # Define directions\n    directions = [(0, 1), (1, 0), (0, -1), (-1, 0)]\n    # Initialize a heap with distances from all residential zones to their closest commercial zone\n    heap = [(0, x, y) for x in range(n) for y in range(n", "from collections import deque\n\ndef bfs(i, j, grid, n):\n    visited = [[0]*n for _ in range(n)]\n    visited[i][j] = 1\n    q = deque([(i, j, 0)])\n    res = []\n\n    while q:\n        x, y, step = q.popleft()\n        for", "from collections import deque\n\nn = int(input())\ngrid = [list(map(int, input())) for _ in range(n)]\n\ndef bfs(start_x, start_y):\n    visited = [[False]*n for _ in range(n)]\n    q = deque([(start_x, start_y, 0)])\n    visited[start_x"], "prompt": "\nQUESTION:\nA town is often divided into zones, e.g, industrial zones, commercial zones, and residential zones. If some residential zone is very far from all commercial zones, then the people living there will have a long journey whenever they want to do some shopping, and this is undesirable.\n\nThe input will consist of an $n\\times n$ grid of square zones. Each zone is labeled 1 (residential), 2 (industrial), or 3 (commercial). When travelling from one zone to another you are allowed to move north, east, south or west, and the distance travelled is the number of zone boundaries you traverse. So the distance between two adjacent zones is $1$, and the distance from the zone in square $(1,1)$ (the most south-westerly zone) to the zone in square $(2,3)$ is $3$ (one step east and two steps north). You may never move off the grid.\n\nYour task is to find the longest distance one has to travel from a residential zone to get to the commercial zone closest to that residential zone.\n\n-----Input-----\nThe first line of input contains an integer $n$, $2\\leq n\\leq 1500$, followed by $n$ lines of length $n$ giving the map of the city zones as an $n\\times n$ matrix where each entry is 1, 2, or 3 depending on zone type. You can assume that the city has zones of all three types.\n\n-----Output-----\nOutput a single integer $d$, the largest distance from a residential zone to its closest commercial zone.\n\n-----Examples-----\nSample Input:\n4\n1223\n2123\n2213\n3212\nSample Output:\n3\nPlease provide the solution as pure code only, without explanations or comments.\n\nANSWER:\n```python\n"}}