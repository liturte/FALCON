{"4766": {"code": ["QUESTION:\nIn the game \u201cSimon Says\u201d one person plays the role of Simon, who gives instructions to everyone else playing the game. The tricky part is that if Simon begins his instruction with \u201cSimon says\u201d then everyone else must follow the instruction (or they lose the game); if Simon gives an instruction that does not begin with \u201cSimon says\u201d then everyone is supposed to completely ignore the instruction (or they lose the game)!\n\nSimon tries his or her best to trick the other players into following the wrong instructions. Simon might begin by saying \u201cSimon says touch your nose.\u201d and follow this with \u201cStop touching your nose.\u201d Anyone who stops touching their nose loses! The last player still remaining, who has correctly followed precisely the instructions that began with \u201cSimon says\u201d (and only these instructions), gets to be Simon next.\n\nAs a child, you were horrible at this game. Your older siblings were always able to trick you into following the wrong instructions. Well, you will have the last laugh: now that you are a computer programmer, you can write a computer program that can help you play the game perfectly. You only need to make sure the program is able to determine which instructions to follow and which to ignore.\n\nAre you up to the challenge? Can you craft a computer program that never makes any mistakes in the game? If you can, then surely fame and glory shall come your way for being the most unstoppable player of Simon Says ever!\n\n-----Input-----\nInput starts with a line containing an integer $1 \\le N \\le 1000$. Each of the next $N$ lines is one command, of length at most $100$ characters. Each command is a sequence of one or more words. Each word uses only lower and uppercase characters a\u2013z. Each pair of words is separated by a single space. The command ends in a period.\n\nSome commands begin with \u201cSimon says\u201d, and others may not. The phrase \u201cSimon says\u201d only occurs at the beginning of a command. If a command begins with \u201cSimon says\u201d, there is another space and at least one additional word after \u201csays\u201d. No lines contain leading or trailing space.\n\n-----Output-----\nFor each line that begins with precisely \u201cSimon says\u201d, output the rest of the line. Each line that does not begin with precisely \u201cSimon says\u201d should be ignored.\n\n-----Examples-----\nSample Input 1:\n1\nSimon says smile.\nSample Output 1:\n smile.\n\nSample Input 2:\n3\nSimon says raise your right hand.\nLower your right hand.\nSimon says raise your left hand.\nSample Output 2", "QUESTION:\nIn the game \u201cSimon Says\u201d one person plays the role of Simon, who gives instructions to everyone else playing the game. The tricky part is that if Simon begins his instruction with \u201cSimon says\u201d then everyone else must follow the instruction (or they lose the game); if Simon gives an instruction that does not begin with \u201cSimon says\u201d then everyone is supposed to completely ignore the instruction (or they lose the game)!\n\nSimon tries his or her best to trick the other players into following the wrong instructions. Simon might begin by saying \u201cSimon says touch your nose.\u201d and follow this with \u201cStop touching your nose.\u201d Anyone who stops touching their nose loses! The last player still remaining, who has correctly followed precisely the instructions that began with \u201cSimon says\u201d (and only these instructions), gets to be Simon next.\n\nAs a child, you were horrible at this game. Your older siblings were always able to trick you into following the wrong instructions. Well, you will have the last laugh: now that you are a computer programmer, you can write a computer program that can help you play the game perfectly. You only need to make sure the program is able to determine which instructions to follow and which to ignore.\n\nAre you up to the challenge? Can you craft a computer program that never makes any mistakes in the game? If you can, then surely fame and glory shall come your way for being the most unstoppable player of Simon Says ever!\n\n-----Input-----\nInput starts with a line containing an integer $1 \\le N \\le 1000$. Each of the next $N$ lines is one command, of length at most $100$ characters. Each command is a sequence of one or more words. Each word uses only lower and uppercase characters a\u2013z. Each pair of words is separated by a single space. The command ends in a period.\n\nSome commands begin with \u201cSimon says\u201d, and others may not. The phrase \u201cSimon says\u201d only occurs at the beginning of a command. If a command begins with \u201cSimon says\u201d, there is another space and at least one additional word after \u201csays\u201d. No lines contain leading or trailing space.\n\n-----Output-----\nFor each line that begins with precisely \u201cSimon says\u201d, output the rest of the line. Each line that does not begin with precisely \u201cSimon says\u201d should be ignored.\n\n-----Examples-----\nSample Input 1:\n1\nSimon says smile.\nSample Output 1:\n smile.\n\nSample Input 2:\n3\nSimon says raise your right hand.\nLower your right hand.\nSimon says raise your left hand.\nSample Output 2", "QUESTION:\nIn the game \u201cSimon Says\u201d one person plays the role of Simon, who gives instructions to everyone else playing the game. The tricky part is that if Simon begins his instruction with \u201cSimon says\u201d then everyone else must follow the instruction (or they lose the game); if Simon gives an instruction that does not begin with \u201cSimon says\u201d then everyone is supposed to completely ignore the instruction (or they lose the game)!\n\nSimon tries his or her best to trick the other players into following the wrong instructions. Simon might begin by saying \u201cSimon says touch your nose.\u201d and follow this with \u201cStop touching your nose.\u201d Anyone who stops touching their nose loses! The last player still remaining, who has correctly followed precisely the instructions that began with \u201cSimon says\u201d (and only these instructions), gets to be Simon next.\n\nAs a child, you were horrible at this game. Your older siblings were always able to trick you into following the wrong instructions. Well, you will have the last laugh: now that you are a computer programmer, you can write a computer program that can help you play the game perfectly. You only need to make sure the program is able to determine which instructions to follow and which to ignore.\n\nAre you up to the challenge? Can you craft a computer program that never makes any mistakes in the game? If you can, then surely fame and glory shall come your way for being the most unstoppable player of Simon Says ever!\n\n-----Input-----\nInput starts with a line containing an integer $1 \\le N \\le 1000$. Each of the next $N$ lines is one command, of length at most $100$ characters. Each command is a sequence of one or more words. Each word uses only lower and uppercase characters a\u2013z. Each pair of words is separated by a single space. The command ends in a period.\n\nSome commands begin with \u201cSimon says\u201d, and others may not. The phrase \u201cSimon says\u201d only occurs at the beginning of a command. If a command begins with \u201cSimon says\u201d, there is another space and at least one additional word after \u201csays\u201d. No lines contain leading or trailing space.\n\n-----Output-----\nFor each line that begins with precisely \u201cSimon says\u201d, output the rest of the line. Each line that does not begin with precisely \u201cSimon says\u201d should be ignored.\n\n-----Examples-----\nSample Input 1:\n1\nSimon says smile.\nSample Output 1:\n smile.\n\nSample Input 2:\n3\nSimon says raise your right hand.\nLower your right hand.\nSimon says raise your left hand.\nSample Output 2", "QUESTION:\nIn the game \u201cSimon Says\u201d one person plays the role of Simon, who gives instructions to everyone else playing the game. The tricky part is that if Simon begins his instruction with \u201cSimon says\u201d then everyone else must follow the instruction (or they lose the game); if Simon gives an instruction that does not begin with \u201cSimon says\u201d then everyone is supposed to completely ignore the instruction (or they lose the game)!\n\nSimon tries his or her best to trick the other players into following the wrong instructions. Simon might begin by saying \u201cSimon says touch your nose.\u201d and follow this with \u201cStop touching your nose.\u201d Anyone who stops touching their nose loses! The last player still remaining, who has correctly followed precisely the instructions that began with \u201cSimon says\u201d (and only these instructions), gets to be Simon next.\n\nAs a child, you were horrible at this game. Your older siblings were always able to trick you into following the wrong instructions. Well, you will have the last laugh: now that you are a computer programmer, you can write a computer program that can help you play the game perfectly. You only need to make sure the program is able to determine which instructions to follow and which to ignore.\n\nAre you up to the challenge? Can you craft a computer program that never makes any mistakes in the game? If you can, then surely fame and glory shall come your way for being the most unstoppable player of Simon Says ever!\n\n-----Input-----\nInput starts with a line containing an integer $1 \\le N \\le 1000$. Each of the next $N$ lines is one command, of length at most $100$ characters. Each command is a sequence of one or more words. Each word uses only lower and uppercase characters a\u2013z. Each pair of words is separated by a single space. The command ends in a period.\n\nSome commands begin with \u201cSimon says\u201d, and others may not. The phrase \u201cSimon says\u201d only occurs at the beginning of a command. If a command begins with \u201cSimon says\u201d, there is another space and at least one additional word after \u201csays\u201d. No lines contain leading or trailing space.\n\n-----Output-----\nFor each line that begins with precisely \u201cSimon says\u201d, output the rest of the line. Each line that does not begin with precisely \u201cSimon says\u201d should be ignored.\n\n-----Examples-----\nSample Input 1:\n1\nSimon says smile.\nSample Output 1:\n smile.\n\nSample Input 2:\n3\nSimon says raise your right hand.\nLower your right hand.\nSimon says raise your left hand.\nSample Output 2", "QUESTION:\nIn the game \u201cSimon Says\u201d one person plays the role of Simon, who gives instructions to everyone else playing the game. The tricky part is that if Simon begins his instruction with \u201cSimon says\u201d then everyone else must follow the instruction (or they lose the game); if Simon gives an instruction that does not begin with \u201cSimon says\u201d then everyone is supposed to completely ignore the instruction (or they lose the game)!\n\nSimon tries his or her best to trick the other players into following the wrong instructions. Simon might begin by saying \u201cSimon says touch your nose.\u201d and follow this with \u201cStop touching your nose.\u201d Anyone who stops touching their nose loses! The last player still remaining, who has correctly followed precisely the instructions that began with \u201cSimon says\u201d (and only these instructions), gets to be Simon next.\n\nAs a child, you were horrible at this game. Your older siblings were always able to trick you into following the wrong instructions. Well, you will have the last laugh: now that you are a computer programmer, you can write a computer program that can help you play the game perfectly. You only need to make sure the program is able to determine which instructions to follow and which to ignore.\n\nAre you up to the challenge? Can you craft a computer program that never makes any mistakes in the game? If you can, then surely fame and glory shall come your way for being the most unstoppable player of Simon Says ever!\n\n-----Input-----\nInput starts with a line containing an integer $1 \\le N \\le 1000$. Each of the next $N$ lines is one command, of length at most $100$ characters. Each command is a sequence of one or more words. Each word uses only lower and uppercase characters a\u2013z. Each pair of words is separated by a single space. The command ends in a period.\n\nSome commands begin with \u201cSimon says\u201d, and others may not. The phrase \u201cSimon says\u201d only occurs at the beginning of a command. If a command begins with \u201cSimon says\u201d, there is another space and at least one additional word after \u201csays\u201d. No lines contain leading or trailing space.\n\n-----Output-----\nFor each line that begins with precisely \u201cSimon says\u201d, output the rest of the line. Each line that does not begin with precisely \u201cSimon says\u201d should be ignored.\n\n-----Examples-----\nSample Input 1:\n1\nSimon says smile.\nSample Output 1:\n smile.\n\nSample Input 2:\n3\nSimon says raise your right hand.\nLower your right hand.\nSimon says raise your left hand.\nSample Output 2"], "prompt": "\nQUESTION:\nIn the game \u201cSimon Says\u201d one person plays the role of Simon, who gives instructions to everyone else playing the game. The tricky part is that if Simon begins his instruction with \u201cSimon says\u201d then everyone else must follow the instruction (or they lose the game); if Simon gives an instruction that does not begin with \u201cSimon says\u201d then everyone is supposed to completely ignore the instruction (or they lose the game)!\n\nSimon tries his or her best to trick the other players into following the wrong instructions. Simon might begin by saying \u201cSimon says touch your nose.\u201d and follow this with \u201cStop touching your nose.\u201d Anyone who stops touching their nose loses! The last player still remaining, who has correctly followed precisely the instructions that began with \u201cSimon says\u201d (and only these instructions), gets to be Simon next.\n\nAs a child, you were horrible at this game. Your older siblings were always able to trick you into following the wrong instructions. Well, you will have the last laugh: now that you are a computer programmer, you can write a computer program that can help you play the game perfectly. You only need to make sure the program is able to determine which instructions to follow and which to ignore.\n\nAre you up to the challenge? Can you craft a computer program that never makes any mistakes in the game? If you can, then surely fame and glory shall come your way for being the most unstoppable player of Simon Says ever!\n\n-----Input-----\nInput starts with a line containing an integer $1 \\le N \\le 1000$. Each of the next $N$ lines is one command, of length at most $100$ characters. Each command is a sequence of one or more words. Each word uses only lower and uppercase characters a\u2013z. Each pair of words is separated by a single space. The command ends in a period.\n\nSome commands begin with \u201cSimon says\u201d, and others may not. The phrase \u201cSimon says\u201d only occurs at the beginning of a command. If a command begins with \u201cSimon says\u201d, there is another space and at least one additional word after \u201csays\u201d. No lines contain leading or trailing space.\n\n-----Output-----\nFor each line that begins with precisely \u201cSimon says\u201d, output the rest of the line. Each line that does not begin with precisely \u201cSimon says\u201d should be ignored.\n\n-----Examples-----\nSample Input 1:\n1\nSimon says smile.\nSample Output 1:\n smile.\n\nSample Input 2:\n3\nSimon says raise your right hand.\nLower your right hand.\nSimon says raise your left hand.\nSample Output 2:\n raise your right hand.\n raise your left hand.\nPlease provide the solution as pure code only, without explanations or comments.\n\nANSWER:\n```python\n"}}