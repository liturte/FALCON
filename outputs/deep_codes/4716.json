{"4716": {"code": ["N, K = map(int, input().split())\nl = sorted(map(int, input().split()), reverse=True)\nprint(sum(l[:K]))\n\nThis Python program sorts the lengths of the sticks in decreasing order and then sums the first K elements, which gives the maximum possible length of the toy.\n\nPlease note that this program assumes that the input is correctly formatted and that the values of N, K, and the lengths of the sticks are integers within the given constraints.\n\nThis program does not include any error handling for invalid input, so it is assumed that the input will be correct.", "N, K = map(int, input().split())\nL = sorted(map(int, input().split()), reverse=True)\nprint(sum(L[:K]))\n\n\nThis solution works by first reading the input and sorting the list of stick lengths in descending order. Then, it sums the first K elements of the list (which are the longest sticks), and prints the result.\n\nThe time complexity of this solution is O(N log N), because sorting the list takes O(N log N) time. The space complexity is O(N), because the list of stick lengths is stored in memory.\n\nThis solution assumes that the input is valid according to the problem constraints.\n\"\"\"\n\nN, K = map(int, input().split())\nL = sorted(map(int, input().split()), reverse=True)\nprint(sum(L[:K]))\n\n\nThis solution works by first reading the input and sorting the list of stick lengths in descending order. Then, it sums the first K elements of the list (which are the longest sticks), and prints the result.\n\nThe time complexity of this solution is O(N log N), because sorting the list", "N, K = map(int, input().split())\nL = sorted(list(map(int, input().split())), reverse=True)\nprint(sum(L[:K]))\n\nThis solution uses Python's built-in `sort` function with `reverse=True` to sort the list of stick lengths in descending order. Then it sums up the first K elements of the sorted list, which represents the maximum possible length of the toy.\n\nThe `map` function is used to convert the input strings to integers. The `input().split()` function splits the input string into a list of substrings, and the `int` function converts each substring to an integer. The `sum` function adds up the elements of the list.\n\nThe `print` function outputs the result.", "N, K = map(int, input().split())\nL = sorted(list(map(int, input().split())), reverse=True)\n\nprint(sum(L[:K]))\n\n\nExplanation:\nThe solution first reads the input. It converts the input string to integers and stores them in a list. It then sorts the list in descending order so that the longest sticks are first. Finally, it prints the sum of the first K elements in the list, which is the sum of the lengths of the K longest sticks.\n\nThis solution assumes that the input is always valid and does not include error checking or handling.\n\"\"\"\n\n# Code:\n\nN, K = map(int, input().split())\nL = sorted(list(map(int, input().split())), reverse=True)\n\nprint(sum(L[:K]))\n\n\nThis solution uses Python's built-in `map` function to convert the input strings to integers, and the `sorted` function to sort the list of lengths in descending order. It then uses Python's slicing syntax to sum the lengths of the K longest sticks.\n\nThis solution is efficient because it has", "N, K = map(int, input().split())\nL = list(map(int, input().split()))\nL.sort(reverse=True)\nprint(sum(L[:K]))\n\n\nExplanation:\nThe solution starts by reading the input and storing the number of sticks N, the number of sticks to be joined K, and the lengths of the sticks L. The sticks are then sorted in descending order. The sum of the first K elements of the sorted list is the maximum possible length of the toy. This is because the longer the sticks, the larger the total length of the toy. The sum of the first K elements is printed as the output.\n\"\"\"\n\nN, K = map(int, input().split())\nL = list(map(int, input().split()))\nL.sort(reverse=True)\nprint(sum(L[:K]))\n\n\nExplanation:\nThe solution starts by reading the input and storing the number of sticks N, the number of sticks to be joined K, and the lengths of the sticks L. The sticks are then sorted in descending order. The sum of the first K elements of the sorted list is the maximum possible length"], "prompt": "\nQUESTION:\nSnuke has N sticks.\nThe length of the i-th stick is l_i.\nSnuke is making a snake toy by joining K of the sticks together.\nThe length of the toy is represented by the sum of the individual sticks that compose it.\nFind the maximum possible length of the toy.\n\n-----Constraints-----\n - 1 \\leq K \\leq N \\leq 50\n - 1 \\leq l_i \\leq 50\n - l_i is an integer.\n\n-----Input-----\nInput is given from Standard Input in the following format:\nN K\nl_1 l_2 l_3 ... l_{N}\n\n-----Output-----\nPrint the answer.\n\n-----Sample Input-----\n5 3\n1 2 3 4 5\n\n-----Sample Output-----\n12\n\nYou can make a toy of length 12 by joining the sticks of lengths 3, 4 and 5, which is the maximum possible length.\nPlease provide the solution as pure code only, without explanations or comments.\n\nANSWER:\n```python\n"}}