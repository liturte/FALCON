{"4573": {"code": ["import heapq\nimport sys\n\nN = int(sys.stdin.readline().strip())\nX = list(map(int, sys.stdin.readline().strip().split()))\n\nleft_heap = []\nright_heap = []\n\nfor x", "from sortedcontainers import SortedList\n\nN = int(input())\nX = list(map(int, input().split()))\nsl = SortedList(X)\n\nfor i in range(N):\n    sl.remove(X[i])\n    print(sl", "import sys\nfrom heapq import *\n\ninput = sys.stdin.readline\n\nn = int(input())\nxs = list(map(int, input().split()))\n\nl = n // 2\n\nmin_heap = xs[:l]\nmax", "from heapq import *\nfrom sys import stdin\n\nN = int(stdin.readline())\nX = list(map(int, stdin.readline().split()))\n\nmin_heap = []\nmax_heap = []\n\nfor x in X:", "from heapq import *\nfrom sys import stdin\n\ninput = stdin.readline\nn = int(input())\na = list(map(int, input().split()))\n\nleft_heap, right_heap = [], []\nleft_size, right_size"], "prompt": "\nQUESTION:\nWhen l is an odd number, the median of l numbers a_1, a_2, ..., a_l is the (\\frac{l+1}{2})-th largest value among a_1, a_2, ..., a_l.\nYou are given N numbers X_1, X_2, ..., X_N, where N is an even number.\nFor each i = 1, 2, ..., N, let the median of X_1, X_2, ..., X_N excluding X_i, that is, the median of X_1, X_2, ..., X_{i-1}, X_{i+1}, ..., X_N be B_i.\nFind B_i for each i = 1, 2, ..., N.\n\n-----Constraints-----\n - 2 \\leq N \\leq 200000\n - N is even.\n - 1 \\leq X_i \\leq 10^9\n - All values in input are integers.\n\n-----Input-----\nInput is given from Standard Input in the following format:\nN\nX_1 X_2 ... X_N\n\n-----Output-----\nPrint N lines.\nThe i-th line should contain B_i.\n\n-----Sample Input-----\n4\n2 4 4 3\n\n-----Sample Output-----\n4\n3\n3\n4\n\n - Since the median of X_2, X_3, X_4 is 4, B_1 = 4.\n - Since the median of X_1, X_3, X_4 is 3, B_2 = 3.\n - Since the median of X_1, X_2, X_4 is 3, B_3 = 3.\n - Since the median of X_1, X_2, X_3 is 4, B_4 = 4.\nPlease provide the solution as pure code only, without explanations or comments.\n\nANSWER:\n```python\n"}}