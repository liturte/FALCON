{"2167": {"code": ["def max_equal_elements():\n    n = int(input().strip())\n    a = list(map(int, input().strip().split()))\n\n    count = [0] * 20001\n    for i in a:\n        count[i] += 1\n\n    max_count = max(count)\n    return max_count\n\nprint(max_equal_elements())\n\nThis solution works by first creating a count list to keep track of the frequency of each number in the array. It", "n = int(input())\na = list(map(int, input().split()))\ncounts = {}\nfor i in a:\n    if i in counts:\n        counts[i] += 1\n    else:\n        counts[i] = 1\nprint(max(counts.values()))\n\n\nThis solution works by first reading in the number of elements and the elements themselves. It then counts the occurrences of each element in the list and stores this in a dictionary. Finally, it prints the maximum value in the", "def max_equal_elements(n, a):\n    counts = {}\n    for i in a:\n        if i in counts:\n            counts[i] += 1\n        else:\n            counts[i] = 1\n    return max(counts.values())\n\nn = int(input())\na = list(map(int, input().split()))\nprint(max_equal_elements(n, a))\n\n\nThis solution works by first counting the number of occurrences of each number in the array", "def max_equal_elements(n, arr):\n    count = {}\n    for i in range(n):\n        if arr[i] in count:\n            count[arr[i]] += 1\n        else:\n            count[arr[i]] = 1\n    return max(count.values())\n\nn = int(input())\narr = list(map(int, input().split()))\nprint(max_equal_elements(n, arr))\n\n\nThis code first counts the occurrences of each", "def max_equal_numbers(n, arr):\n    arr.sort()\n    return arr[n//2]\n\nn = int(input())\narr = list(map(int, input().split()))\nprint(max_equal_numbers(n, arr))\n\n\nThis solution works by first sorting the array. The median of the sorted array is the number that will be the most common in the array after applying the operations. This is because the operations increase the value of the higher numbers and decrease the value of"], "prompt": "\nQUESTION:\nPolycarpus has an array, consisting of n integers a_1, a_2, ..., a_{n}. Polycarpus likes it when numbers in an array match. That's why he wants the array to have as many equal numbers as possible. For that Polycarpus performs the following operation multiple times:\n\n  he chooses two elements of the array a_{i}, a_{j} (i \u2260 j);  he simultaneously increases number a_{i} by 1 and decreases number a_{j} by 1, that is, executes a_{i} = a_{i} + 1 and a_{j} = a_{j} - 1. \n\nThe given operation changes exactly two distinct array elements. Polycarpus can apply the described operation an infinite number of times. \n\nNow he wants to know what maximum number of equal array elements he can get if he performs an arbitrary number of such operation. Help Polycarpus.\n\n\n-----Input-----\n\nThe first line contains integer n (1 \u2264 n \u2264 10^5) \u2014 the array size. The second line contains space-separated integers a_1, a_2, ..., a_{n} (|a_{i}| \u2264 10^4) \u2014 the original array.\n\n\n-----Output-----\n\nPrint a single integer \u2014 the maximum number of equal array elements he can get if he performs an arbitrary number of the given operation.\n\n\n-----Examples-----\nInput\n2\n2 1\n\nOutput\n1\n\nInput\n3\n1 4 1\n\nOutput\n3\nPlease provide the solution as pure code only, without explanations or comments.\n\nANSWER:\n```python\n"}}