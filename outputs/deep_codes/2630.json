{"2630": {"code": ["class Solution:\n    def uniquePathsWithObstacles(self, obstacleGrid: List[List[int]]) -> int:\n        m, n = len(obstacleGrid), len(obstacleGrid[0])\n        dp = [[0]*n for _ in range(m)]\n        dp[m-1][n-1] = 1 - obstacleGrid[m-1][n-1]\n        \n        for i in range(m-2, -1, -1):\n            if not obstacleGrid[i][n-1] and dp[i+1][n-1]:\n                dp[i][n-1] = 1\n        \n        for j in range(n-2, -1, -1):\n            if not obstacleGrid[m-1][j] and dp[m-1][", "class Solution:\n    def uniquePathsWithObstacles(self, obstacleGrid: List[List[int]]) -> int:\n        m, n = len(obstacleGrid), len(obstacleGrid[0])\n        dp = [[0]*n for _ in range(m)]\n        dp[m-1][n-1] = 1 - obstacleGrid[m-1][n-1]\n        \n        for i in range(m-2, -1, -1):\n            if obstacleGrid[i][n-1] == 0:\n                dp[i][n-1] = dp[i+1][n-1]\n                \n        for j in range(n-2, -1, -1):\n            if obstacleGrid[m-1][j] == 0:\n                dp[m", "class Solution:\n    def uniquePathsWithObstacles(self, obstacleGrid: List[List[int]]) -> int:\n        if not obstacleGrid:\n            return \n        m, n = len(obstacleGrid), len(obstacleGrid[0])\n        dp = [[0]*n for _ in range(m)]\n        dp[m-1][n-1] = 1 - obstacleGrid[m-1][n-1]\n        for i in range(m-2, -1, -1):\n            if obstacleGrid[i][n-1] == 0:\n                dp[i][n-1] = dp[i+1][n-1]\n        for j in range(n-2, -1, -1):\n            if obstacleGrid[m-1][j] ==", "class Solution:\n    def uniquePathsWithObstacles(self, obstacleGrid: List[List[int]]) -> int:\n        m, n = len(obstacleGrid), len(obstacleGrid[0])\n        dp = [[0]*n for _ in range(m)]\n        dp[m-1][n-1] = 1 - obstacleGrid[m-1][n-1]\n        for i in range(m-2, -1, -1):\n            dp[i][n-1] = dp[i+1][n-1] * (1 - obstacleGrid[i][n-1])\n        for j in range(n-2, -1, -1):\n            dp[m-1][j] = dp[m-1][j+1] * (1 - obst", "class Solution:\n    def uniquePathsWithObstacles(self, obstacleGrid: List[List[int]]) -> int:\n        m, n = len(obstacleGrid), len(obstacleGrid[0])\n        dp = [[0]*n for _ in range(m)]\n        dp[m-1][n-1] = 1 - obstacleGrid[m-1][n-1]\n        for i in range(m-1, -1, -1):\n            for j in range(n-1, -1, -1):\n                if obstacleGrid[i][j] == 1:\n                    dp[i][j] = 0\n                else:\n                    if i+1 < m:\n                        dp[i][j] += dp[i+1][j]\n                    if j+1 < n"], "prompt": "\nQUESTION:\nA robot is located at the top-left corner of a m x n grid (marked 'Start' in the diagram below).\n\nThe robot can only move either down or right at any point in time. The robot is trying to reach the bottom-right corner of the grid (marked 'Finish' in the diagram below).\n\nNow consider if some obstacles are added to the grids. How many unique paths would there be?\n\n\n\nAn obstacle and empty space is marked as 1 and 0 respectively in the grid.\n\nNote: m and n will be at most 100.\n\nExample 1:\n\n\nInput:\n[\n\u00a0 [0,0,0],\n\u00a0 [0,1,0],\n\u00a0 [0,0,0]\n]\nOutput: 2\nExplanation:\nThere is one obstacle in the middle of the 3x3 grid above.\nThere are two ways to reach the bottom-right corner:\n1. Right -> Right -> Down -> Down\n2. Down -> Down -> Right -> Right\nSTARTER CODE:\nclass Solution:\n    def uniquePathsWithObstacles(self, obstacleGrid: List[List[int]]) -> int:\n        \n\nPlease provide the solution as pure code only, without explanations or comments.\n\nANSWER:\n```python\n"}}