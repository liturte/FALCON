{"774": {"code": ["x, y, n = map(int, input().split())\nbest = 10**18\na = b = 0\nfor i in range(1, n+1):\n    lo = -10**5\n    hi = 10**5\n    while hi - lo > 1:\n        mid = (lo + hi) // 2\n        if 1.*x*mid <= 1.*y*i:\n            lo = mid\n        else:\n            hi = mid\n    if abs(1.*x/y - 1.*lo/i) < 1.*best:\n        best = 1.*abs(1.*x/y - 1.*lo/i)\n        a = lo\n        b = i\nprint(a, b)\n\n\nThis Python code uses a binary search to find the closest fraction to the given fraction [x/y] in the set of fractions with denominator no more than n. It iterates over all possible denominators (i), and for each denominator, it performs a binary search to find the numerator", "from fractions import Fraction\n\ndef closest_fraction(x, y, n):\n    target = Fraction(x, y)\n    best_diff = float('inf')\n    best_frac = Fraction(0, 1)\n    for denom in range(1, n+1):\n        num = int(target * denom)\n        frac = Fraction(num, denom)\n        diff = abs(target - frac)\n        if diff < best_diff:\n            best_diff = diff\n            best_frac = frac\n        elif diff == best_diff:\n            if num < best_frac.numerator:\n                best_frac = frac\n    return best_frac\n\nx, y, n = map(int, input().split())\nprint(closest_fraction(x, y, n))\n\n\nThis program uses the `fractions` module in Python, which provides support for rational number arithmetic. It first converts the target fraction and the potential numerators into `Fraction", "from fractions import Fraction\n\ndef closest_fraction(x, y, n):\n    target = Fraction(x, y)\n    best_diff = float('inf')\n    best_frac = Fraction(0, 1)\n    for denom in range(1, n+1):\n        num = int(target * denom)\n        frac = Fraction(num, denom)\n        diff = abs(target - frac)\n        if diff < best_diff or (diff == best_diff and frac < best_frac):\n            best_diff = diff\n            best_frac = frac\n    return best_frac\n\nx, y, n = map(int, input().split())\nprint(closest_fraction(x, y, n))\n\n\nThis code uses the Fraction class from the fractions module in Python. It iterates over all possible denominators from 1 to n, calculates the corresponding numerator, creates a Fraction object, and checks if it's closer to the target", "from fractions import Fraction\nx, y, n = map(int, input().split())\nbest = 10**18\na = b = 0\nfor den in range(1, n+1):\n    num = round(x/y * den)\n    diff = abs(Fraction(x, y) - Fraction(num, den))\n    if diff < best:\n        best = diff\n        a = num\n        b = den\nprint(f\"{a}/{b}\")\n\n\nThis Python code takes the input x, y, n and calculates the nearest fraction whose denominator is no more than n. It uses the built-in Fraction class from the fractions module in Python to handle fraction calculations. The code iterates over all possible denominators from 1 to n, calculating the corresponding numerator and comparing the absolute difference between the target fraction and the current fraction. If the difference is smaller than the current best difference, the code updates the best difference and the numerator and denominator of the best fraction. Finally, it prints the best fraction", "from fractions import Fraction\n\ndef closest_fraction(x, y, n):\n    target = Fraction(x, y)\n    best_diff = float('inf')\n    best_frac = None\n\n    for denominator in range(1, n+1):\n        numerator = int(target * denominator)\n        frac = Fraction(numerator, denominator)\n        diff = abs(target - frac)\n\n        if diff < best_diff:\n            best_diff = diff\n            best_frac = frac\n\n    return best_frac\n\nx, y, n = map(int, input().split())\nresult = closest_fraction(x, y, n)\nprint(f\"{result.numerator}/{result.denominator}\")\n\nThis code works by creating a target fraction and iterating over all possible denominators from 1 to n. For each denominator, it calculates the corresponding numerator and creates a new fraction. It then calculates the absolute difference between the target fraction"], "prompt": "\nQUESTION:\nYou are given three positive integers x, y, n. Your task is to find the nearest fraction to fraction [Image] whose denominator is no more than n. \n\nFormally, you should find such pair of integers a, b (1 \u2264 b \u2264 n;\u00a00 \u2264 a) that the value $|\\frac{x}{y} - \\frac{a}{b}|$ is as minimal as possible.\n\nIf there are multiple \"nearest\" fractions, choose the one with the minimum denominator. If there are multiple \"nearest\" fractions with the minimum denominator, choose the one with the minimum numerator.\n\n\n-----Input-----\n\nA single line contains three integers x, y, n (1 \u2264 x, y, n \u2264 10^5).\n\n\n-----Output-----\n\nPrint the required fraction in the format \"a/b\" (without quotes).\n\n\n-----Examples-----\nInput\n3 7 6\n\nOutput\n2/5\n\nInput\n7 2 4\n\nOutput\n7/2\nPlease provide the solution as pure code only, without explanations or comments.\n\nANSWER:\n```python\n"}}