{"41": {"code": ["n = int(input())\na = list(map(int, input().split()))\n\nzero_indices = [i for i, x in enumerate(a) if x == 0]\n\nres = [0]*n\nfor i in range(n):\n    res[i] = min([abs(i-j) for j in zero_indices])\n\nprint(' '.join(map(str,res)))\n\n\nEXPLANATION:\nThis solution uses the concept of zero indices and uses list comprehension to get the indices where the elements are zero. Then it iterates over the given array and for each element calculates the minimum distance to the nearest zero. The result is stored in the res list and then printed.\n\nThe time complexity of this", "n = int(input())\nnums = list(map(int, input().split()))\nzeros = [i for i, num in enumerate(nums) if num == 0]\nres = [min([abs(i - j) for j in zeros]) for i in range(n)]\nprint(*res)\n\n\nExplanation:\nThe program first reads the number of elements and the elements themselves. Then it finds the indices of all zero elements and stores them in the 'zeros' list. Then it calculates the minimum distance to the nearest zero for each element in the 'nums' list, and prints these distances.\n\nFor example, for the input:\n9\n2 1 0 3 0 0 3 2 4", "n = int(input())\na = list(map(int, input().split()))\n\nzeros = [i for i, x in enumerate(a) if x == 0]\n\nres = []\nfor i in range(n):\n    if a[i] == 0:\n        res.append(0)\n    else:\n        res.append(min(abs(i - z) for z in zeros))\n\nprint(*res)\n\n\nThis code reads the input, finds the indices of zeros in the list, and then iterates over the list again to find the minimum distance to a zero for each element. The minimum distances are then printed, separated by spaces.", "n = int(input())\na = list(map(int, input().split()))\n\nzeros = [i for i in range(n) if a[i] == 0]\n\nres = []\nfor i in range(n):\n    min_dist = min([abs(i - j) for j in zeros])\n    res.append(min_dist)\n\nprint(*res)\n\n\nThis solution works by first finding all the indices where the element is zero. Then for each element in the array, it calculates the minimum distance to a zero element by finding the minimum distance from the current index to any of the zero indices. The result is a list of minimum distances to zero elements for each element in the array.", "def distances_to_zeros(n, arr):\n    zeros = [i for i in range(n) if arr[i] == 0]\n    distances = [0]*n\n    for i in range(n):\n        distances[i] = min([abs(i - zero) for zero in zeros])\n    return distances\n\nn = int(input())\narr = list(map(int, input().split()))\nprint(*distances_to_zeros(n, arr))\n\n\nThis Python program uses list comprehension to find the indices of zeros in the array and then calculates the distance to the nearest zero for each element in the array. The minimum distance is calculated using the min function and the built-in abs function. The result"], "prompt": "\nQUESTION:\nYou are given the array of integer numbers a_0, a_1, ..., a_{n} - 1. For each element find the distance to the nearest zero (to the element which equals to zero). There is at least one zero element in the given array.\n\n\n-----Input-----\n\nThe first line contains integer n (1 \u2264 n \u2264 2\u00b710^5) \u2014 length of the array a. The second line contains integer elements of the array separated by single spaces ( - 10^9 \u2264 a_{i} \u2264 10^9).\n\n\n-----Output-----\n\nPrint the sequence d_0, d_1, ..., d_{n} - 1, where d_{i} is the difference of indices between i and nearest j such that a_{j} = 0. It is possible that i = j.\n\n\n-----Examples-----\nInput\n9\n2 1 0 3 0 0 3 2 4\n\nOutput\n2 1 0 1 0 0 1 2 3 \nInput\n5\n0 1 2 3 4\n\nOutput\n0 1 2 3 4 \nInput\n7\n5 6 0 1 -2 3 4\n\nOutput\n2 1 0 1 2 3 4\nPlease provide the solution as pure code only, without explanations or comments.\n\nANSWER:\n```python\n"}}