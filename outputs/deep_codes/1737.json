{"1737": {"code": ["QUESTION:\nPolycarp is currently developing a project in Vaja language and using a popular dependency management system called Vamen. From Vamen's point of view both Vaja project and libraries are treated projects for simplicity.\n\nA project in Vaja has its own uniqie non-empty name consisting of lowercase latin letters with length not exceeding 10 and version \u2014 positive integer from 1 to 10^6. Each project (keep in mind that it is determined by both its name and version) might depend on other projects. For sure, there are no cyclic dependencies.\n\nYou're given a list of project descriptions. The first of the given projects is the one being developed by Polycarp at this moment. Help Polycarp determine all projects that his project depends on (directly or via a certain chain). \n\nIt's possible that Polycarp's project depends on two different versions of some project. In this case collision resolving is applied, i.e. for each such project the system chooses the version that minimizes the distance from it to Polycarp's project. If there are several options, the newer (with the maximum version) is preferred. This version is considered actual; other versions and their dependencies are ignored.\n\nMore formal, choose such a set of projects of minimum possible size that the following conditions hold:   Polycarp's project is chosen;  Polycarp's project depends (directly or indirectly) on all other projects in the set;  no two projects share the name;  for each project x that some other project in the set depends on we have either x or some y with other version and shorter chain to Polycarp's project chosen. In case of ties the newer one is chosen. \n\nOutput all Polycarp's project's dependencies (Polycarp's project itself should't be printed) in lexicographical order.\n\n\n-----Input-----\n\nThe first line contains an only integer n (1 \u2264 n \u2264 1 000) \u2014 the number of projects in Vaja.\n\nThe following lines contain the project descriptions. Each project is described by a line consisting of its name and version separated by space. The next line gives the number of direct dependencies (from 0 to n - 1) and the dependencies themselves (one in a line) in arbitrary order. Each dependency is specified by its name and version. The projects are also given in arbitrary order, but the first of them is always Polycarp's. Project descriptions are separated by one empty line. Refer to samples for better understanding.\n\nIt's guaranteed that there are no cyclic dependencies. \n\n\n-----Output-----\n\nOutput all Polycarp's", "QUESTION:\nPolycarp is currently developing a project in Vaja language and using a popular dependency management system called Vamen. From Vamen's point of view both Vaja project and libraries are treated projects for simplicity.\n\nA project in Vaja has its own uniqie non-empty name consisting of lowercase latin letters with length not exceeding 10 and version \u2014 positive integer from 1 to 10^6. Each project (keep in mind that it is determined by both its name and version) might depend on other projects. For sure, there are no cyclic dependencies.\n\nYou're given a list of project descriptions. The first of the given projects is the one being developed by Polycarp at this moment. Help Polycarp determine all projects that his project depends on (directly or via a certain chain). \n\nIt's possible that Polycarp's project depends on two different versions of some project. In this case collision resolving is applied, i.e. for each such project the system chooses the version that minimizes the distance from it to Polycarp's project. If there are several options, the newer (with the maximum version) is preferred. This version is considered actual; other versions and their dependencies are ignored.\n\nMore formal, choose such a set of projects of minimum possible size that the following conditions hold:   Polycarp's project is chosen;  Polycarp's project depends (directly or indirectly) on all other projects in the set;  no two projects share the name;  for each project x that some other project in the set depends on we have either x or some y with other version and shorter chain to Polycarp's project chosen. In case of ties the newer one is chosen. \n\nOutput all Polycarp's project's dependencies (Polycarp's project itself should't be printed) in lexicographical order.\n\n\n-----Input-----\n\nThe first line contains an only integer n (1 \u2264 n \u2264 1 000) \u2014 the number of projects in Vaja.\n\nThe following lines contain the project descriptions. Each project is described by a line consisting of its name and version separated by space. The next line gives the number of direct dependencies (from 0 to n - 1) and the dependencies themselves (one in a line) in arbitrary order. Each dependency is specified by its name and version. The projects are also given in arbitrary order, but the first of them is always Polycarp's. Project descriptions are separated by one empty line. Refer to samples for better understanding.\n\nIt's guaranteed that there are no cyclic dependencies. \n\n\n-----Output-----\n\nOutput all Polycarp's", "QUESTION:\nPolycarp is currently developing a project in Vaja language and using a popular dependency management system called Vamen. From Vamen's point of view both Vaja project and libraries are treated projects for simplicity.\n\nA project in Vaja has its own uniqie non-empty name consisting of lowercase latin letters with length not exceeding 10 and version \u2014 positive integer from 1 to 10^6. Each project (keep in mind that it is determined by both its name and version) might depend on other projects. For sure, there are no cyclic dependencies.\n\nYou're given a list of project descriptions. The first of the given projects is the one being developed by Polycarp at this moment. Help Polycarp determine all projects that his project depends on (directly or via a certain chain). \n\nIt's possible that Polycarp's project depends on two different versions of some project. In this case collision resolving is applied, i.e. for each such project the system chooses the version that minimizes the distance from it to Polycarp's project. If there are several options, the newer (with the maximum version) is preferred. This version is considered actual; other versions and their dependencies are ignored.\n\nMore formal, choose such a set of projects of minimum possible size that the following conditions hold:   Polycarp's project is chosen;  Polycarp's project depends (directly or indirectly) on all other projects in the set;  no two projects share the name;  for each project x that some other project in the set depends on we have either x or some y with other version and shorter chain to Polycarp's project chosen. In case of ties the newer one is chosen. \n\nOutput all Polycarp's project's dependencies (Polycarp's project itself should't be printed) in lexicographical order.\n\n\n-----Input-----\n\nThe first line contains an only integer n (1 \u2264 n \u2264 1 000) \u2014 the number of projects in Vaja.\n\nThe following lines contain the project descriptions. Each project is described by a line consisting of its name and version separated by space. The next line gives the number of direct dependencies (from 0 to n - 1) and the dependencies themselves (one in a line) in arbitrary order. Each dependency is specified by its name and version. The projects are also given in arbitrary order, but the first of them is always Polycarp's. Project descriptions are separated by one empty line. Refer to samples for better understanding.\n\nIt's guaranteed that there are no cyclic dependencies. \n\n\n-----Output-----\n\nOutput all Polycarp's", "QUESTION:\nPolycarp is currently developing a project in Vaja language and using a popular dependency management system called Vamen. From Vamen's point of view both Vaja project and libraries are treated projects for simplicity.\n\nA project in Vaja has its own uniqie non-empty name consisting of lowercase latin letters with length not exceeding 10 and version \u2014 positive integer from 1 to 10^6. Each project (keep in mind that it is determined by both its name and version) might depend on other projects. For sure, there are no cyclic dependencies.\n\nYou're given a list of project descriptions. The first of the given projects is the one being developed by Polycarp at this moment. Help Polycarp determine all projects that his project depends on (directly or via a certain chain). \n\nIt's possible that Polycarp's project depends on two different versions of some project. In this case collision resolving is applied, i.e. for each such project the system chooses the version that minimizes the distance from it to Polycarp's project. If there are several options, the newer (with the maximum version) is preferred. This version is considered actual; other versions and their dependencies are ignored.\n\nMore formal, choose such a set of projects of minimum possible size that the following conditions hold:   Polycarp's project is chosen;  Polycarp's project depends (directly or indirectly) on all other projects in the set;  no two projects share the name;  for each project x that some other project in the set depends on we have either x or some y with other version and shorter chain to Polycarp's project chosen. In case of ties the newer one is chosen. \n\nOutput all Polycarp's project's dependencies (Polycarp's project itself should't be printed) in lexicographical order.\n\n\n-----Input-----\n\nThe first line contains an only integer n (1 \u2264 n \u2264 1 000) \u2014 the number of projects in Vaja.\n\nThe following lines contain the project descriptions. Each project is described by a line consisting of its name and version separated by space. The next line gives the number of direct dependencies (from 0 to n - 1) and the dependencies themselves (one in a line) in arbitrary order. Each dependency is specified by its name and version. The projects are also given in arbitrary order, but the first of them is always Polycarp's. Project descriptions are separated by one empty line. Refer to samples for better understanding.\n\nIt's guaranteed that there are no cyclic dependencies. \n\n\n-----Output-----\n\nOutput all Polycarp's", "QUESTION:\nPolycarp is currently developing a project in Vaja language and using a popular dependency management system called Vamen. From Vamen's point of view both Vaja project and libraries are treated projects for simplicity.\n\nA project in Vaja has its own uniqie non-empty name consisting of lowercase latin letters with length not exceeding 10 and version \u2014 positive integer from 1 to 10^6. Each project (keep in mind that it is determined by both its name and version) might depend on other projects. For sure, there are no cyclic dependencies.\n\nYou're given a list of project descriptions. The first of the given projects is the one being developed by Polycarp at this moment. Help Polycarp determine all projects that his project depends on (directly or via a certain chain). \n\nIt's possible that Polycarp's project depends on two different versions of some project. In this case collision resolving is applied, i.e. for each such project the system chooses the version that minimizes the distance from it to Polycarp's project. If there are several options, the newer (with the maximum version) is preferred. This version is considered actual; other versions and their dependencies are ignored.\n\nMore formal, choose such a set of projects of minimum possible size that the following conditions hold:   Polycarp's project is chosen;  Polycarp's project depends (directly or indirectly) on all other projects in the set;  no two projects share the name;  for each project x that some other project in the set depends on we have either x or some y with other version and shorter chain to Polycarp's project chosen. In case of ties the newer one is chosen. \n\nOutput all Polycarp's project's dependencies (Polycarp's project itself should't be printed) in lexicographical order.\n\n\n-----Input-----\n\nThe first line contains an only integer n (1 \u2264 n \u2264 1 000) \u2014 the number of projects in Vaja.\n\nThe following lines contain the project descriptions. Each project is described by a line consisting of its name and version separated by space. The next line gives the number of direct dependencies (from 0 to n - 1) and the dependencies themselves (one in a line) in arbitrary order. Each dependency is specified by its name and version. The projects are also given in arbitrary order, but the first of them is always Polycarp's. Project descriptions are separated by one empty line. Refer to samples for better understanding.\n\nIt's guaranteed that there are no cyclic dependencies. \n\n\n-----Output-----\n\nOutput all Polycarp's"], "prompt": "\nQUESTION:\nPolycarp is currently developing a project in Vaja language and using a popular dependency management system called Vamen. From Vamen's point of view both Vaja project and libraries are treated projects for simplicity.\n\nA project in Vaja has its own uniqie non-empty name consisting of lowercase latin letters with length not exceeding 10 and version \u2014 positive integer from 1 to 10^6. Each project (keep in mind that it is determined by both its name and version) might depend on other projects. For sure, there are no cyclic dependencies.\n\nYou're given a list of project descriptions. The first of the given projects is the one being developed by Polycarp at this moment. Help Polycarp determine all projects that his project depends on (directly or via a certain chain). \n\nIt's possible that Polycarp's project depends on two different versions of some project. In this case collision resolving is applied, i.e. for each such project the system chooses the version that minimizes the distance from it to Polycarp's project. If there are several options, the newer (with the maximum version) is preferred. This version is considered actual; other versions and their dependencies are ignored.\n\nMore formal, choose such a set of projects of minimum possible size that the following conditions hold:   Polycarp's project is chosen;  Polycarp's project depends (directly or indirectly) on all other projects in the set;  no two projects share the name;  for each project x that some other project in the set depends on we have either x or some y with other version and shorter chain to Polycarp's project chosen. In case of ties the newer one is chosen. \n\nOutput all Polycarp's project's dependencies (Polycarp's project itself should't be printed) in lexicographical order.\n\n\n-----Input-----\n\nThe first line contains an only integer n (1 \u2264 n \u2264 1 000) \u2014 the number of projects in Vaja.\n\nThe following lines contain the project descriptions. Each project is described by a line consisting of its name and version separated by space. The next line gives the number of direct dependencies (from 0 to n - 1) and the dependencies themselves (one in a line) in arbitrary order. Each dependency is specified by its name and version. The projects are also given in arbitrary order, but the first of them is always Polycarp's. Project descriptions are separated by one empty line. Refer to samples for better understanding.\n\nIt's guaranteed that there are no cyclic dependencies. \n\n\n-----Output-----\n\nOutput all Polycarp's project's dependencies in lexicographical order.\n\n\n-----Examples-----\nInput\n4\na 3\n2\nb 1\nc 1\n\u00a0\nb 2\n0\n\u00a0\nb 1\n1\nb 2\n\u00a0\nc 1\n1\nb 2\n\nOutput\n2\nb 1\nc 1\n\nInput\n9\ncodehorses 5\n3\nwebfrmk 6\nmashadb 1\nmashadb 2\n\u00a0\ncommons 2\n0\n\u00a0\nmashadb 3\n0\n\u00a0\nwebfrmk 6\n2\nmashadb 3\ncommons 2\n\u00a0\nextra 4\n1\nextra 3\n\u00a0\nextra 3\n0\n\u00a0\nextra 1\n0\n\u00a0\nmashadb 1\n1\nextra 3\n\u00a0\nmashadb 2\n1\nextra 1\n\nOutput\n4\ncommons 2\nextra 1\nmashadb 2\nwebfrmk 6\n\nInput\n3\nabc 1\n2\nabc 3\ncba 2\n\nabc 3\n0\n\ncba 2\n0\n\nOutput\n1\ncba 2\n\n\n\n-----Note-----\n\nThe first sample is given in the pic below. Arrow from A to B means that B directly depends on A. Projects that Polycarp's project \u00aba\u00bb (version 3) depends on are painted black. [Image] \n\nThe second sample is again given in the pic below. Arrow from A to B means that B directly depends on A. Projects that Polycarp's project \u00abcodehorses\u00bb (version 5) depends on are paint it black. Note that \u00abextra 1\u00bb is chosen instead of \u00abextra 3\u00bb since \u00abmashadb 1\u00bb and all of its dependencies are ignored due to \u00abmashadb 2\u00bb. [Image]\nPlease provide the solution as pure code only, without explanations or comments.\n\nANSWER:\n```python\n"}}