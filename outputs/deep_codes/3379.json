{"3379": {"code": ["QUESTION:\nTopologically sorting the nodes of a directed graph (digraph) $G$ means putting the nodes in linear order\\[ v_0, v_1, v_2, v_3, \\ldots \\]\n\nsuch that whenever there is an edge from node $x$ to node $y$ in $G$, $x$\u00a0always precedes $y$ in the linear ordering. It is not hard to show that the nodes of a digraph can be topologically sorted if and only if the graph is acyclic (does not contain any directed cycles).\n\nKahn\u2019s Algorithm is a well-known topological sorting algorithm. Beginning with a digraph $G$ and an empty list $L$, it repeatedly executes the following three steps:\n - Let $S$ be the set of source nodes, i.e., the nodes with no incoming edges. If $S$ is empty, terminate the algorithm.\n - Let $\\alpha $ be any node in $S$. Remove $\\alpha $ and all its outgoing edges from $G$. If this removal of edges creates new source nodes, add these to\u00a0$S$.\n - Insert $\\alpha $ at the end of $L$.\n\nOnce Kahn\u2019s Algorithm terminates, if $G$ is now empty, then $L$ contains the nodes of the initial graph in topologically sorted order (such an ordering may not be unique). Otherwise, $G$ has one or more cycles, and therefore topological sorting is impossible.\n\nRegardless of the outcome of Kahn\u2019s Algorithm, consider any iteration of Step\u00a0$1$ above. If $S$ contains more than one node, then $\\alpha $ can be any one of them, and the choice of $\\alpha $ affects the composition of $S$ in later iterations, when further choices may be made that affect the composition of $S$ in yet later iterations, and so on. Taking into account all possible sequences of choices of $\\alpha $ during the execution of Kahn\u2019s Algorithm, what is the largest $S$ can ever be at the beginning of Step\u00a0$1$?\n\n-----Input-----\nThe input specifies a single directed graph. The first line of input contains two space-separated integers, $n$ and $m$ ($1 \\leq n \\leq 500$,\u2009 $0 \\leq m \\leq n(n-1)$), where $n$ is the number of nodes and $m$ is the number of edges. This is followed by $m$ lines, each containing two space-separated integers, $x$ and $y$ ($0 \\leq x,y \\leq (n-1)$, $x \\neq y$), indicating that there is a directed edge", "QUESTION:\nTopologically sorting the nodes of a directed graph (digraph) $G$ means putting the nodes in linear order\\[ v_0, v_1, v_2, v_3, \\ldots \\]\n\nsuch that whenever there is an edge from node $x$ to node $y$ in $G$, $x$\u00a0always precedes $y$ in the linear ordering. It is not hard to show that the nodes of a digraph can be topologically sorted if and only if the graph is acyclic (does not contain any directed cycles).\n\nKahn\u2019s Algorithm is a well-known topological sorting algorithm. Beginning with a digraph $G$ and an empty list $L$, it repeatedly executes the following three steps:\n - Let $S$ be the set of source nodes, i.e., the nodes with no incoming edges. If $S$ is empty, terminate the algorithm.\n - Let $\\alpha $ be any node in $S$. Remove $\\alpha $ and all its outgoing edges from $G$. If this removal of edges creates new source nodes, add these to\u00a0$S$.\n - Insert $\\alpha $ at the end of $L$.\n\nOnce Kahn\u2019s Algorithm terminates, if $G$ is now empty, then $L$ contains the nodes of the initial graph in topologically sorted order (such an ordering may not be unique). Otherwise, $G$ has one or more cycles, and therefore topological sorting is impossible.\n\nRegardless of the outcome of Kahn\u2019s Algorithm, consider any iteration of Step\u00a0$1$ above. If $S$ contains more than one node, then $\\alpha $ can be any one of them, and the choice of $\\alpha $ affects the composition of $S$ in later iterations, when further choices may be made that affect the composition of $S$ in yet later iterations, and so on. Taking into account all possible sequences of choices of $\\alpha $ during the execution of Kahn\u2019s Algorithm, what is the largest $S$ can ever be at the beginning of Step\u00a0$1$?\n\n-----Input-----\nThe input specifies a single directed graph. The first line of input contains two space-separated integers, $n$ and $m$ ($1 \\leq n \\leq 500$,\u2009 $0 \\leq m \\leq n(n-1)$), where $n$ is the number of nodes and $m$ is the number of edges. This is followed by $m$ lines, each containing two space-separated integers, $x$ and $y$ ($0 \\leq x,y \\leq (n-1)$, $x \\neq y$), indicating that there is a directed edge", "QUESTION:\nTopologically sorting the nodes of a directed graph (digraph) $G$ means putting the nodes in linear order\\[ v_0, v_1, v_2, v_3, \\ldots \\]\n\nsuch that whenever there is an edge from node $x$ to node $y$ in $G$, $x$\u00a0always precedes $y$ in the linear ordering. It is not hard to show that the nodes of a digraph can be topologically sorted if and only if the graph is acyclic (does not contain any directed cycles).\n\nKahn\u2019s Algorithm is a well-known topological sorting algorithm. Beginning with a digraph $G$ and an empty list $L$, it repeatedly executes the following three steps:\n - Let $S$ be the set of source nodes, i.e., the nodes with no incoming edges. If $S$ is empty, terminate the algorithm.\n - Let $\\alpha $ be any node in $S$. Remove $\\alpha $ and all its outgoing edges from $G$. If this removal of edges creates new source nodes, add these to\u00a0$S$.\n - Insert $\\alpha $ at the end of $L$.\n\nOnce Kahn\u2019s Algorithm terminates, if $G$ is now empty, then $L$ contains the nodes of the initial graph in topologically sorted order (such an ordering may not be unique). Otherwise, $G$ has one or more cycles, and therefore topological sorting is impossible.\n\nRegardless of the outcome of Kahn\u2019s Algorithm, consider any iteration of Step\u00a0$1$ above. If $S$ contains more than one node, then $\\alpha $ can be any one of them, and the choice of $\\alpha $ affects the composition of $S$ in later iterations, when further choices may be made that affect the composition of $S$ in yet later iterations, and so on. Taking into account all possible sequences of choices of $\\alpha $ during the execution of Kahn\u2019s Algorithm, what is the largest $S$ can ever be at the beginning of Step\u00a0$1$?\n\n-----Input-----\nThe input specifies a single directed graph. The first line of input contains two space-separated integers, $n$ and $m$ ($1 \\leq n \\leq 500$,\u2009 $0 \\leq m \\leq n(n-1)$), where $n$ is the number of nodes and $m$ is the number of edges. This is followed by $m$ lines, each containing two space-separated integers, $x$ and $y$ ($0 \\leq x,y \\leq (n-1)$, $x \\neq y$), indicating that there is a directed edge", "QUESTION:\nTopologically sorting the nodes of a directed graph (digraph) $G$ means putting the nodes in linear order\\[ v_0, v_1, v_2, v_3, \\ldots \\]\n\nsuch that whenever there is an edge from node $x$ to node $y$ in $G$, $x$\u00a0always precedes $y$ in the linear ordering. It is not hard to show that the nodes of a digraph can be topologically sorted if and only if the graph is acyclic (does not contain any directed cycles).\n\nKahn\u2019s Algorithm is a well-known topological sorting algorithm. Beginning with a digraph $G$ and an empty list $L$, it repeatedly executes the following three steps:\n - Let $S$ be the set of source nodes, i.e., the nodes with no incoming edges. If $S$ is empty, terminate the algorithm.\n - Let $\\alpha $ be any node in $S$. Remove $\\alpha $ and all its outgoing edges from $G$. If this removal of edges creates new source nodes, add these to\u00a0$S$.\n - Insert $\\alpha $ at the end of $L$.\n\nOnce Kahn\u2019s Algorithm terminates, if $G$ is now empty, then $L$ contains the nodes of the initial graph in topologically sorted order (such an ordering may not be unique). Otherwise, $G$ has one or more cycles, and therefore topological sorting is impossible.\n\nRegardless of the outcome of Kahn\u2019s Algorithm, consider any iteration of Step\u00a0$1$ above. If $S$ contains more than one node, then $\\alpha $ can be any one of them, and the choice of $\\alpha $ affects the composition of $S$ in later iterations, when further choices may be made that affect the composition of $S$ in yet later iterations, and so on. Taking into account all possible sequences of choices of $\\alpha $ during the execution of Kahn\u2019s Algorithm, what is the largest $S$ can ever be at the beginning of Step\u00a0$1$?\n\n-----Input-----\nThe input specifies a single directed graph. The first line of input contains two space-separated integers, $n$ and $m$ ($1 \\leq n \\leq 500$,\u2009 $0 \\leq m \\leq n(n-1)$), where $n$ is the number of nodes and $m$ is the number of edges. This is followed by $m$ lines, each containing two space-separated integers, $x$ and $y$ ($0 \\leq x,y \\leq (n-1)$, $x \\neq y$), indicating that there is a directed edge", "QUESTION:\nTopologically sorting the nodes of a directed graph (digraph) $G$ means putting the nodes in linear order\\[ v_0, v_1, v_2, v_3, \\ldots \\]\n\nsuch that whenever there is an edge from node $x$ to node $y$ in $G$, $x$\u00a0always precedes $y$ in the linear ordering. It is not hard to show that the nodes of a digraph can be topologically sorted if and only if the graph is acyclic (does not contain any directed cycles).\n\nKahn\u2019s Algorithm is a well-known topological sorting algorithm. Beginning with a digraph $G$ and an empty list $L$, it repeatedly executes the following three steps:\n - Let $S$ be the set of source nodes, i.e., the nodes with no incoming edges. If $S$ is empty, terminate the algorithm.\n - Let $\\alpha $ be any node in $S$. Remove $\\alpha $ and all its outgoing edges from $G$. If this removal of edges creates new source nodes, add these to\u00a0$S$.\n - Insert $\\alpha $ at the end of $L$.\n\nOnce Kahn\u2019s Algorithm terminates, if $G$ is now empty, then $L$ contains the nodes of the initial graph in topologically sorted order (such an ordering may not be unique). Otherwise, $G$ has one or more cycles, and therefore topological sorting is impossible.\n\nRegardless of the outcome of Kahn\u2019s Algorithm, consider any iteration of Step\u00a0$1$ above. If $S$ contains more than one node, then $\\alpha $ can be any one of them, and the choice of $\\alpha $ affects the composition of $S$ in later iterations, when further choices may be made that affect the composition of $S$ in yet later iterations, and so on. Taking into account all possible sequences of choices of $\\alpha $ during the execution of Kahn\u2019s Algorithm, what is the largest $S$ can ever be at the beginning of Step\u00a0$1$?\n\n-----Input-----\nThe input specifies a single directed graph. The first line of input contains two space-separated integers, $n$ and $m$ ($1 \\leq n \\leq 500$,\u2009 $0 \\leq m \\leq n(n-1)$), where $n$ is the number of nodes and $m$ is the number of edges. This is followed by $m$ lines, each containing two space-separated integers, $x$ and $y$ ($0 \\leq x,y \\leq (n-1)$, $x \\neq y$), indicating that there is a directed edge"], "prompt": "\nQUESTION:\nTopologically sorting the nodes of a directed graph (digraph) $G$ means putting the nodes in linear order\\[ v_0, v_1, v_2, v_3, \\ldots \\]\n\nsuch that whenever there is an edge from node $x$ to node $y$ in $G$, $x$\u00a0always precedes $y$ in the linear ordering. It is not hard to show that the nodes of a digraph can be topologically sorted if and only if the graph is acyclic (does not contain any directed cycles).\n\nKahn\u2019s Algorithm is a well-known topological sorting algorithm. Beginning with a digraph $G$ and an empty list $L$, it repeatedly executes the following three steps:\n - Let $S$ be the set of source nodes, i.e., the nodes with no incoming edges. If $S$ is empty, terminate the algorithm.\n - Let $\\alpha $ be any node in $S$. Remove $\\alpha $ and all its outgoing edges from $G$. If this removal of edges creates new source nodes, add these to\u00a0$S$.\n - Insert $\\alpha $ at the end of $L$.\n\nOnce Kahn\u2019s Algorithm terminates, if $G$ is now empty, then $L$ contains the nodes of the initial graph in topologically sorted order (such an ordering may not be unique). Otherwise, $G$ has one or more cycles, and therefore topological sorting is impossible.\n\nRegardless of the outcome of Kahn\u2019s Algorithm, consider any iteration of Step\u00a0$1$ above. If $S$ contains more than one node, then $\\alpha $ can be any one of them, and the choice of $\\alpha $ affects the composition of $S$ in later iterations, when further choices may be made that affect the composition of $S$ in yet later iterations, and so on. Taking into account all possible sequences of choices of $\\alpha $ during the execution of Kahn\u2019s Algorithm, what is the largest $S$ can ever be at the beginning of Step\u00a0$1$?\n\n-----Input-----\nThe input specifies a single directed graph. The first line of input contains two space-separated integers, $n$ and $m$ ($1 \\leq n \\leq 500$,\u2009 $0 \\leq m \\leq n(n-1)$), where $n$ is the number of nodes and $m$ is the number of edges. This is followed by $m$ lines, each containing two space-separated integers, $x$ and $y$ ($0 \\leq x,y \\leq (n-1)$, $x \\neq y$), indicating that there is a directed edge from node $x$ to node $y$, where nodes are indexed $0, 1, 2, \\ldots , (n-1)$. No edge will be listed more than once.\n\n-----Output-----\nOutput a line containing a single integer: the largest possible size of\u00a0$S$ at the beginning of any iteration of Step\u00a0$1$ in the execution of Kahn\u2019s Algorithm.\n\n-----Examples-----\nSample Input:\n4 3\n0 1\n1 2\n2 3\nSample Output:\n1\nPlease provide the solution as pure code only, without explanations or comments.\n\nANSWER:\n```python\n"}}