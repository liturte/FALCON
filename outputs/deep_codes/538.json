{"538": {"code": ["def is_quasi_palindromic(x):\n    s = str(x)\n    return s == s[::-1]\n\nx = int(input())\nprint(\"YES\" if is_quasi_palindromic(x) else \"NO\")\n\n\nThis program reads an integer number x from input, converts it to a string, and checks if it is equal to its reverse (which means it is a palindrome). If it is, it prints \"YES\"; otherwise, it prints \"NO\".\n\nThis solution assumes that leading zeros are not significant for the palindrome property, as per the problem statement.\n\nThe `[::-1]` is a Python idiom for reversing a string.\n\nPlease note that this solution does not handle leading zeros in the input. It will treat a number like 002010200 as not quasi-palindromic. If you want to consider leading zeros", "x = input()\nprint('YES' if x == x[::-1] else 'NO')\n\n\nEXPLANATION:\nThe code reads an integer as a string and checks if it's equal to its reverse. If yes, it means that the number is a palindrome, so \"YES\" is printed. If not, \"NO\" is printed.\n\nNote: This solution assumes that the input is a valid integer without leading zeroes. If this is not guaranteed, additional error checking should be added.", "x = input()\nif x == x[::-1]:\n    print(\"YES\")\nelse:\n\n\n\n\n    print(\"NO\")", "x = input()\nprint('YES' if x == x[::-1] else 'NO')\n\n\nExplanation:\nThe code takes an input number x as a string, then checks if the string is equal to its reverse (which is what a palindrome is). If it is, it prints 'YES', otherwise it prints 'NO'. The [::-1] slice reverses the string.\n\nThis solution assumes that the input will be a string without leading zeroes, which is the case according to the problem statement.", "x = input()\nprint('YES' if x == x[::-1] else 'NO')\n\n\nThis code reads an integer as a string, then checks if it is equal to its reverse (which is what a palindrome means). If so, it prints 'YES', otherwise it prints 'NO'. The [::-1] slice is a quick way to reverse a string in Python.\n\nThis code assumes that the input is always a non-negative integer. If the input could be negative or contain leading zeroes, you would need to modify the code to handle those cases."], "prompt": "\nQUESTION:\nLet quasi-palindromic number be such number that adding some leading zeros (possible none) to it produces a palindromic string. \n\nString t is called a palindrome, if it reads the same from left to right and from right to left.\n\nFor example, numbers 131 and 2010200 are quasi-palindromic, they can be transformed to strings \"131\" and \"002010200\", respectively, which are palindromes.\n\nYou are given some integer number x. Check if it's a quasi-palindromic number.\n\n\n-----Input-----\n\nThe first line contains one integer number x (1 \u2264 x \u2264 10^9). This number is given without any leading zeroes.\n\n\n-----Output-----\n\nPrint \"YES\" if number x is quasi-palindromic. Otherwise, print \"NO\" (without quotes).\n\n\n-----Examples-----\nInput\n131\n\nOutput\nYES\n\nInput\n320\n\nOutput\nNO\n\nInput\n2010200\n\nOutput\nYES\nPlease provide the solution as pure code only, without explanations or comments.\n\nANSWER:\n```python\n"}}