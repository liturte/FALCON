{"2025": {"code": ["def max_composite_summands(n):\n    if n < 4:\n        return -1\n    if n % 2 == 0:\n        return n // 2 - 1\n    return n // 2\n\nq = int(input())\nfor _ in range(q):\n    n = int(input())\n    print(max_composite_summands(n))\n\nThis code works by first checking if", "def max_composite_summands(n):\n    if n < 4:\n        return -1\n    if n % 2 == 0:\n        return n // 2\n    else:\n        return n // 2 - 1\n\nq = int(input().strip())\nfor _ in range(q):\n    n = int(input().strip())\n    print(max_composite_summands(n))", "def max_composite_summands(n):\n    if n < 4: return -1\n    if n % 2 == 0: return 2\n    return 3\n\nq = int(input())\nfor _ in range(q):\n    n = int(input())\n    print(max_composite_summands(n))\n\n\nExplanation:\nThe function max_composite_summands(n", "def max_composite_summands(n):\n    if n <= 4: return -1\n    if n % 2 == 0: return n//2\n    return n//2 - 1\n\nq = int(input())\nfor _ in range(q):\n    n = int(input())\n    print(max_composite_summands(n))\n\n\nExplanation:\nThe function `max_composite", "def max_composite_summands(n):\n    if n <= 2:\n        return -1\n    elif n == 3:\n        return 1\n    elif n % 2 == 0 or n % 3 == 0:\n        return 2\n    else:\n        return 3\n\nq = int(input())\nfor _ in range(q):\n    n = int(input())\n    print(max_composite_"], "prompt": "\nQUESTION:\nYou are given several queries. In the i-th query you are given a single positive integer n_{i}. You are to represent n_{i} as a sum of maximum possible number of composite summands and print this maximum number, or print -1, if there are no such splittings.\n\nAn integer greater than 1 is composite, if it is not prime, i.e. if it has positive divisors not equal to 1 and the integer itself.\n\n\n-----Input-----\n\nThe first line contains single integer q (1 \u2264 q \u2264 10^5)\u00a0\u2014 the number of queries.\n\nq lines follow. The (i + 1)-th line contains single integer n_{i} (1 \u2264 n_{i} \u2264 10^9)\u00a0\u2014 the i-th query.\n\n\n-----Output-----\n\nFor each query print the maximum possible number of summands in a valid splitting to composite summands, or -1, if there are no such splittings.\n\n\n-----Examples-----\nInput\n1\n12\n\nOutput\n3\n\nInput\n2\n6\n8\n\nOutput\n1\n2\n\nInput\n3\n1\n2\n3\n\nOutput\n-1\n-1\n-1\n\n\n\n-----Note-----\n\n12 = 4 + 4 + 4 = 4 + 8 = 6 + 6 = 12, but the first splitting has the maximum possible number of summands.\n\n8 = 4 + 4, 6 can't be split into several composite summands.\n\n1, 2, 3 are less than any composite number, so they do not have valid splittings.\nPlease provide the solution as pure code only, without explanations or comments.\n\nANSWER:\n```python\n"}}