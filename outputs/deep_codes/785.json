{"785": {"code": ["import math\n\ndef solve(n, a, b):\n    min_area = n * 6\n    new_a = math.ceil(min_area / b)\n    new_b = math.ceil(min_area / a)\n    while new_a * new_b < min_area:\n        if new_a * b < new_b * a:\n            new_a += 1\n        else:\n            new_b += 1\n    return min_area, new_a, new_b\n\nn, a, b = map(int, input().split())\nmin_area, new_a, new_b = solve(n, a, b)\nprint(min_area)\nprint(new_a, new_b)", "import math\n\nn, a, b = map(int, input().split())\n\n# If the room is already large enough\nif a * b >= 6 * n:\n    print(n * 6, a, b)\nelse:\n    # Otherwise, find the smallest area that can accommodate n students\n    for i in range(n, 10**18):\n        if i * 6 <= max(a, b) * max(a, b):\n            print(i * 6, max(a, b), max(a, b))\n            break\n\n\nThis solution first checks if the room is large enough to accommodate all n students. If it is, it prints the size of the room and exits. If the room is not large enough, it starts to find", "import math\n\nn, a, b = map(int, input().split())\nmin_area = math.ceil(n * 6 / min(a, b))\n\nif a <= b:\n    a = math.ceil(math.sqrt(min_area * min(a, b)))\n    b = min_area // a\nelse:\n    b = math.ceil(math.sqrt(min_area * min(a, b)))\n    a = min_area // b\n\nprint(min_area, a, b)\n\n\nThis code works by first calculating the minimum area required for the room. Then it checks if the area is possible with the current dimensions of the room. If not, it calculates the new dimensions by taking the square root of the minimum area and round", "import math\n\nn, a, b = map(int, input().split())\nmin_area = n * 6\nmin_area_a = math.ceil(min_area / b)\nmin_area_b = math.ceil(min_area / a)\n\nwhile a * b < min_area:\n    a += 1\n    b = min_area // a\n\nprint(a * b, a, b)\n\n\nExplanation:\nThis program calculates the minimum area required for n students and the current room sizes a and b. If the current room area is less than the minimum area, the program increases the size of the room by 1 on the side 'a' and recalculates the size 'b' to maintain the aspect ratio. The program continues this", "import sys\n\ndef read_ints():\n    return map(int, sys.stdin.readline().strip().split())\n\ndef solve():\n    n, a, b = read_ints()\n    if n * 6 > a * b:\n        print(\"-1\")\n    else:\n        while a * b < n * 6:\n            if a > b:\n                b += 1\n            else:\n                a += 1\n        print(str(a * b) + \"\\n\" + str(a) + \" \" + str(b))\n\nif __name__ == '__main__':\n    solve()\n\n\nThis program is a solution to the problem. It first checks if the room can accommodate all the students. If not, it prints \"-1"], "prompt": "\nQUESTION:\nThe start of the new academic year brought about the problem of accommodation students into dormitories. One of such dormitories has a a \u00d7 b square meter wonder room. The caretaker wants to accommodate exactly n students there. But the law says that there must be at least 6 square meters per student in a room (that is, the room for n students must have the area of at least 6n square meters). The caretaker can enlarge any (possibly both) side of the room by an arbitrary positive integer of meters. Help him change the room so as all n students could live in it and the total area of the room was as small as possible.\n\n\n-----Input-----\n\nThe first line contains three space-separated integers n, a and b (1 \u2264 n, a, b \u2264 10^9) \u2014 the number of students and the sizes of the room.\n\n\n-----Output-----\n\nPrint three integers s, a_1 and b_1 (a \u2264 a_1;\u00a0b \u2264 b_1) \u2014 the final area of the room and its sizes. If there are multiple optimal solutions, print any of them.\n\n\n-----Examples-----\nInput\n3 3 5\n\nOutput\n18\n3 6\n\nInput\n2 4 4\n\nOutput\n16\n4 4\nPlease provide the solution as pure code only, without explanations or comments.\n\nANSWER:\n```python\n"}}