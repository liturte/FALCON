{"247": {"code": ["def solve():\n    n = int(input().strip())\n    points = [tuple(map(int, input().strip().split())) for _ in range(n)]\n    x_coords = set()\n    y_coords = set()\n    for x, y in points:\n        if x in x_coords or y in y_coords:\n            return \"YES\"\n        x_coords.add(x)\n        y_coords.add(y)\n    return \"NO\"\n\nprint(solve())\n\nIn this solution, we are storing the x and y coordinates of the points in two separate sets. If we encounter a point whose x or", "def solve():\n    n = int(input())\n    x_coords = set()\n    y_coords = set()\n    for _ in range(n):\n        x, y = map(int, input().split())\n        x_coords.add(x)\n        y_coords.add(y)\n    if len(x_coords) == n or len(y_coords) == n:\n        print('NO')\n    else:\n        print('YES')\n\nsolve()\n\n\nThis solution works by adding the x and y coordinates of each point to two separate sets. Since sets only allow unique elements, if there are any repeated coordinates (", "def solve():\n    n = int(input())\n    points = [tuple(map(int, input().split())) for _ in range(n)]\n    x_coords = [x for x, y in points]\n    y_coords = [y for x, y in points]\n    if len(set(x_coords)) != len(x_coords) or len(set(y_coords)) != len(y_coords):\n        return 'YES'\n    else:\n        return 'NO'\n\nprint(solve())\n\n\nIn this solution, we first read the number of points and their coordinates. We then separate the x-", "def solve():\n    n = int(input())\n    points = [list(map(int, input().split())) for _ in range(n)]\n    points.sort()\n    x, y = zip(*points)\n    if max(x) - min(x) < max(y) - min(y):\n        x, y = y, x\n    a, b = min(x), max(x)\n    c, d = min(y), max(y)\n    for i in range(n):\n        if not (a <= points[i][0] <= b and c <= points[i][1] <= d):\n            return 'NO'\n    return 'Y", "def solve():\n    n = int(input().strip())\n    points = [tuple(map(int, input().strip().split())) for _ in range(n)]\n    x_coords = [x for x, y in points]\n    y_coords = [y for x, y in points]\n    if len(set(x_coords)) != n or len(set(y_coords)) != n:\n        print('YES')\n    else:\n        print('NO')\n\nsolve()\n\n\nThis solution works by first reading in the number of points and the coordinates of each point. It then checks if there are any repeated x-coordinates"], "prompt": "\nQUESTION:\nYou are given n points on Cartesian plane. Every point is a lattice point (i. e. both of its coordinates are integers), and all points are distinct.\n\nYou may draw two straight lines (not necessarily distinct). Is it possible to do this in such a way that every point lies on at least one of these lines?\n\n\n-----Input-----\n\nThe first line contains one integer n (1 \u2264 n \u2264 10^5) \u2014 the number of points you are given.\n\nThen n lines follow, each line containing two integers x_{i} and y_{i} (|x_{i}|, |y_{i}| \u2264 10^9)\u2014 coordinates of i-th point. All n points are distinct.\n\n\n-----Output-----\n\nIf it is possible to draw two straight lines in such a way that each of given points belongs to at least one of these lines, print YES. Otherwise, print NO.\n\n\n-----Examples-----\nInput\n5\n0 0\n0 1\n1 1\n1 -1\n2 2\n\nOutput\nYES\n\nInput\n5\n0 0\n1 0\n2 1\n1 1\n2 3\n\nOutput\nNO\n\n\n\n-----Note-----\n\nIn the first example it is possible to draw two lines, the one containing the points 1, 3 and 5, and another one containing two remaining points. [Image]\nPlease provide the solution as pure code only, without explanations or comments.\n\nANSWER:\n```python\n"}}