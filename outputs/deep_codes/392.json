{"392": {"code": ["def max_lovely(n):\n    i = 1\n    while i * i <= n:\n        i += 1\n    return i - 1\n\nn = int(input())\nprint(max_lovely(n))\n\n\nThis program calculates the largest integer i such that i^2 is less than or equal to n, then returns i-1. It works because a number x is lovely if and only if there is no positive integer a > 1 such that a^2 is a divisor of x. The largest such a is the largest integer i such that i^2 is less than or equal to x, so the largest lovely number is the largest such i", "def is_divisible_by_square(n):\n    i = 2\n    while i * i <= n:\n        if n % (i * i) == 0:\n            return True\n        i += 1\n    return False\n\ndef find_max_lovely_number(n):\n    for i in range(n, 0, -1):\n        if not is_divisible_by_square(i):\n            return i\n\nn = int(input())\nprint(find_max_lovely_number(n))\n\n\nThis program first defines a function `is_divisible_by_square` that checks if a number", "def largest_lovely_number(n):\n    i = 1\n    while n % (i ** 2) == 0:\n        n //= (i ** 2)\n        i += 1\n    return n\n\nprint(largest_lovely_number(int(input())))\n\nThis program will take an input number, n, and then it will continuously divide n by the square of i (starting from 1) until n is no longer divisible by the square of i. The largest value of n at this point is the largest lovely number.\n\nThe reason why this works is that a number is lovely if and only if it is not divisible", "import math\n\ndef is_square(n):\n    return math.isqrt(n)**2 == n\n\ndef is_lovely(n):\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            if is_square(n // i):\n                return False\n    return True\n\nn = int(input())\nwhile not is_lovely(n):\n    n -= 1\nprint(n)\n\n\nThis solution works by checking each number from the given number down to 1 to see if it is lovely. If a number is not lovely, it", "def largest_lovely(n):\n    while n > 0:\n        if n % 2 == 1 or n % 4 == 3:\n            return n\n        n -= 1\n    return 0\n\nn = int(input())\nprint(largest_lovely(n))\n\n\nEXPLANATION:\nThe problem is asking for the largest number that is not divisible by a perfect square. If a number is divisible by a perfect square, then it is not \"lovely\". So we start from the largest number and go down until we find a number that is not divisible by a perfect square. This is done by checking if the number is"], "prompt": "\nQUESTION:\nDuff is in love with lovely numbers! A positive integer x is called lovely if and only if there is no such positive integer a > 1 such that a^2 is a divisor of x. [Image] \n\nMalek has a number store! In his store, he has only divisors of positive integer n (and he has all of them). As a birthday present, Malek wants to give her a lovely number from his store. He wants this number to be as big as possible.\n\nMalek always had issues in math, so he asked for your help. Please tell him what is the biggest lovely number in his store.\n\n\n-----Input-----\n\nThe first and only line of input contains one integer, n (1 \u2264 n \u2264 10^12).\n\n\n-----Output-----\n\nPrint the answer in one line.\n\n\n-----Examples-----\nInput\n10\n\nOutput\n10\n\nInput\n12\n\nOutput\n6\n\n\n\n-----Note-----\n\nIn first sample case, there are numbers 1, 2, 5 and 10 in the shop. 10 isn't divisible by any perfect square, so 10 is lovely.\n\nIn second sample case, there are numbers 1, 2, 3, 4, 6 and 12 in the shop. 12 is divisible by 4 = 2^2, so 12 is not lovely, while 6 is indeed lovely.\nPlease provide the solution as pure code only, without explanations or comments.\n\nANSWER:\n```python\n"}}