{"4765": {"code": ["def min_diff():\n    N = int(input())\n    ingredients = [list(map(int, input().split())) for _ in range(N)]\n    ingredients.sort(key=lambda x: (x[0] * x[1], x[0], x[1]))\n    min_sour, min_bitter = ingredients[0]\n    min_diff = abs(min_sour - min_bitter)\n    for sour, bitter in ingredients[1:]:\n        if sour * bitter < min_sour * min_bitter:\n            min", "import sys\n\ndef min_difference():\n    N = int(sys.stdin.readline().strip())\n    ingredients = [list(map(int, sys.stdin.readline().strip().split())) for _ in range(N)]\n    \n    min_diff = float('inf')\n    for i in range(1, 2**N):\n        sourness = 1\n        bitterness = 0\n        for j in range(N):\n            if (i & (1 << j)) != 0:\n                sourness *= ingredients[j][0", "def min_diff():\n    N = int(input())\n    ingredients = [list(map(int, input().split())) for _ in range(N)]\n    ingredients.sort(key=lambda x: (x[0] * x[1], x[0], x[1]))\n    min_diff = float('inf')\n    sour_total, bitter_total = sum(x[0] for x in ingredients), sum(x[1] for x in ingredients)\n    for i in range(N):\n        sour_total -= ingredients[i][0]", "def perket():\n    N = int(input())\n    ingredients = [list(map(int, input().split())) for _ in range(N)]\n    ingredients.sort(key=lambda x: (x[0] * x[1], x[0], x[1]))\n    min_diff = float('inf')\n    for i in range(1, N):\n        diff = abs(ingredients[i][0] - ingredients[i - 1][0]) * abs(ingredients[i][1] - ingredients[i - 1][1])", "def solve():\n    N = int(input())\n    ingredients = [list(map(int, input().split())) for _ in range(N)]\n    ingredients.sort(key=lambda x: (x[0]*x[1], x[0], x[1]))\n    sourness, bitterness = zip(*ingredients)\n    return min(abs(sum(sourness[:i]) - sum(bitterness[:i])) for i in range(1, N+1))\n\nprint(solve())\n\n\nThis solution works by first sorting"], "prompt": "\nQUESTION:\n\"Perket\" is a widely known and delicious meal. For perket to be what it is, cooks must carefully choose the ingredients to get the fullest taste possible while keeping the meal traditional.\n\nYou have $N$ ingredients at your disposal. For each we know its sourness $S$ and bitterness $B$. When using multiple ingredients, the total sourness is the product of sourness amounts of all ingredients, while the total bitterness is the sum of bitterness amounts of all ingredients.\n\nAs everyone knows, perket is supposed to be neither sour nor bitter; we want to choose the ingredients so that the absolute difference between sourness and bitterness is the smallest.\n\nAlso, it is necessary to use at least one ingredient; you can\u2019t serve water as the main course.\n\n-----Input-----\nThe first line contains the integer $N$ $(1 \\leq N \\leq 10)$, the number of ingredients at our disposal. Each of the next $N$ lines contains two integers separated by a space, the sourness and bitterness of each ingredient.\n\nThe input data will be such that, if we make a meal with all ingredients, both the sourness and bitterness will be less than $1000000000$.\n\n-----Output-----\nOutput the smallest possible difference between sourness and bitterness.\n\n-----Examples-----\nSample Input 1:\n1\n3 10\nSample Output 1:\n7\n\nSample Input 2:\n2\n3 8\n5 8\nSample Output 2:\n1\nPlease provide the solution as pure code only, without explanations or comments.\n\nANSWER:\n```python\n"}}