{"766": {"code": ["s = input()\ncount = [0, 0]\ncurr = s[0]\ncnt = 1\nfor i in range(1, len(s)):\n    if s[i] == curr:\n        cnt += 1\n    else:\n        count[cnt % 2] += 1\n        curr = s[i]\n        cnt = 1\ncount[cnt % 2] += 1\nif count[0] == 0 or count[1] == 0:\n    print('No')\nelse:\n    print('Yes')\n\n\nThis Python code works by iterating over the input string `s` and counting the number of occurrences of each character. If a character is", "def is_adorable(s):\n    i = 0\n    while i < len(s):\n        j = i + 1\n        while j < len(s) and s[j] == s[i]:\n            j += 1\n        if j - i >= 2:\n            return True\n        i = j\n    return False\n\ns = input()\nprint('Yes' if is_adorable(s) else 'No')\n\n\nThis Python program uses a while loop to find groups of equal symbols in the string. If it finds a group with more than two symbols, it returns True (indicating that the string can be split into two adorable subsequences). If it doesn't find such a group, it returns False (", "def is_adorable(s: str) -> bool:\n    if len(s) < 2:\n        return False\n    first_char = s[0]\n    count = 1\n    for c in s[1:]:\n        if c == first_char:\n            count += 1\n        else:\n            if count >= 2:\n                return True\n            first_char = c\n            count = 1\n    return count >= 2\n\ns = input()\nprint('Yes' if is_adorable(s) else 'No')\n\n\nExplanation:\nThe function `is_adorable` checks if a string `s` can be split into two non-empty subsequences such that the strings formed by", "s = input()\ncount = [0, 0]\ncur = s[0]\nc = 0\nfor i in s:\n    if i == cur:\n        count[c] += 1\n    else:\n        cur = i\n        c = 1 - c\n        count[c] += 1\nprint('Yes' if count[0] != count[1] else 'No')\n\n\nExplanation:\nThis program counts the number of times each character appears in the string. If the two counts are different, it means the string can be split into two adorable subsequences. Otherwise, it cannot.\n\nThe count is reset every time a new character is encountered, and the current character is switched. The count for the", "from collections import Counter\n\ns = input()\ncounter = Counter(s)\nvalues = list(counter.values())\n\nif len(set(values)) == 1:\n    print('Yes')\nelse:\n    print('No')\n\n\nExplanation:\nThe solution first counts the frequency of each character in the string using the Counter class from the collections module. Then it checks if all frequencies are the same. If they are, all characters appear the same number of times and the string can be split into two non-empty subsequences where each subsequence contains the same characters. If not all frequencies are the same, not all characters appear the same number of times and no suitable partition is possible.\n\nThe time complexity of this solution is"], "prompt": "\nQUESTION:\nLet's call a string adorable if its letters can be realigned in such a way that they form two consequent groups of equal symbols (note that different groups must contain different symbols). For example, ababa is adorable (you can transform it to aaabb, where the first three letters form a group of a-s and others \u2014 a group of b-s), but cccc is not since in each possible consequent partition letters in these two groups coincide.\n\nYou're given a string s. Check whether it can be split into two non-empty subsequences such that the strings formed by these subsequences are adorable. Here a subsequence is an arbitrary set of indexes of the string.\n\n\n-----Input-----\n\nThe only line contains s (1 \u2264 |s| \u2264 10^5) consisting of lowercase latin letters.\n\n\n-----Output-----\n\nPrint \u00abYes\u00bb if the string can be split according to the criteria above or \u00abNo\u00bb otherwise.\n\nEach letter can be printed in arbitrary case.\n\n\n-----Examples-----\nInput\nababa\n\nOutput\nYes\n\nInput\nzzcxx\n\nOutput\nYes\n\nInput\nyeee\n\nOutput\nNo\n\n\n\n-----Note-----\n\nIn sample case two zzcxx can be split into subsequences zc and zxx each of which is adorable.\n\nThere's no suitable partition in sample case three.\nPlease provide the solution as pure code only, without explanations or comments.\n\nANSWER:\n```python\n"}}