{"2821": {"code": ["import sys\n\ndef read_int():\n    return int(sys.stdin.readline())\n\ndef solve():\n    Q, M, S, L = read_int(), read_int(), read_int(), read_int()\n    total_slots = S + L * Q\n    if total_slots <= M", "import sys\n\ndef read_int():\n    return int(sys.stdin.readline())\n\ndef solve(Q, M, S, L):\n    total = S + Q * L\n    if total <= M:\n        return 0\n    else:\n        return total - M\n\nQ, M, S,", "Q, M, S, L = map(int, input().split())\nprint(min(S * Q, L * Q, M * Q, S + L * Q, M * Q + S, M * Q + L * Q))\n\n\nEXPLANATION:\nThe question asks to minimize the time when all the purchased", "import sys\n\ndef solve(Q, M, S, L):\n    # convert S and L to time in seconds\n    S, L = S * Q, L * Q\n\n    # calculate total time slots\n    total_slots = S + L\n\n    # calculate minimum number of machines needed\n    min_machines", "import sys\n\ndef read_ints():\n    return list(map(int, sys.stdin.readline().strip().split()))\n\nQ, M, S, L = read_ints()\n\ndef solve(Q, M, S, L):\n    if S >= M:\n        return Q * (S - M +"], "prompt": "\nQUESTION:\nEverybody is into cloud computing these days, so quite a few different business models are being experimented with. You are trying a very simple one: you sell time on your machines in one of two batches called slots. A customer can buy one second of CPU time or $Q$ seconds for some integer $Q$.\n\nEach time slot a customer purchases must be completed on a single machine, but you get to decide how to allocate the purchased time slots between machines.\n\nAfter coming back from a long vacation, you see that all of your machines are idle and a variety of orders have come in. To keep customers happy, you must decide how to distribute these requests between machines in a way that minimizes the time when the purchased time slots are finally all completed.\n\nWhat is the smallest amount of time in which you can complete all of the purchased time slots?\n\n-----Input-----\nThe input consists of a single line containing four integers $Q$\u00a0($2 \\leq Q \\leq 1000$), which is the time needed to complete the longer batches, $M$\u00a0($1 \\leq M \\leq 1000000$), which is the number of machines owned by your company, $S$\u00a0($0 \\leq S \\leq 1000000$), which is the number of 1-second time slots purchased, and $L$\u00a0($0 \\leq L \\leq 1000000$), which is the number of $Q$-second time slots purchased.\n\n-----Output-----\nDisplay the smallest amount of time in which you can complete all of the purchased time slots.\n\n-----Examples-----\nSample Input 1:\n2 4 3 6\nSample Output 1:\n4\n\nSample Input 2:\n3 4 3 5\nSample Output 2:\n6\nPlease provide the solution as pure code only, without explanations or comments.\n\nANSWER:\n```python\n"}}