{"795": {"code": ["def count_right_angled_triangles(n):\n    count = 0\n    for c in range(1, n+1):\n        for a in range(1, c+1):\n            for b in range(a, c+1):\n                if a*a + b*b == c*c:\n                    count += 1\n    return count\n\nn = int(input().strip())\nprint(count_right_angled_triangles(n))\n\n\nExplanation:\nThis solution uses three nested loops to iterate over all possible combinations of a, b, and c. For each combination, it checks if the Pythagorean theorem holds (i.e., a^2 + b^2 = c^", "def count_right_angled_triangles(n):\n    count = 0\n    for c in range(1, n+1):\n        for b in range(1, c+1):\n            for a in range(1, b+1):\n                if a*a + b*b == c*c:\n                    count += 1\n    return count\n\nn = int(input())\nprint(count_right_angled_triangles(n))\n\n\nEXPLANATION:\nThe solution is based on the brute-force approach, where we try all possible combinations of a, b, and c. For each combination, we check if it satisfies the Pythagorean theorem. If it does, we increment the count.", "def pythagorean_triangles(n):\n    count = 0\n    for c in range(1, n+1):\n        for b in range(1, c+1):\n            for a in range(1, b+1):\n                if a*a + b*b == c*c:\n                    count += 1\n    return count\n\nn = int(input())\nprint(pythagorean_triangles(n))\n\n\nThis Python program counts the number of Pythagorean triples (a, b, c) with 1 \u2264 a \u2264 b \u2264 c \u2264 n using three nested loops. It checks each possible triple (a, b", "def pythagorean_triplets(limit):\n    triplets = []\n    for a in range(1, limit+1):\n        for b in range(a, limit+1):\n            c = (a**2 + b**2)**0.5\n            if c % 1 == 0 and c <= limit:\n                triplets.append((a, b, int(c)))\n    return triplets\n\nn = int(input())\ntriplets = pythagorean_triplets(n)\nprint(len(triplets))\n\n\nThis program uses the Pythagorean theorem to generate all possible triplets of positive integers (a, b, c) where a^2", "def count_right_angled_triangles(n):\n    count = 0\n    for c in range(1, n+1):\n        for b in range(1, min(c+1, int(c**0.5)+1)):\n            a = int((c**2 - b**2)**0.5)\n            if a >= b and a*a + b*b == c*c:\n                count += 1\n    return count\n\nn = int(input())\nprint(count_right_angled_triangles(n))\n\n\nThis solution uses a brute force approach to check all possible combinations of a, b, and c to find the ones that satisfy the Pythagorean theorem."], "prompt": "\nQUESTION:\nIn mathematics, the Pythagorean theorem \u2014 is a relation in Euclidean geometry among the three sides of a right-angled triangle. In terms of areas, it states:\n\n \u007fIn any right-angled triangle, the area of the square whose side is the hypotenuse (the side opposite the right angle) is equal to the sum of the areas of the squares whose sides are the two legs (the two sides that meet at a right angle). \n\nThe theorem can be written as an equation relating the lengths of the sides a, b and c, often called the Pythagorean equation:\n\na^2 + b^2 = c^2\n\nwhere c represents the length of the hypotenuse, and a and b represent the lengths of the other two sides.\n\n [Image] \n\nGiven n, your task is to count how many right-angled triangles with side-lengths a, b and c that satisfied an inequality 1 \u2264 a \u2264 b \u2264 c \u2264 n.\n\n\n-----Input-----\n\nThe only line contains one integer n\u00a0(1 \u2264 n \u2264 10^4) as we mentioned above.\n\n\n-----Output-----\n\nPrint a single integer \u2014 the answer to the problem.\n\n\n-----Examples-----\nInput\n5\n\nOutput\n1\n\nInput\n74\n\nOutput\n35\nPlease provide the solution as pure code only, without explanations or comments.\n\nANSWER:\n```python\n"}}