{"3527": {"code": ["from collections import defaultdict, deque\n\ndef max_hops(c, l, connections):\n    graph = defaultdict(list)\n    for u, v in connections:\n        graph[u].append(v)\n        graph[v].append(u)\n\n    visited = [False] * c\n    max_hops = 0\n\n    for node in range(c):\n        if not visited[node]:\n            visited[node] = True\n            queue", "from collections import defaultdict, deque\n\ndef bfs(graph, start):\n    visited = [False]*len(graph)\n    distance = [0]*len(graph)\n    queue = deque([start])\n    visited[start] = True\n\n    while queue:\n        node = queue.popleft()\n        for neighbour in graph[node]:\n            if not visited[neighbour]:\n                visited[neighbour] = True\n                distance", "def max_hops(c, l, cables):\n    graph = [[] for _ in range(c)]\n    for a, b in cables:\n        graph[a].append(b)\n        graph[b].append(a)\n\n    def dfs(node, parent):\n        max1 = max2 = 0\n        for neighbor in graph[node]:\n            if neighbor != parent:\n                d = dfs(neighbor, node)\n                if", "from collections import defaultdict, deque\n\ndef bfs(graph, start):\n    visited = [False] * len(graph)\n    distance = [0] * len(graph)\n    queue = deque([start])\n    visited[start] = True\n\n    while queue:\n        node = queue.popleft()\n        for neighbor in graph[node]:\n            if not visited[neighbor]:\n                visited[neighbor] = True\n                distance", "from collections import defaultdict, deque\n\ndef max_hops(nodes, edges):\n    graph = defaultdict(list)\n    for u, v in edges:\n        graph[u].append(v)\n        graph[v].append(u)\n\n    max_hop = 0\n    for node in range(nodes):\n        visited = [False] * nodes\n        visited[node] = True\n        queue = deque([(node, 0)])"], "prompt": "\nQUESTION:\nOne day your boss explains to you that he has a bunch of computer networks that are currently unreachable from each other, and he asks you, the cable expert\u2019s assistant, to adjoin the networks to each other using new cables. Existing cables in the network cannot be touched.\n\nHe has asked you to use as few cables as possible, but the length of the cables used does not matter to him, since the cables are optical and the connectors are the expensive parts. Your boss is rather picky on cable usage, so you know that the already existing networks have as few cables as possible.\n\nDue to your humongous knowledge of computer networks, you are of course aware that the latency for an information packet travelling across the network is proportional to the number of hops the packet needs, where a hop is a traversal along a single cable. And since you believe a good solution to your boss\u2019 problem may earn you that long wanted promotion, you decide to minimise the maximum number of hops needed between any pair of network nodes.\n\n-----Input-----\nOn the first line, you are given two positive integers, the number\u00a0$1 \\leq c \\leq 10^5$ of computers and the number\u00a0$0 \\leq \\ell \\leq c-1$ of existing cables. Then follow\u00a0$\\ell $ lines, each line consisting of two distinct integers\u00a0$a$ and\u00a0$b$, the two computers the cables connect. You may assume that every computer has a unique name between\u00a0$0$ and\u00a0$c-1$.\n\n-----Output-----\nThe maximum number of hops in the resulting network.\n\n-----Examples-----\nSample Input:\n6 4\n0 1\n0 2\n3 4\n3 5\nSample Output:\n3\nPlease provide the solution as pure code only, without explanations or comments.\n\nANSWER:\n```python\n"}}