{"2879": {"code": ["from collections import deque\n\ndef bfs(i, j, n, m, grid, visited, color):\n    q = deque([(i, j)])\n    visited[i][j] = color\n    shape = [(i, j)]\n    dx, dy = [-1, 0, 1, 0], [0", "from collections import deque\n\ndef solve(grid, h, w):\n    dx = [0, 1, 0, -1]\n    dy = [1, 0, -1, 0]\n\n    def bfs(x, y, color):\n        q = deque([(x, y)])\n        grid[", "from collections import deque\n\ndef solve(grid, h, w):\n    n = len(grid)\n    m = len(grid[0])\n    dx = [0, 1, 0, -1]\n    dy = [1, 0, -1, 0]\n\n    def bfs(x, y, num", "def read_input():\n    h, w = map(int, input().split())\n    matrix = [input() for _ in range(h)]\n    return h, w, matrix\n\ndef find_polyominos(h, w, matrix):\n    def dfs(i, j, polyomino):\n        if i < 0 or j", "import sys\n\ndef print_matrix(matrix):\n    for row in matrix:\n        print(''.join(map(str, row)))\n\ndef find_polyomino(matrix, h, w):\n    for i in range(h):\n        for j in range(w):\n            if matrix[i][j] == 'X':"], "prompt": "\nQUESTION:\nA polyomino is a polyform with the square as its base form. It is a connected shape formed as the union of one or more identical squares in distinct locations on the plane, taken from the regular square tiling, such that every square can be connected to every other square through a sequence of shared edges (i.e., shapes connected only through shared corners of squares are not permitted).\n\n The most well-known polyominos are the seven tetrominos made out of four squares (see figure), famous from the Tetris\u00ae game, and of course the single domino consisting of two squares from the game with the same name. Some polyomino can be obtained by gluing several copies of the same smaller polyomino translated (but not rotated or mirrored) to different locations in the plane. We call those polyomino powers.\n\n\n\n-----Input-----\nOne line with two positive integers $h, w \\leq 10$. Next follows an $h \\times w$ matrix of characters \u2018.\u2019 or \u2018X\u2019, the \u2018X\u2019s describing a polyomino and \u2018.\u2019 space.\n\n-----Output-----\nA $k$-power with $2 \\leq k \\leq 5$ copies of a smaller polyomino: Output a $h\\times w$ matrix on the same format as the input with the \u2018X\u2019s replaced by the numbers $1$ through $k$ in any order identifying the factor pieces. Furthermore, if multiple solutions exist, any will do. Otherwise, output \u201cNo solution\u201d if no solution exists.\n\n-----Examples-----\nSample Input 1:\n3 7\n.XXXXX.\n.XX..X.\nXXXX...\nSample Output 1:\nNo solution\n\nSample Input 2:\n1 3\nXXX\nSample Output 2:\n123\nPlease provide the solution as pure code only, without explanations or comments.\n\nANSWER:\n```python\n"}}