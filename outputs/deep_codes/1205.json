{"1205": {"code": ["from collections import Counter\nfrom math import gcd\n\ndef solve():\n    n = int(input())\n    points = [tuple(map(int, input().split())) for _ in range(n)]\n\n    # Special case: if there's a point at the origin, then all lines are good\n    if (0, 0) in points:\n        return -1\n\n    c = Counter()\n    for x, y in points:\n        if x == 0:\n            y = 1 if y > 0 else -1\n        elif y == 0:\n            x = 1 if x > 0 else -1\n        else:\n            d = gcd(x", "from collections import Counter\nfrom math import gcd\n\ndef solve():\n    n = int(input())\n    points = [tuple(map(int, input().split())) for _ in range(n)]\n\n    lines = []\n    for i in range(n):\n        for j in range(i+1, n):\n            x1, y1 = points[i]\n            x2, y2 = points[j]\n            a = y2 - y1\n            b = x1 - x2\n            c = x2*y1 - x1*y2\n            g = gcd(a, gcd(b, c))\n            a //=", "from collections import Counter\nfrom math import gcd\n\ndef solve(n, points):\n    if n == 1: return -1\n    count = Counter(points)\n    lines = set()\n    for i in range(n):\n        for j in range(i + 1, n):\n            x1, y1 = points[i]\n            x2, y2 = points[j]\n            dx, dy = x2 - x1, y2 - y1\n            g = gcd(dx, dy)\n            dx //= g\n            dy //= g\n            lines.add((dx, dy))\n    count = Counter(lines)\n    return", "from collections import Counter\nfrom math import gcd\n\ndef solve():\n    n = int(input())\n    points = [tuple(map(int, input().split())) for _ in range(n)]\n    count = Counter()\n    for x, y in points:\n        if x == 0 and y == 0:\n            return 0\n        if x == 0:\n            y = 1\n        elif y == 0:\n            x = 1\n        else:\n            d = gcd(x, y)\n            x //= d\n            y //= d\n        if x < 0:\n            x, y = -x, -y\n        count[(x", "import sys\nfrom collections import defaultdict\nfrom math import atan2, pi\n\ndef solve(n, points):\n    def get_angle(x, y):\n        return atan2(y, x) * 180 / pi\n\n    def get_direction(x, y):\n        if x >= 0 and y >= 0:\n            return 0\n        elif x < 0 and y >= 0:\n            return 1\n        elif x < 0 and y < 0:\n            return 2\n        else:\n            return 3\n\n    angles = [get_angle(x, y) for x, y in points]\n    directions = [get_direction"], "prompt": "\nQUESTION:\nYou are given a set of n points on the plane. A line containing the origin is called good, if projection of the given set to this line forms a symmetric multiset of points. Find the total number of good lines.\n\nMultiset is a set where equal elements are allowed.\n\nMultiset is called symmetric, if there is a point P on the plane such that the multiset is centrally symmetric in respect of point P.\n\n\n-----Input-----\n\nThe first line contains a single integer n (1 \u2264 n \u2264 2000) \u2014 the number of points in the set.\n\nEach of the next n lines contains two integers x_{i} and y_{i} ( - 10^6  \u2264  x_{i},  y_{i}  \u2264  10^6) \u2014 the coordinates of the points. It is guaranteed that no two points coincide.\n\n\n-----Output-----\n\nIf there are infinitely many good lines, print -1.\n\nOtherwise, print single integer\u00a0\u2014 the number of good lines.\n\n\n-----Examples-----\nInput\n3\n1 2\n2 1\n3 3\n\nOutput\n3\n\nInput\n2\n4 3\n1 2\n\nOutput\n-1\n\n\n\n-----Note-----\n\nPicture to the first sample test:\n\n[Image] \n\nIn the second sample, any line containing the origin is good.\nPlease provide the solution as pure code only, without explanations or comments.\n\nANSWER:\n```python\n"}}