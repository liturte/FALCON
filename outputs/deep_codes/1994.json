{"1994": {"code": ["def solve():\n    s = input()\n    n = len(s)\n    prefix = [0] * (", "def solve(s):\n    n = len(s)\n    prefix = [0]*n\n    suffix =", "s = input()\nlens = [0] * (len(s) + 1)\ncnt = [0", "s = input()\nn = len(s)\nprefixes = [0]*n\nsuffixes = [", "def prefix_suffix_match(s):\n    n = len(s)\n    prefix_count = [0"], "prompt": "\nQUESTION:\nYou have a string s = s_1s_2...s_{|}s|, where |s| is the length of string s, and s_{i} its i-th character. \n\nLet's introduce several definitions:  A substring s[i..j] (1 \u2264 i \u2264 j \u2264 |s|) of string s is string s_{i}s_{i} + 1...s_{j}.  The prefix of string s of length l (1 \u2264 l \u2264 |s|) is string s[1..l].  The suffix of string s of length l (1 \u2264 l \u2264 |s|) is string s[|s| - l + 1..|s|]. \n\nYour task is, for any prefix of string s which matches a suffix of string s, print the number of times it occurs in string s as a substring.\n\n\n-----Input-----\n\nThe single line contains a sequence of characters s_1s_2...s_{|}s| (1 \u2264 |s| \u2264 10^5) \u2014 string s. The string only consists of uppercase English letters.\n\n\n-----Output-----\n\nIn the first line, print integer k (0 \u2264 k \u2264 |s|) \u2014 the number of prefixes that match a suffix of string s. Next print k lines, in each line print two integers l_{i} c_{i}. Numbers l_{i} c_{i} mean that the prefix of the length l_{i} matches the suffix of length l_{i} and occurs in string s as a substring c_{i} times. Print pairs l_{i} c_{i} in the order of increasing l_{i}.\n\n\n-----Examples-----\nInput\nABACABA\n\nOutput\n3\n1 4\n3 2\n7 1\n\nInput\nAAA\n\nOutput\n3\n1 3\n2 2\n3 1\nPlease provide the solution as pure code only, without explanations or comments.\n\nANSWER:\n```python\n"}}