{"1534": {"code": ["def max_beautiful_string_length(s: str) -> int:\n    a_count = s.count('a')\n    b_count = s.count('b')\n    if a_count == 0 or b_count == 0:\n        return max(a_count, b_count)\n    else:\n        return min(a_count, b_count) * 2\n\ns = input()\nprint(max_beautiful_string_length(s))\n\n\nThis solution works by first counting the number of 'a's and 'b's in the string. If there are no 'a's or 'b's, the maximum length is the count of the smaller character. If there are 'a's and 'b's, the maximum length is the minimum count of 'a's and 'b's, each of which can form a beautiful string.\n\nThis solution assumes that the input string only contains 'a's and 'b's. If the input string can", "def max_beautiful_string(s):\n    max_len = 0\n    a_count = s.count('a')\n    b_count = s.count('b')\n    for i in range(1, a_count):\n        for j in range(1, b_count):\n            a_index = [idx for idx in range(len(s)) if s[idx] == 'a']\n            b_index = [idx for idx in range(len(s)) if s[idx] == 'b']\n            a_slice = s[a_index[0]:a_index[i]]\n            b_slice = s[b_index[j]:b_index[-1]]\n            mid_slice = s[a_index[i]:b_index[j]]\n            if a_slice.count('b') == 0 and b_slice.count('a') == 0 and mid_slice.count('b') == 0 and mid_slice.count('a') == 0:", "def solve(s):\n    return max(s.count('a'), s.count('b'))\n\ns = input()\nprint(solve(s))\n\n\nThis program works by counting the number of 'a' and 'b' in the string and returning the maximum of these counts. This is because the maximum length of a beautiful string is the maximum number of 'a's or 'b's, since we can cut the string into three parts where the 1st and 3rd parts contain only 'a's and the 2nd part contains only 'b's.\n\nFor example, if the input string is 'abba', the count of 'a' is 2 and the count of 'b' is 2, so the maximum length is 2. If the input string is 'bab', the count of 'a' is 1 and the count of 'b' is 2, so the maximum length is 2.\n\nNote: This solution assumes that the input string only contains lowercase English letters", "s = input()\nif s == s[::-1]:\n    print(len(s))\nelif s[:len(s)//2]+s[len(s)//2]+s[len(s)//2+1:][::-1] == s[::-1]:\n    print(len(s)//2*2+1)\nelif s[:len(s)//2]+s[len(s)//2:][::-1] == s[::-1]:\n    print(len(s)//2*2)\nelse:\n    print(max(s[:len(s)//2].count('a')+s[len(s)//2+1:].count('b'), s[:len(s)//2].count('b')+s[len(s)//2+1:].count('a'))\n\n\nEXPLANATION:\nThe code first checks if the string is a palindrome. If it is", "def max_beautiful_string(s):\n    a_count = s.count('a')\n    b_count = s.count('b')\n    if a_count == 0 or b_count == 0:\n        return max(a_count, b_count)\n    else:\n        return min(a_count, b_count) * 2\n\ns = input()\nprint(max_beautiful_string(s))\n\n\nThis solution works by counting the number of 'a's and 'b's in the string. If there are no 'a's or 'b's, the maximum length is the count of the smaller letter. If there are 'a's and 'b's, the maximum length is the minimum count of 'a's and 'b's multiplied by 2. This is because you can make 2 segments of equal length containing only 'a's or 'b's.\n\nThis solution has a time complexity of O(n) because it goes through"], "prompt": "\nQUESTION:\nOne day Nikita found the string containing letters \"a\" and \"b\" only. \n\nNikita thinks that string is beautiful if it can be cut into 3 strings (possibly empty) without changing the order of the letters, where the 1-st and the 3-rd one contain only letters \"a\" and the 2-nd contains only letters \"b\".\n\nNikita wants to make the string beautiful by removing some (possibly none) of its characters, but without changing their order. What is the maximum length of the string he can get?\n\n\n-----Input-----\n\nThe first line contains a non-empty string of length not greater than 5 000 containing only lowercase English letters \"a\" and \"b\". \n\n\n-----Output-----\n\nPrint a single integer\u00a0\u2014 the maximum possible size of beautiful string Nikita can get.\n\n\n-----Examples-----\nInput\nabba\n\nOutput\n4\nInput\nbab\n\nOutput\n2\n\n\n-----Note-----\n\nIt the first sample the string is already beautiful.\n\nIn the second sample he needs to delete one of \"b\" to make it beautiful.\nPlease provide the solution as pure code only, without explanations or comments.\n\nANSWER:\n```python\n"}}