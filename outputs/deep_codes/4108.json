{"4108": {"code": ["def solve():\n    S = input()\n    T = input()\n\n    if sorted(S) == sorted(T):\n        print('Yes')\n    else:\n        print('No')\n\nsolve()\n\n\nThis solution works by first sorting both S and T. If S and T are anagrams of each other, their sorted versions will be the same. The solution then checks if the sorted versions of S and T are the same. If they are, it prints 'Yes', otherwise it prints 'No'.\n\nNote that this solution assumes that the operation of swapping two distinct letters is allowed. If the operation of swapping two distinct letters is not allowed, the problem becomes much more complex and cannot be solved in polynomial time.\n\nThis solution runs in O(n log n) time, where n is the length of the strings. This is because the sorting operation takes O(n log n) time.\n\nThis solution uses O(n) space to store the sorted versions of the strings.", "import sys\nS = sys.stdin.readline().rstrip()\nT = sys.stdin.readline().rstrip()\n\ncounts_s = [0]*26\ncounts_t = [0]*26\nfor s, t in zip(S, T):\n    counts_s[ord(s)-97] += 1\n    counts_t[ord(t)-97] += 1\n    if counts_s != counts_t:\n        print('No')\n        exit()\n\ns_to_t = [0]*26\nt_to_s = [0]*26\nfor s, t in zip(S, T):\n    if s_to_t[ord(s)-97] == 0 and t_to_s[ord(t)-97] == 0:\n        s_to_t[ord(s)-97] = ord(t)-97\n        t_to_s", "s = input()\nt = input()\n\n# check if s and t have the same characters\nif sorted(s) != sorted(t):\n    print(\"No\")\nelse:\n    print(\"Yes\")\n\n\nThis solution works by sorting the characters in s and t and comparing them. If the sorted characters are the same, then s and t can be made equal by performing the operation zero or more times, so it prints \"Yes\". Otherwise, they cannot be made equal, so it prints \"No\".", "import sys\nS = sys.stdin.readline().strip()\nT = sys.stdin.readline().strip()\n\ndef solve(S, T):\n    for a, b in zip(S, T):\n        if a != b and [c for c in S if c != a] != [c for c in T if c != b]:\n            return False\n    return True\n\nprint('Yes' if solve(S, T) else 'No')\n\n\nThis solution works by iterating over each character in S and T. If the characters are different, it checks if there is another character in S and T that can be swapped with them to make them equal. If there is, it continues. If there isn't, it returns False. If it manages to iterate over all characters without returning False, it returns True.\n\nThis solution has a time complexity of O(n^2) because of the nested loop. This is acceptable for the maximum input size of", "import sys\n\nS = sys.stdin.readline().strip()\nT = sys.stdin.readline().strip()\n\nS_list = list(S)\nT_list = list(T)\n\nfor i in range(len(S)):\n    if S_list[i] != T_list[i]:\n        for j in range(i+1, len(S)):\n            if S_list[j] == T_list[i]:\n                S_list[j], S_list[i] = S_list[i], S_list[j]\n                break\n        else:\n            S_list[i], S_list[S_list.index(T_list[i])] = S_list[S_list.index(T_list[i])], S_list[i]\n\nprint('Yes' if S_list == T_list else 'No')\n\n\nThis Python program uses a brute-"], "prompt": "\nQUESTION:\nYou are given strings S and T consisting of lowercase English letters.\nYou can perform the following operation on S any number of times:\nOperation: Choose two distinct lowercase English letters c_1 and c_2, then replace every occurrence of c_1 with c_2, and every occurrence of c_2 with c_1.\nDetermine if S and T can be made equal by performing the operation zero or more times.\n\n-----Constraints-----\n - 1 \\leq |S| \\leq 2 \\times 10^5\n - |S| = |T|\n - S and T consists of lowercase English letters.\n\n-----Input-----\nInput is given from Standard Input in the following format:\nS\nT\n\n-----Output-----\nIf S and T can be made equal, print Yes; otherwise, print No.\n\n-----Sample Input-----\nazzel\napple\n\n-----Sample Output-----\nYes\n\nazzel can be changed to apple, as follows:\n - Choose e as c_1 and l as c_2. azzel becomes azzle.\n - Choose z as c_1 and p as c_2. azzle becomes apple.\nPlease provide the solution as pure code only, without explanations or comments.\n\nANSWER:\n```python\n"}}