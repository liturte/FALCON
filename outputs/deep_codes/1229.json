{"1229": {"code": ["from", "import", "from", "from", "def"], "prompt": "\nQUESTION:\nYou have multiset of n strings of the same length, consisting of lowercase English letters. We will say that those strings are easy to remember if for each string there is some position i and some letter c of the English alphabet, such that this string is the only string in the multiset that has letter c in position i.\n\nFor example, a multiset of strings {\"abc\", \"aba\", \"adc\", \"ada\"} are not easy to remember. And multiset {\"abc\", \"ada\", \"ssa\"} is easy to remember because:   the first string is the only string that has character c in position 3;  the second string is the only string that has character d in position 2;  the third string is the only string that has character s in position 2. \n\nYou want to change your multiset a little so that it is easy to remember. For a_{ij} coins, you can change character in the j-th position of the i-th string into any other lowercase letter of the English alphabet. Find what is the minimum sum you should pay in order to make the multiset of strings easy to remember.\n\n\n-----Input-----\n\nThe first line contains two integers n, m (1 \u2264 n, m \u2264 20)\u00a0\u2014 the number of strings in the multiset and the length of the strings respectively. Next n lines contain the strings of the multiset, consisting only of lowercase English letters, each string's length is m.\n\nNext n lines contain m integers each, the i-th of them contains integers a_{i}1, a_{i}2, ..., a_{im} (0 \u2264 a_{ij} \u2264 10^6).\n\n\n-----Output-----\n\nPrint a single number \u2014 the answer to the problem.\n\n\n-----Examples-----\nInput\n4 5\nabcde\nabcde\nabcde\nabcde\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n\nOutput\n3\n\nInput\n4 3\nabc\naba\nadc\nada\n10 10 10\n10 1 10\n10 10 10\n10 1 10\n\nOutput\n2\n\nInput\n3 3\nabc\nada\nssa\n1 1 1\n1 1 1\n1 1 1\n\nOutput\n0\nPlease provide the solution as pure code only, without explanations or comments.\n\nANSWER:\n```python\n"}}