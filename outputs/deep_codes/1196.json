{"1196": {"code": ["QUESTION:\nEach employee of the \"Blake Techologies\" company uses a special messaging app \"Blake Messenger\". All the stuff likes this app and uses it constantly. However, some important futures are missing. For example, many users want to be able to search through the message history. It was already announced that the new feature will appear in the nearest update, when developers faced some troubles that only you may help them to solve.\n\nAll the messages are represented as a strings consisting of only lowercase English letters. In order to reduce the network load strings are represented in the special compressed form. Compression algorithm works as follows: string is represented as a concatenation of n blocks, each block containing only equal characters. One block may be described as a pair (l_{i}, c_{i}), where l_{i} is the length of the i-th block and c_{i} is the corresponding letter. Thus, the string s may be written as the sequence of pairs $\\langle(l_{1}, c_{1}),(l_{2}, c_{2}), \\ldots,(l_{n}, c_{n}) \\rangle$.\n\nYour task is to write the program, that given two compressed string t and s finds all occurrences of s in t. Developers know that there may be many such occurrences, so they only ask you to find the number of them. Note that p is the starting position of some occurrence of s in t if and only if t_{p}t_{p} + 1...t_{p} + |s| - 1 = s, where t_{i} is the i-th character of string t.\n\nNote that the way to represent the string in compressed form may not be unique. For example string \"aaaa\" may be given as $\\langle(4, a) \\rangle$, $\\langle(3, a),(1, a) \\rangle$, $\\langle(2, a),(2, a) \\rangle$...\n\n\n-----Input-----\n\nThe first line of the input contains two integers n and m (1 \u2264 n, m \u2264 200 000)\u00a0\u2014 the number of blocks in the strings t and s, respectively.\n\nThe second line contains the descriptions of n parts of string t in the format \"l_{i}-c_{i}\" (1 \u2264 l_{i} \u2264 1 000 000)\u00a0\u2014 the length of the i-th part and the corresponding lowercase English letter.\n\nThe second line contains the descriptions of m parts of string s in the format \"l_{i}-c_{i}\" (1 \u2264 l_{i} \u2264 1 000 00", "QUESTION:\nEach employee of the \"Blake Techologies\" company uses a special messaging app \"Blake Messenger\". All the stuff likes this app and uses it constantly. However, some important futures are missing. For example, many users want to be able to search through the message history. It was already announced that the new feature will appear in the nearest update, when developers faced some troubles that only you may help them to solve.\n\nAll the messages are represented as a strings consisting of only lowercase English letters. In order to reduce the network load strings are represented in the special compressed form. Compression algorithm works as follows: string is represented as a concatenation of n blocks, each block containing only equal characters. One block may be described as a pair (l_{i}, c_{i}), where l_{i} is the length of the i-th block and c_{i} is the corresponding letter. Thus, the string s may be written as the sequence of pairs $\\langle(l_{1}, c_{1}),(l_{2}, c_{2}), \\ldots,(l_{n}, c_{n}) \\rangle$.\n\nYour task is to write the program, that given two compressed string t and s finds all occurrences of s in t. Developers know that there may be many such occurrences, so they only ask you to find the number of them. Note that p is the starting position of some occurrence of s in t if and only if t_{p}t_{p} + 1...t_{p} + |s| - 1 = s, where t_{i} is the i-th character of string t.\n\nNote that the way to represent the string in compressed form may not be unique. For example string \"aaaa\" may be given as $\\langle(4, a) \\rangle$, $\\langle(3, a),(1, a) \\rangle$, $\\langle(2, a),(2, a) \\rangle$...\n\n\n-----Input-----\n\nThe first line of the input contains two integers n and m (1 \u2264 n, m \u2264 200 000)\u00a0\u2014 the number of blocks in the strings t and s, respectively.\n\nThe second line contains the descriptions of n parts of string t in the format \"l_{i}-c_{i}\" (1 \u2264 l_{i} \u2264 1 000 000)\u00a0\u2014 the length of the i-th part and the corresponding lowercase English letter.\n\nThe second line contains the descriptions of m parts of string s in the format \"l_{i}-c_{i}\" (1 \u2264 l_{i} \u2264 1 000 00", "QUESTION:\nEach employee of the \"Blake Techologies\" company uses a special messaging app \"Blake Messenger\". All the stuff likes this app and uses it constantly. However, some important futures are missing. For example, many users want to be able to search through the message history. It was already announced that the new feature will appear in the nearest update, when developers faced some troubles that only you may help them to solve.\n\nAll the messages are represented as a strings consisting of only lowercase English letters. In order to reduce the network load strings are represented in the special compressed form. Compression algorithm works as follows: string is represented as a concatenation of n blocks, each block containing only equal characters. One block may be described as a pair (l_{i}, c_{i}), where l_{i} is the length of the i-th block and c_{i} is the corresponding letter. Thus, the string s may be written as the sequence of pairs $\\langle(l_{1}, c_{1}),(l_{2}, c_{2}), \\ldots,(l_{n}, c_{n}) \\rangle$.\n\nYour task is to write the program, that given two compressed string t and s finds all occurrences of s in t. Developers know that there may be many such occurrences, so they only ask you to find the number of them. Note that p is the starting position of some occurrence of s in t if and only if t_{p}t_{p} + 1...t_{p} + |s| - 1 = s, where t_{i} is the i-th character of string t.\n\nNote that the way to represent the string in compressed form may not be unique. For example string \"aaaa\" may be given as $\\langle(4, a) \\rangle$, $\\langle(3, a),(1, a) \\rangle$, $\\langle(2, a),(2, a) \\rangle$...\n\n\n-----Input-----\n\nThe first line of the input contains two integers n and m (1 \u2264 n, m \u2264 200 000)\u00a0\u2014 the number of blocks in the strings t and s, respectively.\n\nThe second line contains the descriptions of n parts of string t in the format \"l_{i}-c_{i}\" (1 \u2264 l_{i} \u2264 1 000 000)\u00a0\u2014 the length of the i-th part and the corresponding lowercase English letter.\n\nThe second line contains the descriptions of m parts of string s in the format \"l_{i}-c_{i}\" (1 \u2264 l_{i} \u2264 1 000 00", "QUESTION:\nEach employee of the \"Blake Techologies\" company uses a special messaging app \"Blake Messenger\". All the stuff likes this app and uses it constantly. However, some important futures are missing. For example, many users want to be able to search through the message history. It was already announced that the new feature will appear in the nearest update, when developers faced some troubles that only you may help them to solve.\n\nAll the messages are represented as a strings consisting of only lowercase English letters. In order to reduce the network load strings are represented in the special compressed form. Compression algorithm works as follows: string is represented as a concatenation of n blocks, each block containing only equal characters. One block may be described as a pair (l_{i}, c_{i}), where l_{i} is the length of the i-th block and c_{i} is the corresponding letter. Thus, the string s may be written as the sequence of pairs $\\langle(l_{1}, c_{1}),(l_{2}, c_{2}), \\ldots,(l_{n}, c_{n}) \\rangle$.\n\nYour task is to write the program, that given two compressed string t and s finds all occurrences of s in t. Developers know that there may be many such occurrences, so they only ask you to find the number of them. Note that p is the starting position of some occurrence of s in t if and only if t_{p}t_{p} + 1...t_{p} + |s| - 1 = s, where t_{i} is the i-th character of string t.\n\nNote that the way to represent the string in compressed form may not be unique. For example string \"aaaa\" may be given as $\\langle(4, a) \\rangle$, $\\langle(3, a),(1, a) \\rangle$, $\\langle(2, a),(2, a) \\rangle$...\n\n\n-----Input-----\n\nThe first line of the input contains two integers n and m (1 \u2264 n, m \u2264 200 000)\u00a0\u2014 the number of blocks in the strings t and s, respectively.\n\nThe second line contains the descriptions of n parts of string t in the format \"l_{i}-c_{i}\" (1 \u2264 l_{i} \u2264 1 000 000)\u00a0\u2014 the length of the i-th part and the corresponding lowercase English letter.\n\nThe second line contains the descriptions of m parts of string s in the format \"l_{i}-c_{i}\" (1 \u2264 l_{i} \u2264 1 000 00", "QUESTION:\nEach employee of the \"Blake Techologies\" company uses a special messaging app \"Blake Messenger\". All the stuff likes this app and uses it constantly. However, some important futures are missing. For example, many users want to be able to search through the message history. It was already announced that the new feature will appear in the nearest update, when developers faced some troubles that only you may help them to solve.\n\nAll the messages are represented as a strings consisting of only lowercase English letters. In order to reduce the network load strings are represented in the special compressed form. Compression algorithm works as follows: string is represented as a concatenation of n blocks, each block containing only equal characters. One block may be described as a pair (l_{i}, c_{i}), where l_{i} is the length of the i-th block and c_{i} is the corresponding letter. Thus, the string s may be written as the sequence of pairs $\\langle(l_{1}, c_{1}),(l_{2}, c_{2}), \\ldots,(l_{n}, c_{n}) \\rangle$.\n\nYour task is to write the program, that given two compressed string t and s finds all occurrences of s in t. Developers know that there may be many such occurrences, so they only ask you to find the number of them. Note that p is the starting position of some occurrence of s in t if and only if t_{p}t_{p} + 1...t_{p} + |s| - 1 = s, where t_{i} is the i-th character of string t.\n\nNote that the way to represent the string in compressed form may not be unique. For example string \"aaaa\" may be given as $\\langle(4, a) \\rangle$, $\\langle(3, a),(1, a) \\rangle$, $\\langle(2, a),(2, a) \\rangle$...\n\n\n-----Input-----\n\nThe first line of the input contains two integers n and m (1 \u2264 n, m \u2264 200 000)\u00a0\u2014 the number of blocks in the strings t and s, respectively.\n\nThe second line contains the descriptions of n parts of string t in the format \"l_{i}-c_{i}\" (1 \u2264 l_{i} \u2264 1 000 000)\u00a0\u2014 the length of the i-th part and the corresponding lowercase English letter.\n\nThe second line contains the descriptions of m parts of string s in the format \"l_{i}-c_{i}\" (1 \u2264 l_{i} \u2264 1 000 00"], "prompt": "\nQUESTION:\nEach employee of the \"Blake Techologies\" company uses a special messaging app \"Blake Messenger\". All the stuff likes this app and uses it constantly. However, some important futures are missing. For example, many users want to be able to search through the message history. It was already announced that the new feature will appear in the nearest update, when developers faced some troubles that only you may help them to solve.\n\nAll the messages are represented as a strings consisting of only lowercase English letters. In order to reduce the network load strings are represented in the special compressed form. Compression algorithm works as follows: string is represented as a concatenation of n blocks, each block containing only equal characters. One block may be described as a pair (l_{i}, c_{i}), where l_{i} is the length of the i-th block and c_{i} is the corresponding letter. Thus, the string s may be written as the sequence of pairs $\\langle(l_{1}, c_{1}),(l_{2}, c_{2}), \\ldots,(l_{n}, c_{n}) \\rangle$.\n\nYour task is to write the program, that given two compressed string t and s finds all occurrences of s in t. Developers know that there may be many such occurrences, so they only ask you to find the number of them. Note that p is the starting position of some occurrence of s in t if and only if t_{p}t_{p} + 1...t_{p} + |s| - 1 = s, where t_{i} is the i-th character of string t.\n\nNote that the way to represent the string in compressed form may not be unique. For example string \"aaaa\" may be given as $\\langle(4, a) \\rangle$, $\\langle(3, a),(1, a) \\rangle$, $\\langle(2, a),(2, a) \\rangle$...\n\n\n-----Input-----\n\nThe first line of the input contains two integers n and m (1 \u2264 n, m \u2264 200 000)\u00a0\u2014 the number of blocks in the strings t and s, respectively.\n\nThe second line contains the descriptions of n parts of string t in the format \"l_{i}-c_{i}\" (1 \u2264 l_{i} \u2264 1 000 000)\u00a0\u2014 the length of the i-th part and the corresponding lowercase English letter.\n\nThe second line contains the descriptions of m parts of string s in the format \"l_{i}-c_{i}\" (1 \u2264 l_{i} \u2264 1 000 000)\u00a0\u2014 the length of the i-th part and the corresponding lowercase English letter.\n\n\n-----Output-----\n\nPrint a single integer\u00a0\u2014 the number of occurrences of s in t.\n\n\n-----Examples-----\nInput\n5 3\n3-a 2-b 4-c 3-a 2-c\n2-a 2-b 1-c\n\nOutput\n1\nInput\n6 1\n3-a 6-b 7-a 4-c 8-e 2-a\n3-a\n\nOutput\n6\nInput\n5 5\n1-h 1-e 1-l 1-l 1-o\n1-w 1-o 1-r 1-l 1-d\n\nOutput\n0\n\n\n-----Note-----\n\nIn the first sample, t = \"aaabbccccaaacc\", and string s = \"aabbc\". The only occurrence of string s in string t starts at position p = 2.\n\nIn the second sample, t = \"aaabbbbbbaaaaaaacccceeeeeeeeaa\", and s = \"aaa\". The occurrences of s in t start at positions p = 1, p = 10, p = 11, p = 12, p = 13 and p = 14.\nPlease provide the solution as pure code only, without explanations or comments.\n\nANSWER:\n```python\n"}}