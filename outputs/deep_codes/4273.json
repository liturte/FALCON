{"4273": {"code": ["from collections import Counter\n\ndef solve():\n    n = int(input())\n    names = [input()[0] for _ in range(n)]\n    counter = Counter(names)\n    ans = 1\n    for v in counter.values():\n        ans *= v\n    print(ans)\n\nsolve()\n\n\nThis solution uses the Counter class from the collections module to count the occurrences of each first letter in the names. Then it multiplies the counts together to get the total number of ways to choose three people.\n\nThe time complexity of this solution is O(n), because it iterates over the names once to count the letters and once to multiply the counts together. The space complexity is also", "from collections import Counter\n\nN = int(input())\nS = [input()[0] for _ in range(N)]\n\nc = Counter(S)\n\nans = 0\nfor k, v in c.items():\n    if v >= 3:\n        ans += v * (v-1) * (v-2) // 6\n    if v >= 2:\n        ans += v * (v-1) // 2 * (N - v)\n\nprint(ans)\n\n\nThe solution is based on the principle of combinatorics. \nThe first part of the code counts the number of people with each initial letter. \nThe second part of the code calculates the number of ways to", "from collections import defaultdict\n\ndef solve(n, names):\n    letters = defaultdict(list)\n    for name in names:\n        letters[name[0]].append(name)\n    counts = [len(v) for v in letters.values() if v[0][0] in 'MARCH']\n    counts.sort()\n    if len(counts) < 3:\n        return 0\n    return counts[0] * counts[1] * counts[2]\n\nn = int(input())\nnames = [input() for _ in range(n)]\nprint(solve(n, names))\n\n\nExplanation:\nThe code first creates a dictionary where the keys are the first letter of", "from collections import Counter\n\nN = int(input())\nS = [input()[0] for _ in range(N)]\n\nc = Counter(S)\n\nans = 0\nfor v in c.values():\n    if v >= 3:\n        ans += v * (v-1) * (v-2) // 6\n    if v >= 2:\n        ans += v * (v-1) // 2 * (N - v)\n\nprint(ans)\n\nThis program uses the `Counter` class from the `collections` module to count the number of occurrences of each initial letter in the list of names. It then calculates the number of ways to choose three people from each group", "from collections import defaultdict\n\nN = int(input())\nS = [input()[0] for _ in range(N)]\ncount = defaultdict(int)\n\nfor s in S:\n    count[s] += 1\n\nans = 0\nfor v in count.values():\n    ans += v * (v-1) * (v-2) // 6\nprint(ans)\n\n\nExplanation:\nThis problem can be solved by using the concept of combinations. \n\nWe first count the number of names that start with each letter. Then we use the formula for combinations to calculate the number of ways to choose three people from each group. \n\nThe formula for combinations is nC3 = n * ("], "prompt": "\nQUESTION:\nThere are N people. The name of the i-th person is S_i.\nWe would like to choose three people so that the following conditions are met:\n - The name of every chosen person begins with M, A, R, C or H.\n - There are no multiple people whose names begin with the same letter.\nHow many such ways are there to choose three people, disregarding order?\nNote that the answer may not fit into a 32-bit integer type.\n\n-----Constraints-----\n - 1 \\leq N \\leq 10^5\n - S_i consists of uppercase English letters.\n - 1 \\leq |S_i| \\leq 10\n - S_i \\neq S_j (i \\neq j)\n\n-----Input-----\nInput is given from Standard Input in the following format:\nN\nS_1\n:\nS_N\n\n-----Output-----\nIf there are x ways to choose three people so that the given conditions are met, print x.\n\n-----Sample Input-----\n5\nMASHIKE\nRUMOI\nOBIRA\nHABORO\nHOROKANAI\n\n-----Sample Output-----\n2\n\nWe can choose three people with the following names:\n - MASHIKE, RUMOI, HABORO\n - MASHIKE, RUMOI, HOROKANAI\nThus, we have two ways.\nPlease provide the solution as pure code only, without explanations or comments.\n\nANSWER:\n```python\n"}}