{"2014": {"code": ["n, k = map(int, input().split())\nperms = [list(map(int, input().split())) for _ in range(k)]\n\ndef longest_common_subsequence(arr):\n    n = len(arr[0])\n    m = [[0]*(n+1) for _ in range(len(arr)+1)]\n    \n    for i in range(len(arr)+1):\n        for j in range(n+1):\n            if i == 0 or j == 0:\n                m[i][j] = 0\n            elif arr[i-1] == arr[0][j-1]:\n                m[i][j] = m[i-1][j-1] + 1\n            else:\n                m[i][j] = max(m[i-1][j], m[i][j-1])", "def longest_common_subsequence(x, y):\n    m = len(x)\n    n = len(y)\n    dp = [[0] * (n + 1) for _ in range(m + 1)]\n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            if x[i - 1] == y[j - 1]:\n                dp[i][j] = dp[i - 1][j - 1] + 1\n            else:\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n    return dp[m][n]\n\nn, k = map(int, input().split())\nperms = [list(map(int, input().split())) for _ in range(k", "def lcs(x, y):\n    m = len(x)\n    n = len(y)\n    dp = [[0] * (n+1) for _ in range(m+1)]\n    for i in range(m+1):\n        for j in range(n+1):\n            if i == 0 or j == 0:\n                dp[i][j] = 0\n            elif x[i-1] == y[j-1]:\n                dp[i][j] = dp[i-1][j-1] + 1\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    return dp[m][n]\n\nn, k = map(int, input().split())\nperms = [input().split() for _ in range", "def longest_common_subsequence(a, b):\n    lengths = [[0 for j in range(len(b)+1)] for i in range(len(a)+1)]\n    for i in range(len(a)-1, -1, -1):\n        for j in range(len(b)-1, -1, -1):\n            if a[i] == b[j]:\n                lengths[i][j] = lengths[i+1][j+1]+1\n            else:\n                lengths[i][j] = max(lengths[i+1][j], lengths[i][j+1])\n    return lengths[0][0]\n\nn, k = map(int, input().split())\nperms = [list(map(int, input().split())) for _ in range(k)]\n\nlcs = [longest_common", "def longest_common_subsequence(s1, s2):\n    m, n = len(s1), len(s2)\n    dp = [[0] * (n + 1) for _ in range(m + 1)]\n    for i in range(m - 1, -1, -1):\n        for j in range(n - 1, -1, -1):\n            if s1[i] == s2[j]:\n                dp[i][j] = dp[i + 1][j + 1] + 1\n            else:\n                dp[i][j] = max(dp[i + 1][j], dp[i][j + 1])\n    return dp[0][0]\n\nn, k = map(int, input().split())\nperms = [list(map(int, input().split())) for _"], "prompt": "\nQUESTION:\nGargari got bored to play with the bishops and now, after solving the problem about them, he is trying to do math homework. In a math book he have found k permutations. Each of them consists of numbers 1, 2, ..., n in some order. Now he should find the length of the longest common subsequence of these permutations. Can you help Gargari?\n\nYou can read about longest common subsequence there: https://en.wikipedia.org/wiki/Longest_common_subsequence_problem\n\n\n-----Input-----\n\nThe first line contains two integers n and k (1 \u2264 n \u2264 1000;\u00a02 \u2264 k \u2264 5). Each of the next k lines contains integers 1, 2, ..., n in some order \u2014 description of the current permutation.\n\n\n-----Output-----\n\nPrint the length of the longest common subsequence.\n\n\n-----Examples-----\nInput\n4 3\n1 4 2 3\n4 1 2 3\n1 2 4 3\n\nOutput\n3\n\n\n\n-----Note-----\n\nThe answer for the first test sample is subsequence [1, 2, 3].\nPlease provide the solution as pure code only, without explanations or comments.\n\nANSWER:\n```python\n"}}