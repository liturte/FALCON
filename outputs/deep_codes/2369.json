{"2369": {"code": ["import sys\nMOD = 10**9+7\nN, K = map(int, sys.stdin.readline().split())\nA = sorted(map(int, sys.stdin.readline().split()))\n\ndef solve():\n    res = 0\n    for i in range(K):\n        res = (res + A[N-1-i] - A[i]) % MOD\n    return res\n\nprint(solve())\n\n\nEXPLANATION:\nThe solution is based on the observation that the maximum difference between the maximum and minimum numbers in the set is either the maximum number itself or the maximum number minus the minimum number.\n\nTherefore, to minimize the maximum difference, we should choose the smallest numbers", "from sys import stdin\nfrom itertools import combinations\n\nN, K = map(int, stdin.readline().split())\nA = list(map(int, stdin.readline().split()))\nMOD = 10**9+7\n\nA.sort()\n\nresult = 0\nfor comb in combinations(A, K):\n    result += max(comb) - min(comb)\n    result %= MOD\n\nprint(result)\n\nThis code works by first sorting the list of integers A. Then it iterates over all combinations of K elements from A, calculates the difference between the maximum and minimum of each combination, adds it to a running total, and finally prints the total modulo MOD.", "from collections import Counter\nfrom itertools import combinations\nfrom sys import stdin\n\nMOD = 10**9+7\n\ndef solve(n, k, a):\n    c = Counter(a)\n    keys = sorted(c.keys())\n    dp = [0]*(k+1)\n    dp[0] = 1\n    for key in keys:\n        for i in range(k, key-1, -1):\n            dp[i] = (dp[i] + dp[i-1]) % MOD\n    ans = 0\n    for key in keys:\n        ans = (ans + key*((dp[k]-dp[k-c[key]])", "import sys\nfrom collections import defaultdict\nfrom math import comb\n\nMOD = 10**9+7\nN, K = map(int, sys.stdin.readline().split())\nA = list(map(int, sys.stdin.readline().split()))\n\nA.sort()\ndiffs = defaultdict(int)\nfor i in range(1, N):\n    diffs[A[i]-A[i-1]] += 1\n\nanswer = 0\nfor diff in diffs:\n    answer = (answer + (comb(diffs[diff], 2) * (diff**2)) % MOD) % MOD\n\nprint(answer)\n\n\nExplanation:\nThis solution", "from sys import stdin\nfrom collections import Counter\n\nMOD = 10**9+7\n\nN, K = map(int, stdin.readline().split())\nA = list(map(int, stdin.readline().split()))\n\nA.sort()\n\nc = Counter(A)\nkeys = list(c.keys())\n\ndp = [[0]*(K+1) for _ in range(len(keys)+1)]\ndp[0][0] = 1\n\nfor i in range(len(keys)):\n    for k in range(K+1):\n        dp[i+1][k] = (dp[i+1][k] + dp[i]["], "prompt": "\nQUESTION:\nFor a finite set of integers X, let f(X)=\\max X - \\min X.\nGiven are N integers A_1,...,A_N.\nWe will choose K of them and let S be the set of the integers chosen. If we distinguish elements with different indices even when their values are the same, there are {}_N C_K ways to make this choice. Find the sum of f(S) over all those ways.\nSince the answer can be enormous, print it \\bmod (10^9+7).\n\n-----Constraints-----\n - 1 \\leq N \\leq 10^5\n - 1 \\leq K \\leq N\n - |A_i| \\leq 10^9\n\n-----Input-----\nInput is given from Standard Input in the following format:\nN K\nA_1 ... A_N\n\n-----Output-----\nPrint the answer \\bmod (10^9+7).\n\n-----Sample Input-----\n4 2\n1 1 3 4\n\n-----Sample Output-----\n11\n\nThere are six ways to choose S: \\{1,1\\},\\{1,3\\},\\{1,4\\},\\{1,3\\},\\{1,4\\}, \\{3,4\\} (we distinguish the two 1s). The value of f(S) for these choices are 0,2,3,2,3,1, respectively, for the total of 11.\nPlease provide the solution as pure code only, without explanations or comments.\n\nANSWER:\n```python\n"}}