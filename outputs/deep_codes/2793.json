{"2793": {"code": ["from queue import PriorityQueue\n\ndef min_cut(n,", "import heapq\n\ndef min_cut(n, m, s", "import heapq\n\ndef read_graph():\n    n, m", "import heapq\n\ndef read_graph():\n    n, m", "import sys\nfrom heapq import heappop, heappush"], "prompt": "\nQUESTION:\nGiven a directed weighted graph and two vertices $s$, $t$, the goal is to find a subset $U$ of the vertices such that $s \\in U$, $t \\not\\in U$, and the weight of edges from $U$ to $\\overline{U}$ is minimized.\n\n-----Input-----\nThe first line of input contains four non-negative integers, $2 \\le n \\le 500$, $0 \\le m \\le 10000$, $0 \\le s \\le n-1$ and $0 \\le t \\le n-1$, separated by single spaces, where $n$ is the numbers of nodes in the graph, $m$ is the number of edges, $s$ is the source and $t$ is the sink ($s \\ne t$). Nodes are numbered from $0$ to $n-1$. Then follow $m$ lines, each line consisting of three (space-separated) integers $u$, $v$ and $w$ indicating that there is an edge from $u$ to $v$ in the graph with weight $1 \\le w \\le 10^8$.\n\n-----Output-----\nOutput should begin with a line containing an integer $k$, giving the size of $U$. Then follow $k$ lines giving the vertices in $U$, one per line. If there are multiple choices for $U$ any one will be accepted.\n\nYou may assume that there is a cut such that the total weight of edges from $U$ to $\\overline{U}$ is less than $2^{31}$.\n\n-----Examples-----\nSample Input 1:\n4 5 0 3\n0 1 10\n1 2 1\n1 3 1\n0 2 1\n2 3 10\nSample Output 1:\n2\n1\n0\n\nSample Input 2:\n2 1 0 1\n0 1 100000\nSample Output 2:\n1\n0\nPlease provide the solution as pure code only, without explanations or comments.\n\nANSWER:\n```python\n"}}