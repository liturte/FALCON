{"2271": {"code": ["from collections import defaultdict\n\ndef solve(n, edges):\n    graph = defaultdict(list)\n    for a, b in edges:\n        graph[a].append(b)\n        graph[b].append(a)\n\n    lifelines = 0\n    for a, neighbors in graph.items():\n        lifelines", "n = int(input())\ng = [[] for _ in range(n+1)]\nfor _ in range(n-1):\n    a, b = map(int, input().split())\n    g[a].append(b)\n    g[b].append(a)\nprint(sum(len(g[i", "import sys\nfrom collections import defaultdict\n\nn = int(sys.stdin.readline())\nedges = defaultdict(list)\nfor _ in range(n - 1):\n    a, b = map(int, sys.stdin.readline().split())\n    edges[a].append(b)", "n = int(input())\nedges = [list(map(int, input().split())) for _ in range(n-1)]\n\n# Create adjacency list\nadj_list = [[] for _ in range(n+1)]\nfor u, v in edges:\n    adj_list[u].append(v)", "import sys\nfrom collections import defaultdict\n\nn = int(sys.stdin.readline())\ngraph = defaultdict(list)\n\nfor _ in range(n - 1):\n    a, b = map(int, sys.stdin.readline().split())\n    graph[a].append(b)"], "prompt": "\nQUESTION:\nHeidi has finally found the mythical Tree of Life \u2013 a legendary combinatorial structure which is said to contain a prophecy crucially needed to defeat the undead armies.\n\nOn the surface, the Tree of Life is just a regular undirected tree well-known from computer science. This means that it is a collection of n points (called vertices), some of which are connected using n - 1 line segments (edges) so that each pair of vertices is connected by a path (a sequence of one or more edges).\n\nTo decipher the prophecy, Heidi needs to perform a number of steps. The first is counting the number of lifelines in the tree \u2013 these are paths of length 2, i.e., consisting of two edges. Help her!\n\n\n-----Input-----\n\nThe first line of the input contains a single integer n \u2013 the number of vertices in the tree (1 \u2264 n \u2264 10000). The vertices are labeled with the numbers from 1 to n. Then n - 1 lines follow, each describing one edge using two space-separated numbers a\u2002b \u2013 the labels of the vertices connected by the edge (1 \u2264 a < b \u2264 n). It is guaranteed that the input represents a tree.\n\n\n-----Output-----\n\nPrint one integer \u2013 the number of lifelines in the tree.\n\n\n-----Examples-----\nInput\n4\n1 2\n1 3\n1 4\n\nOutput\n3\nInput\n5\n1 2\n2 3\n3 4\n3 5\n\nOutput\n4\n\n\n-----Note-----\n\nIn the second sample, there are four lifelines: paths between vertices 1 and 3, 2 and 4, 2 and 5, and 4 and 5.\nPlease provide the solution as pure code only, without explanations or comments.\n\nANSWER:\n```python\n"}}