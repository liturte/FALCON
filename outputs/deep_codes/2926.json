{"2926": {"code": ["QUESTION:\nWhen reading programming problems, one can often get some hints regarding the topic of the problem by skimming the problem statement for certain words. If, for example, the word \u201cvertex\u201d or \u201cedge\u201d appears, the problem is almost certainly a graph problem, while the words \u201cwords\u201d or \u201cletters\u201d suggest that the problem is about strings.\n\nYour task is to implement a simple program that attempts to classify a problem according to one of $N$ categories. Each category has an associated set of words, which, if they appear as words in a statement, suggest the problem belongs to this category. When classifying a statement, the program should suggest those categories which have the highest number of occurences of their associated words. Note that words that are part of other words do not count. For example, the word statement should not count as an occurance for the word ate.\n\nIn the above example, we suggested that the category graph may have the associated words vertex and edge and the category string could have the associated words words and letters. Then, if there were $3$ occurances each of the words vertex and edge, the number of matches for the category graph would be $6$. If the statement contained $14$ occurances of words and $4$ of letters, the number of matches for the category string would be $18$. Since there are more matches for the second category, the program should suggest it.\n\nIf there are multiple categories with the same number of matches, your program should suggest all of them.\n\n-----Input-----\nThe first line of input contains the number of categories $1 \\le N \\le 10$.\n\nThe next $N$ lines each contain a description of a category. The description starts with the name of the category \u2013 a single word. Then, an integer $1 \\le W \\le 10$ follows \u2013 the number of words associated with this category. This is followed by those $W$ words, separated by spaces. No two words within a category are the same, and no two categories have the same name.\n\nThis is followed by a number of lines describing the statement of the problem. Each line contains a list of space-separated words.\n\nEvery word in the input will consist solely of at most $30$ lower-case letters a-z. The statement consists of between $1$ and $10000$ words.\n\n-----Output-----\nFor each suggested category, output the name of the category on a single line, in lexicographical order.\n\n-----Examples-----\nSample Input:\n4\ndatastructure 3 query range sum\ngeometry 3 euclid range vertex\ngraph 3 query vertex hamiltonian\nmath 3 hamiltonian sum euclid\n1", "QUESTION:\nWhen reading programming problems, one can often get some hints regarding the topic of the problem by skimming the problem statement for certain words. If, for example, the word \u201cvertex\u201d or \u201cedge\u201d appears, the problem is almost certainly a graph problem, while the words \u201cwords\u201d or \u201cletters\u201d suggest that the problem is about strings.\n\nYour task is to implement a simple program that attempts to classify a problem according to one of $N$ categories. Each category has an associated set of words, which, if they appear as words in a statement, suggest the problem belongs to this category. When classifying a statement, the program should suggest those categories which have the highest number of occurences of their associated words. Note that words that are part of other words do not count. For example, the word statement should not count as an occurance for the word ate.\n\nIn the above example, we suggested that the category graph may have the associated words vertex and edge and the category string could have the associated words words and letters. Then, if there were $3$ occurances each of the words vertex and edge, the number of matches for the category graph would be $6$. If the statement contained $14$ occurances of words and $4$ of letters, the number of matches for the category string would be $18$. Since there are more matches for the second category, the program should suggest it.\n\nIf there are multiple categories with the same number of matches, your program should suggest all of them.\n\n-----Input-----\nThe first line of input contains the number of categories $1 \\le N \\le 10$.\n\nThe next $N$ lines each contain a description of a category. The description starts with the name of the category \u2013 a single word. Then, an integer $1 \\le W \\le 10$ follows \u2013 the number of words associated with this category. This is followed by those $W$ words, separated by spaces. No two words within a category are the same, and no two categories have the same name.\n\nThis is followed by a number of lines describing the statement of the problem. Each line contains a list of space-separated words.\n\nEvery word in the input will consist solely of at most $30$ lower-case letters a-z. The statement consists of between $1$ and $10000$ words.\n\n-----Output-----\nFor each suggested category, output the name of the category on a single line, in lexicographical order.\n\n-----Examples-----\nSample Input:\n4\ndatastructure 3 query range sum\ngeometry 3 euclid range vertex\ngraph 3 query vertex hamiltonian\nmath 3 hamiltonian sum euclid\n1", "QUESTION:\nWhen reading programming problems, one can often get some hints regarding the topic of the problem by skimming the problem statement for certain words. If, for example, the word \u201cvertex\u201d or \u201cedge\u201d appears, the problem is almost certainly a graph problem, while the words \u201cwords\u201d or \u201cletters\u201d suggest that the problem is about strings.\n\nYour task is to implement a simple program that attempts to classify a problem according to one of $N$ categories. Each category has an associated set of words, which, if they appear as words in a statement, suggest the problem belongs to this category. When classifying a statement, the program should suggest those categories which have the highest number of occurences of their associated words. Note that words that are part of other words do not count. For example, the word statement should not count as an occurance for the word ate.\n\nIn the above example, we suggested that the category graph may have the associated words vertex and edge and the category string could have the associated words words and letters. Then, if there were $3$ occurances each of the words vertex and edge, the number of matches for the category graph would be $6$. If the statement contained $14$ occurances of words and $4$ of letters, the number of matches for the category string would be $18$. Since there are more matches for the second category, the program should suggest it.\n\nIf there are multiple categories with the same number of matches, your program should suggest all of them.\n\n-----Input-----\nThe first line of input contains the number of categories $1 \\le N \\le 10$.\n\nThe next $N$ lines each contain a description of a category. The description starts with the name of the category \u2013 a single word. Then, an integer $1 \\le W \\le 10$ follows \u2013 the number of words associated with this category. This is followed by those $W$ words, separated by spaces. No two words within a category are the same, and no two categories have the same name.\n\nThis is followed by a number of lines describing the statement of the problem. Each line contains a list of space-separated words.\n\nEvery word in the input will consist solely of at most $30$ lower-case letters a-z. The statement consists of between $1$ and $10000$ words.\n\n-----Output-----\nFor each suggested category, output the name of the category on a single line, in lexicographical order.\n\n-----Examples-----\nSample Input:\n4\ndatastructure 3 query range sum\ngeometry 3 euclid range vertex\ngraph 3 query vertex hamiltonian\nmath 3 hamiltonian sum euclid\n5", "QUESTION:\nWhen reading programming problems, one can often get some hints regarding the topic of the problem by skimming the problem statement for certain words. If, for example, the word \u201cvertex\u201d or \u201cedge\u201d appears, the problem is almost certainly a graph problem, while the words \u201cwords\u201d or \u201cletters\u201d suggest that the problem is about strings.\n\nYour task is to implement a simple program that attempts to classify a problem according to one of $N$ categories. Each category has an associated set of words, which, if they appear as words in a statement, suggest the problem belongs to this category. When classifying a statement, the program should suggest those categories which have the highest number of occurences of their associated words. Note that words that are part of other words do not count. For example, the word statement should not count as an occurance for the word ate.\n\nIn the above example, we suggested that the category graph may have the associated words vertex and edge and the category string could have the associated words words and letters. Then, if there were $3$ occurances each of the words vertex and edge, the number of matches for the category graph would be $6$. If the statement contained $14$ occurances of words and $4$ of letters, the number of matches for the category string would be $18$. Since there are more matches for the second category, the program should suggest it.\n\nIf there are multiple categories with the same number of matches, your program should suggest all of them.\n\n-----Input-----\nThe first line of input contains the number of categories $1 \\le N \\le 10$.\n\nThe next $N$ lines each contain a description of a category. The description starts with the name of the category \u2013 a single word. Then, an integer $1 \\le W \\le 10$ follows \u2013 the number of words associated with this category. This is followed by those $W$ words, separated by spaces. No two words within a category are the same, and no two categories have the same name.\n\nThis is followed by a number of lines describing the statement of the problem. Each line contains a list of space-separated words.\n\nEvery word in the input will consist solely of at most $30$ lower-case letters a-z. The statement consists of between $1$ and $10000$ words.\n\n-----Output-----\nFor each suggested category, output the name of the category on a single line, in lexicographical order.\n\n-----Examples-----\nSample Input:\n4\ndatastructure 3 query range sum\ngeometry 3 euclid range vertex\ngraph 3 query vertex hamiltonian\nmath 3 hamiltonian sum euclid\n1", "QUESTION:\nWhen reading programming problems, one can often get some hints regarding the topic of the problem by skimming the problem statement for certain words. If, for example, the word \u201cvertex\u201d or \u201cedge\u201d appears, the problem is almost certainly a graph problem, while the words \u201cwords\u201d or \u201cletters\u201d suggest that the problem is about strings.\n\nYour task is to implement a simple program that attempts to classify a problem according to one of $N$ categories. Each category has an associated set of words, which, if they appear as words in a statement, suggest the problem belongs to this category. When classifying a statement, the program should suggest those categories which have the highest number of occurences of their associated words. Note that words that are part of other words do not count. For example, the word statement should not count as an occurance for the word ate.\n\nIn the above example, we suggested that the category graph may have the associated words vertex and edge and the category string could have the associated words words and letters. Then, if there were $3$ occurances each of the words vertex and edge, the number of matches for the category graph would be $6$. If the statement contained $14$ occurances of words and $4$ of letters, the number of matches for the category string would be $18$. Since there are more matches for the second category, the program should suggest it.\n\nIf there are multiple categories with the same number of matches, your program should suggest all of them.\n\n-----Input-----\nThe first line of input contains the number of categories $1 \\le N \\le 10$.\n\nThe next $N$ lines each contain a description of a category. The description starts with the name of the category \u2013 a single word. Then, an integer $1 \\le W \\le 10$ follows \u2013 the number of words associated with this category. This is followed by those $W$ words, separated by spaces. No two words within a category are the same, and no two categories have the same name.\n\nThis is followed by a number of lines describing the statement of the problem. Each line contains a list of space-separated words.\n\nEvery word in the input will consist solely of at most $30$ lower-case letters a-z. The statement consists of between $1$ and $10000$ words.\n\n-----Output-----\nFor each suggested category, output the name of the category on a single line, in lexicographical order.\n\n-----Examples-----\nSample Input:\n4\ndatastructure 3 query range sum\ngeometry 3 euclid range vertex\ngraph 3 query vertex hamiltonian\nmath 3 hamiltonian sum euclid\n1"], "prompt": "\nQUESTION:\nWhen reading programming problems, one can often get some hints regarding the topic of the problem by skimming the problem statement for certain words. If, for example, the word \u201cvertex\u201d or \u201cedge\u201d appears, the problem is almost certainly a graph problem, while the words \u201cwords\u201d or \u201cletters\u201d suggest that the problem is about strings.\n\nYour task is to implement a simple program that attempts to classify a problem according to one of $N$ categories. Each category has an associated set of words, which, if they appear as words in a statement, suggest the problem belongs to this category. When classifying a statement, the program should suggest those categories which have the highest number of occurences of their associated words. Note that words that are part of other words do not count. For example, the word statement should not count as an occurance for the word ate.\n\nIn the above example, we suggested that the category graph may have the associated words vertex and edge and the category string could have the associated words words and letters. Then, if there were $3$ occurances each of the words vertex and edge, the number of matches for the category graph would be $6$. If the statement contained $14$ occurances of words and $4$ of letters, the number of matches for the category string would be $18$. Since there are more matches for the second category, the program should suggest it.\n\nIf there are multiple categories with the same number of matches, your program should suggest all of them.\n\n-----Input-----\nThe first line of input contains the number of categories $1 \\le N \\le 10$.\n\nThe next $N$ lines each contain a description of a category. The description starts with the name of the category \u2013 a single word. Then, an integer $1 \\le W \\le 10$ follows \u2013 the number of words associated with this category. This is followed by those $W$ words, separated by spaces. No two words within a category are the same, and no two categories have the same name.\n\nThis is followed by a number of lines describing the statement of the problem. Each line contains a list of space-separated words.\n\nEvery word in the input will consist solely of at most $30$ lower-case letters a-z. The statement consists of between $1$ and $10000$ words.\n\n-----Output-----\nFor each suggested category, output the name of the category on a single line, in lexicographical order.\n\n-----Examples-----\nSample Input:\n4\ndatastructure 3 query range sum\ngeometry 3 euclid range vertex\ngraph 3 query vertex hamiltonian\nmath 3 hamiltonian sum euclid\nconsider the hamiltonian graph where each vertex corresponds\nto an linear equation we can solve these using the euclid\nalgorithm now you will receive a query corresponding to a\nrange of vertices your task is to compute the sum of the\nminimum solution of those vertices\nSample Output:\ndatastructure\ngeometry\ngraph\nmath\nPlease provide the solution as pure code only, without explanations or comments.\n\nANSWER:\n```python\n"}}