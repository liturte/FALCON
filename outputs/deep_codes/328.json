{"328": {"code": ["import sys\nfrom scipy.spatial import ConvexHull\n\ndef solve():\n    n = int(sys.stdin.readline())\n    points = [list(map(int, sys.stdin.readline().split())) for _ in range(n)]\n    hull = ConvexHull(points)\n    return abs(min(points[i][0] for i in hull.vertices) - max(points[i][0] for i in hull.vertices))\n\nprint(solve())\n\n\nIn this code, we use the ConvexHull function from the scipy.spatial module to calculate the convex hull of the given points. The convex hull is the smallest convex polygon that contains all the given points. The vertices of this polygon form the vertices of the minimum area rectangle that can cover all the given points.", "import sys\n\ndef min_triangle_side():\n    n = int(sys.stdin.readline().strip())\n    points = []\n    for _ in range(n):\n        x, y = map(int, sys.stdin.readline().strip().split())\n        points.append((x, y))\n\n    min_x = min(x for x, y in points)\n    max_x = max(x for x, y in points)\n    min_y = min(y for x, y in points)\n    max_y = max(y for x, y in points)\n\n    return max(max_x - min_x, max_y - min_y)\n\nprint(min_triangle_side())\n\n\nThis code reads the input and computes the minimum and maximum x and y coordinates. The length of", "import sys\n\ndef main():\n    n = int(sys.stdin.readline())\n    points = [list(map(int, sys.stdin.readline().split())) for _ in range(n)]\n    x_coords = [point[0] for point in points]\n    y_coords = [point[1] for point in points]\n    min_x = min(x_coords)\n    max_x = max(x_coords)\n    min_y = min(y_coords)\n    max_y = max(y_coords)\n    print(max(max_x - min_x, max_y - min_y))\n\nif __name__ == \"__main__\":\n    main()\n\n\nThis code reads in the number of points and their coordinates. It then calculates the", "import sys\nimport math\n\ndef solve():\n    n = int(input())\n    points = [list(map(int, input().split())) for _ in range(n)]\n    x_coords = [point[0] for point in points]\n    y_coords = [point[1] for point in points]\n    min_x, max_x = min(x_coords), max(x_coords)\n    min_y, max_y = min(y_coords), max(y_coords)\n    return max(max_x - min_x, max_y - min_y)\n\nprint(solve())\n\n\nThis solution works by first reading in the points and separating the x and y coordinates into two lists. It then finds the minimum and maximum x and y coordinates. The minimum length of the shorter side", "import sys\nn = int(sys.stdin.readline())\npoints = [list(map(int, sys.stdin.readline().split())) for _ in range(n)]\nmin_x, min_y = min(points, key=lambda x: x[0]), min(points, key=lambda x: x[1])\nmax_x, max_y = max(points, key=lambda x: x[0]), max(points, key=lambda x: x[1])\nprint(max(max_x - min_x, max_y - min_y))\n\n\nThis solution works by first finding the minimum and maximum x and y coordinates. The minimum x and y coordinates define the lower left corner of the triangle, while the maximum x and y coordinates define the upper right corner. The length of the shorter side of the triangle is then the"], "prompt": "\nQUESTION:\nThere are $n$ points on the plane, $(x_1,y_1), (x_2,y_2), \\ldots, (x_n,y_n)$.\n\nYou need to place an isosceles triangle with two sides on the coordinate axis to cover all points (a point is covered if it lies inside the triangle or on the side of the triangle). Calculate the minimum length of the shorter side of the triangle.\n\n\n-----Input-----\n\nFirst line contains one integer $n$ ($1 \\leq n \\leq 10^5$).\n\nEach of the next $n$ lines contains two integers $x_i$ and $y_i$ ($1 \\leq x_i,y_i \\leq 10^9$).\n\n\n-----Output-----\n\nPrint the minimum length of the shorter side of the triangle. It can be proved that it's always an integer.\n\n\n-----Examples-----\nInput\n3\n1 1\n1 2\n2 1\n\nOutput\n3\nInput\n4\n1 1\n1 2\n2 1\n2 2\n\nOutput\n4\n\n\n-----Note-----\n\nIllustration for the first example: [Image]\n\nIllustration for the second example: [Image]\nPlease provide the solution as pure code only, without explanations or comments.\n\nANSWER:\n```python\n"}}