{"335": {"code": ["def solve(n):\n    if n % 3 == 0:\n        return (n // 3 - 1, n // 3, n // 3 + 1)\n    else:\n        return (n // 3, n // 3, n - (n // 3)*3)\n\nn = int(input())\nprint(*solve(n))\n\n\nEXPLANATION:\nThe code first checks if the input number is divisible by 3. If it is, it returns a tuple of three numbers where each number is `n // 3` and the last number is `n // 3 + 1`. If the input number is not divisible by 3, it returns a tuple where the first two numbers are `n // 3` and the last number is `n - (n // 3)*3`. The `*` operator is used to unpack the tuple into the print function.", "def solve(n):\n    if n % 3 == 0:\n        return n // 3, n // 3, n // 3\n    elif n % 3 == 1:\n        return n // 3, n // 3 + 1, n // 3 - 1\n    else:\n        return n // 3 + 1, n // 3, n // 3 - 1\n\nn = int(input())\nprint(*solve(n))\n\n\nExplanation:\nThe function `solve` takes an integer `n` as input and returns three integers `a`, `b`, and `c` such that `a + b + c = n` and `a`, `b`, and `c` are not multiples of 3. The function works by dividing `n` by 3 and then adjusting the results based on the remainder of `n` divided by 3.\n\nIn the case where `n` is divisible by 3, `a`, `b`, and `c` are all equal to `n // 3`", "def split_number(n):\n    if n % 3 == 0:\n        return n//3, n//3, n//3\n    elif n % 3 == 1:\n        return n//3, n//3+1, n//3-1\n    else:\n        return n//3+1, n//3+1, n//3-1\n\nn = int(input())\na, b, c = split_number(n)\nprint(a, b, c)\n\n\nEXPLANATION:\nThe problem can be solved by using the modulus operator to determine the remainder of the number when divided by 3. If the remainder is 0, all the numbers are the same. If the remainder is 1, one number is one more than the others and one number is one less. If the remainder is 2, one number is one more than the others and one number is one less. This can be implemented in the function `split_number`. The inputs are read from the standard input and the results are printed to the standard output.\n\nThe function `split_number` takes", "n = int(input())\nif n % 3 == 0:\n    print(n//3, n//3, n//3)\nelif n % 3 == 1:\n    print(n//3, n//3+1, n//3-1)\nelse:\n    print(n//3+1, n//3, n//3-1)\n\n\nEXPLANATION:\nThe problem is asking to split a given number into three numbers where the sum is equal to the given number and none of them is a multiple of 3. \n\nIf the given number is divisible by 3, all the three numbers will be equal to the given number divided by 3. \n\nIf the given number is not divisible by 3, we can consider three cases:\n1. If the remainder of the given number divided by 3 is 1, we can split it into three numbers where two of them are 1 more than the third one and the third one is 1 less than the other two.\n2. If the remainder of the given number divided by 3 is 2, we", "n = int(input())\nif n % 3 == 0:\n    print(n//3-1, n//3-1, n//3+1)\nelse:\n    print(n//3, n//3, n//3)\n\n\nEXPLANATION:\nThe question is asking to split a given number into three parts such that the sum of these three parts is equal to the given number and none of them is a multiple of 3.\n\nIf the given number is a multiple of 3, we can subtract 1 from the quotient and add 1 to the result. This way, we can ensure that none of the numbers is a multiple of 3.\n\nIf the given number is not a multiple of 3, we can just divide the given number by 3 to get the quotient. All three parts will be equal to the quotient and they will not be a multiple of 3.\n\nThis is the solution in Python code.\n\nThis solution assumes that the input number is always greater than or equal to 3 and less than or equal to 10^9.\n\nPlease"], "prompt": "\nQUESTION:\nLittle C loves number \u00ab3\u00bb very much. He loves all things about it.\n\nNow he has a positive integer $n$. He wants to split $n$ into $3$ positive integers $a,b,c$, such that $a+b+c=n$ and none of the $3$ integers is a multiple of $3$. Help him to find a solution.\n\n\n-----Input-----\n\nA single line containing one integer $n$ ($3 \\leq n \\leq 10^9$) \u2014 the integer Little C has.\n\n\n-----Output-----\n\nPrint $3$ positive integers $a,b,c$ in a single line, such that $a+b+c=n$ and none of them is a multiple of $3$.\n\nIt can be proved that there is at least one solution. If there are multiple solutions, print any of them.\n\n\n-----Examples-----\nInput\n3\n\nOutput\n1 1 1\nInput\n233\nOutput\n77 77 79\nPlease provide the solution as pure code only, without explanations or comments.\n\nANSWER:\n```python\n"}}