{"549": {"code": ["import math\n\nn = int(input().strip())\nb = math.ceil(math.sqrt(n))\na = n // b\n\nif a * b < n:\n    a += 1\n\nprint(a, b)\n\n\nThis code first calculates the smallest integer b such that b*b >= n. This is the minimum number of columns for the display. Then it calculates the number of rows a by dividing n by b (integer division). If a*b < n, it means we have to add one more row to get exactly n pixels. The result is then printed.\n\nPlease note that this solution is based on the fact that the number of pixels", "import math\n\ndef find_dimensions(n):\n    a = int(math.sqrt(n))\n    while n % a != 0:\n        a -= 1\n    b = n // a\n    return (a, b)\n\nn = int(input().strip())\na, b = find_dimensions(n)\nprint(a, b)\n\n\nExplanation:\n\nThis program calculates the dimensions of the rectangular display. It starts by taking the square root of the number of pixels n, then rounds down to the nearest integer. This gives us an initial estimate for the number of rows a.\n\nThen, it checks if n is", "import math\n\ndef find_display_size(n):\n    a = int(math.sqrt(n))\n    while n % a != 0:\n        a -= 1\n    b = n // a\n    return (a, b)\n\nn = int(input().strip())\na, b = find_display_size(n)\nprint(a, b)\n\n\nExplanation:\nThe code uses the mathematical approach to solve the problem. It starts with the square root of n as the possible number of rows (a), and checks if the number of pixels (n) can be divided evenly by a. If it can't, it reduces", "import math\nn = int(input().strip())\na = int(math.sqrt(n))\nwhile n % a != 0:\n    a -= 1\nb = n // a\nprint(a, b)\n\n\nEXPLANATION:\nThis code works by first taking the square root of the number of pixels and rounding it down to the nearest integer. This gives us an estimate of the number of rows (a). Then it checks if the number of pixels is divisible by this number of rows. If it's not, it subtracts 1 from the number of rows and repeats the process. Once it finds a number of rows that evenly divides", "import math\n\nn = int(input())\nb = int(math.sqrt(n))\na = n // b\n\nif a * b < n:\n    a += 1\nif a > b:\n    a, b = b, a\n\nprint(a, b)\n\n\nThis Python program uses the integer division operator `//` to find the number of columns. It then checks if the number of rows and columns multiplied together is less than `n`, and if so, it increments the number of rows. It also checks if the number of rows is greater than the number of columns and swaps them if so. Finally, it prints the number of rows and"], "prompt": "\nQUESTION:\nA big company decided to launch a new series of rectangular displays, and decided that the display must have exactly n pixels. \n\nYour task is to determine the size of the rectangular display \u2014 the number of lines (rows) of pixels a and the number of columns of pixels b, so that:\n\n  there are exactly n pixels on the display;  the number of rows does not exceed the number of columns, it means a \u2264 b;  the difference b - a is as small as possible. \n\n\n-----Input-----\n\nThe first line contains the positive integer n (1 \u2264 n \u2264 10^6)\u00a0\u2014 the number of pixels display should have.\n\n\n-----Output-----\n\nPrint two integers\u00a0\u2014 the number of rows and columns on the display. \n\n\n-----Examples-----\nInput\n8\n\nOutput\n2 4\n\nInput\n64\n\nOutput\n8 8\n\nInput\n5\n\nOutput\n1 5\n\nInput\n999999\n\nOutput\n999 1001\n\n\n\n-----Note-----\n\nIn the first example the minimum possible difference equals 2, so on the display should be 2 rows of 4 pixels.\n\nIn the second example the minimum possible difference equals 0, so on the display should be 8 rows of 8 pixels.\n\nIn the third example the minimum possible difference equals 4, so on the display should be 1 row of 5 pixels.\nPlease provide the solution as pure code only, without explanations or comments.\n\nANSWER:\n```python\n"}}