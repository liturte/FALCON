{"240": {"code": ["def smallest_integer(s, sub):\n    n = len(s)\n    m = len(sub)\n    min_s = '9' * n\n    for i in range(n - m + 1):\n        if s[i:i + m] == sub:\n            min_s = min(min_s, '0' * (n - m - i) + sub + '9' * (n - m - i))\n    return int(min_s)\n\nprint(smallest_integer(input(), input()))\n\nThis solution works by iterating over all possible substrings", "def smallest_integer(s, t):\n    i = s.find(t)\n    return int(s[:i] + s[i+len(t):] + t)\n\ns = input().strip()\nt = input().strip()\nprint(smallest_integer(s, t))\n\n\nThis Python program reads a string and a substring from the input, finds the substring in the string, removes the substring from the string, and then appends the substring to the end of the string. The resulting string is converted back to an integer and printed.", "def smallest_number(s, t):\n    # find the position of t in s\n    pos = [i for i in range(len(s)) if s.startswith(t, i)]\n    \n    # remove the matched part from s\n    s = s[:pos[0]] + s[pos[-1]+1:]\n    \n    # remove leading zeros\n    s = s.lstrip('0')\n    \n    # if the result is empty, return 0\n    if not s:\n        return 0\n    \n    # find the smallest possible number by appending t to", "def smallest_integer():\n    s = input()\n    sub = input()\n    len_s = len(s)\n    len_sub = len(sub)\n    i = len_s - len_sub\n    while i >= 0 and s[i:i+len_sub] != sub:\n        i -= 1\n    return s[:i] + s[i+len_sub:] + sub\n\nprint(smallest_integer())\n\n\nThis code takes the input string and the substring from the user and returns the smallest possible initial integer n. It first calculates the index of the", "def smallest_integer():\n    s = input()\n    sub = input()\n    n = len(s)\n    pos = s.find(sub)\n    if pos == -1 or pos != 0:\n        print(s[:n-1])\n    else:\n        print('3' + '0'*(n-2) + '01')\n\nsmallest_integer()\n\n\nThis code first reads the input string and the substring from the user. It then checks if the substring is present at the start of the string. If it is, it prints a string of 3s"], "prompt": "\nQUESTION:\nVasya decided to pass a very large integer n to Kate. First, he wrote that number as a string, then he appended to the right integer k\u00a0\u2014 the number of digits in n. \n\nMagically, all the numbers were shuffled in arbitrary order while this note was passed to Kate. The only thing that Vasya remembers, is a non-empty substring of n (a substring of n is a sequence of consecutive digits of the number n).\n\nVasya knows that there may be more than one way to restore the number n. Your task is to find the smallest possible initial integer n. Note that decimal representation of number n contained no leading zeroes, except the case the integer n was equal to zero itself (in this case a single digit 0 was used).\n\n\n-----Input-----\n\nThe first line of the input contains the string received by Kate. The number of digits in this string does not exceed 1 000 000.\n\nThe second line contains the substring of n which Vasya remembers. This string can contain leading zeroes. \n\nIt is guaranteed that the input data is correct, and the answer always exists.\n\n\n-----Output-----\n\nPrint the smalles integer n which Vasya could pass to Kate.\n\n\n-----Examples-----\nInput\n003512\n021\n\nOutput\n30021\n\nInput\n199966633300\n63\n\nOutput\n3036366999\nPlease provide the solution as pure code only, without explanations or comments.\n\nANSWER:\n```python\n"}}