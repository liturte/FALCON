{"3350": {"code": ["def power_of_word(word):\n    n = len(word)\n    power = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            subword = word[i:j+1]\n            if subword == subword[::-1]:\n                power = max(power, len(subword))\n    return power * 4\n\nword = input().strip()\nprint(power_of_word(word))", "def find_power(word):\n    power = 0\n    for i in range(len(word)):\n        for j in range(i+1, len(word)):\n            subword = word[i:j+1]\n            if subword == subword[::-1]:\n                power = max(power, len(subword))\n    return power * 4\n\nword = input()\nprint(find_power(word))\n\n\nThis solution uses a", "def manacher(s):\n    a = '^#' + '#'.join(s) + '#$'\n    z = [0]*len(a)\n    center = right = 0\n    for i in range(1, len(a)-1):\n        if i < right:\n            z[i] = min(right - i, z[2*center - i])\n        while a[i + z[i] + 1] == a[i - z[i", "def power_of_word(word):\n    n = len(word)\n    max_power = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            subword = word[i:j+1]\n            if subword == subword[::-1]:\n                power = len(subword)\n                if power % 4 == 0 and power > max_power:\n                    max_power = power\n    return max_", "def power_of_word(word):\n    max_power = 0\n    for i in range(len(word)):\n        for j in range(i+1, len(word)):\n            subword = word[i:j+1]\n            if subword == subword[::-1]:\n                power = len(subword)\n                if power % 4 == 0 and power > max_power:\n                    max_power = power\n    return max_power *"], "prompt": "\nQUESTION:\nCasting spells is the least understood technique of dealing with real life. Actually, people find it quite hard to distinguish between real spells like \u201cabrahellehhelleh\u201d (used in the battles and taught at the mage universities) and screams like \u201crachelhellabracadabra\u201d (used by uneducated witches for shouting at cats). Finally, the research conducted at the Unheard University showed how one can measure the power of a word (be it a real spell or a scream). It appeared that it is connected with the mages\u2019 ability to pronounce words backwards. (Actually, some singers were burned at the stake for exactly the same ability, as it was perceived as demonic possession.) Namely, the power of a word is the length of the maximum subword of the form $ww^Rww^R$ (where $w$ is an arbitrary sequence of characters and $w^R$ is $w$ written backwards). If no such subword exists, then the power of the word is $0$. For example, the power of abrahellehhelleh is $12$ as it contains hellehhelleh and the power of rachelhellabracadabra is $0$. Note that the power of a word is always a multiple of $4$.\n\n-----Input-----\nThe input is a single line containing a word of length $3 \\cdot 10^5$, consisting of (large or small) letters of the English alphabet.\n\n-----Output-----\nYou should output one integer $k$, the power of the word.\n\n-----Examples-----\nSample Input:\nabrahellehhelleh\nSample Output:\n12\nPlease provide the solution as pure code only, without explanations or comments.\n\nANSWER:\n```python\n"}}