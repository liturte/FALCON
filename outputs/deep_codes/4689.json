{"4689": {"code": ["import sys\n\ndef solve():\n    K, N = map(int, sys.stdin.readline().split())\n    A = list(map(int, sys.stdin.readline().split()))\n    A.append(K + A[0])  # Add a circular edge\n\n    dp = [[0] * (N + 1) for _ in range(N + 1)]\n    for length in range(2, N + 1):\n        for start in range(N):\n            end = (start + length) % N\n            if end < start:\n                dp[start][length] = min(dp[start][j] + dp[(start + j + 1) % N][length - j - 1] for j in range(length))\n                dp[start][length] = min(dp[start][length], A[", "import sys\n\ndef min_distance():\n    K, N = map(int, sys.stdin.readline().split())\n    A = list(map(int, sys.stdin.readline().split()))\n\n    # add K to all elements in A to consider the circular path\n    A = [a + K if a < K // 2 else a for a in A]\n\n    # sort A\n    A.sort()\n\n    # calculate the sum of the differences between adjacent elements in A\n    total_distance = sum(A[i + 1] - A[i] for i in range(N - 1))\n\n    # the minimum distance is the total distance minus the maximum difference\n    min_distance = total_distance - max(A[i + 1] - A[i] for i in range(N - 1))", "K, N = map(int, input().split())\nA = list(map(int, input().split()))\n\n# calculate the minimum distance\nmin_distance = float('inf')\nfor i in range(N):\n    distance = A[(i+1)%N] if i+1<N else K-A[0]\n    min_distance = min(min_distance, distance)\n\nprint(K - min_distance)\n\n\nThis code reads the input and calculates the minimum distance by iterating over the houses. For each house, it calculates the distance to the next house (or to the first house if the current house is the last one), and updates the minimum distance if a smaller one is found. Finally, it prints the total perimeter of the pond minus the minimum distance, which is the minimum total distance that needs to be traveled to visit all the houses", "import sys\n\ndef main():\n    K, N = map(int, sys.stdin.readline().split())\n    A = list(map(int, sys.stdin.readline().split()))\n\n    # append the distance from the last house to the first house to the end of the list\n    A.append(A[0] + K)\n\n    A.sort()  # sort the list in ascending order\n\n    # calculate the minimum distance by finding the maximum difference between consecutive elements in the sorted list\n    min_distance = K\n    for i in range(1, N+1):\n        min_distance = min(min_distance, A[i] - A[i-1])\n\n    print(min_distance)\n\nif __name__ == \"__main__\":\n    main()\n\n\nThis solution works by first", "import sys\n\nK, N = map(int, sys.stdin.readline().split())\nA = list(map(int, sys.stdin.readline().split()))\n\nA.append(K + A[0])  # Append the distance from the last house to the first one\n\ndist = 0\nprev = A[0]\nfor a in A[1:]:\n    dist += min(a, K - a) * 2\n    prev = a\n\nprint(dist - min(A[1:K - A[0]]))\n\n\nExplanation:\nThis solution works by considering the two possible directions for each house: clockwise and counterclockwise. The minimum distance to travel is the one that minimizes the total distance, considering the two directions. This is done by calculating the minimum distance for each house to each of its two neighbors ("], "prompt": "\nQUESTION:\nThere is a circular pond with a perimeter of K meters, and N houses around them.\nThe i-th house is built at a distance of A_i meters from the northmost point of the pond, measured clockwise around the pond.\nWhen traveling between these houses, you can only go around the pond.\nFind the minimum distance that needs to be traveled when you start at one of the houses and visit all the N houses.\n\n-----Constraints-----\n - 2 \\leq K \\leq 10^6\n - 2 \\leq N \\leq 2 \\times 10^5\n - 0 \\leq A_1 < ... < A_N < K\n - All values in input are integers.\n\n-----Input-----\nInput is given from Standard Input in the following format:\nK N\nA_1 A_2 ... A_N\n\n-----Output-----\nPrint the minimum distance that needs to be traveled when you start at one of the houses and visit all the N houses.\n\n-----Sample Input-----\n20 3\n5 10 15\n\n-----Sample Output-----\n10\n\nIf you start at the 1-st house and go to the 2-nd and 3-rd houses in this order, the total distance traveled will be 10.\nPlease provide the solution as pure code only, without explanations or comments.\n\nANSWER:\n```python\n"}}