{"2186": {"code": ["from collections import defaultdict\n\ndef solve(n, m, strings, queries):\n    dict_of_strings = defaultdict(list)\n    for string in strings:\n        dict_of_strings[len(string)].append(string)\n\n    for query in queries:\n        query_len = len(query)\n        for string in dict_of_strings[query_len]:\n            diff_count = sum((i != j) for i, j in zip(", "def solve():\n    n, m = map(int, input().split())\n    strings = [input() for _ in range(n)]\n    queries = [input() for _ in range(m)]\n\n    for query in queries:\n        for string in strings:\n            if len(string) == len(query) and sum(a != b for a, b in zip(string, query)) == 1:\n                print(\"YES\")\n                break\n        else:", "def solve():\n    n, m = map(int, input().split())\n    strings = [input() for _ in range(n)]\n    queries = [input() for _ in range(m)]\n\n    for query in queries:\n        for string in strings:\n            if len(string) != len(query):\n                continue\n            diff_count = sum(a != b for a, b in zip(string, query))\n            if diff_count == 1:", "import sys\n\ndef read_input():\n    n, m = map(int, sys.stdin.readline().split())\n    strings = sys.stdin.readline().split()\n    queries = sys.stdin.readline().split()\n    return n, m, strings, queries\n\ndef solve(n, m, strings, queries):\n    for query in queries:\n        diff_count = 0\n        for string in strings:\n            if len(string)", "n, m = map(int, input().split())\nstrings = [input() for _ in range(n)]\nqueries = [input() for _ in range(m)]\n\nfor query in queries:\n    for string in strings:\n        if len(string) != len(query):\n            continue\n        diff_count = 0\n        for i in range(len(string)):\n            if string[i] != query[i]:\n                diff_count += 1"], "prompt": "\nQUESTION:\nWatto, the owner of a spare parts store, has recently got an order for the mechanism that can process strings in a certain way. Initially the memory of the mechanism is filled with n strings. Then the mechanism should be able to process queries of the following type: \"Given string s, determine if the memory of the mechanism contains string t that consists of the same number of characters as s and differs from s in exactly one position\".\n\nWatto has already compiled the mechanism, all that's left is to write a program for it and check it on the data consisting of n initial lines and m queries. He decided to entrust this job to you.\n\n\n-----Input-----\n\nThe first line contains two non-negative numbers n and m (0 \u2264 n \u2264 3\u00b710^5, 0 \u2264 m \u2264 3\u00b710^5) \u2014 the number of the initial strings and the number of queries, respectively.\n\nNext follow n non-empty strings that are uploaded to the memory of the mechanism.\n\nNext follow m non-empty strings that are the queries to the mechanism.\n\nThe total length of lines in the input doesn't exceed 6\u00b710^5. Each line consists only of letters 'a', 'b', 'c'.\n\n\n-----Output-----\n\nFor each query print on a single line \"YES\" (without the quotes), if the memory of the mechanism contains the required string, otherwise print \"NO\" (without the quotes).\n\n\n-----Examples-----\nInput\n2 3\naaaaa\nacacaca\naabaa\nccacacc\ncaaac\n\nOutput\nYES\nNO\nNO\nPlease provide the solution as pure code only, without explanations or comments.\n\nANSWER:\n```python\n"}}