{"186": {"code": ["def min_tower_height(n, m):\n    return (n + 1) * (m + 1)\n\nn, m = map(int, input().split())\nprint(min_tower_height(n, m))\n\nThis program reads the number of students using two-block pieces and the number of students using three-block pieces from the input. It then calculates and prints the minimum possible height of the tallest tower. The formula `(n +", "n, m = map(int, input().split())\ntowers = [0] * (n + m + 1)\nfor i in range(1, n + m + 1):\n    for j in range(i, n + m + 1, i):\n        towers[j] += 1\nprint(max(towers))\n\n\nEXPLANATION:\nThe solution is based on the observation that the height of the tower is the number of blocks used.", "def min_height(n, m):\n    towers = []\n    for i in range(1, int(n**0.5)+1):\n        if n % i == 0:\n            towers.append(i)\n            towers.append(n//i)\n    for i in range(1, int(m**0.5)+1):\n        if m % i == 0:\n            towers.append(i)\n            tow", "import sys\n\nn, m = map(int, sys.stdin.readline().split())\n\nif n < m:\n    n, m = m, n\n\nprint(n + 2 * ((m + 1) // 2))\n\n\nThis code reads the number of students using two-block pieces and three-block pieces from the input, then calculates and prints the minimum possible height of the tallest tower. The calculation is based on the fact that each student", "def solve(n, m):\n    if n == 0:\n        return m * 3\n    if m == 0:\n        return n * 2\n    return max(n, m) * 2 + 1\n\nn, m = map(int, input().split())\nprint(solve(n, m))\n\nThis solution works by first checking if there are no students using two-block pieces. If so, it returns the number of students using three-"], "prompt": "\nQUESTION:\nStudents in a class are making towers of blocks. Each student makes a (non-zero) tower by stacking pieces lengthwise on top of each other. n of the students use pieces made of two blocks and m of the students use pieces made of three blocks.\n\nThe students don\u2019t want to use too many blocks, but they also want to be unique, so no two students\u2019 towers may contain the same number of blocks. Find the minimum height necessary for the tallest of the students' towers.\n\n\n-----Input-----\n\nThe first line of the input contains two space-separated integers n and m (0 \u2264 n, m \u2264 1 000 000, n + m > 0)\u00a0\u2014 the number of students using two-block pieces and the number of students using three-block pieces, respectively.\n\n\n-----Output-----\n\nPrint a single integer, denoting the minimum possible height of the tallest tower.\n\n\n-----Examples-----\nInput\n1 3\n\nOutput\n9\n\nInput\n3 2\n\nOutput\n8\n\nInput\n5 0\n\nOutput\n10\n\n\n\n-----Note-----\n\nIn the first case, the student using two-block pieces can make a tower of height 4, and the students using three-block pieces can make towers of height 3, 6, and 9 blocks. The tallest tower has a height of 9 blocks.\n\nIn the second case, the students can make towers of heights 2, 4, and 8 with two-block pieces and towers of heights 3 and 6 with three-block pieces, for a maximum height of 8 blocks.\nPlease provide the solution as pure code only, without explanations or comments.\n\nANSWER:\n```python\n"}}