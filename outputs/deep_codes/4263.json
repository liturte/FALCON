{"4263": {"code": ["import sys\n\ndef solve(s):\n    s = s.replace('A', 'A ').replace('C', 'C ').replace('G', 'G ').replace('T', 'T ')\n    s = s.split()\n    ans = 0\n    for i in range(len(s)):\n        if i > 0 and s[i - 1] == 'A' and s[i] == 'T':\n            dp = [0] * len(s)\n            dp[i] = len(s[i])\n            for j in range(i - 1, -1, -1):\n                if s[j] == 'A' and s[j + 1] == 'T':\n                    dp[j] = dp[j + 1] + len(s[j])\n                else:\n                    dp[j] = len(s[j])\n                ans = max(ans, dp[j])\n    return ans\n\nprint(solve(sys.", "from itertools import combinations\n\nS = input()\n\ndef is_acgt(s):\n    return all(c in 'ACGT' for c in s)\n\nprint(max(len(s) for s in combinations(S, len(S)) if is_acgt(s)))\n\n\nThis Python program uses the itertools module to generate all possible substrings of the input string S. It then checks if each substring is ACGT by using a helper function is_acgt. If it is, it adds the length of the substring to a list. Finally, it returns the maximum length from the list.\n\nNote: This code will work correctly for small inputs, but for large inputs it may take a long time to execute due to the large number of combinations.\n\nThis code is a simple solution and does not take into account the fact that a substring must contain only A, C, G, and T characters. It simply checks if the characters in the substring are all A, C, G, or T.\n\nIf you want to modify the code to only", "def longest_acgt_substring(s):\n    max_length = 0\n    current_length = 0\n    for c in s:\n        if c in 'ACGT':\n            current_length += 1\n            max_length = max(max_length, current_length)\n        else:\n            current_length = 0\n    return max_length\n\ns = input()\nprint(longest_acgt_substring(s))\n\n\nThis solution works by iterating over the characters in the string. If the character is in 'ACGT', it increments the current length and updates the maximum length if the current length is greater. If the character is not in 'ACGT', it resets the current length to 0. The maximum length at the end is the length of the longest ACGT substring.\n\nIn the sample input ATCODER, the longest ACGT substring is ATC, so the output is 3.\n\"\"\"\n\n\nThis code takes a string as input, iterates over the characters in the string, and keeps track", "def longest_acgt_substring(s):\n    longest = 0\n    current = 0\n    for c in s:\n        if c in 'ACGT':\n            current += 1\n            longest = max(longest, current)\n        else:\n            current = 0\n    return longest\n\ns = input()\nprint(longest_acgt_substring(s))\n\n\nThis solution works by iterating over each character in the string. If the character is in the set 'ACGT', it increments the current length of the ACGT substring and updates the longest length if necessary. If the character is not in 'ACGT', it resets the current length to 0. The function returns the longest length found. The input string is read from standard input and the result of the function is printed to standard output.\n\nThis code assumes that the input string consists only of uppercase English letters. If this assumption is violated, the code will not behave as expected.\n\nThe time complexity of this solution is O(n), where n is the length of the input", "S = input()\nlength = len(S)\nmax_length = 0\nfor i in range(length):\n    for j in range(i+1, length+1):\n        substring = S[i:j]\n        if all(c in 'ACGT' for c in substring):\n            max_length = max(max_length, len(substring))\nprint(max_length)\n\n\nThis solution uses two nested loops to generate all possible substrings of the input string S. For each substring, it checks if all characters are in the set 'ACGT' using the all() function and the in operator. If the substring is an ACGT string, it updates the maximum length if the current substring is longer. Finally, it prints the maximum length.\n\nPlease note that the time complexity of this solution is O(n^3), where n is the length of the input string S. This is because it generates all substrings of S in a nested loop and checks each one for being an ACGT string. This may not be efficient for very long"], "prompt": "\nQUESTION:\nYou are given a string S consisting of uppercase English letters. Find the length of the longest ACGT string that is a substring (see Notes) of S.\nHere, a ACGT string is a string that contains no characters other than A, C, G and T.\n\n-----Notes-----\nA substring of a string T is a string obtained by removing zero or more characters from the beginning and the end of T.\nFor example, the substrings of ATCODER include TCO, AT, CODER, ATCODER and  (the empty string), but not AC.\n\n-----Constraints-----\n - S is a string of length between 1 and 10 (inclusive).\n - Each character in S is an uppercase English letter.\n\n-----Input-----\nInput is given from Standard Input in the following format:\nS\n\n-----Output-----\nPrint the length of the longest ACGT string that is a substring of S.\n\n-----Sample Input-----\nATCODER\n\n-----Sample Output-----\n3\n\nAmong the ACGT strings that are substrings of ATCODER, the longest one is ATC.\nPlease provide the solution as pure code only, without explanations or comments.\n\nANSWER:\n```python\n"}}