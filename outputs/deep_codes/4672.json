{"4672": {"code": ["if __name__ == '__main__':\n    n = int(input())\n    student_marks = {}\n    for _ in range(n):\n        name, *line = input().split()\n        scores = list(map(float, line))\n        student_marks[name] = scores\n    query_name = input()\n\n    avg_mark = sum(student_marks[query_name])/len(student_marks[query_name])\n    print(\"%.2f\" % avg_mark)\n\n\nThis code firstly creates a dictionary", "if __name__ == '__main__':\n    n = int(input())\n    student_marks = {}\n    for _ in range(n):\n        name, *line = input().split()\n        scores = list(map(float, line))\n        student_marks[name] = scores\n    query_name = input()\n\n    avg_mark = sum(student_marks[query_name])/len(student_marks[query_name])\n    print(\"{:.2f}\".format(avg_mark))\n\n\nEXPLANATION", "if __name__ == '__main__':\n    n = int(input())\n    student_marks = {}\n    for _ in range(n):\n        name, *line = input().split()\n        scores = list(map(float, line))\n        student_marks[name] = scores\n    query_name = input()\n\n    avg_mark = sum(student_marks[query_name])/len(student_marks[query_name])\n    print(\"{:.2f}\".format(avg_mark))\n\n\nExplanation:", "if __name__ == '__main__':\n    n = int(input())\n    student_marks = {}\n    for _ in range(n):\n        name, *line = input().split()\n        scores = list(map(float, line))\n        student_marks[name] = scores\n    query_name = input()\n    \n    avg_marks = sum(student_marks[query_name])/len(student_marks[query_name])\n    print(\"{:.2f}\".format(avg_marks))\n\n\nEXPLAN", "if __name__ == '__main__':\n    n = int(input())\n    student_marks = {}\n    for _ in range(n):\n        name, *line = input().split()\n        scores = list(map(float, line))\n        student_marks[name] = scores\n    query_name = input()\n    print(\"{:.2f}\".format(sum(student_marks[query_name])/3))\n\n\nExplanation:\nThe starter code is almost correct. The only missing part is the part of the code that calculates"], "prompt": "\nQUESTION:\n=====Problem Statement=====\nThe provided code stub will read in a dictionary containing key/value pairs of name:[marks] for a list of students. Print the average of the marks array for the student name provided, showing 2 places after the decimal.\n\n=====Example=====\nmarks key:value pairs are\n'alpha': [20,30,40]\n'beta': [30,50,70]\nquery_name = 'beta'\nThe query_name is 'beta'. beta's average score is (30+50+70)/3 = 50\n\n=====Input Format=====\nThe first line contains the integer n, the number of students' records. The next n lines contain the names and marks obtained by a student, each value separated by a space. The final line contains query_name, the name of a student to query.\n\n=====Constraints=====\n2\u2264n\u226410\n0\u2264marks[i]\u2264100\nlength of marks arrays = 3\n\n=====Output Format=====\nPrint one line: The average of the marks obtained by the particular student correct to 2 decimal places.\nSTARTER CODE:\nif __name__ == '__main__':\n    n = int(input())\n    student_marks = {}\n    for _ in range(n):\n        name, *line = input().split()\n        scores = list(map(float, line))\n        student_marks[name] = scores\n    query_name = input()\n\nPlease provide the solution as pure code only, without explanations or comments.\n\nANSWER:\n```python\n"}}