{"2767": {"code": ["import math\n\ndef factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)\n\nN = int(input())\nwords = [input() for _ in range(N)]\n\nletters = [0]*26\nfor word in words:\n    for letter in word:", "import math\n\ndef factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)\n\nN = int(input())\nwords = [input() for _ in range(N)]\n\nsentences = []\nfor i in range(2**N):\n    sentence = ''\n    for j", "import math\n\ndef factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)\n\ndef solve(n):\n    return factorial(n)\n\nn = int(input())\nwords = [input() for _ in range(n)]\nprint(solve(n))", "import math\n\ndef factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)\n\nN = int(input())\nwords = [input() for _ in range(N)]\n\ntotal_letters = sum(len(word) for word in words)\n\n# Calculate the number", "import math\n\ndef factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)\n\nN = int(input())\nwords = [input() for _ in range(N)]\n\n# Calculate the length of the sentence\nlength = sum(len(word) for word in words)"], "prompt": "\nQUESTION:\nLittle Ivica got himself a summer job at a company that produces computer fonts. The branch of the company where Ivica works at specialises in testing computer fonts and Ivica\u2019s team is responsible of testing only lowercase letters of the English alphabet.\n\nThe letters are tested so that various sentences using those letters are printed out and then manually (more accurately, visually) checked if everything is arranged properly. Only sentences which contain all 26 lowercase letter of the English alphabet (a\u2013z) are used for testing purposes. These sentences are called test sentences.\n\nYou\u2019ve probably already assumed that Ivica\u2019s job is to find test sentences. He has a dictionary which consists of $N$ words and has to calculate how many different test sentences can be made out of those words. Every word from the dictionary can be used only once in the sentence and the order of the words in the sentence is irrelevant (i.e. \u201cuvijek jedem sarmu\u201d and \u201cjedem sarmu uvijek\u201d are equal sentences).\n\n-----Input-----\nThe first line of input contains the integer $N$ $(1 \\leq N \\leq 25)$, the number of words in the dictionary. Each of the following $N$ lines contains a single word from the dictionary, its length not exceeding 100. All the words from the dictionary are going to be unique.\n\n-----Output-----\nThe first and only line of output must contain the required number from the task.\n\n-----Examples-----\nSample Input 1:\n9\nthe\nquick\nbrown\nfox\njumps\nover\na\nsleazy\ndog\nSample Output 1:\n2\n\nSample Input 2:\n3\na\nb\nc\nSample Output 2:\n0\nPlease provide the solution as pure code only, without explanations or comments.\n\nANSWER:\n```python\n"}}