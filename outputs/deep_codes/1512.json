{"1512": {"code": ["def solve():\n    n = int(input())\n    p = list(map(int, input().split()))\n    max_val = max(p)\n    p.remove(max_val)\n    if all(p[i] < max_val for i in range(len(p))):\n        print(max_val)\n    else:\n        print(min(i for i in p if i < max_val))\n\nsolve()\n\n\nThis code first reads the input and stores it in the variables `n` and `p`. It then removes the maximum value from the permutation and checks if the remaining elements are all less than the maximum value. If they are, it prints the maximum value. If not, it prints the smallest element that is less than the maximum value.", "n = int(input())\np = list(map(int, input().split()))\n\nmax_val = max(p)\nmax_idx = p.index(max_val)\n\nif max_idx == 0 or max_idx == n-1:\n    print(max_val)\nelse:\n    print(min(p[max_idx-1], p[max_idx+1]))\n\n\nThis solution works by first finding the maximum value in the list and its index. If the maximum value is at the edge of the list, it is already a record and no element needs to be removed. If the maximum value is in the middle of the list, it compares the values before and after it and removes the smaller one. This is because removing the larger value would make the sequence of smaller values (before and after the removed value) a record, which is not possible with the maximum value in the middle", "n = int(input())\np = list(map(int, input().split()))\n\nprint(p.index(max(p))+1)\n\n\nThis solution works by taking the input and converting it into a list of integers. It then finds the index of the maximum value in the list and adds one because the indices in Python start from 0. It then prints this index + 1. The index + 1 is the position of the element in the permutation that should be removed to make the number of records the maximum possible.\n\nIt's worth noting that this solution assumes that the input is a valid permutation of the integers 1 through n, and that n is at least 1. If these conditions are not met, the solution may not work correctly.", "def solve():\n    n = int(input())\n    p = list(map(int, input().split()))\n    max_val = max(p)\n    p.remove(max_val)\n    print(max(p))\n\nsolve()\n\n\nThis code works by first reading in the length of the permutation and the permutation itself. It then removes the maximum value from the permutation and prints the maximum value in the remaining list. This will be the largest possible record.", "n = int(input())\np = list(map(int, input().split()))\n\nmax_val = max(p)\nmax_index = p.index(max_val)\n\nif max_index == 0 or max_index == n-1:\n    print(max_val)\nelse:\n    left_max = max(p[:max_index])\n    right_max = max(p[max_index+1:])\n    if left_max < max_val and right_max < max_val:\n        print(max_val)\n    else:\n        print(left_max if left_max > right_max else right_max)\n\n\nThis code reads the input, finds the maximum value and its index. If the maximum value is at the beginning or the end of the list, it prints the maximum value. Otherwise, it finds the maximum values on the"], "prompt": "\nQUESTION:\nYou are given a permutation p of length n. Remove one element from permutation to make the number of records the maximum possible.\n\nWe remind that in a sequence of numbers a_1, a_2, ..., a_{k} the element a_{i} is a record if for every integer j (1 \u2264 j < i) the following holds: a_{j} < a_{i}. \n\n\n-----Input-----\n\nThe first line contains the only integer n (1 \u2264 n \u2264 10^5)\u00a0\u2014 the length of the permutation.\n\nThe second line contains n integers p_1, p_2, ..., p_{n} (1 \u2264 p_{i} \u2264 n)\u00a0\u2014 the permutation. All the integers are distinct.\n\n\n-----Output-----\n\nPrint the only integer\u00a0\u2014 the element that should be removed to make the number of records the maximum possible. If there are multiple such elements, print the smallest one.\n\n\n-----Examples-----\nInput\n1\n1\n\nOutput\n1\n\nInput\n5\n5 1 2 3 4\n\nOutput\n5\n\n\n\n-----Note-----\n\nIn the first example the only element can be removed.\nPlease provide the solution as pure code only, without explanations or comments.\n\nANSWER:\n```python\n"}}