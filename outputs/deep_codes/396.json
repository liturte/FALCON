{"396": {"code": ["def gcd(x, y):\n    while y:\n        x, y = y, x % y\n    return x\n\ndef lcm(x, y):\n    return x * y // gcd(x, y)\n\ndef solve(l, r):\n    return r - l + 1 - solve(l // 2, r // 2) - solve(l // 3, r // 3) + solve(l // 6,", "def count_23_integers(l, r):\n    count = 0\n    i = 1\n    while True:\n        p = pow(2, i)\n        if p > r:\n            break\n        j = 0\n        while True:\n            q = p * pow(3, j)\n            if q < l:\n                j += 1\n                continue\n            if q > r:\n                break\n            count += 1\n            j", "def count_23_integers(l, r):\n    def count_divisors(n):\n        count = 0\n        while n % 2 == 0:\n            n = n // 2\n            count += 1\n        while n % 3 == 0:\n            n = n // 3\n            count += 1\n        return count\n\n    return sum(1 for i in range(l, r+1) if count_divisors", "from math import log\n\ndef solve(l, r):\n    def count(x):\n        return int(log(r if x == 2 else r / 3, x)) - int(log(l if x == 2 else l / 3, x))\n    return count(2) + count(3) - (count(6) if l <= 1 else count(6) + 1)\n\nl, r = map(int, input().split())", "def count_23_integers(l, r):\n    def count_divisors(n):\n        count = 0\n        while n % 2 == 0:\n            n = n // 2\n            count += 1\n        while n % 3 == 0:\n            n = n // 3\n            count += 1\n        return count\n\n    count = 0\n    for i in range(l, r+1):\n        if count_"], "prompt": "\nQUESTION:\nA positive integer is called a 2-3-integer, if it is equal to 2^{x}\u00b73^{y} for some non-negative integers x and y. In other words, these integers are such integers that only have 2 and 3 among their prime divisors. For example, integers 1, 6, 9, 16 and 108 \u2014 are 2-3 integers, while 5, 10, 21 and 120 are not.\n\nPrint the number of 2-3-integers on the given segment [l, r], i.\u00a0e. the number of sich 2-3-integers t that l \u2264 t \u2264 r.\n\n\n-----Input-----\n\nThe only line contains two integers l and r (1 \u2264 l \u2264 r \u2264 2\u00b710^9).\n\n\n-----Output-----\n\nPrint a single integer the number of 2-3-integers on the segment [l, r].\n\n\n-----Examples-----\nInput\n1 10\n\nOutput\n7\n\nInput\n100 200\n\nOutput\n5\n\nInput\n1 2000000000\n\nOutput\n326\n\n\n\n-----Note-----\n\nIn the first example the 2-3-integers are 1, 2, 3, 4, 6, 8 and 9.\n\nIn the second example the 2-3-integers are 108, 128, 144, 162 and 192.\nPlease provide the solution as pure code only, without explanations or comments.\n\nANSWER:\n```python\n"}}