{"1582": {"code": ["from collections import Counter\n\nN = int(input())\ndigit_counts = Counter(str(i) for i in range(1, N+1))\n\nres = 0\nfor i in range(1, 10):\n    for j in range(i+1, 10):\n        res += digit_counts[str(i)] * digit_counts[str(j)]\n\nres += digit_counts['1'] * (digit_counts['1']-1) // 2\nres += digit_counts['2'] * (digit_counts['2']-1) // 2\n\nprint(res)\n\n\nThis Python program uses the Counter class from the collections module to count the number of occurrences of each digit in the range from 1 to N. It then iterates over each pair of digits (i, j), and for each pair, it adds the product of the", "def solve(n):\n    dp = [[0]*10 for _ in range(10)]\n    dp[0][0] = 1\n    for i in range(1, n+1):\n        for j in range(10):\n            for k in range(10):\n                if j == 0 and k == 0:\n                    dp[j][k] = dp[j][k] + 1\n                else:\n                    dp[j][k] = dp[j][k] + dp[k][j]\n    return sum(dp[i][i] for i in range(10))\n\nn = int(input())\nprint(solve(n))\n\n\nThis solution uses dynamic programming to solve the problem. The `dp[i][j]` represents the number of pairs where the first number ends with digit `i` and the second number starts with digit `j`. The base case", "from collections import Counter\n\nN = int(input())\ncount = Counter(map(int, str(N)))\n\nres = 0\nfor v in count.values():\n    res += v*(v-1)//2\n\nprint(res)\n\n\nThis Python program uses the Counter class from the collections module to count the frequency of each digit in the input number. It then calculates the number of pairs that can be formed by selecting two digits from each pair. The result is the sum of these counts.\n\nThe formula for calculating the number of pairs is (n*(n-1))/2, where n is the count of a particular digit. This is because for each pair of n digits, there are n*(n-1)//2 pairs that can be formed.\n\nFinally, the result is printed to the standard output.", "def solve(n):\n    dp = [[0] * 10 for _ in range(10)]\n    dp[0][0] = 1\n    for i in range(1, n + 1):\n        for j in range(10):\n            for k in range(10):\n                if j != k:\n                    dp[j][k] += dp[k][j] + 1\n    return sum(sum(row) for row in dp)\n\nprint(solve(int(input())))\n\n\nThis Python code uses dynamic programming to solve the problem. It creates a 2D array `dp` where `dp[i][j]` stores the number of pairs (A, B) where the last digit of A is `i` and the first digit of B is `j`. The base case is `dp[0][0] = 1` because there is one pair (0, 0) that", "N = int(input())\n\n# Initialize count of pairs\ncount = 0\n\n# Iterate over all numbers from 1 to N\nfor i in range(1, N+1):\n    # Convert number to string\n    i_str = str(i)\n    # Get first and last digit\n    first_digit = int(i_str[0])\n    last_digit = int(i_str[-1])\n    # If first digit is not 0 and last digit is not 0 and first digit is equal to last digit\n    if first_digit and last_digit and first_digit == last_digit:\n        # Iterate over all numbers from i to N\n        for j in range(i, N+1):\n            # If j is palindrome, increment count\n            j_str = str(j)\n            if j_str == j_str[::-1]:\n                count += 1"], "prompt": "\nQUESTION:\nGiven is a positive integer N.\n\nFind the number of pairs (A, B) of positive integers not greater than N that satisfy the following condition:\n - When A and B are written in base ten without leading zeros, the last digit of A is equal to the first digit of B, and the first digit of A is equal to the last digit of B.\n\n-----Constraints-----\n - 1 \\leq N \\leq 2 \\times 10^5\n - All values in input are integers.\n\n-----Input-----\nInput is given from Standard Input in the following format:\nN\n\n-----Output-----\nPrint the answer.\n\n-----Sample Input-----\n25\n\n-----Sample Output-----\n17\n\nThe following 17 pairs satisfy the condition: (1,1), (1,11), (2,2), (2,22), (3,3), (4,4), (5,5), (6,6), (7,7), (8,8), (9,9), (11,1), (11,11), (12,21), (21,12), (22,2), and (22,22).\nPlease provide the solution as pure code only, without explanations or comments.\n\nANSWER:\n```python\n"}}