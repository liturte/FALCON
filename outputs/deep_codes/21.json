{"21": {"code": ["def max_distance(n, arr):\n    min_index = arr.index(1)\n    max_index = arr.index(n)\n    return max(max_index, min_index, n - 1 - min_index, max_index)\n\nn = int(", "def max_distance(n, arr):\n    min_index = arr.index(1)\n    max_index = arr.index(n)\n    return max(abs(min_index - max_index), min(min_index, max_index), n - max_index -", "n = int(input())\na = list(map(int, input().split()))\n\nmin_idx = a.index(1)\nmax_idx = a.index(n)\n\nprint(max(min_idx, max_idx, n - min_idx - 1,", "n = int(input())\na = list(map(int, input().split()))\nmin_i = a.index(1)\nmax_i = a.index(n)\nprint(max(min_i, max_i, n-1-min_i, max_i", "n = int(input())\na = list(map(int, input().split()))\nmin_i = a.index(min(a))\nmax_i = a.index(max(a))\nprint(max(min_i, max_i) - min(min_i,"], "prompt": "\nQUESTION:\nNicholas has an array a that contains n distinct integers from 1 to n. In other words, Nicholas has a permutation of size n.\n\nNicholas want the minimum element (integer 1) and the maximum element (integer n) to be as far as possible from each other. He wants to perform exactly one swap in order to maximize the distance between the minimum and the maximum elements. The distance between two elements is considered to be equal to the absolute difference between their positions.\n\n\n-----Input-----\n\nThe first line of the input contains a single integer n (2 \u2264 n \u2264 100)\u00a0\u2014 the size of the permutation.\n\nThe second line of the input contains n distinct integers a_1, a_2, ..., a_{n} (1 \u2264 a_{i} \u2264 n), where a_{i} is equal to the element at the i-th position.\n\n\n-----Output-----\n\nPrint a single integer\u00a0\u2014 the maximum possible distance between the minimum and the maximum elements Nicholas can achieve by performing exactly one swap.\n\n\n-----Examples-----\nInput\n5\n4 5 1 3 2\n\nOutput\n3\n\nInput\n7\n1 6 5 3 4 7 2\n\nOutput\n6\n\nInput\n6\n6 5 4 3 2 1\n\nOutput\n5\n\n\n\n-----Note-----\n\nIn the first sample, one may obtain the optimal answer by swapping elements 1 and 2.\n\nIn the second sample, the minimum and the maximum elements will be located in the opposite ends of the array if we swap 7 and 2.\n\nIn the third sample, the distance between the minimum and the maximum elements is already maximum possible, so we just perform some unnecessary swap, for example, one can swap 5 and 2.\nPlease provide the solution as pure code only, without explanations or comments.\n\nANSWER:\n```python\n"}}