{"1639": {"code": ["n = int(input())\na = list(map(int, input().split()))\n\ndp = [1]*n\nfor i in range(1, n):\n    if a[i] >= a[i-1]:\n        dp[i] = dp[i-1]+1\nprint(max(dp))\n\n\nEXPLANATION:\nThis code uses dynamic programming to solve the problem. It iterates through the list of earnings and keeps track of the longest non-decreasing sequence it has seen so far. It updates the length of the sequence whenever it encounters", "n = int(input())\na = list(map(int, input().split()))\n\ndp = [1]*n\nfor i in range(1,n):\n    if a[i] >= a[i-1]:\n        dp[i] = dp[i-1]+1\n    else:\n        dp[i] = 1\n\nprint(max(dp))\n\n\nThis solution uses dynamic programming (dp) to keep track of the longest non-decreasing subsegment up to the current position. It initializes a list dp with size n and", "n = int(input())\na = list(map(int, input().split()))\n\ncount, max_count = 1, 1\nfor i in range(1, n):\n    if a[i] >= a[i-1]:\n        count += 1\n        if count > max_count:\n            max_count = count\n    else:\n        count = 1\n\nprint(max_count)\n\n\nExplanation:\nThis program uses a greedy approach to solve the problem. It iterates over the input list and checks if the current number is greater than or equal to", "n = int(input())\na = list(map(int, input().split()))\n\ncur, ans = 1, 1\nfor i in range(1, n):\n    if a[i] >= a[i - 1]:\n        cur += 1\n        ans = max(ans, cur)\n    else:\n        cur = 1\nprint(ans)\n\n\nThis code works by iterating over the list of earnings. It checks if the current earning is greater or equal than the previous one. If it is, it increments the current length of non-decreasing sub", "n = int(input())\na = list(map(int, input().split()))\n\ncur, ans = 1, 1\nfor i in range(1, n):\n    if a[i] >= a[i-1]:\n        cur += 1\n        ans = max(ans, cur)\n    else:\n        cur = 1\nprint(ans)\n\n\nThis solution uses dynamic programming to keep track of the current length of the non-decreasing subsegment and the maximum length found so far. It iterates over the input sequence, incrementing the current length for each"], "prompt": "\nQUESTION:\nKefa decided to make some money doing business on the Internet for exactly n days. He knows that on the i-th day (1 \u2264 i \u2264 n) he makes a_{i} money. Kefa loves progress, that's why he wants to know the length of the maximum non-decreasing subsegment in sequence a_{i}. Let us remind you that the subsegment of the sequence is its continuous fragment. A subsegment of numbers is called non-decreasing if all numbers in it follow in the non-decreasing order.\n\nHelp Kefa cope with this task!\n\n\n-----Input-----\n\nThe first line contains integer n (1 \u2264 n \u2264 10^5).\n\nThe second line contains n integers a_1,  a_2,  ...,  a_{n} (1 \u2264 a_{i} \u2264 10^9).\n\n\n-----Output-----\n\nPrint a single integer \u2014 the length of the maximum non-decreasing subsegment of sequence a.\n\n\n-----Examples-----\nInput\n6\n2 2 1 3 4 1\n\nOutput\n3\nInput\n3\n2 2 9\n\nOutput\n3\n\n\n-----Note-----\n\nIn the first test the maximum non-decreasing subsegment is the numbers from the third to the fifth one.\n\nIn the second test the maximum non-decreasing subsegment is the numbers from the first to the third one.\nPlease provide the solution as pure code only, without explanations or comments.\n\nANSWER:\n```python\n"}}