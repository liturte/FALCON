{"2748": {"code": ["class Solution:\n    def letterCombinations(self, digits: str) -> List[str]:\n        phone = {'2': 'abc', '3': 'def', '4': 'ghi', '5': 'jkl', \n                 '6': 'mno', '7': 'pqrs', '8': 'tuv', '9': 'wxyz'}\n        if not digits:\n            return []\n        result = ['']\n        for digit in digits:\n            tmp = []\n            for letter in phone[digit]:\n                for item in result:\n                    tmp.append(item + letter)\n            result = tmp\n        return result\n\n\nThis code uses a dictionary to map each digit to its corresponding set of letters. It then iterates over each digit in the input string, appending each possible letter to each of the current combinations in the result list. This is done by iterating over each letter corresponding to the current digit and appending it to each of the current combinations. The result list is then updated to contain the new combinations.\n\nWhen all digits have been processed, the function returns the final result list, which contains all possible letter combinations corresponding to the input string.\n\nNote: This solution assumes that the input string only contains digits from 2-9. If the input string could contain other characters, additional error checking should be added to handle those cases.\n\nAlso, this solution uses", "class Solution:\n    def letterCombinations(self, digits: str) -> List[str]:\n        phone = {'2': 'abc', '3': 'def', '4': 'ghi', '5': 'jkl', \n                 '6': 'mno', '7': 'pqrs', '8': 'tuv', '9': 'wxyz'}\n        if not digits:\n            return []\n        result = ['']\n        for digit in digits:\n            tmp = []\n            for letter in phone[digit]:\n                for item in result:\n                    tmp.append(item + letter)\n            result = tmp\n        return result", "class Solution:\n    def letterCombinations(self, digits: str) -> List[str]:\n        if not digits:\n            return []\n        phone = ['','','abc','def','ghi','jkl','mno','pqrs','tuv','wxyz']\n        result = ['']\n        for digit in digits:\n            letters = phone[int(digit)]\n            temp = []\n            for letter in letters:\n                for item in result:\n                    temp.append(item + letter)\n            result = temp\n        return result\n\n\nThis solution works by first creating a mapping of each digit to the corresponding letters. It then iterates over each digit in the input string. For each digit, it gets the corresponding letters and for each letter, it appends it to each string in the current result list. The result list is then updated to be the new list of strings. This continues until all digits have been processed. The final result is the list of all possible letter combinations.\n\nThe time complexity of this solution is O(3^N * 4^M) where N is the number of digits that map to 3 letters and M is the number of digits that map to 4 letters. The space complexity is O(3^N * 4^M) to store the result.\n'''\n\n# Solution:\nclass Solution:\n    def letterCombinations(self", "class Solution:\n    def letterCombinations(self, digits: str) -> List[str]:\n        if not digits:\n            return []\n        phone = {\n            '2': 'abc',\n            '3': 'def',\n            '4': 'ghi',\n            '5': 'jkl',\n            '6': 'mno',\n            '7': 'pqrs',\n            '8': 'tuv',\n            '9': 'wxyz'\n        }\n        result = ['']\n        for digit in digits:\n            tmp = []\n            for letter in phone[digit]:\n                for item in result:\n                    tmp.append(item + letter)\n            result = tmp\n        return result\n\n\nEXPLANATION:\nThe solution uses a dictionary to map each digit to its corresponding letters. We start with an empty string in the result list. For each digit in the input string, we create a new list that will store all the possible combinations of the current digit and the strings in the result list. We then update the result list with the new list. Finally, we return the result list.\n\nThis solution has a time complexity of O(3^N * 4^M) where N is the number of digits in the input that map to 3 letters and M is the number of digits that map to 4 letters. The space complexity is O(3^", "class Solution:\n    def letterCombinations(self, digits: str) -> List[str]:\n        if not digits:\n            return []\n        dic = {\n            \"2\": \"abc\",\n            \"3\": \"def\",\n            \"4\": \"ghi\",\n            \"5\": \"jkl\",\n            \"6\": \"mno\",\n            \"7\": \"pqrs\",\n            \"8\": \"tuv\",\n            \"9\": \"wxyz\"\n        }\n        res = [\"\"]\n        for digit in digits:\n            tmp = []\n            for letter in dic[digit]:\n                for item in res:\n                    tmp.append(item + letter)\n            res = tmp\n        return res\n\n\nEXPLANATION:\nThis solution uses a dictionary to map each digit to the corresponding letters. It then iterates over each digit in the input string. For each digit, it iterates over each letter that the digit maps to. For each of these letters, it iterates over each item in the current result list and appends the letter to the item to create a new list of results. Finally, it returns the result list.\n\nThis solution works by iteratively building up the combinations as it iterates over the digits. It starts with an empty string and for each digit, it adds all possible combinations of letters to the existing strings. This is done by iterating over all"], "prompt": "\nQUESTION:\nGiven a string containing digits from 2-9 inclusive, return all possible letter combinations that the number could represent.\n\nA mapping of digit to letters (just like on the telephone buttons) is given below. Note that 1 does not map to any letters.\n\n\n\nExample:\n\n\nInput: \"23\"\nOutput: [\"ad\", \"ae\", \"af\", \"bd\", \"be\", \"bf\", \"cd\", \"ce\", \"cf\"].\n\n\nNote:\n\nAlthough the above answer is in lexicographical order, your answer could be in any order you want.\nSTARTER CODE:\nclass Solution:\n    def letterCombinations(self, digits: str) -> List[str]:\n        \n\nPlease provide the solution as pure code only, without explanations or comments.\n\nANSWER:\n```python\n"}}