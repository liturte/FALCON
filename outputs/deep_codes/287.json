{"287": {"code": ["n, k = map(int, input().split())\nprint(max(0, k-1), min(n, k+1))\n\n\nEXPLANATION:\nThe minimum possible number of apartments that are good for Maxim is k-1 (if k-1 apartments are already inhabited, there must be at least one of them adjacent to the apartment that Maxim wants to buy, otherwise it is not good).\n\nThe maximum possible number of apartments that are good for Maxim is k+1 (if k+1 apartments are already inhabited, all the apartments not inhabited yet are good for", "n, k = map(int, input().split())\nprint(max(1, k), min(n, k+1))\n\n\nExplanation:\n\nThe minimum possible number of apartments good for Maxim is 1. This is because he can always buy an apartment if there is at least one already inhabited apartment adjacent to it.\n\nThe maximum possible number of apartments good for Maxim is n. This is because if there are k already inhabited apartments, he can always buy an apartment if there is at least one already inhabited apartment adjacent to it. The only way he can not buy any more", "n, k = map(int, input().split())\nprint(max(0, k-1), min(n, k+1))\n\n\nEXPLANATION:\nThe minimum number of good apartments can be at least 1 (if there's at least one already inhabited apartment adjacent to the first apartment). So the minimum is max(0, k-1).\n\nThe maximum number of good apartments can be at most n (if all apartments are inhabited). So the maximum is min(n, k+1).\n\nThis is a simple mathematical problem. The key is to understand the properties of", "n, k = map(int, input().split())\nprint(max(0, k-1), min(n, k+1))\n\n\nEXPLANATION:\nThe minimum number of good apartments could be at least 1 if there is at least one already inhabited apartment adjacent to the available apartment for sale. Therefore, the minimum is the maximum of 0 and k-1.\n\nThe maximum number of good apartments could be at most n if all apartments are already inhabited or if all apartments are available for sale. Therefore, the maximum is the minimum of n and k+1.\n\nSo the", "n, k = map(int, input().split())\nprint(max(0, k - 1), min(n, k + 1))\n\n\nExplanation:\nIn the minimum possible case, we need to have at least one already inhabited apartment adjacent to each available apartment. So we subtract 1 from the number of already inhabited apartments and add 1 to the minimum possible number of good apartments.\nIn the maximum possible case, we can have all available apartments adjacent to already inhabited ones. So we add 1 to the number of already inhabited apartments and add 1 to the maximum"], "prompt": "\nQUESTION:\nMaxim wants to buy an apartment in a new house at Line Avenue of Metropolis. The house has n apartments that are numbered from 1 to n and are arranged in a row. Two apartments are adjacent if their indices differ by 1. Some of the apartments can already be inhabited, others are available for sale.\n\nMaxim often visits his neighbors, so apartment is good for him if it is available for sale and there is at least one already inhabited apartment adjacent to it. Maxim knows that there are exactly k already inhabited apartments, but he doesn't know their indices yet.\n\nFind out what could be the minimum possible and the maximum possible number of apartments that are good for Maxim.\n\n\n-----Input-----\n\nThe only line of the input contains two integers: n and k (1 \u2264 n \u2264 10^9, 0 \u2264 k \u2264 n).\n\n\n-----Output-----\n\nPrint the minimum possible and the maximum possible number of apartments good for Maxim.\n\n\n-----Example-----\nInput\n6 3\n\nOutput\n1 3\n\n\n\n-----Note-----\n\nIn the sample test, the number of good apartments could be minimum possible if, for example, apartments with indices 1, 2 and 3 were inhabited. In this case only apartment 4 is good. The maximum possible number could be, for example, if apartments with indices 1, 3 and 5 were inhabited. In this case all other apartments: 2, 4 and 6 are good.\nPlease provide the solution as pure code only, without explanations or comments.\n\nANSWER:\n```python\n"}}