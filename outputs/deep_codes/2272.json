{"2272": {"code": ["class Interval:\n    def __init__(self, start, end):\n        self.start = start\n        self.end = end\n\nclass IntervalSet:\n    def __init__(self):\n        self.intervals = []\n\n    def add(self, start, end):\n        self.intervals.append(Interval(start, end))\n        self.intervals.sort(", "class Interval:\n    def __init__(self, start, end):\n        self.start = start\n        self.end = end\n\nclass IntervalSet:\n    def __init__(self):\n        self.intervals = []\n\n    def add_interval(self, start, end):\n        self.intervals.append(Interval(start, end))\n        self.intervals.", "# Initialize the disjoint set\nparent = list(range(100001))\nrank = [0]*100001\nsize = [1]*100001\n\ndef find(x):\n    if x != parent[x]:\n        parent[x] = find(parent[x])\n    return parent[x]\n\ndef union(x", "from sortedcontainers import SortedSet\n\ndef solve():\n    n = int(input())\n    queries = [input().split() for _ in range(n)]\n\n    intervals = SortedSet()\n    parent = {}\n    child = {}\n\n    for q in queries:\n        if q[0] == \"1\":\n            a, b = int(q[1]), int", "def solve():\n    n = int(input())\n    intervals = []\n    parent = [-1] * (n+1)\n    for i in range(n):\n        query = input().split()\n        if query[0] == '1':\n            a, b = int(query[1]), int(query[2])\n            left, right = 0, len(intervals)"], "prompt": "\nQUESTION:\nIn this problem at each moment you have a set of intervals. You can move from interval (a, b) from our set to interval (c, d) from our set if and only if c < a < d or c < b < d. Also there is a path from interval I_1 from our set to interval I_2 from our set if there is a sequence of successive moves starting from I_1 so that we can reach I_2.\n\nYour program should handle the queries of the following two types:  \"1 x y\" (x < y) \u2014 add the new interval (x, y) to the set of intervals. The length of the new interval is guaranteed to be strictly greater than all the previous intervals. \"2 a b\" (a \u2260 b) \u2014 answer the question: is there a path from a-th (one-based) added interval to b-th (one-based) added interval? \n\nAnswer all the queries. Note, that initially you have an empty set of intervals.\n\n\n-----Input-----\n\nThe first line of the input contains integer n denoting the number of queries, (1 \u2264 n \u2264 100). Each of the following lines contains a query as described above. All numbers in the input are integers and don't exceed 10^9 by their absolute value.\n\nIt's guaranteed that all queries are correct.\n\n\n-----Output-----\n\nFor each query of the second type print \"YES\" or \"NO\" on a separate line depending on the answer.\n\n\n-----Examples-----\nInput\n5\n1 1 5\n1 5 11\n2 1 2\n1 2 9\n2 1 2\n\nOutput\nNO\nYES\nPlease provide the solution as pure code only, without explanations or comments.\n\nANSWER:\n```python\n"}}