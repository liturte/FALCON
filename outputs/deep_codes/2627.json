{"2627": {"code": ["class Solution:\n    def maximalRectangle(self, matrix: List[List[str]]) -> int:\n        if not matrix:\n            return 0\n        max_area = 0\n        dp = [[0]*len(matrix[0]) for _ in range(len(matrix))]\n        for i in range(len(matrix)):\n            for j in range(len(matrix[0])):\n                if matrix[i][j] == '1':\n                    if j == 0:\n                        dp[i][j] = 1\n                    else:\n                        dp[i][j] = dp[i][j-1] + 1\n                    min_width = dp[i][j]\n                    for k in range(i, -1, -1):\n                        min_width = min(min_width, dp[k][j])\n                        max_area = max(max_area, min_width*(i-k+1))\n        return max_area\n\n\nThis code uses dynamic programming to solve the problem. The idea is to calculate the maximum area in the histogram for each row and then find the maximum of all the rows. The maximum area in the histogram is calculated by keeping track of the minimum width and height of the rectangle for each column in the row.\n\nIn the first loop, we calculate the maximum width of the rectangle ending at each column for each row. In the second loop, we calculate the maximum area of the rectangle for each column. The maximum area is calculated by finding", "class Solution:\n    def maximalRectangle(self, matrix: List[List[str]]) -> int:\n        if not matrix: return 0\n        m, n = len(matrix), len(matrix[0])\n        left, right, height = [0]*n, [n]*n, [0]*n\n        maxArea = 0\n\n        for i in range(m):\n            cur_left, cur_right = [0]*n, [n-1]*n\n            for j in range(n):\n                if matrix[i][j] == '1':\n                    height[j] += 1\n                else:\n                    height[j] = 0\n            for j in range(1, n):\n                cur_left[j] = j if matrix[i][j] == '1' else left[j]\n            for j in range(n-2, -1, -1):\n                cur_right[j] = cur_right[j+1] if matrix[i][j+1] == '0' else right[j]\n            for j in range(n):\n                maxArea = max(maxArea, height[j]*(right[j]-left[j]+1))\n            left, right = cur_left, cur_right\n        return maxArea\n\n\nThe solution uses the concept of largest rectangle in histogram. It iteratively calculates the maximum area for all sub-matrices ending at each row. For each row, it calcul", "class Solution:\n    def maximalRectangle(self, matrix: List[List[str]]) -> int:\n        if not matrix: return 0\n        m, n = len(matrix), len(matrix[0])\n        left, right, height = [0]*n, [n]*n, [0]*n\n        maxArea = 0\n\n        for i in range(m):\n            cur_left, cur_right = [0]*n, [n]*n\n            for j in range(n):\n                if matrix[i][j] == '1':\n                    height[j] += 1\n                else:\n                    height[j] = 0\n            for j in range(n):\n                if matrix[i][j] == '1':\n                    cur_left[j] = max(cur_left[j], left[j])\n                else:\n                    cur_left[j] = 0\n                    left[j] = 0\n            for j in range(n-1, -1, -1):\n                if matrix[i][j] == '1':\n                    cur_right[j] = min(cur_right[j], right[j])\n                else:\n                    cur_right[j] = n\n                    right[j] = n\n            for j in range(n):\n                maxArea = max(maxArea, height[j]*(right[j]-left[j]))\n                left[j] = cur_left[j]", "class Solution:\n    def maximalRectangle(self, matrix: List[List[str]]) -> int:\n        if not matrix: return 0\n        m, n = len(matrix), len(matrix[0])\n        heights = [0] * n\n        maxArea = 0\n\n        for i in range(m):\n            for j in range(n):\n                # update the height of the building\n                if matrix[i][j] == '1':\n                    heights[j] += 1\n                else:\n                    heights[j] = 0\n            # find the max rectangle area for each row\n            maxArea = max(maxArea, self.largestRectangleArea(heights))\n        return maxArea\n\n    def largestRectangleArea(self, heights):\n        stack = [-1]\n        maxArea = 0\n        for i in range(len(heights)):\n            while stack[-1] != -1 and heights[stack[-1]] >= heights[i]:\n                maxArea = max(maxArea, heights[stack.pop()] * (i - stack[-1] - 1))\n            stack.append(i)\n        while stack[-1] != -1:\n            maxArea = max(maxArea, heights[stack.pop()] * (len(heights) - stack[-1] - 1))\n        return maxArea\n\n\nThis solution works by first transforming the 2D matrix into an array of heights. It then iterates over", "class Solution:\n    def maximalRectangle(self, matrix):\n        if not matrix: return 0\n        m, n = len(matrix), len(matrix[0])\n        left, right, height = [0] * n, [n] * n, [0] * n\n        maxA = 0\n\n        for i in range(m):\n            cur_left, cur_right = -1, n\n            # update height\n            for j in range(n):\n                if matrix[i][j] == '1': height[j] += 1\n                else: height[j] = 0\n            # update left\n            for j in range(n):\n                if matrix[i][j] == '1': left[j] = max(left[j], cur_left)\n                else: left[j] = 0; cur_left = j\n            # update right\n            for j in range(n-1, -1, -1):\n                if matrix[i][j] == '1': right[j] = min(right[j], cur_right)\n                else: right[j] = n; cur_right = j\n            # update max area\n            for j in range(n):\n                maxA = max(maxA, height[j] * (right[j] - left[j]))\n        return maxA\n\n\nExplanation:\nThis solution uses the concept of largest rectangle in histogram, which is a well-known problem in dynamic programming."], "prompt": "\nQUESTION:\nGiven a 2D binary matrix filled with 0's and 1's, find the largest rectangle containing only 1's and return its area.\n\nExample:\n\n\nInput:\n[\n  [\"1\",\"0\",\"1\",\"0\",\"0\"],\n  [\"1\",\"0\",\"1\",\"1\",\"1\"],\n  [\"1\",\"1\",\"1\",\"1\",\"1\"],\n  [\"1\",\"0\",\"0\",\"1\",\"0\"]\n]\nOutput: 6\nSTARTER CODE:\nclass Solution:\n    def maximalRectangle(self, matrix: List[List[str]]) -> int:\n        \n\nPlease provide the solution as pure code only, without explanations or comments.\n\nANSWER:\n```python\n"}}