{"1665": {"code": ["from collections import deque\n\ndef mex(s):\n    i = 0\n    while i in s:\n        i += 1\n    return i\n\ndef solve(n, edges):\n    g = [[] for _ in range(n+1)]\n    for u, v in edges:\n        g[u].append(v)\n        g[v].append(u)\n    q = deque([1])\n    labels = [-1]*(", "from collections import deque\n\ndef mex(s):\n    i = 0\n    while i in s:\n        i += 1\n    return i\n\ndef bfs(u, p, adj):\n    s = set()\n    q = deque([(u, p)])\n    while q:\n        u, p = q.popleft()\n        for v in adj[u]:\n            if v == p: continue\n            q.append", "import sys\nfrom collections import defaultdict\nfrom heapq import *\n\ndef mex(s):\n    i = 0\n    while i in s:\n        i += 1\n    return i\n\ndef solve(n, edges):\n    g = defaultdict(list)\n    for u, v in edges:\n        g[u].append(v)\n        g[v].append(u)\n\n    q = [(0, n, -1)]", "from collections import defaultdict, deque\n\ndef mex(s):\n    i = 0\n    while i in s:\n        i += 1\n    return i\n\ndef solve(n, edges):\n    adj = defaultdict(list)\n    for u, v in edges:\n        adj[u].append(v)\n        adj[v].append(u)\n    labels = [-1] * (n-1)\n    q = deque([", "from collections import deque\n\ndef mex(s):\n    i = 0\n    while i in s:\n        i += 1\n    return i\n\ndef solve(n, edges):\n    adj = [[] for _ in range(n+1)]\n    parent = [0] * (n+1)\n    label = [0] * (n+1)\n    for u, v in edges:\n        adj[u].append(v)"], "prompt": "\nQUESTION:\nYou are given a tree consisting of $n$ nodes. You want to write some labels on the tree's edges such that the following conditions hold:\n\n  Every label is an integer between $0$ and $n-2$ inclusive.  All the written labels are distinct.  The largest value among $MEX(u,v)$ over all pairs of nodes $(u,v)$ is as small as possible. \n\nHere, $MEX(u,v)$ denotes the smallest non-negative integer that isn't written on any edge on the unique simple path from node $u$ to node $v$.\n\n\n-----Input-----\n\nThe first line contains the integer $n$ ($2 \\le n \\le 10^5$)\u00a0\u2014 the number of nodes in the tree.\n\nEach of the next $n-1$ lines contains two space-separated integers $u$ and $v$ ($1 \\le u,v \\le n$) that mean there's an edge between nodes $u$ and $v$. It's guaranteed that the given graph is a tree.\n\n\n-----Output-----\n\nOutput $n-1$ integers. The $i^{th}$ of them will be the number written on the $i^{th}$ edge (in the input order).\n\n\n-----Examples-----\nInput\n3\n1 2\n1 3\n\nOutput\n0\n1\n\nInput\n6\n1 2\n1 3\n2 4\n2 5\n5 6\n\nOutput\n0\n3\n2\n4\n1\n\n\n-----Note-----\n\nThe tree from the second sample:\n\n[Image]\nPlease provide the solution as pure code only, without explanations or comments.\n\nANSWER:\n```python\n"}}