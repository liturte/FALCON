{"817": {"code": ["QUESTION:\nSome time ago Lesha found an entertaining string $s$ consisting of lowercase English letters. Lesha immediately developed an unique algorithm for this string and shared it with you. The algorithm is as follows.\n\nLesha chooses an arbitrary (possibly zero) number of pairs on positions $(i, i + 1)$ in such a way that the following conditions are satisfied:   for each pair $(i, i + 1)$ the inequality $0 \\le i < |s| - 1$ holds;  for each pair $(i, i + 1)$ the equality $s_i = s_{i + 1}$ holds;  there is no index that is contained in more than one pair.  After that Lesha removes all characters on indexes contained in these pairs and the algorithm is over. \n\nLesha is interested in the lexicographically smallest strings he can obtain by applying the algorithm to the suffixes of the given string.\n\n\n-----Input-----\n\nThe only line contains the string $s$ ($1 \\le |s| \\le 10^5$) \u2014 the initial string consisting of lowercase English letters only.\n\n\n-----Output-----\n\nIn $|s|$ lines print the lengths of the answers and the answers themselves, starting with the answer for the longest suffix. The output can be large, so, when some answer is longer than $10$ characters, instead print the first $5$ characters, then \"...\", then the last $2$ characters of the answer.\n\n\n-----Examples-----\nInput\nabcdd\n\nOutput\n3 abc\n2 bc\n1 c\n0 \n1 d\n\nInput\nabbcdddeaaffdfouurtytwoo\n\nOutput\n18 abbcd...tw\n17 bbcdd...tw\n16 bcddd...tw\n15 cddde...tw\n14 dddea...tw\n13 ddeaa...tw\n12 deaad...tw\n11 eaadf...tw\n10 aadfortytw\n9 adfortytw\n8 dfortytw\n9 fdfortytw\n8 dfortytw\n7 fortytw\n6 ortytw\n5 rtytw\n6 urtytw\n5 rtytw\n4 tytw\n3 ytw\n2 tw\n1 w\n0 \n1 o\n\n\n\n-----Note-----\n\nConsider the first example.\n\n  The longest suffix is the whole string \"abcdd\". Choosing one pair $(4, 5)$, Lesha obtains \"abc\".  The next longest suffix is \"bcdd\". Choosing one pair $(3, 4)$, we obtain", "QUESTION:\nSome time ago Lesha found an entertaining string $s$ consisting of lowercase English letters. Lesha immediately developed an unique algorithm for this string and shared it with you. The algorithm is as follows.\n\nLesha chooses an arbitrary (possibly zero) number of pairs on positions $(i, i + 1)$ in such a way that the following conditions are satisfied:   for each pair $(i, i + 1)$ the inequality $0 \\le i < |s| - 1$ holds;  for each pair $(i, i + 1)$ the equality $s_i = s_{i + 1}$ holds;  there is no index that is contained in more than one pair.  After that Lesha removes all characters on indexes contained in these pairs and the algorithm is over. \n\nLesha is interested in the lexicographically smallest strings he can obtain by applying the algorithm to the suffixes of the given string.\n\n\n-----Input-----\n\nThe only line contains the string $s$ ($1 \\le |s| \\le 10^5$) \u2014 the initial string consisting of lowercase English letters only.\n\n\n-----Output-----\n\nIn $|s|$ lines print the lengths of the answers and the answers themselves, starting with the answer for the longest suffix. The output can be large, so, when some answer is longer than $10$ characters, instead print the first $5$ characters, then \"...\", then the last $2$ characters of the answer.\n\n\n-----Examples-----\nInput\nabcdd\n\nOutput\n3 abc\n2 bc\n1 c\n0 \n1 d\n\nInput\nabbcdddeaaffdfouurtytwoo\n\nOutput\n18 abbcd...tw\n17 bbcdd...tw\n16 bcddd...tw\n15 cddde...tw\n14 dddea...tw\n13 ddeaa...tw\n12 deaad...tw\n11 eaadf...tw\n10 aadfortytw\n9 adfortytw\n8 dfortytw\n9 fdfortytw\n8 dfortytw\n7 fortytw\n6 ortytw\n5 rtytw\n6 urtytw\n5 rtytw\n4 tytw\n3 ytw\n2 tw\n1 w\n0 \n1 o\n\n\n\n-----Note-----\n\nConsider the first example.\n\n  The longest suffix is the whole string \"abcdd\". Choosing one pair $(4, 5)$, Lesha obtains \"abc\".  The next longest suffix is \"bcdd\". Choosing one pair $(3, 4)$, we obtain", "QUESTION:\nSome time ago Lesha found an entertaining string $s$ consisting of lowercase English letters. Lesha immediately developed an unique algorithm for this string and shared it with you. The algorithm is as follows.\n\nLesha chooses an arbitrary (possibly zero) number of pairs on positions $(i, i + 1)$ in such a way that the following conditions are satisfied:   for each pair $(i, i + 1)$ the inequality $0 \\le i < |s| - 1$ holds;  for each pair $(i, i + 1)$ the equality $s_i = s_{i + 1}$ holds;  there is no index that is contained in more than one pair.  After that Lesha removes all characters on indexes contained in these pairs and the algorithm is over. \n\nLesha is interested in the lexicographically smallest strings he can obtain by applying the algorithm to the suffixes of the given string.\n\n\n-----Input-----\n\nThe only line contains the string $s$ ($1 \\le |s| \\le 10^5$) \u2014 the initial string consisting of lowercase English letters only.\n\n\n-----Output-----\n\nIn $|s|$ lines print the lengths of the answers and the answers themselves, starting with the answer for the longest suffix. The output can be large, so, when some answer is longer than $10$ characters, instead print the first $5$ characters, then \"...\", then the last $2$ characters of the answer.\n\n\n-----Examples-----\nInput\nabcdd\n\nOutput\n3 abc\n2 bc\n1 c\n0 \n1 d\n\nInput\nabbcdddeaaffdfouurtytwoo\n\nOutput\n18 abbcd...tw\n17 bbcdd...tw\n16 bcddd...tw\n15 cddde...tw\n14 dddea...tw\n13 ddeaa...tw\n12 deaad...tw\n11 eaadf...tw\n10 aadfortytw\n9 adfortytw\n8 dfortytw\n9 fdfortytw\n8 dfortytw\n7 fortytw\n6 ortytw\n5 rtytw\n6 urtytw\n5 rtytw\n4 tytw\n3 ytw\n2 tw\n1 w\n0 \n1 o\n\n\n\n-----Note-----\n\nConsider the first example.\n\n  The longest suffix is the whole string \"abcdd\". Choosing one pair $(4, 5)$, Lesha obtains \"abc\".  The next longest suffix is \"bcdd\". Choosing one pair $(3, 4)$, we get", "QUESTION:\nSome time ago Lesha found an entertaining string $s$ consisting of lowercase English letters. Lesha immediately developed an unique algorithm for this string and shared it with you. The algorithm is as follows.\n\nLesha chooses an arbitrary (possibly zero) number of pairs on positions $(i, i + 1)$ in such a way that the following conditions are satisfied:   for each pair $(i, i + 1)$ the inequality $0 \\le i < |s| - 1$ holds;  for each pair $(i, i + 1)$ the equality $s_i = s_{i + 1}$ holds;  there is no index that is contained in more than one pair.  After that Lesha removes all characters on indexes contained in these pairs and the algorithm is over. \n\nLesha is interested in the lexicographically smallest strings he can obtain by applying the algorithm to the suffixes of the given string.\n\n\n-----Input-----\n\nThe only line contains the string $s$ ($1 \\le |s| \\le 10^5$) \u2014 the initial string consisting of lowercase English letters only.\n\n\n-----Output-----\n\nIn $|s|$ lines print the lengths of the answers and the answers themselves, starting with the answer for the longest suffix. The output can be large, so, when some answer is longer than $10$ characters, instead print the first $5$ characters, then \"...\", then the last $2$ characters of the answer.\n\n\n-----Examples-----\nInput\nabcdd\n\nOutput\n3 abc\n2 bc\n1 c\n0 \n1 d\n\nInput\nabbcdddeaaffdfouurtytwoo\n\nOutput\n18 abbcd...tw\n17 bbcdd...tw\n16 bcddd...tw\n15 cddde...tw\n14 dddea...tw\n13 ddeaa...tw\n12 deaad...tw\n11 eaadf...tw\n10 aadfortytw\n9 adfortytw\n8 dfortytw\n9 fdfortytw\n8 dfortytw\n7 fortytw\n6 ortytw\n5 rtytw\n6 urtytw\n5 rtytw\n4 tytw\n3 ytw\n2 tw\n1 w\n0 \n1 o\n\n\n\n-----Note-----\n\nConsider the first example.\n\n  The longest suffix is the whole string \"abcdd\". Choosing one pair $(4, 5)$, Lesha obtains \"abc\".  The next longest suffix is \"bcdd\". Choosing one pair $(3, 4)$, we obtain", "QUESTION:\nSome time ago Lesha found an entertaining string $s$ consisting of lowercase English letters. Lesha immediately developed an unique algorithm for this string and shared it with you. The algorithm is as follows.\n\nLesha chooses an arbitrary (possibly zero) number of pairs on positions $(i, i + 1)$ in such a way that the following conditions are satisfied:   for each pair $(i, i + 1)$ the inequality $0 \\le i < |s| - 1$ holds;  for each pair $(i, i + 1)$ the equality $s_i = s_{i + 1}$ holds;  there is no index that is contained in more than one pair.  After that Lesha removes all characters on indexes contained in these pairs and the algorithm is over. \n\nLesha is interested in the lexicographically smallest strings he can obtain by applying the algorithm to the suffixes of the given string.\n\n\n-----Input-----\n\nThe only line contains the string $s$ ($1 \\le |s| \\le 10^5$) \u2014 the initial string consisting of lowercase English letters only.\n\n\n-----Output-----\n\nIn $|s|$ lines print the lengths of the answers and the answers themselves, starting with the answer for the longest suffix. The output can be large, so, when some answer is longer than $10$ characters, instead print the first $5$ characters, then \"...\", then the last $2$ characters of the answer.\n\n\n-----Examples-----\nInput\nabcdd\n\nOutput\n3 abc\n2 bc\n1 c\n0 \n1 d\n\nInput\nabbcdddeaaffdfouurtytwoo\n\nOutput\n18 abbcd...tw\n17 bbcdd...tw\n16 bcddd...tw\n15 cddde...tw\n14 dddea...tw\n13 ddeaa...tw\n12 deaad...tw\n11 eaadf...tw\n10 aadfortytw\n9 adfortytw\n8 dfortytw\n9 fdfortytw\n8 dfortytw\n7 fortytw\n6 ortytw\n5 rtytw\n6 urtytw\n5 rtytw\n4 tytw\n3 ytw\n2 tw\n1 w\n0 \n1 o\n\n\n\n-----Note-----\n\nConsider the first example.\n\n  The longest suffix is the whole string \"abcdd\". Choosing one pair $(4, 5)$, Lesha obtains \"abc\".  The next longest suffix is \"bcdd\". Choosing one pair $(3, 4)$, we obtain"], "prompt": "\nQUESTION:\nSome time ago Lesha found an entertaining string $s$ consisting of lowercase English letters. Lesha immediately developed an unique algorithm for this string and shared it with you. The algorithm is as follows.\n\nLesha chooses an arbitrary (possibly zero) number of pairs on positions $(i, i + 1)$ in such a way that the following conditions are satisfied:   for each pair $(i, i + 1)$ the inequality $0 \\le i < |s| - 1$ holds;  for each pair $(i, i + 1)$ the equality $s_i = s_{i + 1}$ holds;  there is no index that is contained in more than one pair.  After that Lesha removes all characters on indexes contained in these pairs and the algorithm is over. \n\nLesha is interested in the lexicographically smallest strings he can obtain by applying the algorithm to the suffixes of the given string.\n\n\n-----Input-----\n\nThe only line contains the string $s$ ($1 \\le |s| \\le 10^5$) \u2014 the initial string consisting of lowercase English letters only.\n\n\n-----Output-----\n\nIn $|s|$ lines print the lengths of the answers and the answers themselves, starting with the answer for the longest suffix. The output can be large, so, when some answer is longer than $10$ characters, instead print the first $5$ characters, then \"...\", then the last $2$ characters of the answer.\n\n\n-----Examples-----\nInput\nabcdd\n\nOutput\n3 abc\n2 bc\n1 c\n0 \n1 d\n\nInput\nabbcdddeaaffdfouurtytwoo\n\nOutput\n18 abbcd...tw\n17 bbcdd...tw\n16 bcddd...tw\n15 cddde...tw\n14 dddea...tw\n13 ddeaa...tw\n12 deaad...tw\n11 eaadf...tw\n10 aadfortytw\n9 adfortytw\n8 dfortytw\n9 fdfortytw\n8 dfortytw\n7 fortytw\n6 ortytw\n5 rtytw\n6 urtytw\n5 rtytw\n4 tytw\n3 ytw\n2 tw\n1 w\n0 \n1 o\n\n\n\n-----Note-----\n\nConsider the first example.\n\n  The longest suffix is the whole string \"abcdd\". Choosing one pair $(4, 5)$, Lesha obtains \"abc\".  The next longest suffix is \"bcdd\". Choosing one pair $(3, 4)$, we obtain \"bc\".  The next longest suffix is \"cdd\". Choosing one pair $(2, 3)$, we obtain \"c\".  The next longest suffix is \"dd\". Choosing one pair $(1, 2)$, we obtain \"\" (an empty string).  The last suffix is the string \"d\". No pair can be chosen, so the answer is \"d\". \n\nIn the second example, for the longest suffix \"abbcdddeaaffdfouurtytwoo\" choose three pairs $(11, 12)$, $(16, 17)$, $(23, 24)$ and we obtain \"abbcdddeaadfortytw\"\nPlease provide the solution as pure code only, without explanations or comments.\n\nANSWER:\n```python\n"}}