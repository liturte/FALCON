{"4166": {"code": ["N, M = map(int, input().split())\ndigits = [0] * N\nc = [list(map(int, input().split())) for _ in range(M)]\nc.sort()\n\nfor i in range(M):\n    digits[c[i][0]-1] = c[i][1]\n\nif digits[0] == 0:\n    print(-1)\nelse:\n    print(int(''.join(map(str, digits))))\n\nThis Python code reads the input and sorts the conditions. Then it fills the digits from left to right according to the conditions. If the first digit is 0, it prints -1, otherwise it prints the smallest integer satisfying the conditions.\n\nNote: This solution assumes that the conditions are sorted in ascending order of the position of the digits. If the conditions are not sorted", "N, M = map(int, input().split())\ndigits = [0]*N\nfor _ in range(M):\n    s, c = map(int, input().split())\n    digits[s-1] = c\n\nif digits[0] == 0:\n    print(-1)\nelse:\n    print(int(''.join(map(str, digits))))\n\n\nThis Python code will solve the problem. It first reads the number of digits N and the number of conditions M. Then, for each condition, it reads the position s and the digit c and sets the corresponding digit in the digits list to c. If the first digit is 0, it prints -1. Otherwise, it prints the smallest integer that satisfies the conditions.", "N, M = map(int, input().split())\nS = [tuple(map(int, input().split())) for _ in range(M)]\n\ndef check(n):\n    n = str(n)\n    if len(n) != N:\n        return False\n    for s, c in S:\n        if len(n) < s or n[s-1] != str(c):\n            return False\n    return True\n\ndef solve():\n    x = 10**N\n    for i in range(x):\n        if check(i):\n            return i\n    return -1\n\nprint(solve())\n\n\nThe code starts by reading the number of digits N and the number of conditions M. Then it reads the conditions and checks if a number satisfies them. The function check() checks if a number n has N dig", "N, M = map(int, input().split())\nS = [0] * M\nC = [0] * M\nfor i in range(M):\n    S[i], C[i] = map(int, input().split())\n\ndef solve(N, M, S, C):\n    res = [0] * N\n    for i in range(M-1, -1, -1):\n        if S[i] > N or res[S[i]-1] >= C[i]:\n            return -1\n        else:\n            res[S[i]-1] = C[i]\n    return int(''.join(map(str, res)))\n\nprint(solve(N, M, S, C))\n\nThis program first reads the number of digits N and the number of conditions M from the input. Then it", "N, M = map(int, input().split())\nS = [0] * M\nC = [0] * M\nfor i in range(M):\n    S[i], C[i] = map(int, input().split())\n\n# Initialize the result with the smallest N-digit number\nres = [0] * N\n\n# Set the digits at the specified positions\nfor i in range(M):\n    res[S[i]-1] = C[i]\n\n# If the number starts with 0, find the smallest non-zero digit\nif res[0] == 0:\n    for i in range(1, 10):\n        if i in res:\n            res[0] = i\n            break\n\n# Convert the list of digits to an integer\nres = int(''.join(map(str, res"], "prompt": "\nQUESTION:\nIf there is an integer not less than 0 satisfying the following conditions, print the smallest such integer; otherwise, print -1.\n - The integer has exactly N digits in base ten. (We assume 0 to be a 1-digit integer. For other integers, leading zeros are not allowed.)\n - The s_i-th digit from the left is c_i. \\left(i = 1, 2, \\cdots, M\\right)\n\n-----Constraints-----\n - All values in input are integers.\n - 1 \\leq N \\leq 3\n - 0 \\leq M \\leq 5\n - 1 \\leq s_i \\leq N\n - 0 \\leq c_i \\leq 9\n\n-----Input-----\nInput is given from Standard Input in the following format:\nN M\ns_1 c_1\n\\vdots\ns_M c_M\n\n-----Output-----\nPrint the answer.\n\n-----Sample Input-----\n3 3\n1 7\n3 2\n1 7\n\n-----Sample Output-----\n702\n\n702 satisfies the conditions - its 1-st and 3-rd digits are 7 and 2, respectively - while no non-negative integer less than 702 satisfies them.\nPlease provide the solution as pure code only, without explanations or comments.\n\nANSWER:\n```python\n"}}