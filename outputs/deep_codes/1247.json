{"1247": {"code": ["def game_of_palindrome():\n    s = input()\n    if len(s) % 2 == sum(s[i] != s[-i-1] for i in range(len(s)//2)) % 2:\n        print('First')\n    else:\n        print('Second')\n\ngame_of_palindrome()\n\n\nThis code works by comparing the characters at the beginning and end of the string, and moving towards the middle. If there is a mismatch, it counts it. At the end of the game, if the count of mismatches is even, the first player wins because he can reorder the letters to make a palindrome. If the count of mismatches is odd, the second player wins because the first player can reorder the letters to make a palindrome.", "def game_of_palindrome(s):\n    return \"First\" if len(set(s)) % 2 == 1 else \"Second\"\n\ns = input()\nprint(game_of_palindrome(s))\n\n\nThis code works by first checking the number of unique characters in the string. If the number of unique characters is odd, then the first player will win because they can rearrange the string to be a palindrome. If the number of unique characters is even, then the second player will win because the first player can always make a move that leaves an even number of unique characters, which will allow the second player to rearrange the string to be a palindrome.\n\nThis code assumes that both players play optimally, so it always chooses the move that will allow the other player to lose.", "s = input()\nif len(s) % 2 == 0:\n    print(\"Second\")\nelse:\n    print(\"First\")\n\n\nEXPLANATION:\nThe solution is based on the fact that the first player can always win if the length of the string is even, and the second player can always win if the length of the string is odd. This is because the first player can always remove an even number of letters from the string to make it a palindrome, and the second player can always remove an odd number of letters to make it a palindrome.\n\nFor example, if the string is \"aba\", the first player can remove the \"b\" to make it a palindrome, \"a\", so the first player wins.\n\nFor example, if the string is \"abca\", the second player can remove the \"b\" or the \"", "def solve(s):\n    from collections import Counter\n    c = Counter(s)\n    odds = sum(x % 2 for x in c.values())\n    return \"First\" if odds <= 1 else \"Second\"\n\ns = input()\nprint(solve(s))\n\n\nEXPLANATION:\nThe first player can always win if the number of characters that appear an odd number of times is less than or equal to 1. This is because the first player can always rearrange the string to become a palindrome. The second player, if they have to make a move, must remove a character that is not an even number of times. Since they can only make this move if the string is already a palindrome, they lose if they have to make this move. Therefore, the second player can always lose if the string is not", "def game_of_palindromes(s):\n    from collections import Counter\n    count = Counter(s)\n    odd_count = sum(v % 2 for v in count.values())\n    return \"First\" if odd_count <= 1 else \"Second\"\n\ns = input()\nprint(game_of_palindromes(s))\n\n\nThis code takes a string as input and returns \"First\" if there are zero or one letters that appear an odd number of times (which is enough to make a palindrome). If there are more than one letters that appear an odd number of times, the second player will win, so it returns \"Second\".\n\nThe Counter class from the collections module is used to count the occurrence of each letter in the string. Then it checks if there is more than one letter that appears an odd"], "prompt": "\nQUESTION:\nThe Little Girl loves problems on games very much. Here's one of them.\n\nTwo players have got a string s, consisting of lowercase English letters. They play a game that is described by the following rules:  The players move in turns; In one move the player can remove an arbitrary letter from string s.  If the player before his turn can reorder the letters in string s so as to get a palindrome, this player wins. A palindrome is a string that reads the same both ways (from left to right, and vice versa). For example, string \"abba\" is a palindrome and string \"abc\" isn't. \n\nDetermine which player will win, provided that both sides play optimally well \u2014 the one who moves first or the one who moves second.\n\n\n-----Input-----\n\nThe input contains a single line, containing string s (1 \u2264 |s|  \u2264  10^3). String s consists of lowercase English letters.\n\n\n-----Output-----\n\nIn a single line print word \"First\" if the first player wins (provided that both players play optimally well). Otherwise, print word \"Second\". Print the words without the quotes.\n\n\n-----Examples-----\nInput\naba\n\nOutput\nFirst\n\nInput\nabca\n\nOutput\nSecond\nPlease provide the solution as pure code only, without explanations or comments.\n\nANSWER:\n```python\n"}}