{"1298": {"code": ["n = int(input())\ns = input()\n\nstack = []\n\nfor i in range(n):\n    if stack and stack[-1] == '1' and s[i] == '0':\n        stack.pop()\n    else:\n        stack.append(s[i])\n\nprint(len", "def min_string_length(n, s):\n    stack = []\n    for i in s:\n        if stack and stack[-1] == '1' and i == '0':\n            stack.pop()\n            continue\n        stack.append(i)\n    return len(stack)\n\nn = int(", "def min_string_length(n, s):\n    stack = []\n    for i in range(n):\n        if stack and stack[-1] == '1' and s[i] == '0':\n            stack.pop()\n        else:\n            stack.append(s[i])\n    return len(", "def min_string_length(n, s):\n    stack = []\n    for i in range(n):\n        if stack and stack[-1] == '1' and s[i] == '0':\n            stack.pop()\n        else:\n            stack.append(s[i])\n    return len(", "n = int(input())\ns = input()\n\nstack = []\nfor c in s:\n    if stack and stack[-1] == '1' and c == '0':\n        stack.pop()\n    else:\n        stack.append(c)\n\nprint(len(stack))\n\n\nThis"], "prompt": "\nQUESTION:\nAndrewid the Android is a galaxy-famous detective. In his free time he likes to think about strings containing zeros and ones.\n\nOnce he thought about a string of length n consisting of zeroes and ones. Consider the following operation: we choose any two adjacent positions in the string, and if one them contains 0, and the other contains 1, then we are allowed to remove these two digits from the string, obtaining a string of length n - 2 as a result.\n\nNow Andreid thinks about what is the minimum length of the string that can remain after applying the described operation several times (possibly, zero)? Help him to calculate this number.\n\n\n-----Input-----\n\nFirst line of the input contains a single integer n (1 \u2264 n \u2264 2\u00b710^5), the length of the string that Andreid has.\n\nThe second line contains the string of length n consisting only from zeros and ones.\n\n\n-----Output-----\n\nOutput the minimum length of the string that may remain after applying the described operations several times.\n\n\n-----Examples-----\nInput\n4\n1100\n\nOutput\n0\n\nInput\n5\n01010\n\nOutput\n1\n\nInput\n8\n11101111\n\nOutput\n6\n\n\n\n-----Note-----\n\nIn the first sample test it is possible to change the string like the following: $1100 \\rightarrow 10 \\rightarrow(\\text{empty})$.\n\nIn the second sample test it is possible to change the string like the following: $01010 \\rightarrow 010 \\rightarrow 0$.\n\nIn the third sample test it is possible to change the string like the following: $11101111 \\rightarrow 111111$.\nPlease provide the solution as pure code only, without explanations or comments.\n\nANSWER:\n```python\n"}}