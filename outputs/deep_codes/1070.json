{"1070": {"code": ["def longest_segment(n, k, colors):\n    longest_segment = 0\n    current_segment = 1\n    for i in range(1, n):\n        if colors[i] != colors[i - 1]:\n            current_segment += 1\n        else:\n            if current_segment > longest_segment:\n                longest_segment = current_segment\n            current_segment = 1\n    if current_segment > longest_segment:\n        longest_segment = current_segment\n    return longest_segment\n\nn, k = map(int, input().split())\ncolors", "def longest_segment(n, k, a):\n    dp = [0]*k\n    dp[a[0]-1] = 1\n    max_len = [1]\n    for i in range(1, n):\n        new_dp = [0]*k\n        new_dp[a[i]-1] = max_len[-1]+1 if a[i] != a[i-1] else max_len[-1]\n        max_len.append(max(new_dp))\n        dp = new_dp\n    return max_len[-1]\n\nn, k = map(int", "n, k = map(int, input().split())\na = list(map(int, input().split()))\n\ni = 0\nj = 0\nmax_length = 0\ncolors = set()\n\nwhile j < n:\n    if a[j] not in colors:\n        colors.add(a[j])\n        j += 1\n        max_length = max(max_length, len(colors))\n    else:\n        colors.remove(a[i])\n        i += 1\n\nprint(max_length)\n\n\nThis solution uses a sliding window approach to solve the problem. The two pointers `i`", "def longest_segment(n, k, colors):\n    max_length = current_length = 1\n    for i in range(1, n):\n        if colors[i] != colors[i-1]:\n            current_length += 1\n            max_length = max(max_length, current_length)\n        else:\n            current_length = 1\n    return max_length\n\nn, k = map(int, input().split())\ncolors = list(map(int, input().split()))\nprint(longest_segment(n, k, colors))\n\n\nThis solution uses a simple loop to iterate over the", "from collections import defaultdict\n\nn, k = map(int, input().split())\na = list(map(int, input().split()))\n\ndp = [0]*n\ndp[0] = 1\nprev = defaultdict(lambda: -1)\nprev[a[0]] = 0\n\nfor i in range(1, n):\n    if a[i] != a[i-1]:\n        dp[i] = max(dp[i-1], dp[prev[a[i-1]]]+1)\n    else:\n        dp[i] = dp[i-1]\n    prev"], "prompt": "\nQUESTION:\nThere are $n$ houses along the road where Anya lives, each one is painted in one of $k$ possible colors.\n\nAnya likes walking along this road, but she doesn't like when two adjacent houses at the road have the same color. She wants to select a long segment of the road such that no two adjacent houses have the same color.\n\nHelp Anya find the longest segment with this property.\n\n\n-----Input-----\n\nThe first line contains two integers $n$ and $k$\u00a0\u2014 the number of houses and the number of colors ($1 \\le n \\le 100\\,000$, $1 \\le k \\le 100\\,000$).\n\nThe next line contains $n$ integers $a_1, a_2, \\ldots, a_n$\u00a0\u2014 the colors of the houses along the road ($1 \\le a_i \\le k$).\n\n\n-----Output-----\n\nOutput a single integer\u00a0\u2014 the maximum number of houses on the road segment having no two adjacent houses of the same color.\n\n\n-----Example-----\nInput\n8 3\n1 2 3 3 2 1 2 2\n\nOutput\n4\n\n\n\n-----Note-----\n\nIn the example, the longest segment without neighboring houses of the same color is from the house 4 to the house 7. The colors of the houses are $[3, 2, 1, 2]$ and its length is 4 houses.\nPlease provide the solution as pure code only, without explanations or comments.\n\nANSWER:\n```python\n"}}