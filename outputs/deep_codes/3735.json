{"3735": {"code": ["def S(n):\n    return sum(map(int, str(n)))\n\ndef solve(n):\n    if n < 10:\n        return n * (n + 1) // 2\n    start = 1\n    while start * 9 * len(str", "def S(x):\n    return sum(map(int, str(x)))\n\ndef solve(n):\n    if n < 10:\n        return n*(n+1)//2\n    d = 10**(len(str(n))-1)", "def S(n):\n    return sum(map(int, str(n)))\n\ndef solve(n):\n    if n < 10:\n        return n*(n+1)//2\n    start = 1\n    while start <= n and start*9 + S(", "def S(x):\n    return sum(map(int, str(x)))\n\ndef solve(n):\n    if n < 10:\n        return n * (n + 1) // 2\n    start = 1\n    while start * 9 * len(str", "def S(n):\n    return sum(map(int, str(n)))\n\ndef solve(n):\n    if n < 10:\n        return n * (n - 1) // 2\n    start = 10 ** (len(str(n)) -"], "prompt": "\nQUESTION:\nYou are given a positive integer $n$.\n\nLet $S(x)$ be sum of digits in base 10 representation of $x$, for example, $S(123) = 1 + 2 + 3 = 6$, $S(0) = 0$.\n\nYour task is to find two integers $a, b$, such that $0 \\leq a, b \\leq n$, $a + b = n$ and $S(a) + S(b)$ is the largest possible among all such pairs.\n\n\n-----Input-----\n\nThe only line of input contains an integer $n$ $(1 \\leq n \\leq 10^{12})$.\n\n\n-----Output-----\n\nPrint largest $S(a) + S(b)$ among all pairs of integers $a, b$, such that $0 \\leq a, b \\leq n$ and $a + b = n$.\n\n\n-----Examples-----\nInput\n35\n\nOutput\n17\n\nInput\n10000000000\n\nOutput\n91\n\n\n\n-----Note-----\n\nIn the first example, you can choose, for example, $a = 17$ and $b = 18$, so that $S(17) + S(18) = 1 + 7 + 1 + 8 = 17$. It can be shown that it is impossible to get a larger answer.\n\nIn the second test example, you can choose, for example, $a = 5000000001$ and $b = 4999999999$, with $S(5000000001) + S(4999999999) = 91$. It can be shown that it is impossible to get a larger answer.\nPlease provide the solution as pure code only, without explanations or comments.\n\nANSWER:\n```python\n"}}