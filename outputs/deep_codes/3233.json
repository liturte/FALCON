{"3233": {"code": ["from collections import Counter\n\ndef median(lst):\n    n = len(lst)\n    s = sorted(lst)\n    return (sum(s[n//2-1:n//2+1])/2.0, s[n//2])[n % 2] if n else None\n\ndef solve(n, arr):\n    cnt = Counter()\n    scary = 0\n    for i in range(1, n):\n        if arr[i-1] > arr[0]:\n            sc", "def scary_subarrays(n, p):\n    left = [0] * n\n    right = [0] * n\n    stack = []\n    for i in range(n):\n        while stack and p[i] < p[stack[-1]]:\n            stack.pop()\n        left[i] = stack[-1] if stack else -1\n        stack.append(i)\n\n    stack = []\n    for i in range(n - 1, -1, -1):\n        while stack and p[i", "from collections import Counter\nfrom itertools import accumulate\nfrom bisect import bisect_left, bisect_right\n\nn = int(input())\na = list(map(int, input().split()))\n\ncnt = Counter()\nprefix = list(accumulate(a))\n\nfor i in range(n):\n    cnt[a[i]] += bisect_right(a, a[i]) - bisect_left(a, a[i])\n\nans = sum(cnt[a[i]] * (", "def count_scary_subarrays(n, p):\n    count = [0] * (n + 1)\n    less_than = [-1] * (n + 1)\n    stack = []\n    result = 0\n\n    for i in range(n):\n        while stack and p[i] < p[stack[-1]]:\n            stack.pop()\n        if stack:\n            less_than[i] = stack[-1]\n        stack.append(i)\n\n    for i in range(n - 1", "def median(lst):\n    n = len(lst)\n    s = sorted(lst)\n    return (sum(s[n//2-1:n//2+1])/2.0, s[n//2])[n % 2] if n else None\n\ndef count_scary_subarrays(n, p):\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n+1):\n            if p[i] == median(p[i"], "prompt": "\nQUESTION:\nBrandon Greg Jr. considers an array to be scary if its leftmost element is the median of its elements. Given an array with distinct elements $[p_1, p_2, \\ldots , p_ n]$, Brandon wants to count the number of scary subarrays.\n\nA subarray is some contiguous chunk of elements $[p_ l, p_{l+1}, \\ldots , p_ r]$ where $l\\le r$. The median of a set of $n$ numbers is the middle number in sorted order if $n$ is odd, or the average of the middle two numbers in sorted order if $n$ is even. Note that all subarrays of length $1$ are scary, and no even-length subarrays are scary because the elements are all distinct.\n\n-----Input-----\nThe first line of input contains a single integer $n$ ($1\\le n\\le 2\\cdot 10^5$), representing the length of the given array.\n\nThe second line of input contains $n$ space-separated integers $p_ i$ ($1\\le p_ i\\le n$), representing the given array. It is guaranteed that the $p_ i$\u2019s are distinct.\n\n-----Output-----\nOutput one integer representing the number of scary subarrays.\n\n-----Examples-----\nSample Input 1:\n5\n1 2 3 4 5\nSample Output 1:\n5\n\nSample Input 2:\n6\n3 2 1 6 4 5\nSample Output 2:\n8\nPlease provide the solution as pure code only, without explanations or comments.\n\nANSWER:\n```python\n"}}