{"2069": {"code": ["QUESTION:\nYou are given a permutation p of length n. Also you are given m foe pairs (a_{i}, b_{i}) (1 \u2264 a_{i}, b_{i} \u2264 n, a_{i} \u2260 b_{i}). \n\nYour task is to count the number of different intervals (x, y) (1 \u2264 x \u2264 y \u2264 n) that do not contain any foe pairs. So you shouldn't count intervals (x, y) that contain at least one foe pair in it (the positions and order of the values from the foe pair are not important).\n\nConsider some example: p = [1, 3, 2, 4] and foe pairs are {(3, 2), (4, 2)}. The interval (1, 3) is incorrect because it contains a foe pair (3, 2). The interval (1, 4) is also incorrect because it contains two foe pairs (3, 2) and (4, 2). But the interval (1, 2) is correct because it doesn't contain any foe pair.\n\n\n-----Input-----\n\nThe first line contains two integers n and m (1 \u2264 n, m \u2264 3\u00b710^5) \u2014 the length of the permutation p and the number of foe pairs.\n\nThe second line contains n distinct integers p_{i} (1 \u2264 p_{i} \u2264 n) \u2014 the elements of the permutation p.\n\nEach of the next m lines contains two integers (a_{i}, b_{i}) (1 \u2264 a_{i}, b_{i} \u2264 n, a_{i} \u2260 b_{i}) \u2014 the i-th foe pair. Note a foe pair can appear multiple times in the given list.\n\n\n-----Output-----\n\nPrint the only integer c \u2014 the number of different intervals (x, y) that does not contain any foe pairs.\n\nNote that the answer can be too large, so you should use 64-bit integer type to store it. In C++ you can use the long long integer type and in Java you can use long integer type.\n\n\n-----Examples-----\nInput\n4 2\n1 3 2 4\n3 2\n2 4\n\nOutput\n5\n\nInput\n9 5\n9 7 2 3 1 4 6 5 8\n1 6\n4 5\n2 7\n7 2\n2 7\n\nOutput\n200", "QUESTION:\nYou are given a permutation p of length n. Also you are given m foe pairs (a_{i}, b_{i}) (1 \u2264 a_{i}, b_{i} \u2264 n, a_{i} \u2260 b_{i}). \n\nYour task is to count the number of different intervals (x, y) (1 \u2264 x \u2264 y \u2264 n) that do not contain any foe pairs. So you shouldn't count intervals (x, y) that contain at least one foe pair in it (the positions and order of the values from the foe pair are not important).\n\nConsider some example: p = [1, 3, 2, 4] and foe pairs are {(3, 2), (4, 2)}. The interval (1, 3) is incorrect because it contains a foe pair (3, 2). The interval (1, 4) is also incorrect because it contains two foe pairs (3, 2) and (4, 2). But the interval (1, 2) is correct because it doesn't contain any foe pair.\n\n\n-----Input-----\n\nThe first line contains two integers n and m (1 \u2264 n, m \u2264 3\u00b710^5) \u2014 the length of the permutation p and the number of foe pairs.\n\nThe second line contains n distinct integers p_{i} (1 \u2264 p_{i} \u2264 n) \u2014 the elements of the permutation p.\n\nEach of the next m lines contains two integers (a_{i}, b_{i}) (1 \u2264 a_{i}, b_{i} \u2264 n, a_{i} \u2260 b_{i}) \u2014 the i-th foe pair. Note a foe pair can appear multiple times in the given list.\n\n\n-----Output-----\n\nPrint the only integer c \u2014 the number of different intervals (x, y) that does not contain any foe pairs.\n\nNote that the answer can be too large, so you should use 64-bit integer type to store it. In C++ you can use the long long integer type and in Java you can use long integer type.\n\n\n-----Examples-----\nInput\n4 2\n1 3 2 4\n3 2\n2 4\n\nOutput\n5\n\nInput\n9 5\n9 7 2 3 1 4 6 5 8\n1 6\n4 5\n2 7\n7 2\n2 7\n\nOutput\n204", "QUESTION:\nYou are given a permutation p of length n. Also you are given m foe pairs (a_{i}, b_{i}) (1 \u2264 a_{i}, b_{i} \u2264 n, a_{i} \u2260 b_{i}). \n\nYour task is to count the number of different intervals (x, y) (1 \u2264 x \u2264 y \u2264 n) that do not contain any foe pairs. So you shouldn't count intervals (x, y) that contain at least one foe pair in it (the positions and order of the values from the foe pair are not important).\n\nConsider some example: p = [1, 3, 2, 4] and foe pairs are {(3, 2), (4, 2)}. The interval (1, 3) is incorrect because it contains a foe pair (3, 2). The interval (1, 4) is also incorrect because it contains two foe pairs (3, 2) and (4, 2). But the interval (1, 2) is correct because it doesn't contain any foe pair.\n\n\n-----Input-----\n\nThe first line contains two integers n and m (1 \u2264 n, m \u2264 3\u00b710^5) \u2014 the length of the permutation p and the number of foe pairs.\n\nThe second line contains n distinct integers p_{i} (1 \u2264 p_{i} \u2264 n) \u2014 the elements of the permutation p.\n\nEach of the next m lines contains two integers (a_{i}, b_{i}) (1 \u2264 a_{i}, b_{i} \u2264 n, a_{i} \u2260 b_{i}) \u2014 the i-th foe pair. Note a foe pair can appear multiple times in the given list.\n\n\n-----Output-----\n\nPrint the only integer c \u2014 the number of different intervals (x, y) that does not contain any foe pairs.\n\nNote that the answer can be too large, so you should use 64-bit integer type to store it. In C++ you can use the long long integer type and in Java you can use long integer type.\n\n\n-----Examples-----\nInput\n4 2\n1 3 2 4\n3 2\n2 4\n\nOutput\n5\n\nInput\n9 5\n9 7 2 3 1 4 6 5 8\n1 6\n4 5\n2 7\n7 2\n2 7\n\nOutput\n20", "QUESTION:\nYou are given a permutation p of length n. Also you are given m foe pairs (a_{i}, b_{i}) (1 \u2264 a_{i}, b_{i} \u2264 n, a_{i} \u2260 b_{i}). \n\nYour task is to count the number of different intervals (x, y) (1 \u2264 x \u2264 y \u2264 n) that do not contain any foe pairs. So you shouldn't count intervals (x, y) that contain at least one foe pair in it (the positions and order of the values from the foe pair are not important).\n\nConsider some example: p = [1, 3, 2, 4] and foe pairs are {(3, 2), (4, 2)}. The interval (1, 3) is incorrect because it contains a foe pair (3, 2). The interval (1, 4) is also incorrect because it contains two foe pairs (3, 2) and (4, 2). But the interval (1, 2) is correct because it doesn't contain any foe pair.\n\n\n-----Input-----\n\nThe first line contains two integers n and m (1 \u2264 n, m \u2264 3\u00b710^5) \u2014 the length of the permutation p and the number of foe pairs.\n\nThe second line contains n distinct integers p_{i} (1 \u2264 p_{i} \u2264 n) \u2014 the elements of the permutation p.\n\nEach of the next m lines contains two integers (a_{i}, b_{i}) (1 \u2264 a_{i}, b_{i} \u2264 n, a_{i} \u2260 b_{i}) \u2014 the i-th foe pair. Note a foe pair can appear multiple times in the given list.\n\n\n-----Output-----\n\nPrint the only integer c \u2014 the number of different intervals (x, y) that does not contain any foe pairs.\n\nNote that the answer can be too large, so you should use 64-bit integer type to store it. In C++ you can use the long long integer type and in Java you can use long integer type.\n\n\n-----Examples-----\nInput\n4 2\n1 3 2 4\n3 2\n2 4\n\nOutput\n5\n\nInput\n9 5\n9 7 2 3 1 4 6 5 8\n1 6\n4 5\n2 7\n7 2\n2 7\n\nOutput\n20", "QUESTION:\nYou are given a permutation p of length n. Also you are given m foe pairs (a_{i}, b_{i}) (1 \u2264 a_{i}, b_{i} \u2264 n, a_{i} \u2260 b_{i}). \n\nYour task is to count the number of different intervals (x, y) (1 \u2264 x \u2264 y \u2264 n) that do not contain any foe pairs. So you shouldn't count intervals (x, y) that contain at least one foe pair in it (the positions and order of the values from the foe pair are not important).\n\nConsider some example: p = [1, 3, 2, 4] and foe pairs are {(3, 2), (4, 2)}. The interval (1, 3) is incorrect because it contains a foe pair (3, 2). The interval (1, 4) is also incorrect because it contains two foe pairs (3, 2) and (4, 2). But the interval (1, 2) is correct because it doesn't contain any foe pair.\n\n\n-----Input-----\n\nThe first line contains two integers n and m (1 \u2264 n, m \u2264 3\u00b710^5) \u2014 the length of the permutation p and the number of foe pairs.\n\nThe second line contains n distinct integers p_{i} (1 \u2264 p_{i} \u2264 n) \u2014 the elements of the permutation p.\n\nEach of the next m lines contains two integers (a_{i}, b_{i}) (1 \u2264 a_{i}, b_{i} \u2264 n, a_{i} \u2260 b_{i}) \u2014 the i-th foe pair. Note a foe pair can appear multiple times in the given list.\n\n\n-----Output-----\n\nPrint the only integer c \u2014 the number of different intervals (x, y) that does not contain any foe pairs.\n\nNote that the answer can be too large, so you should use 64-bit integer type to store it. In C++ you can use the long long integer type and in Java you can use long integer type.\n\n\n-----Examples-----\nInput\n4 2\n1 3 2 4\n3 2\n2 4\n\nOutput\n5\n\nInput\n9 5\n9 7 2 3 1 4 6 5 8\n1 6\n4 5\n2 7\n7 2\n2 7\n\nOutput\n20"], "prompt": "\nQUESTION:\nYou are given a permutation p of length n. Also you are given m foe pairs (a_{i}, b_{i}) (1 \u2264 a_{i}, b_{i} \u2264 n, a_{i} \u2260 b_{i}). \n\nYour task is to count the number of different intervals (x, y) (1 \u2264 x \u2264 y \u2264 n) that do not contain any foe pairs. So you shouldn't count intervals (x, y) that contain at least one foe pair in it (the positions and order of the values from the foe pair are not important).\n\nConsider some example: p = [1, 3, 2, 4] and foe pairs are {(3, 2), (4, 2)}. The interval (1, 3) is incorrect because it contains a foe pair (3, 2). The interval (1, 4) is also incorrect because it contains two foe pairs (3, 2) and (4, 2). But the interval (1, 2) is correct because it doesn't contain any foe pair.\n\n\n-----Input-----\n\nThe first line contains two integers n and m (1 \u2264 n, m \u2264 3\u00b710^5) \u2014 the length of the permutation p and the number of foe pairs.\n\nThe second line contains n distinct integers p_{i} (1 \u2264 p_{i} \u2264 n) \u2014 the elements of the permutation p.\n\nEach of the next m lines contains two integers (a_{i}, b_{i}) (1 \u2264 a_{i}, b_{i} \u2264 n, a_{i} \u2260 b_{i}) \u2014 the i-th foe pair. Note a foe pair can appear multiple times in the given list.\n\n\n-----Output-----\n\nPrint the only integer c \u2014 the number of different intervals (x, y) that does not contain any foe pairs.\n\nNote that the answer can be too large, so you should use 64-bit integer type to store it. In C++ you can use the long long integer type and in Java you can use long integer type.\n\n\n-----Examples-----\nInput\n4 2\n1 3 2 4\n3 2\n2 4\n\nOutput\n5\n\nInput\n9 5\n9 7 2 3 1 4 6 5 8\n1 6\n4 5\n2 7\n7 2\n2 7\n\nOutput\n20\n\n\n\n-----Note-----\n\nIn the first example the intervals from the answer are (1, 1), (1, 2), (2, 2), (3, 3) and (4, 4).\nPlease provide the solution as pure code only, without explanations or comments.\n\nANSWER:\n```python\n"}}