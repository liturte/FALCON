{"1274": {"code": ["import heapq\n\nN, M = map(int, input().split())\njobs = [list(map(int, input().split())) for _ in range(N)]\n\njobs.sort()\nque = []\ntotal_reward = 0\nday = 0\n\nfor a, b in jobs:\n    if day + a <= M:\n        day += a\n        heapq.heappush(que, -b)\n    elif que and que[0] < -b:\n        total_reward -= heapq.heappop(que)\n        heapq.heapp", "import heapq\n\nN, M = map(int, input().split())\njobs = []\nfor _ in range(N):\n    A, B = map(int, input().split())\n    jobs.append((A, B))\n\njobs.sort()\n\nque = []\ntotal = 0\nday = 0\n\nwhile day < M:\n    while jobs and jobs[0][0] <= day + 1:\n        a, b = jobs.pop(0)\n        heapq.heappush(que, -b)\n    if que:\n        total += -heap", "import heapq\n\ndef max_reward(jobs, max_days):\n    jobs.sort()\n    pq = []\n    total_reward = 0\n    for day in range(1, max_days+1):\n        while jobs and jobs[0][0] <= day:\n            a, b = jobs.pop(0)\n            heapq.heappush(pq, -b)\n        if pq:\n            total_reward -= heapq.heappop(pq)\n        elif jobs:\n            a, b = jobs.pop(0)", "import heapq\n\nN, M = map(int, input().split())\njobs = [list(map(int, input().split())) for _ in range(N)]\n\njobs.sort()\n\npq = []\ntotal_days = 0\ntotal_reward = 0\n\nfor a, b in jobs:\n    if total_days + a <= M:\n        total_days += a\n        heapq.heappush(pq, -b)\n    elif pq and pq[0] < -b:\n        total_reward -= heapq.heapp", "import heapq\n\ndef max_reward(jobs, m):\n    jobs.sort()\n    h = []\n    total_reward = 0\n    day = 0\n    for day in range(1, m+1):\n        while jobs and jobs[0][0] <= day:\n            deadline, reward = jobs.pop(0)\n            heapq.heappush(h, -reward)\n        if h:\n            total_reward += -heapq.heappop(h)\n        elif jobs:\n            _, reward = jobs.pop(0)"], "prompt": "\nQUESTION:\nThere are N one-off jobs available. If you take the i-th job and complete it, you will earn the reward of B_i after A_i days from the day you do it.\nYou can take and complete at most one of these jobs in a day.\nHowever, you cannot retake a job that you have already done.\nFind the maximum total reward that you can earn no later than M days from today.\nYou can already start working today.\n\n-----Constraints-----\n - All values in input are integers.\n - 1 \\leq N \\leq 10^5\n - 1 \\leq M \\leq 10^5\n - 1 \\leq A_i \\leq 10^5\n - 1 \\leq B_i \\leq 10^4\n\n-----Input-----\nInput is given from Standard Input in the following format:\nN M\nA_1 B_1\nA_2 B_2\n\\vdots\nA_N B_N\n\n-----Output-----\nPrint the maximum total reward that you can earn no later than M days from today.\n\n-----Sample Input-----\n3 4\n4 3\n4 1\n2 2\n\n-----Sample Output-----\n5\n\nYou can earn the total reward of 5 by taking the jobs as follows:\n - Take and complete the first job today. You will earn the reward of 3 after four days from today.\n - Take and complete the third job tomorrow. You will earn the reward of 2 after two days from tomorrow, that is, after three days from today.\nPlease provide the solution as pure code only, without explanations or comments.\n\nANSWER:\n```python\n"}}