{"652": {"code": ["from collections import defaultdict\n\ndef parallelograms(n, points):\n    x_dict = defaultdict(list)\n    y_dict = defaultdict(list)\n    for i, (x, y) in enumerate(points):\n        x_dict[x].append((y, i))\n        y_dict[y].append((x, i))\n\n    for k in x_dict:\n        x_dict[k].sort()\n    for k in y_dict:\n        y_dict[k].sort()\n\n    count = 0\n    for x in x_dict:\n        for i in range(len(x_dict[x])):\n            for j in range(i+1, len(x_dict[x])):\n                y1, idx1 = x_dict[x][i]\n                y2, idx2 = x_dict[x][j]\n                for y in range(y1+1, y2):\n                    if (y, x) in y_dict:\n                        for x1, idx in y_dict[y]:\n                            if idx1 < idx < idx2 and (y, x1) in x_dict:\n                                count += 1\n    return count\n\nn = int", "import sys\nfrom collections import defaultdict\n\ndef solve(n, points):\n    cnt = defaultdict(int)\n    for i in range(n):\n        for j in range(i+1, n):\n            dx, dy = points[i][0]-points[j][0], points[i][1]-points[j][1]\n            cnt[(dx,dy)] += 1\n    ans = 0\n    for v in cnt.values():\n        ans += v*(v-1)//2\n    return ans\n\nn = int(sys.stdin.readline())\npoints = [tuple(map(int, sys.stdin.readline().split())) for _ in range(n)]\nprint(solve(n, points))\n\n\nExplanation:\nThe code uses a dictionary to count the number of points that have the same difference in x and y coordinates. Then it calculates the number of ways to choose 2 points from each group and adds them up. This is a combination formula, nCr = nC2 = n*(n-1)/2.\n\nThis solution is based on the fact that to form a parallelogram, you need 2 points that have the same difference in x and y coordinates,", "from collections import defaultdict\ndef count_parallelograms(n, points):\n    count = 0\n    point_map = defaultdict(int)\n    for point in points:\n        point_map[point] += 1\n    for point1 in points:\n        for point2 in points:\n            if point1 != point2:\n                x1, y1 = point1\n                x2, y2 = point2\n                if (x1 + x2, y1 + y2) in point_map and (x1 - x2, y1 - y2) in point_map:\n                    count += 1\n    return count // 4\n\nn = int(input().strip())\npoints = [tuple(map(int, input().strip().split())) for _ in range(n)]\nprint(count_parallelograms(n, points))\n\n\nThis code works by first counting the number of times each point appears in the input. Then, for each pair of points, it checks if the points that would be on the opposite corners of the parallelogram (which are obtained by adding or subtracting the x and y coordinates of one point from the other) are in the point map. If they are, it increments the count of parallelog", "from collections import defaultdict\n\ndef solve(points):\n    n = len(points)\n    x_dict = defaultdict(set)\n    y_dict = defaultdict(set)\n    for x, y in points:\n        x_dict[x].add(y)\n        y_dict[y].add(x)\n    x_dict = {x: len(ys) for x, ys in x_dict.items() if len(ys) >= 2}\n    y_dict = {y: len(xs) for y, xs in y_dict.items() if len(xs) >= 2}\n    total = 0\n    for x, count in x_dict.items():\n        for y, count2 in y_dict.items():\n            total += count * count2\n    return total\n\nn = int(input().strip())\npoints = [tuple(map(int, input().strip().split())) for _ in range(n)]\nprint(solve(points))\n\nThis code works by first constructing two dictionaries, `x_dict` and `y_dict`, where the keys are x-coordinates and y-coordinates, and the values are sets of y-coordinates and x-coordinates that", "from collections import defaultdict\nfrom itertools import combinations\n\ndef get_slope(p1, p2):\n    return (p1[0] - p2[0]) / (p1[1] - p2[1]) if p1[1] != p2[1] else float('inf')\n\ndef solve(points):\n    slopes = defaultdict(int)\n    for p1, p2 in combinations(points, 2):\n        slopes[get_slope(p1, p2)] += 1\n    return sum(v*(v-1) for v in slopes.values()) // 2\n\nn = int(input())\npoints = [tuple(map(int, input().split())) for _ in range(n)]\nprint(solve(points))\n\nThis code uses a combination of defaultdict and itertools.combinations to count the number of parallelograms. It calculates the slope between each pair of points, and counts the number of pairs with the same slope. The number of parallelograms is then calculated as the sum of the number of pairs for each slope, divided by 2.\n\nNote that this code assumes that the input points are distinct and no three of them lie on the same line."], "prompt": "\nQUESTION:\nYou are given n points on a plane. All the points are distinct and no three of them lie on the same line. Find the number of parallelograms with the vertices at the given points.\n\n\n-----Input-----\n\nThe first line of the input contains integer n (1 \u2264 n \u2264 2000) \u2014 the number of points.\n\nEach of the next n lines contains two integers (x_{i}, y_{i}) (0 \u2264 x_{i}, y_{i} \u2264 10^9) \u2014 the coordinates of the i-th point.\n\n\n-----Output-----\n\nPrint the only integer c \u2014 the number of parallelograms with the vertices at the given points.\n\n\n-----Example-----\nInput\n4\n0 1\n1 0\n1 1\n2 0\n\nOutput\n1\nPlease provide the solution as pure code only, without explanations or comments.\n\nANSWER:\n```python\n"}}