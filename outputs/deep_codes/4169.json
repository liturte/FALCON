{"4169": {"code": ["import sys\n\ndef solve(n, m, a, b):\n    stores = [(a[i], b[i]) for i in range(n)]\n    stores.sort()\n\n    total = 0\n    for price, amount in stores:\n        if m <= amount:\n            total += price * m\n            break\n        else:\n            total += price * amount\n            m -= amount\n\n    return total\n\nn, m = map(int, sys.stdin.readline().split())\na = list(map(int, sys.stdin.readline().split()))\nb = list", "import sys\nimport heapq\n\ndef main():\n    N, M = map(int, sys.stdin.readline().split())\n    A = []\n    B = []\n    for _ in range(N):\n        a, b = map(int, sys.stdin.readline().split())\n        A.append(a)\n        B.append(b)\n\n    # heapq can be used to maintain a priority queue\n    hq = []\n    for i in range(N):\n        # heapq.heappush(heap, value)\n        # heap[0] is the", "import sys\ninput = sys.stdin.readline\n\nN, M = map(int, input().split())\nAB = [list(map(int, input().split())) for _ in range(N)]\n\nleft = 0\nright = 10**19\nwhile right - left > 1:\n    mid = (left + right) // 2\n    total = 0\n    for i in range(N):\n        total += max(0, min(AB[i][1], mid // AB[i][0]))\n    if total >= M:\n        right = mid\n    else:\n        left = mid", "import sys\n\ndef main():\n    N, M = map(int, sys.stdin.readline().split())\n    drinks = []\n    for _ in range(N):\n        A, B = map(int, sys.stdin.readline().split())\n        drinks.append((A, B))\n\n    drinks.sort()\n\n    total = 0\n    for A, B in drinks:\n        if M <= B:\n            total += A * M\n            break\n        else:\n            total += A * B\n            M -= B\n\n    print(total)\n\nif __name", "import sys\ninput = sys.stdin.readline\n\nN, M = map(int, input().split())\nAB = [list(map(int, input().split())) for _ in range(N)]\n\nl, r = 0, 10**19\nwhile r-l > 1:\n    mid = (l+r)//2\n    cnt = 0\n    for i in range(N):\n        cnt += min(mid//AB[i][0], AB[i][1])\n    if cnt >= M:\n        r = mid\n    else:\n        l = mid"], "prompt": "\nQUESTION:\nHearing that energy drinks increase rating in those sites, Takahashi decides to buy up M cans of energy drinks.\nThere are N stores that sell energy drinks. In the i-th store, he can buy at most B_i cans of energy drinks for A_i yen (the currency of Japan) each.\nWhat is the minimum amount of money with which he can buy M cans of energy drinks?\nIt is guaranteed that, in the given inputs, a sufficient amount of money can always buy M cans of energy drinks.\n\n-----Constraints-----\n - All values in input are integers.\n - 1 \\leq N, M \\leq 10^5\n - 1 \\leq A_i \\leq 10^9\n - 1 \\leq B_i \\leq 10^5\n - B_1 + ... + B_N \\geq M\n\n-----Input-----\nInput is given from Standard Input in the following format:\nN M\nA_1 B_1\nA_2 B_2\n\\vdots\nA_N B_N\n\n-----Output-----\nPrint the minimum amount of money with which Takahashi can buy M cans of energy drinks.\n\n-----Sample Input-----\n2 5\n4 9\n2 4\n\n-----Sample Output-----\n12\n\nWith 12 yen, we can buy one drink at the first store and four drinks at the second store, for the total of five drinks. However, we cannot buy 5 drinks with 11 yen or less.\nPlease provide the solution as pure code only, without explanations or comments.\n\nANSWER:\n```python\n"}}