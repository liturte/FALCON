{"4664": {"code": ["QUESTION:\n=====Function Descriptions=====\nObjective\nToday, we're learning about a new data type: sets.\n\nConcept\n\nIf the inputs are given on one line separated by a space character, use split() to get the separate values in the form of a list:\n\n>> a = raw_input()\n5 4 3 2\n>> lis = a.split()\n>> print (lis)\n['5', '4', '3', '2']\n\nIf the list values are all integer types, use the map() method to convert all the strings to integers.\n\n>> newlis = list(map(int, lis))\n>> print (newlis)\n[5, 4, 3, 2]\n\nSets are an unordered bag of unique values. A single set contains values of any immutable data type.\n\nCREATING SETS\n\n>> myset = {1, 2} # Directly assigning values to a set\n>> myset = set()  # Initializing a set\n>> myset = set(['a', 'b']) # Creating a set from a list\n>> myset\n{'a', 'b'}\n\n\nMODIFYING SETS\n\nUsing the add() function:\n\n>> myset.add('c')\n>> myset\n{'a', 'c', 'b'}\n>> myset.add('a') # As 'a' already exists in the set, nothing happens\n>> myset.add((5, 4))\n>> myset\n{'a', 'c', 'b', (5, 4)}\n\n\nUsing the update() function:\n\n>> myset.update([1, 2, 3, 4]) # update() only works for iterable objects\n>> myset\n{'a', 1, 'c', 'b', 4, 2, (5, 4), 3}\n>> myset.update({1, 7, 8})\n>> myset\n{'a', 1, 'c', 'b', 4, 7, 8, 2, (5, 4), 3}\n>> myset.update({1, 6}, [5, 13])\n>> myset\n{'a', 1, 'c', 'b', 4, 5, 6, 7, 8, 2, (5, 4), 13, 3}\n\n\nREMOVING ITEMS\n\nBoth the discard() and remove() functions take a single value as an argument and removes that value from the set. If that value is not present, discard() does nothing,", "QUESTION:\n=====Function Descriptions=====\nObjective\nToday, we're learning about a new data type: sets.\n\nConcept\n\nIf the inputs are given on one line separated by a space character, use split() to get the separate values in the form of a list:\n\n>> a = raw_input()\n5 4 3 2\n>> lis = a.split()\n>> print (lis)\n['5', '4', '3', '2']\n\nIf the list values are all integer types, use the map() method to convert all the strings to integers.\n\n>> newlis = list(map(int, lis))\n>> print (newlis)\n[5, 4, 3, 2]\n\nSets are an unordered bag of unique values. A single set contains values of any immutable data type.\n\nCREATING SETS\n\n>> myset = {1, 2} # Directly assigning values to a set\n>> myset = set()  # Initializing a set\n>> myset = set(['a', 'b']) # Creating a set from a list\n>> myset\n{'a', 'b'}\n\n\nMODIFYING SETS\n\nUsing the add() function:\n\n>> myset.add('c')\n>> myset\n{'a', 'c', 'b'}\n>> myset.add('a') # As 'a' already exists in the set, nothing happens\n>> myset.add((5, 4))\n>> myset\n{'a', 'c', 'b', (5, 4)}\n\n\nUsing the update() function:\n\n>> myset.update([1, 2, 3, 4]) # update() only works for iterable objects\n>> myset\n{'a', 1, 'c', 'b', 4, 2, (5, 4), 3}\n>> myset.update({1, 7, 8})\n>> myset\n{'a', 1, 'c', 'b', 4, 7, 8, 2, (5, 4), 3}\n>> myset.update({1, 6}, [5, 13])\n>> myset\n{'a', 1, 'c', 'b', 4, 5, 6, 7, 8, 2, (5, 4), 13, 3}\n\n\nREMOVING ITEMS\n\nBoth the discard() and remove() functions take a single value as an argument and removes that value from the set. If that value is not present, discard() does nothing,", "QUESTION:\n=====Function Descriptions=====\nObjective\nToday, we're learning about a new data type: sets.\n\nConcept\n\nIf the inputs are given on one line separated by a space character, use split() to get the separate values in the form of a list:\n\n>> a = raw_input()\n5 4 3 2\n>> lis = a.split()\n>> print (lis)\n['5', '4', '3', '2']\n\nIf the list values are all integer types, use the map() method to convert all the strings to integers.\n\n>> newlis = list(map(int, lis))\n>> print (newlis)\n[5, 4, 3, 2]\n\nSets are an unordered bag of unique values. A single set contains values of any immutable data type.\n\nCREATING SETS\n\n>> myset = {1, 2} # Directly assigning values to a set\n>> myset = set()  # Initializing a set\n>> myset = set(['a', 'b']) # Creating a set from a list\n>> myset\n{'a', 'b'}\n\n\nMODIFYING SETS\n\nUsing the add() function:\n\n>> myset.add('c')\n>> myset\n{'a', 'c', 'b'}\n>> myset.add('a') # As 'a' already exists in the set, nothing happens\n>> myset.add((5, 4))\n>> myset\n{'a', 'c', 'b', (5, 4)}\n\n\nUsing the update() function:\n\n>> myset.update([1, 2, 3, 4]) # update() only works for iterable objects\n>> myset\n{'a', 1, 'c', 'b', 4, 2, (5, 4), 3}\n>> myset.update({1, 7, 8})\n>> myset\n{'a', 1, 'c', 'b', 4, 7, 8, 2, (5, 4), 3}\n>> myset.update({1, 6}, [5, 13])\n>> myset\n{'a', 1, 'c', 'b', 4, 5, 6, 7, 8, 2, (5, 4), 13, 3}\n\n\nREMOVING ITEMS\n\nBoth the discard() and remove() functions take a single value as an argument and removes that value from the set. If that value is not present, discard() does nothing while", "QUESTION:\n=====Function Descriptions=====\nObjective\nToday, we're learning about a new data type: sets.\n\nConcept\n\nIf the inputs are given on one line separated by a space character, use split() to get the separate values in the form of a list:\n\n>> a = raw_input()\n5 4 3 2\n>> lis = a.split()\n>> print (lis)\n['5', '4', '3', '2']\n\nIf the list values are all integer types, use the map() method to convert all the strings to integers.\n\n>> newlis = list(map(int, lis))\n>> print (newlis)\n[5, 4, 3, 2]\n\nSets are an unordered bag of unique values. A single set contains values of any immutable data type.\n\nCREATING SETS\n\n>> myset = {1, 2} # Directly assigning values to a set\n>> myset = set()  # Initializing a set\n>> myset = set(['a', 'b']) # Creating a set from a list\n>> myset\n{'a', 'b'}\n\n\nMODIFYING SETS\n\nUsing the add() function:\n\n>> myset.add('c')\n>> myset\n{'a', 'c', 'b'}\n>> myset.add('a') # As 'a' already exists in the set, nothing happens\n>> myset.add((5, 4))\n>> myset\n{'a', 'c', 'b', (5, 4)}\n\n\nUsing the update() function:\n\n>> myset.update([1, 2, 3, 4]) # update() only works for iterable objects\n>> myset\n{'a', 1, 'c', 'b', 4, 2, (5, 4), 3}\n>> myset.update({1, 7, 8})\n>> myset\n{'a', 1, 'c', 'b', 4, 7, 8, 2, (5, 4), 3}\n>> myset.update({1, 6}, [5, 13])\n>> myset\n{'a', 1, 'c', 'b', 4, 5, 6, 7, 8, 2, (5, 4), 13, 3}\n\n\nREMOVING ITEMS\n\nBoth the discard() and remove() functions take a single value as an argument and removes that value from the set. If that value is not present, discard() does nothing,", "QUESTION:\n=====Function Descriptions=====\nObjective\nToday, we're learning about a new data type: sets.\n\nConcept\n\nIf the inputs are given on one line separated by a space character, use split() to get the separate values in the form of a list:\n\n>> a = raw_input()\n5 4 3 2\n>> lis = a.split()\n>> print (lis)\n['5', '4', '3', '2']\n\nIf the list values are all integer types, use the map() method to convert all the strings to integers.\n\n>> newlis = list(map(int, lis))\n>> print (newlis)\n[5, 4, 3, 2]\n\nSets are an unordered bag of unique values. A single set contains values of any immutable data type.\n\nCREATING SETS\n\n>> myset = {1, 2} # Directly assigning values to a set\n>> myset = set()  # Initializing a set\n>> myset = set(['a', 'b']) # Creating a set from a list\n>> myset\n{'a', 'b'}\n\n\nMODIFYING SETS\n\nUsing the add() function:\n\n>> myset.add('c')\n>> myset\n{'a', 'c', 'b'}\n>> myset.add('a') # As 'a' already exists in the set, nothing happens\n>> myset.add((5, 4))\n>> myset\n{'a', 'c', 'b', (5, 4)}\n\n\nUsing the update() function:\n\n>> myset.update([1, 2, 3, 4]) # update() only works for iterable objects\n>> myset\n{'a', 1, 'c', 'b', 4, 2, (5, 4), 3}\n>> myset.update({1, 7, 8})\n>> myset\n{'a', 1, 'c', 'b', 4, 7, 8, 2, (5, 4), 3}\n>> myset.update({1, 6}, [5, 13])\n>> myset\n{'a', 1, 'c', 'b', 4, 5, 6, 7, 8, 2, (5, 4), 13, 3}\n\n\nREMOVING ITEMS\n\nBoth the discard() and remove() functions take a single value as an argument and removes that value from the set. If that value is not present, discard() does nothing,"], "prompt": "\nQUESTION:\n=====Function Descriptions=====\nObjective\nToday, we're learning about a new data type: sets.\n\nConcept\n\nIf the inputs are given on one line separated by a space character, use split() to get the separate values in the form of a list:\n\n>> a = raw_input()\n5 4 3 2\n>> lis = a.split()\n>> print (lis)\n['5', '4', '3', '2']\n\nIf the list values are all integer types, use the map() method to convert all the strings to integers.\n\n>> newlis = list(map(int, lis))\n>> print (newlis)\n[5, 4, 3, 2]\n\nSets are an unordered bag of unique values. A single set contains values of any immutable data type.\n\nCREATING SETS\n\n>> myset = {1, 2} # Directly assigning values to a set\n>> myset = set()  # Initializing a set\n>> myset = set(['a', 'b']) # Creating a set from a list\n>> myset\n{'a', 'b'}\n\n\nMODIFYING SETS\n\nUsing the add() function:\n\n>> myset.add('c')\n>> myset\n{'a', 'c', 'b'}\n>> myset.add('a') # As 'a' already exists in the set, nothing happens\n>> myset.add((5, 4))\n>> myset\n{'a', 'c', 'b', (5, 4)}\n\n\nUsing the update() function:\n\n>> myset.update([1, 2, 3, 4]) # update() only works for iterable objects\n>> myset\n{'a', 1, 'c', 'b', 4, 2, (5, 4), 3}\n>> myset.update({1, 7, 8})\n>> myset\n{'a', 1, 'c', 'b', 4, 7, 8, 2, (5, 4), 3}\n>> myset.update({1, 6}, [5, 13])\n>> myset\n{'a', 1, 'c', 'b', 4, 5, 6, 7, 8, 2, (5, 4), 13, 3}\n\n\nREMOVING ITEMS\n\nBoth the discard() and remove() functions take a single value as an argument and removes that value from the set. If that value is not present, discard() does nothing, but remove() will raise a KeyError exception.\n\n>> myset.discard(10)\n>> myset\n{'a', 1, 'c', 'b', 4, 5, 7, 8, 2, 12, (5, 4), 13, 11, 3}\n>> myset.remove(13)\n>> myset\n{'a', 1, 'c', 'b', 4, 5, 7, 8, 2, 12, (5, 4), 11, 3}\n\n\nCOMMON SET OPERATIONS Using union(), intersection() and difference() functions.\n\n>> a = {2, 4, 5, 9}\n>> b = {2, 4, 11, 12}\n>> a.union(b) # Values which exist in a or b\n{2, 4, 5, 9, 11, 12}\n>> a.intersection(b) # Values which exist in a and b\n{2, 4}\n>> a.difference(b) # Values which exist in a but not in b\n{9, 5}\n\n\nThe union() and intersection() functions are symmetric methods:\n\n>> a.union(b) == b.union(a)\nTrue\n>> a.intersection(b) == b.intersection(a)\nTrue\n>> a.difference(b) == b.difference(a)\nFalse\n\nThese other built-in data structures in Python are also useful.\n\n=====Problem Statement=====\nGiven 2 sets of integers, M and N, print their symmetric difference in ascending order. The term symmetric difference indicates those values that exist in either M or N but do not exist in both.\n\n=====Input Format=====\nThe first line of input contains an integer, M.\nThe second line contains M space-separated integers.\nThe third line contains an integer, N.\nThe fourth line contains N space-separated integers. \n\n=====Output Format=====\nOutput the symmetric difference integers in ascending order, one per line.\nSTARTER CODE:\n\n\nPlease provide the solution as pure code only, without explanations or comments.\n\nANSWER:\n```python\n"}}