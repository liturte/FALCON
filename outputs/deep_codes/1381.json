{"1381": {"code": ["def solve(k, n, s, p):\n    return (k * n + s - 1) // s * p\n\nk, n, s, p = map(int, input().split())\nprint(solve(k, n, s, p))\n\nIn this solution, we calculate the number of sheets required to make all airplanes. We then divide by the number of sheets in a pack to get the number of packs needed. We use integer division to get the number of packs, rounding up to the nearest integer if necessary.\n\nThis solution assumes that the number of sheets required is a multiple of the number of sheets in a pack, which is the case", "k, n, s, p = map(int, input().split())\nprint((k * n + s - 1) // s * p)\n\n\nThis Python program reads four integers from the input, calculates the minimum number of packs they should buy, and prints the result. The formula used here calculates the ceiling of the division of the sum of the number of people times the number of airplanes each should make by the number of airplanes that can be made using one sheet, then multiplies by the number of sheets in one pack.\n\nThe operator `//` is used for integer division (i.e., division that rounds down to the nearest whole number), and `", "def solve():\n    k, n, s, p = map(int, input().split())\n    total_sheets = k * n\n    packs_needed = -(-total_sheets // (s * p))\n    print(packs_needed)\n\nsolve()\n\n\nThis code works by first calculating the total number of sheets needed by multiplying the number of people by the number of airplanes each should make. It then divides this by the product of the number of sheets in one pack and the number of sheets that can be made using one sheet. The result is rounded up to the nearest integer because you can't buy a fraction of a pack", "k, n, s, p = map(int, input().split())\nprint((k * n + s - 1) // s * p)\n\n\nThis code reads the input and calculates the number of packs they should buy. It uses integer division (//) to round down to the nearest whole number, as you can't buy a fraction of a pack. It then multiplies by $p$ to get the total number of packs.\n\nThe expression `(k * n + s - 1) // s` calculates the number of packs needed to make all the airplanes. It adds $s$ to $k*n$ to ensure that there is enough sheets", "def calculate_packs_needed(k, n, s, p):\n    total_sheets_needed = k * n\n    sheets_per_pack = p\n    packs_needed = (total_sheets_needed + sheets_per_pack - 1) // sheets_per_pack\n    return packs_needed\n\nk, n, s, p = map(int, input().split())\nprint(calculate_packs_needed(k, n, s, p))\n\n\nThis solution works by first calculating the total number of sheets needed by multiplying the number of people by the number of airplanes each should make"], "prompt": "\nQUESTION:\nTo make a paper airplane, one has to use a rectangular piece of paper. From a sheet of standard size you can make $s$ airplanes.\n\nA group of $k$ people decided to make $n$ airplanes each. They are going to buy several packs of paper, each of them containing $p$ sheets, and then distribute the sheets between the people. Each person should have enough sheets to make $n$ airplanes. How many packs should they buy?\n\n\n-----Input-----\n\nThe only line contains four integers $k$, $n$, $s$, $p$ ($1 \\le k, n, s, p \\le 10^4$)\u00a0\u2014 the number of people, the number of airplanes each should make, the number of airplanes that can be made using one sheet and the number of sheets in one pack, respectively.\n\n\n-----Output-----\n\nPrint a single integer\u00a0\u2014 the minimum number of packs they should buy.\n\n\n-----Examples-----\nInput\n5 3 2 3\n\nOutput\n4\n\nInput\n5 3 100 1\n\nOutput\n5\n\n\n\n-----Note-----\n\nIn the first sample they have to buy $4$ packs of paper: there will be $12$ sheets in total, and giving $2$ sheets to each person is enough to suit everyone's needs.\n\nIn the second sample they have to buy a pack for each person as they can't share sheets.\nPlease provide the solution as pure code only, without explanations or comments.\n\nANSWER:\n```python\n"}}