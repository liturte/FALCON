{"3670": {"code": ["def gcd(a, b):\n    while b != 0:\n        a, b = b, a % b\n    return a\n\ndef solve(nums):\n    g = nums[0]\n    for n in nums[1:]:\n        g = gcd(g, n)\n    res = []\n    for i in range(1, int(g**0.5)+1):\n        if g % i == 0:\n            res.append(i)\n            if i != g // i:\n                res.append(g // i)\n    return sorted(res)\n\nN = int(input())\nnums = [int(input()) for _ in range(N)]", "def find_m(numbers):\n    min_number = min(numbers)\n    for i in range(2, min_number+1):\n        if all(number % i == 0 for number in numbers):\n            print(i, end=' ')\n\nN = int(input())\nnumbers = [int(input()) for _ in range(N)]\nfind_m(numbers)\n\n\nExplanation:\nThe solution is based on the principle that for any integer $M$, if all numbers in the given list give the same remainder when divided by $M$, then $M$ is a common divisor of all these numbers. We can find all divisors of the smallest number in the list and", "def gcd(a,b):\n    if b==0:\n        return a\n    else:\n        return gcd(b,a%b)\n\ndef find_m(nums):\n    m = nums[0]\n    for num in nums[1:]:\n        m = gcd(m,num)\n    factors = []\n    for i in range(1,int(m**0.5)+1):\n        if m%i==0:\n            factors.append(i)\n            factors.append(m//i)\n    factors = list(set(factors))\n    factors.sort()\n    return factors\n\nn = int(input())\nnums = [int", "def gcd(x, y):\n    while(y):\n        x, y = y, x % y\n    return x\n\ndef find_m(nums):\n    m = nums[0]\n    for n in nums[1:]:\n        m = gcd(m, n)\n    factors = []\n    for i in range(1, int(m**0.5)+1):\n        if m % i == 0:\n            factors.append(i)\n            factors.append(m//i)\n    factors = list(set(factors))\n    return sorted(factors)\n\nN = int(input().strip())\nnums = [int(input().strip()) for", "def find_divisors(n):\n    divisors = []\n    for i in range(1, int(n**0.5) + 1):\n        if n % i == 0:\n            divisors.append(i)\n            if n // i != i:\n                divisors.append(n // i)\n    return divisors\n\ndef find_m(numbers):\n    divisors = set(find_divisors(numbers[0]))\n    for number in numbers[1:]:\n        divisors &= set(find_divisors(number))\n    return sorted(list(divisors))\n\nN = int(input().strip())\nnumbers"], "prompt": "\nQUESTION:\nLuka started driving international routes with his truck. His biggest problem is the border with Slovenia. The border is a point of entrance into the European Union, so every truck is thoroughly examined. Because of this, Luka always has to wait several hours there. To kill the time, he comes up with various logic and math games.\n\nIn one of them, Luka first reads the numbers off of $N$ license plates and writes them down on a piece of paper. Then he tries to find an integer $M$ greater than $1$ such that all integers on the paper give the same remainder when divided by $M$. Luka tries to find as many such integers $M$ as possible.\n\nWrite a program that, given Luka\u2019s $N$ integers, determines all such integers $M$.\n\n-----Input-----\nThe first line contains the integer $N$ ($2 \\le N \\le 100$), the number of integers on paper. Each of the following $N$ lines contains one integer between $1$ and $1000000000$ (one billion). All these integers will be distinct. The input data will guarantee that at least one integer $M$ will always exist.\n\n-----Output-----\nOutput all integers $M$ separated by spaces, in any order.\n\n-----Examples-----\nSample Input:\n3\n6\n34\n38\nSample Output:\n2 4\nPlease provide the solution as pure code only, without explanations or comments.\n\nANSWER:\n```python\n"}}