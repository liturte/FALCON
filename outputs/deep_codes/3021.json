{"3021": {"code": ["QUESTION:\nWe all know how to alphabetize a list of distinct words when you know the alphabet: One word may be a prefix of another longer word, in which case the shorter word always comes before the longer word. With any other two words there must be a first place in the words where their letters differ. Then the order of the words is determined by the lexicographical order of these first differing letters.\n\nHow about the reverse problem: Can you find the lexicographic order of the alphabet from an ordered list of words? Suppose an alphabet exists where the following list of word strings is given in lexicographical order:\n\ncab\ncda\nccc\nbadca\n\nIt is clear that c comes before b in the underlying alphabet because cab comes before badca. Similarly, we know a comes before d, because cab < cda, a comes before c because cab < ccc, and d comes before c because cda < ccc. The only ordering of the 4 alphabet characters that is possible is adcb.\n\nHowever, it may be that a list contains inconsistencies that make it impossible to be ordered under any proposed alphabet. For example, in the following list it must be that a comes before b in the alphabet since abc < bca, yet it also must be that b comes before a in the alphabet since bca < aca.\n\nabc\nbca\ncab\naca\n\nFinally, some lists may not provide enough clues to derive a unique alphabet order, such as the following:\n\ndea\ncfb\n\nIn this list, d comes before c but we don\u2019t know about the relative positions of any of the other letters, so we are unable to uniquely discern the order of the alphabet characters.\n\n-----Input-----\nThe first line of input will contain $L$ and $N$, separated by a space, where $L$ is a lowercase character $\\texttt{b} \\le L \\le \\texttt{z}$ representing the highest character in the English alphabet that appears in the derived alphabet, and $N$ is an integer $1 \\leq N \\leq 1000$ that is equal to the number of strings in the list. Each of the next $N$ lines will contain a single nonempty string of length at most $1000$, consisting only of characters in the derived alphabet. No two strings will be the same.\n\n-----Output-----\nIf the input is consistent with a unique ordering of the alphabet, output a string that designates that ordered alphabet. If the data is inconsistent with any ordering, output IMPOSSIBLE. If the data is consistent with multiple orderings, output AMBIGUOUS.\n\n-----Examples-----", "QUESTION:\nWe all know how to alphabetize a list of distinct words when you know the alphabet: One word may be a prefix of another longer word, in which case the shorter word always comes before the longer word. With any other two words there must be a first place in the words where their letters differ. Then the order of the words is determined by the lexicographical order of these first differing letters.\n\nHow about the reverse problem: Can you find the lexicographic order of the alphabet from an ordered list of words? Suppose an alphabet exists where the following list of word strings is given in lexicographical order:\n\ncab\ncda\nccc\nbadca\n\nIt is clear that c comes before b in the underlying alphabet because cab comes before badca. Similarly, we know a comes before d, because cab < cda, a comes before c because cab < ccc, and d comes before c because cda < ccc. The only ordering of the 4 alphabet characters that is possible is adcb.\n\nHowever, it may be that a list contains inconsistencies that make it impossible to be ordered under any proposed alphabet. For example, in the following list it must be that a comes before b in the alphabet since abc < bca, yet it also must be that b comes before a in the alphabet since bca < aca.\n\nabc\nbca\ncab\naca\n\nFinally, some lists may not provide enough clues to derive a unique alphabet order, such as the following:\n\ndea\ncfb\n\nIn this list, d comes before c but we don\u2019t know about the relative positions of any of the other letters, so we are unable to uniquely discern the order of the alphabet characters.\n\n-----Input-----\nThe first line of input will contain $L$ and $N$, separated by a space, where $L$ is a lowercase character $\\texttt{b} \\le L \\le \\texttt{z}$ representing the highest character in the English alphabet that appears in the derived alphabet, and $N$ is an integer $1 \\leq N \\leq 1000$ that is equal to the number of strings in the list. Each of the next $N$ lines will contain a single nonempty string of length at most $1000$, consisting only of characters in the derived alphabet. No two strings will be the same.\n\n-----Output-----\nIf the input is consistent with a unique ordering of the alphabet, output a string that designates that ordered alphabet. If the data is inconsistent with any ordering, output IMPOSSIBLE. If the data is consistent with multiple orderings, output AMBIGUOUS.\n\n-----Examples-----", "QUESTION:\nWe all know how to alphabetize a list of distinct words when you know the alphabet: One word may be a prefix of another longer word, in which case the shorter word always comes before the longer word. With any other two words there must be a first place in the words where their letters differ. Then the order of the words is determined by the lexicographical order of these first differing letters.\n\nHow about the reverse problem: Can you find the lexicographic order of the alphabet from an ordered list of words? Suppose an alphabet exists where the following list of word strings is given in lexicographical order:\n\ncab\ncda\nccc\nbadca\n\nIt is clear that c comes before b in the underlying alphabet because cab comes before badca. Similarly, we know a comes before d, because cab < cda, a comes before c because cab < ccc, and d comes before c because cda < ccc. The only ordering of the 4 alphabet characters that is possible is adcb.\n\nHowever, it may be that a list contains inconsistencies that make it impossible to be ordered under any proposed alphabet. For example, in the following list it must be that a comes before b in the alphabet since abc < bca, yet it also must be that b comes before a in the alphabet since bca < aca.\n\nabc\nbca\ncab\naca\n\nFinally, some lists may not provide enough clues to derive a unique alphabet order, such as the following:\n\ndea\ncfb\n\nIn this list, d comes before c but we don\u2019t know about the relative positions of any of the other letters, so we are unable to uniquely discern the order of the alphabet characters.\n\n-----Input-----\nThe first line of input will contain $L$ and $N$, separated by a space, where $L$ is a lowercase character $\\texttt{b} \\le L \\le \\texttt{z}$ representing the highest character in the English alphabet that appears in the derived alphabet, and $N$ is an integer $1 \\leq N \\leq 1000$ that is equal to the number of strings in the list. Each of the next $N$ lines will contain a single nonempty string of length at most $1000$, consisting only of characters in the derived alphabet. No two strings will be the same.\n\n-----Output-----\nIf the input is consistent with a unique ordering of the alphabet, output a string that designates that ordered alphabet. If the data is inconsistent with any ordering, output IMPOSSIBLE. If the data is consistent with multiple orderings, output AMBIGUOUS.\n\n-----Examples-----", "QUESTION:\nWe all know how to alphabetize a list of distinct words when you know the alphabet: One word may be a prefix of another longer word, in which case the shorter word always comes before the longer word. With any other two words there must be a first place in the words where their letters differ. Then the order of the words is determined by the lexicographical order of these first differing letters.\n\nHow about the reverse problem: Can you find the lexicographic order of the alphabet from an ordered list of words? Suppose an alphabet exists where the following list of word strings is given in lexicographical order:\n\ncab\ncda\nccc\nbadca\n\nIt is clear that c comes before b in the underlying alphabet because cab comes before badca. Similarly, we know a comes before d, because cab < cda, a comes before c because cab < ccc, and d comes before c because cda < ccc. The only ordering of the 4 alphabet characters that is possible is adcb.\n\nHowever, it may be that a list contains inconsistencies that make it impossible to be ordered under any proposed alphabet. For example, in the following list it must be that a comes before b in the alphabet since abc < bca, yet it also must be that b comes before a in the alphabet since bca < aca.\n\nabc\nbca\ncab\naca\n\nFinally, some lists may not provide enough clues to derive a unique alphabet order, such as the following:\n\ndea\ncfb\n\nIn this list, d comes before c but we don\u2019t know about the relative positions of any of the other letters, so we are unable to uniquely discern the order of the alphabet characters.\n\n-----Input-----\nThe first line of input will contain $L$ and $N$, separated by a space, where $L$ is a lowercase character $\\texttt{b} \\le L \\le \\texttt{z}$ representing the highest character in the English alphabet that appears in the derived alphabet, and $N$ is an integer $1 \\leq N \\leq 1000$ that is equal to the number of strings in the list. Each of the next $N$ lines will contain a single nonempty string of length at most $1000$, consisting only of characters in the derived alphabet. No two strings will be the same.\n\n-----Output-----\nIf the input is consistent with a unique ordering of the alphabet, output a string that designates that ordered alphabet. If the data is inconsistent with any ordering, output IMPOSSIBLE. If the data is consistent with multiple orderings, output AMBIGUOUS.\n\n-----Examples-----", "QUESTION:\nWe all know how to alphabetize a list of distinct words when you know the alphabet: One word may be a prefix of another longer word, in which case the shorter word always comes before the longer word. With any other two words there must be a first place in the words where their letters differ. Then the order of the words is determined by the lexicographical order of these first differing letters.\n\nHow about the reverse problem: Can you find the lexicographic order of the alphabet from an ordered list of words? Suppose an alphabet exists where the following list of word strings is given in lexicographical order:\n\ncab\ncda\nccc\nbadca\n\nIt is clear that c comes before b in the underlying alphabet because cab comes before badca. Similarly, we know a comes before d, because cab < cda, a comes before c because cab < ccc, and d comes before c because cda < ccc. The only ordering of the 4 alphabet characters that is possible is adcb.\n\nHowever, it may be that a list contains inconsistencies that make it impossible to be ordered under any proposed alphabet. For example, in the following list it must be that a comes before b in the alphabet since abc < bca, yet it also must be that b comes before a in the alphabet since bca < aca.\n\nabc\nbca\ncab\naca\n\nFinally, some lists may not provide enough clues to derive a unique alphabet order, such as the following:\n\ndea\ncfb\n\nIn this list, d comes before c but we don\u2019t know about the relative positions of any of the other letters, so we are unable to uniquely discern the order of the alphabet characters.\n\n-----Input-----\nThe first line of input will contain $L$ and $N$, separated by a space, where $L$ is a lowercase character $\\texttt{b} \\le L \\le \\texttt{z}$ representing the highest character in the English alphabet that appears in the derived alphabet, and $N$ is an integer $1 \\leq N \\leq 1000$ that is equal to the number of strings in the list. Each of the next $N$ lines will contain a single nonempty string of length at most $1000$, consisting only of characters in the derived alphabet. No two strings will be the same.\n\n-----Output-----\nIf the input is consistent with a unique ordering of the alphabet, output a string that designates that ordered alphabet. If the data is inconsistent with any ordering, output IMPOSSIBLE. If the data is consistent with multiple orderings, output AMBIGUOUS.\n\n-----Examples-----"], "prompt": "\nQUESTION:\nWe all know how to alphabetize a list of distinct words when you know the alphabet: One word may be a prefix of another longer word, in which case the shorter word always comes before the longer word. With any other two words there must be a first place in the words where their letters differ. Then the order of the words is determined by the lexicographical order of these first differing letters.\n\nHow about the reverse problem: Can you find the lexicographic order of the alphabet from an ordered list of words? Suppose an alphabet exists where the following list of word strings is given in lexicographical order:\n\ncab\ncda\nccc\nbadca\n\nIt is clear that c comes before b in the underlying alphabet because cab comes before badca. Similarly, we know a comes before d, because cab < cda, a comes before c because cab < ccc, and d comes before c because cda < ccc. The only ordering of the 4 alphabet characters that is possible is adcb.\n\nHowever, it may be that a list contains inconsistencies that make it impossible to be ordered under any proposed alphabet. For example, in the following list it must be that a comes before b in the alphabet since abc < bca, yet it also must be that b comes before a in the alphabet since bca < aca.\n\nabc\nbca\ncab\naca\n\nFinally, some lists may not provide enough clues to derive a unique alphabet order, such as the following:\n\ndea\ncfb\n\nIn this list, d comes before c but we don\u2019t know about the relative positions of any of the other letters, so we are unable to uniquely discern the order of the alphabet characters.\n\n-----Input-----\nThe first line of input will contain $L$ and $N$, separated by a space, where $L$ is a lowercase character $\\texttt{b} \\le L \\le \\texttt{z}$ representing the highest character in the English alphabet that appears in the derived alphabet, and $N$ is an integer $1 \\leq N \\leq 1000$ that is equal to the number of strings in the list. Each of the next $N$ lines will contain a single nonempty string of length at most $1000$, consisting only of characters in the derived alphabet. No two strings will be the same.\n\n-----Output-----\nIf the input is consistent with a unique ordering of the alphabet, output a string that designates that ordered alphabet. If the data is inconsistent with any ordering, output IMPOSSIBLE. If the data is consistent with multiple orderings, output AMBIGUOUS.\n\n-----Examples-----\nSample Input 1:\nd 4\ncab\ncda\nccc\nbadca\nSample Output 1:\nadcb\n\nSample Input 2:\nc 4\nabc\nbca\ncab\naca\nSample Output 2:\nIMPOSSIBLE\n\nSample Input 3:\nf 2\ndea\ncfb\nSample Output 3:\nAMBIGUOUS\nPlease provide the solution as pure code only, without explanations or comments.\n\nANSWER:\n```python\n"}}