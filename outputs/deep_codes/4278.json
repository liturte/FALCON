{"4278": {"code": ["from collections import Counter\n\nN = int(input().strip())\nS = [input().strip() for _ in range(N)]\n\n# Count the frequency of each character in each string\nS_counts = [Counter(s) for s in S]\n\n# Count the number of strings with each character count\nS_counts_counts = Counter(tuple(s.items()) for s in S_counts)\n\n# The number of pairs is the sum of combinations of 2 from the", "from collections import Counter\n\nN = int(input())\nS = [input() for _ in range(N)]\n\ncnt = [Counter(s) for s in S]\nans = 0\n\nfor i in range(N):\n    for j in range(i+1, N):\n        if cnt[i] == cnt[j]:\n            ans += 1\n\nprint(ans)\n\n\nThis solution works by first reading in the number of strings N and the strings themselves.", "from collections import Counter\n\nN = int(input())\nS = [input() for _ in range(N)]\n\ncnt = [Counter(s) for s in S]\npair = sum([i*(i-1)//2 for i in [sum([s[c] for s in cnt]) for c in [chr(i) for i in range(97, 123)]]])\n\nprint(pair)\n\n\nExplanation:\nThe Counter from collections", "from collections import Counter\n\nN = int(input())\nS = [input() for _ in range(N)]\n\ncounters = [Counter(s) for s in S]\n\nanagram_pairs = 0\nfor i in range(N):\n    for j in range(i+1, N):\n        if counters[i] == counters[j]:\n            anagram_pairs += 1\n\nprint(anagram_pairs)\n\n\nThis solution works by first counting", "from collections import Counter\n\nN = int(input())\nS = [input() for _ in range(N)]\n\ncounts = [Counter(s) for s in S]\nanagrams = [i for i in range(N) if counts[i] == counts[i-1]]\n\nprint(len(anagrams)-1)\n\n\nEXPLANATION:\nThe code first reads in the number of strings N and the strings themselves. It then creates a list of Counter objects,"], "prompt": "\nQUESTION:\nWe will call a string obtained by arranging the characters contained in a string a in some order, an anagram of a.\nFor example, greenbin is an anagram of beginner. As seen here, when the same character occurs multiple times, that character must be used that number of times.\nGiven are N strings s_1, s_2, \\ldots, s_N. Each of these strings has a length of 10 and consists of lowercase English characters. Additionally, all of these strings are distinct. Find the number of pairs of integers i, j (1 \\leq i < j \\leq N) such that s_i is an anagram of s_j.\n\n-----Constraints-----\n - 2 \\leq N \\leq 10^5\n - s_i is a string of length 10.\n - Each character in s_i is a lowercase English letter.\n - s_1, s_2, \\ldots, s_N are all distinct.\n\n-----Input-----\nInput is given from Standard Input in the following format:\nN\ns_1\ns_2\n:\ns_N\n\n-----Output-----\nPrint the number of pairs of integers i, j (1 \\leq i < j \\leq N) such that s_i is an anagram of s_j.\n\n-----Sample Input-----\n3\nacornistnt\npeanutbomb\nconstraint\n\n-----Sample Output-----\n1\n\ns_1 = acornistnt is an anagram of s_3 = constraint. There are no other pairs i, j such that s_i is an anagram of s_j, so the answer is 1.\nPlease provide the solution as pure code only, without explanations or comments.\n\nANSWER:\n```python\n"}}