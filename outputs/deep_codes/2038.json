{"2038": {"code": ["QUESTION:\nYou are given a permutation $p$ of integers from $1$ to $n$, where $n$ is an even number. \n\nYour goal is to sort the permutation. To do so, you can perform zero or more operations of the following type:   take two indices $i$ and $j$ such that $2 \\cdot |i - j| \\geq n$ and swap $p_i$ and $p_j$. \n\nThere is no need to minimize the number of operations, however you should use no more than $5 \\cdot n$ operations. One can show that it is always possible to do that.\n\n\n-----Input-----\n\nThe first line contains a single integer $n$ ($2 \\leq n \\leq 3 \\cdot 10^5$, $n$ is even)\u00a0\u2014 the length of the permutation. \n\nThe second line contains $n$ distinct integers $p_1, p_2, \\ldots, p_n$ ($1 \\le p_i \\le n$)\u00a0\u2014 the given permutation.\n\n\n-----Output-----\n\nOn the first line print $m$ ($0 \\le m \\le 5 \\cdot n$)\u00a0\u2014 the number of swaps to perform.\n\nEach of the following $m$ lines should contain integers $a_i, b_i$ ($1 \\le a_i, b_i \\le n$, $|a_i - b_i| \\ge \\frac{n}{2}$)\u00a0\u2014 the indices that should be swapped in the corresponding swap.\n\nNote that there is no need to minimize the number of operations. We can show that an answer always exists.\n\n\n-----Examples-----\nInput\n2\n2 1\n\nOutput\n1\n1 2\nInput\n4\n3 4 1 2\n\nOutput\n4\n1 4\n1 4\n1 3\n2 4\n\nInput\n6\n2 5 3 1 4 6\n\nOutput\n3\n1 5\n2 5\n1 4\n\n\n\n-----Note-----\n\nIn the first example, when one swap elements on positions $1$ and $2$, the array becomes sorted.\n\nIn the second example, pay attention that there is no need to minimize number of swaps.\n\nIn the third example, after swapping elements on positions $1$ and $5$ the array becomes: $[4, 5, 3, 1, 2, 6]$. After swapping elements on positions $2$ and $5$ the array becomes $[4, 2, 3, 1,", "QUESTION:\nYou are given a permutation $p$ of integers from $1$ to $n$, where $n$ is an even number. \n\nYour goal is to sort the permutation. To do so, you can perform zero or more operations of the following type:   take two indices $i$ and $j$ such that $2 \\cdot |i - j| \\geq n$ and swap $p_i$ and $p_j$. \n\nThere is no need to minimize the number of operations, however you should use no more than $5 \\cdot n$ operations. One can show that it is always possible to do that.\n\n\n-----Input-----\n\nThe first line contains a single integer $n$ ($2 \\leq n \\leq 3 \\cdot 10^5$, $n$ is even)\u00a0\u2014 the length of the permutation. \n\nThe second line contains $n$ distinct integers $p_1, p_2, \\ldots, p_n$ ($1 \\le p_i \\le n$)\u00a0\u2014 the given permutation.\n\n\n-----Output-----\n\nOn the first line print $m$ ($0 \\le m \\le 5 \\cdot n$)\u00a0\u2014 the number of swaps to perform.\n\nEach of the following $m$ lines should contain integers $a_i, b_i$ ($1 \\le a_i, b_i \\le n$, $|a_i - b_i| \\ge \\frac{n}{2}$)\u00a0\u2014 the indices that should be swapped in the corresponding swap.\n\nNote that there is no need to minimize the number of operations. We can show that an answer always exists.\n\n\n-----Examples-----\nInput\n2\n2 1\n\nOutput\n1\n1 2\nInput\n4\n3 4 1 2\n\nOutput\n4\n1 4\n1 4\n1 3\n2 4\n\nInput\n6\n2 5 3 1 4 6\n\nOutput\n3\n1 5\n2 5\n1 4\n\n\n\n-----Note-----\n\nIn the first example, when one swap elements on positions $1$ and $2$, the array becomes sorted.\n\nIn the second example, pay attention that there is no need to minimize number of swaps.\n\nIn the third example, after swapping elements on positions $1$ and $5$ the array becomes: $[4, 5, 3, 1, 2, 6]$. After swapping elements on positions $2$ and $5$ the array becomes $[4, 2, 3, 1,", "QUESTION:\nYou are given a permutation $p$ of integers from $1$ to $n$, where $n$ is an even number. \n\nYour goal is to sort the permutation. To do so, you can perform zero or more operations of the following type:   take two indices $i$ and $j$ such that $2 \\cdot |i - j| \\geq n$ and swap $p_i$ and $p_j$. \n\nThere is no need to minimize the number of operations, however you should use no more than $5 \\cdot n$ operations. One can show that it is always possible to do that.\n\n\n-----Input-----\n\nThe first line contains a single integer $n$ ($2 \\leq n \\leq 3 \\cdot 10^5$, $n$ is even)\u00a0\u2014 the length of the permutation. \n\nThe second line contains $n$ distinct integers $p_1, p_2, \\ldots, p_n$ ($1 \\le p_i \\le n$)\u00a0\u2014 the given permutation.\n\n\n-----Output-----\n\nOn the first line print $m$ ($0 \\le m \\le 5 \\cdot n$)\u00a0\u2014 the number of swaps to perform.\n\nEach of the following $m$ lines should contain integers $a_i, b_i$ ($1 \\le a_i, b_i \\le n$, $|a_i - b_i| \\ge \\frac{n}{2}$)\u00a0\u2014 the indices that should be swapped in the corresponding swap.\n\nNote that there is no need to minimize the number of operations. We can show that an answer always exists.\n\n\n-----Examples-----\nInput\n2\n2 1\n\nOutput\n1\n1 2\nInput\n4\n3 4 1 2\n\nOutput\n4\n1 4\n1 4\n1 3\n2 4\n\nInput\n6\n2 5 3 1 4 6\n\nOutput\n3\n1 5\n2 5\n1 4\n\n\n\n-----Note-----\n\nIn the first example, when one swap elements on positions $1$ and $2$, the array becomes sorted.\n\nIn the second example, pay attention that there is no need to minimize number of swaps.\n\nIn the third example, after swapping elements on positions $1$ and $5$ the array becomes: $[4, 5, 3, 1, 2, 6]$. After swapping elements on positions $2$ and $5$ the array becomes $[4, 2, 3, 1,", "QUESTION:\nYou are given a permutation $p$ of integers from $1$ to $n$, where $n$ is an even number. \n\nYour goal is to sort the permutation. To do so, you can perform zero or more operations of the following type:   take two indices $i$ and $j$ such that $2 \\cdot |i - j| \\geq n$ and swap $p_i$ and $p_j$. \n\nThere is no need to minimize the number of operations, however you should use no more than $5 \\cdot n$ operations. One can show that it is always possible to do that.\n\n\n-----Input-----\n\nThe first line contains a single integer $n$ ($2 \\leq n \\leq 3 \\cdot 10^5$, $n$ is even)\u00a0\u2014 the length of the permutation. \n\nThe second line contains $n$ distinct integers $p_1, p_2, \\ldots, p_n$ ($1 \\le p_i \\le n$)\u00a0\u2014 the given permutation.\n\n\n-----Output-----\n\nOn the first line print $m$ ($0 \\le m \\le 5 \\cdot n$)\u00a0\u2014 the number of swaps to perform.\n\nEach of the following $m$ lines should contain integers $a_i, b_i$ ($1 \\le a_i, b_i \\le n$, $|a_i - b_i| \\ge \\frac{n}{2}$)\u00a0\u2014 the indices that should be swapped in the corresponding swap.\n\nNote that there is no need to minimize the number of operations. We can show that an answer always exists.\n\n\n-----Examples-----\nInput\n2\n2 1\n\nOutput\n1\n1 2\nInput\n4\n3 4 1 2\n\nOutput\n4\n1 4\n1 4\n1 3\n2 4\n\nInput\n6\n2 5 3 1 4 6\n\nOutput\n3\n1 5\n2 5\n1 4\n\n\n\n-----Note-----\n\nIn the first example, when one swap elements on positions $1$ and $2$, the array becomes sorted.\n\nIn the second example, pay attention that there is no need to minimize number of swaps.\n\nIn the third example, after swapping elements on positions $1$ and $5$ the array becomes: $[4, 5, 3, 1, 2, 6]$. After swapping elements on positions $2$ and $5$ the array becomes $[4, 2, 3, 1,", "QUESTION:\nYou are given a permutation $p$ of integers from $1$ to $n$, where $n$ is an even number. \n\nYour goal is to sort the permutation. To do so, you can perform zero or more operations of the following type:   take two indices $i$ and $j$ such that $2 \\cdot |i - j| \\geq n$ and swap $p_i$ and $p_j$. \n\nThere is no need to minimize the number of operations, however you should use no more than $5 \\cdot n$ operations. One can show that it is always possible to do that.\n\n\n-----Input-----\n\nThe first line contains a single integer $n$ ($2 \\leq n \\leq 3 \\cdot 10^5$, $n$ is even)\u00a0\u2014 the length of the permutation. \n\nThe second line contains $n$ distinct integers $p_1, p_2, \\ldots, p_n$ ($1 \\le p_i \\le n$)\u00a0\u2014 the given permutation.\n\n\n-----Output-----\n\nOn the first line print $m$ ($0 \\le m \\le 5 \\cdot n$)\u00a0\u2014 the number of swaps to perform.\n\nEach of the following $m$ lines should contain integers $a_i, b_i$ ($1 \\le a_i, b_i \\le n$, $|a_i - b_i| \\ge \\frac{n}{2}$)\u00a0\u2014 the indices that should be swapped in the corresponding swap.\n\nNote that there is no need to minimize the number of operations. We can show that an answer always exists.\n\n\n-----Examples-----\nInput\n2\n2 1\n\nOutput\n1\n1 2\nInput\n4\n3 4 1 2\n\nOutput\n4\n1 4\n1 4\n1 3\n2 4\n\nInput\n6\n2 5 3 1 4 6\n\nOutput\n3\n1 5\n2 5\n1 4\n\n\n\n-----Note-----\n\nIn the first example, when one swap elements on positions $1$ and $2$, the array becomes sorted.\n\nIn the second example, pay attention that there is no need to minimize number of swaps.\n\nIn the third example, after swapping elements on positions $1$ and $5$ the array becomes: $[4, 5, 3, 1, 2, 6]$. After swapping elements on positions $2$ and $5$ the array becomes $[4, 2, 3, 1,"], "prompt": "\nQUESTION:\nYou are given a permutation $p$ of integers from $1$ to $n$, where $n$ is an even number. \n\nYour goal is to sort the permutation. To do so, you can perform zero or more operations of the following type:   take two indices $i$ and $j$ such that $2 \\cdot |i - j| \\geq n$ and swap $p_i$ and $p_j$. \n\nThere is no need to minimize the number of operations, however you should use no more than $5 \\cdot n$ operations. One can show that it is always possible to do that.\n\n\n-----Input-----\n\nThe first line contains a single integer $n$ ($2 \\leq n \\leq 3 \\cdot 10^5$, $n$ is even)\u00a0\u2014 the length of the permutation. \n\nThe second line contains $n$ distinct integers $p_1, p_2, \\ldots, p_n$ ($1 \\le p_i \\le n$)\u00a0\u2014 the given permutation.\n\n\n-----Output-----\n\nOn the first line print $m$ ($0 \\le m \\le 5 \\cdot n$)\u00a0\u2014 the number of swaps to perform.\n\nEach of the following $m$ lines should contain integers $a_i, b_i$ ($1 \\le a_i, b_i \\le n$, $|a_i - b_i| \\ge \\frac{n}{2}$)\u00a0\u2014 the indices that should be swapped in the corresponding swap.\n\nNote that there is no need to minimize the number of operations. We can show that an answer always exists.\n\n\n-----Examples-----\nInput\n2\n2 1\n\nOutput\n1\n1 2\nInput\n4\n3 4 1 2\n\nOutput\n4\n1 4\n1 4\n1 3\n2 4\n\nInput\n6\n2 5 3 1 4 6\n\nOutput\n3\n1 5\n2 5\n1 4\n\n\n\n-----Note-----\n\nIn the first example, when one swap elements on positions $1$ and $2$, the array becomes sorted.\n\nIn the second example, pay attention that there is no need to minimize number of swaps.\n\nIn the third example, after swapping elements on positions $1$ and $5$ the array becomes: $[4, 5, 3, 1, 2, 6]$. After swapping elements on positions $2$ and $5$ the array becomes $[4, 2, 3, 1, 5, 6]$ and finally after swapping elements on positions $1$ and $4$ the array becomes sorted: $[1, 2, 3, 4, 5, 6]$.\nPlease provide the solution as pure code only, without explanations or comments.\n\nANSWER:\n```python\n"}}