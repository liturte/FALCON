{"4069": {"code": ["import sys\n\nX, K, D = map(int, sys.stdin.readline().split())\nX = abs(X)\n\nif X // D >= K:\n    print(X - K * D)\nelse:\n    K -= X // D\n    X %= D\n    if K % 2 == 0:\n        print(X)\n    else:\n        print(D - X)\n\n\nThis code works by first converting X to its absolute value. Then it checks if Takahashi can make K steps of distance D without going past 0. If he can, the destination coordinate is simply X - K * D. If he cannot, he subtracts the maximum possible distance he can cover (X // D) * D from X,", "X, K, D = map(int, input().split())\nX = abs(X)\n\nif X // D >= K:\n    print(X - K * D)\nelse:\n    K -= X // D\n    X %= D\n    if K % 2 == 0:\n        print(X)\n    else:\n        print(D - X)\n\n\nEXPLANATION:\nThe main idea is to minimize the absolute value of the final position. This can be achieved by alternating between moving inwards and outwards from the current position.\n\nIf Takahashi has enough distance to cover, he can simply move inwards K times. Otherwise, he needs to move outwards and then inwards to cover the remaining distance.\n\nHere is", "X, K, D = map(int, input().split())\nX = abs(X)\n\nif X // D >= K:\n    print(X - K * D)\nelse:\n    K -= X // D\n    X %= D\n    if K % 2 == 0:\n        print(X)\n    else:\n        print(D - X)\n\n\nEXPLANATION:\nThe solution works by moving Takahashi towards the origin of the number line. The minimum possible absolute value of the destination is achieved when Takahashi moves in the direction that will reduce the distance to the origin the most.\n\nThe first if statement checks if Takahashi can make K moves without reaching the origin. If he can, the remaining distance is simply", "X, K, D = map(int, input().split())\nX = abs(X)\n\nif K*D <= X:\n    print(X - K*D)\nelse:\n    K -= X // D\n    X %= D\n    print(X if K % 2 == 0 else D - X)\n\n\nEXPLANATION:\nThe main idea of this solution is to minimize the absolute value of the final position.\n\nFirst, we calculate the absolute value of X (because the direction of the move doesn't matter).\n\nThen, we check if it's possible to make K moves with a distance of D. If it's possible, we subtract the total distance from X and print the result.\n\nIf it's not possible", "X, K, D = map(int, input().split())\nX = abs(X)\n\nif K*D <= X:\n    print(X - K*D)\nelse:\n    K -= X // D\n    X %= D\n\n    if K % 2 == 0:\n        print(X)\n    else:\n        print(D - X)\n\n\nThis program reads the input, calculates the absolute value of X, and checks if the total distance of the moves is less than or equal to X. If it is, the program prints the remaining distance. If it's not, the program calculates the number of complete cycles in the moves and the remaining distance. Then, it checks if the number of moves is even or odd. If it'"], "prompt": "\nQUESTION:\nTakahashi, who lives on the number line, is now at coordinate X. He will make exactly K moves of distance D in the positive or negative direction.\nMore specifically, in one move, he can go from coordinate x to x + D or x - D.\nHe wants to make K moves so that the absolute value of the coordinate of the destination will be the smallest possible.\nFind the minimum possible absolute value of the coordinate of the destination.\n\n-----Constraints-----\n - -10^{15} \\leq X \\leq 10^{15}\n - 1 \\leq K \\leq 10^{15}\n - 1\u00a0\\leq D \\leq 10^{15}\n - All values in input are integers.\n\n-----Input-----\nInput is given from Standard Input in the following format:\nX K D\n\n-----Output-----\nPrint the minimum possible absolute value of the coordinate of the destination.\n\n-----Sample Input-----\n6 2 4\n\n-----Sample Output-----\n2\n\nTakahashi is now at coordinate 6. It is optimal to make the following moves:\n - Move from coordinate 6 to (6 - 4 =) 2.\n - Move from coordinate 2 to (2 - 4 =) -2.\nHere, the absolute value of the coordinate of the destination is 2, and we cannot make it smaller.\nPlease provide the solution as pure code only, without explanations or comments.\n\nANSWER:\n```python\n"}}