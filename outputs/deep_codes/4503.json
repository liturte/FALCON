{"4503": {"code": ["from sys import stdin\n\ndef solve(H, A):\n    dp = [0] * (H + 1)\n    dp[0] = 1\n    for a in A:\n        for i in range(a, H + 1):\n            dp[i] = max(dp[i], dp[i - a] * (not dp[a]))\n    return \"Yes\" if dp[H] else \"No\"\n\nH, N = map(int, stdin.readline().split())\nA = list(map(int, stdin.readline().split()))\nprint(solve(H, A))\n\n\nThis solution uses dynamic programming to keep track of whether Raccoon can win given the current monster's health. The dp array is initialized to 0 (False), indicating that Raccoon cannot win. For each special move, we iterate from the move's power to the", "H, N = map(int, input().split())\nA = list(map(int, input().split()))\n\ndp = [False] * (H + 1)\ndp[0] = True\n\nfor i in range(1, H + 1):\n    for a in A:\n        if i - a >= 0 and not dp[i - a]:\n            dp[i] = True\n            break\n\nprint('Yes' if dp[H] else 'No')\n\n\nThis code uses dynamic programming to solve the problem. It creates a boolean array `dp` of size `H + 1`, where `dp[i]` is `True` if it's possible to win with a total health of `i`, and `False` otherwise.\n\nThe code then iterates over each possible total health from 1 to `H`. For each total health `i`, it checks all possible special moves `A[", "def solve():\n    h, n = map(int, input().split())\n    a = list(map(int, input().split()))\n    a.sort()\n    dp = [False] * (h + 1)\n    dp[0] = True\n    for i in range(h):\n        if dp[i]:\n            for j in range(n):\n                if i + a[j] <= h:\n                    dp[i + a[j]] = True\n                else:\n                    break\n    print(\"Yes\" if dp[h] else \"No\")\n\nsolve()\n\nThis program uses dynamic programming to solve the problem.\nWe create a boolean array dp of size h + 1 and initialize it with False.\nWe then iterate through the array dp and for each i, if dp[i] is True, we iterate through the special moves.\nIf the sum of the current", "def solve():\n    H, N = map(int, input().split())\n    A = list(map(int, input().split()))\n\n    dp = [False] * (H + 1)\n    dp[0] = True\n    for i in range(H):\n        if dp[i]:\n            for j in range(N):\n                if i + A[j] <= H:\n                    dp[i + A[j]] = True\n    print('Yes' if dp[H] else 'No')\n\nsolve()\n\nThis code uses dynamic programming (DP) to solve the problem. It creates a list dp where dp[i] is True if Raccoon can win with i health. The base case is dp[0] = True, since Raccoon can win with 0 health. Then for each possible health i, it checks each special move A[j] and if Racco", "H, N = map(int, input().split())\nA = list(map(int, input().split()))\n\ndp = [0] * (H + 1)\nfor i in range(N):\n    for j in range(A[i], H + 1):\n        dp[j] = max(dp[j], dp[j - A[i]] + A[i])\n\nprint('Yes' if dp[H] == H else 'No')\n\n\nExplanation:\nThis code uses dynamic programming to solve the problem. It creates an array dp of size H + 1, where dp[i] is the maximum health Raccoon can get by using special moves, assuming the monster's current health is i.\n\nFor each move A[i], it iterates through the array dp from A[i] to H, updating dp[j] as the maximum of dp[j] and d"], "prompt": "\nQUESTION:\nRaccoon is fighting with a monster.\nThe health of the monster is H.\nRaccoon can use N kinds of special moves. Using the i-th move decreases the monster's health by A_i.\nThere is no other way to decrease the monster's health.\nRaccoon wins when the monster's health becomes 0 or below.\nIf Raccoon can win without using the same move twice or more, print Yes; otherwise, print No.\n\n-----Constraints-----\n - 1 \\leq H \\leq 10^9\n - 1 \\leq N \\leq 10^5\n - 1 \\leq A_i \\leq 10^4\n - All values in input are integers.\n\n-----Input-----\nInput is given from Standard Input in the following format:\nH N\nA_1 A_2 ... A_N\n\n-----Output-----\nIf Raccoon can win without using the same move twice or more, print Yes; otherwise, print No.\n\n-----Sample Input-----\n10 3\n4 5 6\n\n-----Sample Output-----\nYes\n\nThe monster's health will become 0 or below after, for example, using the second and third moves.\nPlease provide the solution as pure code only, without explanations or comments.\n\nANSWER:\n```python\n"}}