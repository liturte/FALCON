{"380": {"code": ["x_coords = [int(input()) for _ in range(3)]\ny_coords = [int(input()) for _ in range(3)]\n\nprint(max(abs(a-b) for a, b in zip(x_coords, x_coords[1:])) + max(abs(a-b) for a, b in zip(y_coords, y_coords[1:])))\n\n\nExplanation:\nThe solution uses the Python built-in `max` function to find the maximum difference between consecutive elements in the x_coords and y_coords lists. This is done for both the x and y coordinates. The result is the sum of these maximum differences, which is the minimum number of segments the polyline can consist of.\n\nThis is", "x1, y1 = map(int, input().split())\nx2, y2 = map(int, input().split())\nx3, y3 = map(int, input().split())\n\nif x1 == x2 == x3 or y1 == y2 == y3:\n    print(2)\nelse:\n    print(3)\n\n\nThis code works by first taking the three points as input and storing them in the variables x1, y1, x2, y2, x3, y3. It then checks if any of the x-coordinates or y-coordinates are the same (meaning they are on the same line). If this is the case, it prints 2, because a polyline can be made up of two segments that pass through the three points. If", "x1, y1 = map(int, input().split())\nx2, y2 = map(int, input().split())\nx3, y3 = map(int, input().split())\n\nif x1 == x2 == x3 or y1 == y2 == y3:\n    print(2)\nelse:\n    print(3)\n\nThis code works by reading in the coordinates of the three points. If any of the coordinates are equal (meaning the points are on the same line), the minimum number of segments required is 2. Otherwise, the minimum number of segments required is 3.", "x1, y1 = map(int, input().split())\nx2, y2 = map(int, input().split())\nx3, y3 = map(int, input().split())\n\nx_values = sorted([x1, x2, x3])\ny_values = sorted([y1, y2, y3])\n\nif x_values[0] == x_values[1] or x_values[1] == x_values[2] or y_values[0] == y_values[1] or y_values[1] == y_values[2]:\n    print(2)\nelse:\n    print(3)\n\n\nThis Python program reads three points from the input, sorts their x and y coordinates, and then checks if any two", "x1, y1 = map(int, input().split())\nx2, y2 = map(int, input().split())\nx3, y3 = map(int, input().split())\n\n# Check if the points are in the same vertical line\nif x1 == x2 == x3:\n    print(2)\nelif y1 == y2 == y3:\n    print(2)\nelse:\n    print(3)\n\n\nThis program works by first reading in the three points. It then checks if the x-coordinates or y-coordinates of all three points are the same. If they are, this means the points are in the same vertical or horizontal line, so the minimum number of segments is 2. If not, the points are not in the same line,"], "prompt": "\nQUESTION:\nThere are three points marked on the coordinate plane. The goal is to make a simple polyline, without self-intersections and self-touches, such that it passes through all these points. Also, the polyline must consist of only segments parallel to the coordinate axes. You are to find the minimum number of segments this polyline may consist of.\n\n\n-----Input-----\n\nEach of the three lines of the input contains two integers. The i-th line contains integers x_{i} and y_{i} ( - 10^9 \u2264 x_{i}, y_{i} \u2264 10^9)\u00a0\u2014 the coordinates of the i-th point. It is guaranteed that all points are distinct.\n\n\n-----Output-----\n\nPrint a single number\u00a0\u2014 the minimum possible number of segments of the polyline.\n\n\n-----Examples-----\nInput\n1 -1\n1 1\n1 2\n\nOutput\n1\n\nInput\n-1 -1\n-1 3\n4 3\n\nOutput\n2\n\nInput\n1 1\n2 3\n3 2\n\nOutput\n3\n\n\n\n-----Note-----\n\nThe variant of the polyline in the first sample: [Image] The variant of the polyline in the second sample: $1$ The variant of the polyline in the third sample: $\\because$\nPlease provide the solution as pure code only, without explanations or comments.\n\nANSWER:\n```python\n"}}