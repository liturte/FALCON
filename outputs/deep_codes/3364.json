{"3364": {"code": ["class DisjointSet:\n    def __init__(self, n):\n        self.parent = list(range(n))\n        self.rank = [0] * n\n\n    def find(self, x):\n        if self.parent[x] != x:\n            self.parent[x] = self.find(self.parent[x])\n        return self.parent[x]\n\n    def union(self, x, y):\n        xr = self.find(x)\n        yr = self.find(y)\n        if xr != yr:\n            if self.rank[xr] < self.rank[yr]:\n                self.parent[xr] = yr\n            elif self.rank[xr] > self.rank[yr]:\n                self.parent[yr] = xr\n            else:\n                self.parent[yr] = xr\n                self.rank[xr] += 1\n\nn, q = map(int, input().split())\nds = Disjoint", "class UnionFind:\n    def __init__(self, n):\n        self.parent = list(range(n))\n        self.rank = [0] * n\n\n    def find(self, x):\n        if self.parent[x] != x:\n            self.parent[x] = self.find(self.parent[x])\n        return self.parent[x]\n\n    def union(self, x, y):\n        xr = self.find(x)\n        yr = self.find(y)\n        if xr != yr:\n            if self.rank[xr] < self.rank[yr]:\n                self.parent[xr] = yr\n            elif self.rank[xr] > self.rank[yr]:\n                self.parent[yr] = xr\n            else:\n                self.parent[yr] = xr\n                self.rank[xr] += 1\n\nN, Q = map(int, input().split())\nuf = UnionFind(", "class UnionFind:\n    def __init__(self, n):\n        self.parent = list(range(n))\n        self.rank = [0] * n\n\n    def find(self, x):\n        if self.parent[x] != x:\n            self.parent[x] = self.find(self.parent[x])\n        return self.parent[x]\n\n    def union(self, x, y):\n        xr = self.find(x)\n        yr = self.find(y)\n        if xr != yr:\n            if self.rank[xr] < self.rank[yr]:\n                self.parent[xr] = yr\n            elif self.rank[xr] > self.rank[yr]:\n                self.parent[yr] = xr\n            else:\n                self.parent[yr] = xr\n                self.rank[xr] += 1\n\n    def same(self, x, y):\n        return self.find(x", "def union_find(n):\n    parent = list(range(n))\n    def find(a):\n        if a != parent[a]:\n            parent[a] = find(parent[a])\n        return parent[a]\n    def union(a, b):\n        pa, pb = find(a), find(b)\n        if pa != pb:\n            parent[pa] = pb\n    return find, union\n\nn, q = map(int, input().split())\nfind, union = union_find(n)\n\nfor _ in range(q):\n    op, a, b = input().split()\n    a, b = map(int, (a, b))\n    if op == \"=\":\n        union(a, b)\n    elif op == \"?\":\n        print(\"yes\" if find(a) == find(b) else \"no\")\n\n\nEXPLANATION:\nThis solution uses the Union-Find algorithm, which is a data structure", "class UnionFind:\n    def __init__(self, n):\n        self.parent = list(range(n))\n        self.rank = [0] * n\n\n    def find(self, x):\n        if self.parent[x] != x:\n            self.parent[x] = self.find(self.parent[x])\n        return self.parent[x]\n\n    def union(self, x, y):\n        xr = self.find(x)\n        yr = self.find(y)\n        if xr != yr:\n            if self.rank[xr] < self.rank[yr]:\n                self.parent[xr] = yr\n            elif self.rank[xr] > self.rank[yr]:\n                self.parent[yr] = xr\n            else:\n                self.parent[yr] = xr\n                self.rank[xr] += 1\n\n    def same_set(self, x, y):\n        return self.find"], "prompt": "\nQUESTION:\n-----Input-----\nThe first line of input consists of two integers $N$ and $Q$, where $1 \\le N \\le 1000000$ is the number of elements in the base set and $0 \\le Q \\le 1000000$ is the number of operations. Then follow $Q$ lines, one per operation. There are two types of operations:\n - \u201c= $a$ $b$\u201d indicate that the sets containing $a$ and $b$ are joined\n - \u201c? $a$ $b$\u201d is a query asking whether $a$ and $b$ belong to the same set\n\nIn both cases, $a$ and $b$ are distinct integers between $0$ and $N-1$.\n\n-----Output-----\nFor each query output a line containing \u201cyes\u201d if $a$ and $b$ are in the same set, and \u201cno\u201d otherwise.\n\n-----Examples-----\nSample Input:\n10 4\n? 1 3\n= 1 8\n= 3 8\n? 1 3\nSample Output:\nno\nyes\nPlease provide the solution as pure code only, without explanations or comments.\n\nANSWER:\n```python\n"}}