{"398": {"code": ["n = int(input())\na = list(map(int, input().split()))\na.sort()\nfor i in range(n - 2):\n    if a[i] + a[i + 1] > a[i + 2]:\n        print('YES')\n        exit(0)\nprint('NO')\n\n\nEXPLANATION:\nThis Python solution works by first sorting the input list of line segment lengths. Then, it iterates over the sorted list, checking if the sum of the lengths of any two", "n = int(input())\na = list(map(int, input().split()))\na.sort()\nfor i in range(n - 2):\n    if a[i] + a[i + 1] > a[i + 2]:\n        print('YES')\n        exit(0)\nprint('NO')\n\n\nThis Python program solves the problem by first sorting the input lengths of the line segments. Then, it iterates over the sorted list of lengths, checking if the sum of the lengths of the two short", "def main():\n    n = int(input().strip())\n    a = sorted(list(map(int, input().strip().split())))\n    for i in range(n-2):\n        if a[i] + a[i+1] > a[i+2]:\n            print('YES')\n            return\n    print('NO')\n\nif __name__ == '__main__':\n    main()\n\n\nThis solution works by sorting the array of line segment lengths. Then, it iterates over the", "n = int(input())\na = sorted(list(map(int, input().split())))\nprint(\"YES\" if a[0] + a[1] > a[2] else \"NO\")\n\n\nExplanation:\n\nThis solution works by first sorting the list of line segment lengths, a. After sorting, the smallest line segment will be at the start of the list, the next smallest will be in the middle, and the longest will be at the end.\n\nTo form a non-degenerate triangle, the", "n = int(input())\nsegments = list(map(int, input().split()))\nsegments.sort()\n\nfor i in range(n-2):\n    if segments[i] + segments[i+1] > segments[i+2]:\n        print('YES')\n        break\nelse:\n    print('NO')\n\n\nThis code works by first sorting the list of line segment lengths. It then iterates through the list, checking if the sum of the lengths of the two smallest line segments is greater than the"], "prompt": "\nQUESTION:\nMahmoud has n line segments, the i-th of them has length a_{i}. Ehab challenged him to use exactly 3 line segments to form a non-degenerate triangle. Mahmoud doesn't accept challenges unless he is sure he can win, so he asked you to tell him if he should accept the challenge. Given the lengths of the line segments, check if he can choose exactly 3 of them to form a non-degenerate triangle.\n\nMahmoud should use exactly 3 line segments, he can't concatenate two line segments or change any length. A non-degenerate triangle is a triangle with positive area.\n\n\n-----Input-----\n\nThe first line contains single integer n (3 \u2264 n \u2264 10^5)\u00a0\u2014 the number of line segments Mahmoud has.\n\nThe second line contains n integers a_1, a_2, ..., a_{n} (1 \u2264 a_{i} \u2264 10^9)\u00a0\u2014 the lengths of line segments Mahmoud has.\n\n\n-----Output-----\n\nIn the only line print \"YES\" if he can choose exactly three line segments and form a non-degenerate triangle with them, and \"NO\" otherwise.\n\n\n-----Examples-----\nInput\n5\n1 5 3 2 4\n\nOutput\nYES\n\nInput\n3\n4 1 2\n\nOutput\nNO\n\n\n\n-----Note-----\n\nFor the first example, he can use line segments with lengths 2, 4 and 5 to form a non-degenerate triangle.\nPlease provide the solution as pure code only, without explanations or comments.\n\nANSWER:\n```python\n"}}