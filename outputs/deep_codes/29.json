{"29": {"code": ["def min_replacements(ticket):\n    left_sum = sum(int(digit) for digit in ticket[:3])\n    right_sum = sum(int(digit) for digit in ticket[3:])\n    replacements = 0\n    for i in range(3):\n        if left_sum > right_sum:\n            right_sum += int(ticket[3 + i]) - int(ticket[i])\n            left_sum -= int(ticket[i])\n            replacements += 1\n        else:\n            break\n    return replacements\n\nprint(min_replacements(input()))\n\n\nEXPLANATION:\nThe solution is based on the observation that the ticket is lucky if and", "def min_replacements(ticket):\n    sum1 = sum(int(ticket[i]) for i in range(3))\n    sum2 = sum(int(ticket[i]) for i in range(3,6))\n    return abs(sum1 - sum2)\n\nprint(min_replacements(input()))\n\n\nEXPLANATION:\nThe function `min_replacements` calculates the sum of the first three and last three digits of the ticket and returns the absolute difference between these sums. This difference is the minimum number of replacements needed to make the ticket lucky.\n\nThe `input` function is used to get the ticket from the user. The result is printed out.\n\nThe `abs` function is used", "def min_replacements(ticket):\n    left_sum = sum(int(digit) for digit in ticket[:3])\n    right_sum = sum(int(digit) for digit in ticket[3:])\n    if left_sum == right_sum:\n        return 0\n    else:\n        return 1\n\nticket = input()\nprint(min_replacements(ticket))\n\n\nThis code works by first splitting the ticket into two parts: the left three digits and the right three digits. It then calculates the sum of each part and checks if they are equal. If they are, it means the ticket is already lucky and no replacements are needed. If they are not equal, one replacement is needed to make the", "def min_replacements(ticket):\n    left = [0]*10\n    right = [0]*10\n    for i in range(6):\n        if i < 3:\n            left[int(ticket[i])] += 1\n        else:\n            right[int(ticket[i])] += 1\n    total_replacements = 0\n    for i in range(10):\n        if left[i] > right[i]:\n            total_replacements += left[i] - right[i]\n    return total_replacements\n\nprint(min_replacements(input()))\n\n\nThis code works by first counting the occurrences of each digit in the left half and", "def min_replacements(ticket):\n    left = [int(digit) for digit in ticket[:3]]\n    right = [int(digit) for digit in ticket[3:]]\n    if sum(left) == sum(right):\n        return 0\n    for i in range(6):\n        for j in range(6):\n            if i != j and left[i] + right[j] != left[i] + left[j]:\n                return 1\n    return 2\n\nprint(min_replacements(input()))\n\n\nThis Python program reads a string of 6 digits from the input, splits it into two lists of 3 digits each (left and right), and checks if the sums"], "prompt": "\nQUESTION:\nLuba has a ticket consisting of 6 digits. In one move she can choose digit in any position and replace it with arbitrary digit. She wants to know the minimum number of digits she needs to replace in order to make the ticket lucky.\n\nThe ticket is considered lucky if the sum of first three digits equals to the sum of last three digits.\n\n\n-----Input-----\n\nYou are given a string consisting of 6 characters (all characters are digits from 0 to 9) \u2014 this string denotes Luba's ticket. The ticket can start with the digit 0.\n\n\n-----Output-----\n\nPrint one number \u2014 the minimum possible number of digits Luba needs to replace to make the ticket lucky.\n\n\n-----Examples-----\nInput\n000000\n\nOutput\n0\n\nInput\n123456\n\nOutput\n2\n\nInput\n111000\n\nOutput\n1\n\n\n\n-----Note-----\n\nIn the first example the ticket is already lucky, so the answer is 0.\n\nIn the second example Luba can replace 4 and 5 with zeroes, and the ticket will become lucky. It's easy to see that at least two replacements are required.\n\nIn the third example Luba can replace any zero with 3. It's easy to see that at least one replacement is required.\nPlease provide the solution as pure code only, without explanations or comments.\n\nANSWER:\n```python\n"}}