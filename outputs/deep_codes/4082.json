{"4082": {"code": ["def maxLength(n, a):\n    dp = [1]*n\n    dp2 = [1]*n\n    for i in range(1, n", "def maxLength(n, arr):\n    if n == 1:\n        return 1\n    max_len = 1\n    cur_len = 1\n    for i in", "def max_length(n, a):\n    max_len = 1\n    cur_len = 1\n    for i in range(1, n):\n        if a[", "n = int(input())\na = list(map(int, input().split()))\n\nleft = 0\nright = n - 1\nwhile left < n - 1", "def solve(n, a):\n    dp = [1]*n\n    dp2 = [1]*n\n    for i in range(1, n):"], "prompt": "\nQUESTION:\nYou are given an array $a$ consisting of $n$ integers.\n\nYou can remove at most one element from this array. Thus, the final length of the array is $n-1$ or $n$.\n\nYour task is to calculate the maximum possible length of the strictly increasing contiguous subarray of the remaining array.\n\nRecall that the contiguous subarray $a$ with indices from $l$ to $r$ is $a[l \\dots r] = a_l, a_{l + 1}, \\dots, a_r$. The subarray $a[l \\dots r]$ is called strictly increasing if $a_l < a_{l+1} < \\dots < a_r$.\n\n\n-----Input-----\n\nThe first line of the input contains one integer $n$ ($2 \\le n \\le 2 \\cdot 10^5$) \u2014 the number of elements in $a$.\n\nThe second line of the input contains $n$ integers $a_1, a_2, \\dots, a_n$ ($1 \\le a_i \\le 10^9$), where $a_i$ is the $i$-th element of $a$.\n\n\n-----Output-----\n\nPrint one integer \u2014 the maximum possible length of the strictly increasing contiguous subarray of the array $a$ after removing at most one element.\n\n\n-----Examples-----\nInput\n5\n1 2 5 3 4\n\nOutput\n4\n\nInput\n2\n1 2\n\nOutput\n2\n\nInput\n7\n6 5 4 3 2 4 3\n\nOutput\n2\n\n\n\n-----Note-----\n\nIn the first example, you can delete $a_3=5$. Then the resulting array will be equal to $[1, 2, 3, 4]$ and the length of its largest increasing subarray will be equal to $4$.\nPlease provide the solution as pure code only, without explanations or comments.\n\nANSWER:\n```python\n"}}