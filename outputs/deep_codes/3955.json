{"3955": {"code": ["from sys import stdin, stdout\nfrom collections import deque\n\ndef read_int():\n    return int(stdin.readline())\n\ndef read_ints():\n    return list(map(int, stdin.readline().split()))\n\ndef solve():\n    n, k, x = read_ints()\n    a = sorted(read_ints())\n    q = deque()\n    for i in a:\n        while q and q[", "from sys import stdin, stdout\n\nread = stdin.readline\nwrite = stdout.write\n\nn, k, x = map(int, read().split())\na = list(map(int, read().split()))\n\nma = [0] * 32\nfor i in range(n):\n    for j in range(31, -1, -1):\n        if a[i] & (1 << j):\n            ma", "def maxOR(nums, k, x):\n    nums.sort()\n    l, r = 0, max(nums) ^ x\n    while l < r:\n        mid = (l + r + 1) // 2\n        if check(nums, mid, k):\n            l = mid\n        else:\n            r = mid - 1\n    return l\n\ndef check(nums, target, k):\n    n = len", "from collections import Counter\nfrom heapq import nlargest\nfrom functools import reduce\nfrom operator import or_\n\ndef max_or(n, k, x, arr):\n    arr = list(map(lambda y: y * x, arr))\n    counter = Counter(bin(i).count('1') for i in arr)\n    return max(reduce(or_, [int(i) for i in counter.keys() if i <= k", "import bisect\nfrom collections import defaultdict\n\ndef solve(n, k, x, a):\n    a.sort()\n    prefix = [0] * (n + 1)\n    for i in range(n):\n        prefix[i + 1] = prefix[i] + a[i]\n    dp = [0] * (k + 1)\n    for i in range(n - 1, -1, -1):\n        dp"], "prompt": "\nQUESTION:\nYou are given n numbers a_1, a_2, ..., a_{n}. You can perform at most k operations. For each operation you can multiply one of the numbers by x. We want to make [Image] as large as possible, where $1$ denotes the bitwise OR. \n\nFind the maximum possible value of [Image] after performing at most k operations optimally.\n\n\n-----Input-----\n\nThe first line contains three integers n, k and x (1 \u2264 n \u2264 200 000, 1 \u2264 k \u2264 10, 2 \u2264 x \u2264 8).\n\nThe second line contains n integers a_1, a_2, ..., a_{n} (0 \u2264 a_{i} \u2264 10^9).\n\n\n-----Output-----\n\nOutput the maximum value of a bitwise OR of sequence elements after performing operations.\n\n\n-----Examples-----\nInput\n3 1 2\n1 1 1\n\nOutput\n3\n\nInput\n4 2 3\n1 2 4 8\n\nOutput\n79\n\n\n\n-----Note-----\n\nFor the first sample, any possible choice of doing one operation will result the same three numbers 1, 1, 2 so the result is $1|1|2 = 3$. \n\nFor the second sample if we multiply 8 by 3 two times we'll get 72. In this case the numbers will become 1, 2, 4, 72 so the OR value will be 79 and is the largest possible result.\nPlease provide the solution as pure code only, without explanations or comments.\n\nANSWER:\n```python\n"}}