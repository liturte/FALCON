{"3432": {"code": ["import heapq\n\ndef min_max_sum(n, rounds):\n    a_nums = []\n    b_nums = []\n    for a, b in rounds:\n        heapq.heappush(a_nums, a)\n        heapq.heappush(b_nums, b)\n    total = 0\n    while a_nums and b_nums:\n        total += heapq.heappop(a_nums) + heapq.heappop", "import sys\n\ndef solve():\n    N = int(sys.stdin.readline())\n    A = [0]*100\n    B = [0]*100\n    for _ in range(N):\n        a, b = map(int, sys.stdin.readline().split())\n        A[a-1] += 1\n        B[b-1] += 1\n    A.sort(reverse=True)\n    B.sort(reverse=True)", "import heapq\n\nN = int(input())\nAB = [list(map(int, input().split())) for _ in range(N)]\n\nA = [a for a, b in AB]\nB = [b for a, b in AB]\n\nA.sort()\nB.sort()\n\nans = []\n\nfor _ in range(N):\n    a = heapq.heappop(A)\n    b = heapq.heappop(B)\n    ans.append", "from heapq import *\n\ndef solve(A, B, N):\n    A.sort()\n    B.sort()\n    result = 0\n    heap = []\n    for i in range(N-1, -1, -1):\n        heappush(heap, -A[i])\n        if len(heap) > B[i]:\n            result += -heappop(heap)\n    return result\n\nN = int(input())\nA = []\nB = []", "import heapq\n\ndef solve():\n    n = int(input())\n    AB = [list(map(int, input().split())) for _ in range(n)]\n    A = sorted([a for a, b in AB])\n    B = sorted([b for a, b in AB])\n    print(sum(A) + sum(B) - max(A[-1], B[-1]))\n\nfor _ in range(int(input())):\n    solve()\n\n\nThe above solution works"], "prompt": "\nQUESTION:\nMirko and Slavko are playing a new game. Again. Slavko starts each round by giving Mirko two numbers $A$ and $B$, both smaller than 100. Mirko then has to slove the following task for Slavko: how to pair all given $A$ numbers with all given $B$ numbers so that the maximal sum of such pairs is as small as possible.\n\nIn other words, if during previous rounds Slavko gave numbers $a_1, a_2 ,a_3, \\ldots , a_ n$ and $b_1, b_2, b_3, \\ldots , b_ n$ , determine $n$ pairings $(a_ i, b_ j)$ such that each number in the $A$ sequence is used in exactly one pairing, each number in the $B$ sequence is used in exactly one pairing, and the maximum of all sums $a_ i + b_ j$ is minimal.\n\n-----Input-----\nThe first line of input contains a single integer $N$ ($1 \\leq N \\leq 100000$), the number of rounds.\n\nThe next $N$ lines contain two integers $A$ and $B$ ($1 \\leq A, B \\leq 100$), the numbers given by Slavko in that round.\n\n-----Output-----\nThe output consists of $N$ lines, one for each round. Each line should contain the smallest maximal sum for that round.\n\n-----Examples-----\nSample Input:\n3\n2 8\n3 1\n1 4\nSample Output:\n10\n10\n9\nPlease provide the solution as pure code only, without explanations or comments.\n\nANSWER:\n```python\n"}}