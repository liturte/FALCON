{"3883": {"code": ["import math\n\ndef solve(a, b):\n    if a <= b:\n        return -1\n    return (a - b) / (math.sqrt(a + b) - 1)\n\na, b = map(int, input().split())\nprint(\"{0:.12f}\".format(solve(a, b)))\n\n\nThis is a Python solution to the problem. It uses a binary search to find the minimum positive value of x. The search is performed on the interval [0, 10^9]. The function `solve(x)` returns the maximum possible value of y for a given x. The binary search is performed until the difference between the current maximum and the next maximum is less than 10^{-9}. The result is printed with 12", "import math\n\na, b = map(int, input().split())\n\nif a > b:\n    a, b = b, a\n\nif a == b:\n    print(0.0)\nelse:\n    l, r = 0, 10**9\n    while l < r:\n        m = (l + r) / 2\n        if a * m + b * math.sqrt(4 * m**2 - a**2 - b**2) > 0:\n            r = m\n        else:\n            l = m + 1e-15\n    print(l if a * l + b * math.sqrt(4 * l**2 - a**2 - b**2) > 0 else -1)\n\n\nThe code above uses binary", "import math\n\na, b = map(int, input().split())\n\nif a > b:\n    print(-1)\nelse:\n    print(2 * (a / b) * (math.sqrt(b ** 2 - a ** 2)))\n\n\nExplanation:\n\nThis problem can be solved by using the properties of geometric progression and the Pythagorean theorem. \n\nThe points in the polyline form a right-angled triangle with the hypotenuse as the line segment connecting consecutive points in the polyline. The length of the hypotenuse is sqrt(x^2 + x^2) = sqrt(2)*x. \n\nThe lengths of the two legs of the triangle are a and b, and we know that a^2 +", "import math\n\ndef solve():\n    a, b = map(int, input().split())\n    if a < b:\n        a, b = b, a\n    if a > b * 2 or (a + b) % 2 != 0:\n        return -1\n    return 2 * a / (a + b)\n\nprint(\"{:.12f}\".format(solve()))\n\n\nExplanation:\n\nThe given polyline is a sequence of points in a specific pattern.\n\nThe pattern is as follows:\n\n(0, 0) \u2013 (x, x) \u2013 (2x, 0) \u2013 (3x, x) \u2013 (4x, 0) \u2013 ...\n\nThis pattern is repeated every", "import sys\n\ndef main():\n    a, b = map(int, sys.stdin.readline().split())\n\n    if a > b * 2:\n        print(-1)\n    else:\n        print((a + b) / (2 * b))\n\nmain()\n\n\nThis solution uses the formula for the midpoint of a line segment to calculate the minimum value of x. The formula is (a + b) / (2 * b), where a and b are the coordinates of the points. The solution first checks if the point (a, b) is impossible to reach by the polyline. If a is greater than twice b, then the point (a, b) cannot be reached, so it prints -1. Otherwise, it calculates the minimum value of x using the formula and"], "prompt": "\nQUESTION:\nThere is a polyline going through points (0, 0) \u2013 (x, x) \u2013 (2x, 0) \u2013 (3x, x) \u2013 (4x, 0) \u2013 ... - (2kx, 0) \u2013 (2kx + x, x) \u2013 .... \n\nWe know that the polyline passes through the point (a, b). Find minimum positive value x such that it is true or determine that there is no such x.\n\n\n-----Input-----\n\nOnly one line containing two positive integers a and b (1 \u2264 a, b \u2264 10^9).\n\n\n-----Output-----\n\nOutput the only line containing the answer. Your answer will be considered correct if its relative or absolute error doesn't exceed 10^{ - 9}. If there is no such x then output  - 1 as the answer.\n\n\n-----Examples-----\nInput\n3 1\n\nOutput\n1.000000000000\n\nInput\n1 3\n\nOutput\n-1\n\nInput\n4 1\n\nOutput\n1.250000000000\n\n\n\n-----Note-----\n\nYou can see following graphs for sample 1 and sample 3.  [Image]  [Image]\nPlease provide the solution as pure code only, without explanations or comments.\n\nANSWER:\n```python\n"}}