{"3450": {"code": ["def factorial_last_three_digits(n):\n    result = 1\n    for i in range(1, n + 1):\n        result *= i\n        while result % 10 == 0:\n            result //= 10\n        result %= 1000\n    return result\n\nprint(factorial_last_3_digits(int(input())))\n\n\nThis Python program calculates the last three digits of the factorial of a number. It uses a loop to multiply the numbers from 1 to n, and a while loop to remove trailing zeroes. The result is then taken modulo 1000 to get the last three digits. The result is printed out at the end.\n\nPlease", "def last_3_digits(n):\n    def factorial(n):\n        if n == 0:\n            return 1\n        else:\n            return n * factorial(n - 1)\n\n    def count_trailing_zeros(n):\n        count = 0\n        i = 5\n        while n / i >= 1:\n            count += n // i\n            i *= 5\n        return count\n\n    fact = str(factorial(n))\n    zeros = count_trailing_zeros(n)\n    return fact[-3 * zeros:-2 * zeros]\n\nn = int(input())\nprint(last_3_digits(n))\n\nThis solution first calculates", "def last_three_digits(n):\n    # Initialize result\n    res = 1\n\n    # Find trailing zeroes\n    zeroes = 0\n    i = 5\n    while n/i >= 1:\n        zeroes += n//i\n        i *= 5\n\n    # Find last 3 digits before trailing zeroes\n    res = pow(n, n, 10**3)\n    for _ in range(zeroes):\n        res = pow(res, 5, 10**3)\n\n    return res\n\nn = int(input())\nprint(last_three_digits(n))\n\nThis program uses the fact that the trailing zeroes in a factorial come from", "def last_three_digits(n):\n    # Initialize result\n    res = 1\n    for i in range(1, n + 1):\n        res *= i\n        while res % 10 == 0:  # Remove trailing zeroes\n            res //= 10\n        res %= 1000  # Keep only last 3 digits\n    return res\n\nprint(last_three_digits(int(input())))\n\n\nThis code uses a for loop to calculate the factorial of `n`. In each iteration, it multiplies the current result by `i` and then removes all trailing zeroes by dividing the result by 10 until the last digit is not zero. After that, it takes", "def last_three_digits(n):\n    if n == 0:\n        return 1\n    else:\n        return (n * last_three_digits(n - 1)) % 1000\n\nprint(last_three_digits(int(input())))\n\nThis code uses a recursive function to calculate the factorial of a number, but instead of storing the full result in memory, it calculates the result modulo 1000 (the last 3 digits) at each step, which keeps the memory usage low. It then prints out the last 3 digits of the factorial.\n\nThis code assumes that the input is a non-negative integer. If the input could be negative, the code would need"], "prompt": "\nQUESTION:\nPer is obsessed with factorials. He likes to calculate them, estimate them, read about them, draw them, dream about them and fight about them. He even has the value of $12!=479001600$ tattooed on his back.\n\nHe noticed a long time ago that factorials have many trailing zeroes and also wrote a program to calculate the number of trailing zeroes. For example $12!$ ends with 600, so it has 2 trailing zeroes. Now he wants to make one step further, look at the 3 digits right before the trailing zeroes. In the case of $12!$, the last 3 digits before the trailing zeroes are $016$.\n\n-----Task-----\nGiven an integer $n$, find the last 3 digits before the trailing zeroes in $n!$. If there are fewer then 3 such digits, find all of them.\n\n-----Input-----\nThe input contains one line with one integer $n$ ($1\\leq n\\leq 10000000$).\n\n-----Output-----\nOutput one line with the 3 digits before trailing zeroes of $n!$. If there are fewer than 3 such digits, output all of them.\n\n-----Examples-----\nSample Input:\n5\nSample Output:\n12\nPlease provide the solution as pure code only, without explanations or comments.\n\nANSWER:\n```python\n"}}