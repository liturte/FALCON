{"4811": {"code": ["def solve():\n    K = int(input().strip())\n    bar_size = 1\n    breaks = 0\n    while bar_size < K:\n        bar_size *= 2\n        breaks += 1\n    return bar_size, breaks\n\nprint(*solve())\n\n\nExplanation:\nThe solution is based on the fact that the bars are of size 2^n. We start", "import math\n\ndef solve(K):\n    bar_size = 1\n    breaks = 0\n    while True:\n        if bar_size >= K:\n            return bar_size, breaks\n        else:\n            bar_size *= 2\n            breaks += 1\n\nK = int(input())\nbar_size, breaks = solve(K)\nprint(bar_size, breaks)", "def min_breaks(K):\n    N = 1\n    while N < K:\n        N *= 2\n    return N, bin(N ^ K).count('1')\n\nK = int(input())\nprint(*min_breaks(K))\n\n\nEXPLANATION:\nIn this code, we first initialize `N` to `1`. Then we enter a loop that continues", "def solve(K):\n    bar_size = 1\n    breaks = 0\n    while bar_size < K:\n        bar_size *= 2\n        breaks += 1\n    return bar_size, breaks\n\nK = int(input())\nbar_size, breaks = solve(K)\nprint(bar_size, breaks)\n\n\nEXPLANATION:\nThe solution involves a simple loop", "def solve(K):\n    bar = 1\n    breaks = 0\n    while bar < K:\n        bar *= 2\n        breaks += 1\n    while bar > K:\n        bar //= 2\n        breaks += 1\n    return bar, breaks\n\nK = int(input())\nprint(*solve(K))\n\n\nEXPLANATION:\nThe solution is based on the binary representation"], "prompt": "\nQUESTION:\nA new type of chocolate arrived in the local shop. The chocolate comes in bars, each bar consisting of $N$ squares. Bars are factory made and only come in sizes which are full powers of two. In other words a single bar has $1, 2, 4, 8, 16, \\dots $ squares.\n\nTo fully asses the quality of chocolate Mirko must sample at least $K$ squares. His friend Slavko would also like to try some of the chocolate. Since Mirko is in a hurry to try the chocolate himself, he decides to break the bar he bought in pieces, such that he has exactly $K$ squares, and leaves the rest (if any) to Slavko. The bars are a bit brittle, so Mirko can break them only on their exact center. In other words, from one bar with $D$ squares, he can get two bars with $D/2$ squares.\n\nWrite a program that will determine the minimal number of breaks Mirko must perform in order to obtain exactly $K$ squares (not necessarily in one piece). Also, determine the smallest bar size Mirko must buy in order to have at least $K$ squares.\n\n-----Input-----\nThe first and only line of input will contain one integer $K$ $(1 \\leq K \\leq 1000000)$, number of squares Mirko must sample.\n\n-----Output-----\nThe first and only line of output should contain two integers, separated by a single space. The first integer is the smallest bar size Mirko must buy. The second the smallest number of breaks.\n\n-----Examples-----\nSample Input 1:\n6\nSample Output 1:\n8 2\n\nSample Input 2:\n7\nSample Output 2:\n8 3\nPlease provide the solution as pure code only, without explanations or comments.\n\nANSWER:\n```python\n"}}