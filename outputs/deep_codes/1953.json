{"1953": {"code": ["n = int(input())\ntimes = sorted(map(int, input().split()))\nprint(sum(times[:-1]) + 1)\n\n\nEXPLANATION:\nThe solution first reads the input and sorts the times of service in ascending order. Then it sums up all the times except the last one (which is the maximum time and will be the last to be served). The sum is then incremented by 1 (since the last person will always be served last). This solution works because by swapping people, we can make each person wait for less time than the previous ones, which reduces the chance of them being disappointed.\n\nFor example, with the input (5, [15, 2, 1, 5,", "def max_not_disappointed():\n    n = int(input())\n    times = list(map(int, input().split()))\n    times.sort()\n    return n - times.index(max(times))\n\nprint(max_not_disappointed())\n\nThis program reads the number of people and their serving times, sorts the times in ascending order, and then returns the number of people who will not be disappointed by swapping the people in the queue. This is achieved by making the people with the smallest serving times (those who will not be disappointed) come last in the queue. The index of the maximum serving time in the sorted list is the number of people who will be served before the maximum serving time, and subtracting this", "n = int(input())\nt = list(map(int, input().split()))\nt.sort()\nfor i in range(n):\n    t[i] = t[i] + t[i-1] if i else t[i]\nprint(n - t[::-1].index(max(t)))\n\n\nEXPLANATION:\nThis problem is a typical example of greedy algorithm. Firstly, we sort the list of waiting time. Then we calculate the cumulative sum from the smallest to the largest, which represents the total time of serving all the people before him. After that, we reverse the cumulative sum list and find the maximum value. The index of this maximum value in the original list is the maximum", "def solve():\n    n = int(input())\n    times = list(map(int, input().split()))\n    times.sort()\n    for i in range(n):\n        if times[i] > i:\n            return i\n    return n\n\nprint(solve())\n\n\nEXPLANATION:\nThis problem can be solved by sorting the given times and then checking how many people do not have to wait more than their service time. This is because the people with the longest service times can serve the people with the shortest service times. After sorting the times, for each person i, if t[i] > i, this means that the i-th person does not have to wait more than their service time,", "import sys\ninput = sys.stdin.readline\nn = int(input())\nt = list(map(int, input().split()))\nt.sort()\nprint(n - t[::-1].index(max(t)))\n\n\nThis code firstly sorts the list of times. Then, it finds the maximum time and counts the number of people that can be served first by reversing the sorted list and finding the index of the maximum time. The result is the number of people who can be served first without being disappointed.\n\nThis is a greedy algorithm that works because we always want to serve the person with the smallest time first, so we always swap the person with the smallest time to the end of the queue. This way, we"], "prompt": "\nQUESTION:\nLittle girl Susie went shopping with her mom and she wondered how to improve service quality. \n\nThere are n people in the queue. For each person we know time t_{i} needed to serve him. A person will be disappointed if the time he waits is more than the time needed to serve him. The time a person waits is the total time when all the people who stand in the queue in front of him are served. Susie thought that if we swap some people in the queue, then we can decrease the number of people who are disappointed. \n\nHelp Susie find out what is the maximum number of not disappointed people can be achieved by swapping people in the queue.\n\n\n-----Input-----\n\nThe first line contains integer n (1 \u2264 n \u2264 10^5).\n\nThe next line contains n integers t_{i} (1 \u2264 t_{i} \u2264 10^9), separated by spaces.\n\n\n-----Output-----\n\nPrint a single number \u2014 the maximum number of not disappointed people in the queue.\n\n\n-----Examples-----\nInput\n5\n15 2 1 5 3\n\nOutput\n4\n\n\n\n-----Note-----\n\nValue 4 is achieved at such an arrangement, for example: 1, 2, 3, 5, 15. Thus, you can make everything feel not disappointed except for the person with time 5.\nPlease provide the solution as pure code only, without explanations or comments.\n\nANSWER:\n```python\n"}}