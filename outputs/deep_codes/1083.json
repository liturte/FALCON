{"1083": {"code": ["def split_integers(n):\n    group1 = [1]\n    group2 = list(range(2, n + 1))\n    difference = n - 1\n    return difference, group1, group2\n\nn = int(input())\ndifference, group1, group2 = split_integers(n)\nprint(difference)\nprint(' '.join(map(str, group1 + group2)))\n\n\nThis solution works by always putting the smallest possible integer into the second group. This ensures that the sum of the integers in each group is as close to each other as possible, and the difference between the sums is minimized.\n\nFor example", "n = int(input())\nif n == 2:\n    print(1, 1)\nelse:\n    print(0, n*(n+1)//2, n)\n\n\nThis solution works by first checking if n is 2. If it is, it outputs \"1 1\" because there are only 2 numbers and they need to be split into 2 groups. If n is not 2, it outputs \"0 n*(n+1)//2 n\" because the smallest possible absolute difference is 0, and the sum of the first group is n*(n+1)//2, and the size of the first group is n. This is because if we", "def split_integers(n):\n    if n == 2:\n        return 1, [1, 1]\n    group1 = [i for i in range(1, n//2+1)]\n    group2 = [i for i in range(n//2+1, n+1)]\n    return 0, group1, group2\n\nn = int(input())\ndiff, *groups = split_integers(n)\nprint(diff)\nfor group in groups:\n    print(len(group), ' '.join(map(str, group)))\n\n\nThis solution works by simply splitting the integers into two groups, with the goal", "n = int(input())\nif n == 2:\n    print(1, 1)\nelse:\n    print(0, 2, *range(3, n+1))\n\n\nExplanation:\nThe problem is asking to split the integers in two groups so that the difference between the sum of the numbers in the two groups is as small as possible. Since we need each number to be in exactly one group, we can split the numbers into two groups: 2 and all the other numbers. This way, the sum of the numbers in the two groups is 2 and n-1, and the difference is 0.\n\nFor n=2, we can directly output", "n = int(input())\nprint(0 if n % 2 == 0 else 1)\nprint(\" \".join([\"1\"] * (n // 2) + [\"2\"] + [\"1\"] * (n % 2)))\n\n\nThis code reads the number of integers from the input, calculates the smallest possible absolute difference and the sizes of the two groups, and prints them. The integers are printed as strings joined by spaces.\n\nThe code works by first checking if the number of integers is even. If it is, the absolute difference is 0 and the first group has half the size of the second, because each of the first half integers is exactly in one group. If the"], "prompt": "\nQUESTION:\nPetya has n integers: 1, 2, 3, ..., n. He wants to split these integers in two non-empty groups in such a way that the absolute difference of sums of integers in each group is as small as possible. \n\nHelp Petya to split the integers. Each of n integers should be exactly in one group.\n\n\n-----Input-----\n\nThe first line contains a single integer n (2 \u2264 n \u2264 60 000) \u2014 the number of integers Petya has.\n\n\n-----Output-----\n\nPrint the smallest possible absolute difference in the first line.\n\nIn the second line print the size of the first group, followed by the integers in that group. You can print these integers in arbitrary order. If there are multiple answers, print any of them.\n\n\n-----Examples-----\nInput\n4\n\nOutput\n0\n2 1 4 \n\nInput\n2\n\nOutput\n1\n1 1 \n\n\n\n-----Note-----\n\nIn the first example you have to put integers 1 and 4 in the first group, and 2 and 3 in the second. This way the sum in each group is 5, and the absolute difference is 0.\n\nIn the second example there are only two integers, and since both groups should be non-empty, you have to put one integer in the first group and one in the second. This way the absolute difference of sums of integers in each group is 1.\nPlease provide the solution as pure code only, without explanations or comments.\n\nANSWER:\n```python\n"}}