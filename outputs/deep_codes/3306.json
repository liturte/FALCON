{"3306": {"code": ["def solve(N, M, detectors):\n    detectors.sort()\n    min", "def min_calls(N, M, detectors):\n    detectors.sort()", "def min_calls(N, M, detectors):\n    detectors.sort()", "N, M = map(int, input().split())\ndetectors = [list(", "N, M = map(int, input().split())\ndetectors = [list("], "prompt": "\nQUESTION:\nMirkos village has only one long street stretching from east to west with M houses. Each house has a unique house number, starting with $1$ and ending with $M$.\n\nRecent storm took out most phone lines so the mayor financed construction of a new one. Mirko is interested in the popularity of this new phone network, so he infiltrated its construction and placed special detectors on some points.\n\nDetector detects any phone call made between two houses, as long as one of them is eastward and the other westward from the point the detector is installed.\n\nAt the end of the first month, Mirko removed all detectors and now wonders what is the smallest number of phone calls that could have been made during that month.\n\n-----Input-----\nThe first line of input contains two integers $N$ ($1 \\le N \\le 100000$), the number of detectors, and $M$ ($N < M \\le 1000000000$), the number of houses in the village. The houses are numbered from $1$ to $M$ (inclusive).\n\nThe next $N$ lines contains two numbers each: $P_ i$ ($1 \\le P_ i < M$), and $C_ i$ ($1 \\le C_ i \\le 1000000000$), the position and total number of phone calls detected by detector numbered $i$. We say that a detector is on position $P_ i$ if it is between houses numbered $P_ i$ and $P_ i +1$.\n\nThere will never be more than one detector on the same position.\n\n-----Output-----\nOutput a single integer, the minimal number of phone calls made.\n\n-----Examples-----\nSample Input 1:\n3 4\n3 1\n2 2\n1 1\nSample Output 1:\n2\n\nSample Input 2:\n2 3\n1 23\n2 17\nSample Output 2:\n23\nPlease provide the solution as pure code only, without explanations or comments.\n\nANSWER:\n```python\n"}}