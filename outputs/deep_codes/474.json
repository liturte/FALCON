{"474": {"code": ["n = int(input())\na = list(map(int, input().split()))\n\nl = 0\nr = 1\nbest_len = 1\n\nwhile r < n:\n    if a[r] > a[r - 1]:\n        r += 1\n        if r - l > best_len:\n            best_len = r - l\n    else:\n        l = r\n        r += 1\n\nprint(best_len)\n\n\nExplanation:\nThis Python program uses two pointers `l` and `r` to represent the left and right end of the current subsegment. It keeps moving the right pointer `r` to the right until the sequence is increasing. When the sequence stops increasing, it updates the best length `best_len` if", "n = int(input())\na = list(map(int, input().split()))\n\nmax_mean = -1\nmax_len = 0\nlen = 1\nsum = a[0]\n\nfor i in range(1, n):\n    while len > 0 and a[i] >= a[len - 1]:\n        len, sum = len - 1, sum - a[len - 1]\n    a.insert(len, a[i])\n    len += 1\n    sum += a[len - 1]\n    mean = sum / len\n    if mean > max_mean:\n        max_mean, max_len = mean, len\nprint(max_len)\n\n\nThis Python solution uses a stack to keep track of the longest subseg", "def solve(n, a):\n    max_mean = 0\n    max_len = 1\n    cur_len = 1\n    cur_sum = a[0]\n    for i in range(1, n):\n        if a[i] == a[i-1]:\n            cur_len += 1\n            cur_sum += a[i]\n        else:\n            cur_len = 1\n            cur_sum = a[i]\n        mean = cur_sum / cur_len\n        if mean > max_mean or (mean == max_mean and cur_len > max_len):\n            max_mean = mean\n            max_len = cur_len\n    return max_len\n\nn = int(input())\na = list(map(int, input", "n = int(input())\na = list(map(int, input().split()))\n\nmax_sum = float('-inf')\ncur_sum = 0\nmax_len = 1\ncur_len = 1\n\nfor i in range(1, n):\n    if a[i] >= a[i - 1]:\n        cur_sum += a[i] - a[i - 1]\n        cur_len += 1\n    else:\n        if cur_sum > max_sum or (cur_sum == max_sum and cur_len > max_len):\n            max_sum = cur_sum\n            max_len = cur_len\n        cur_sum = a[i]\n        cur_len = 1\n\nif cur_sum > max_sum", "n = int(input())\na = list(map(int, input().split()))\n\nl = 0\nr = 1\nmax_mean = (a[0] + a[1]) / 2\ncur_sum = a[0] + a[1]\ncur_len = 2\n\nwhile r < n - 1:\n    if cur_len == n:\n        break\n    if cur_sum / cur_len < max_mean:\n        l += 1\n        cur_sum -= a[l - 1]\n        cur_len -= 1\n    else:\n        r += 1\n        cur_sum += a[r]\n        cur_len += 1\n    max_mean = max(max_mean, cur_sum / cur_len)"], "prompt": "\nQUESTION:\nYou are given array $a_1, a_2, \\dots, a_n$. Find the subsegment $a_l, a_{l+1}, \\dots, a_r$ ($1 \\le l \\le r \\le n$) with maximum arithmetic mean $\\frac{1}{r - l + 1}\\sum\\limits_{i=l}^{r}{a_i}$ (in floating-point numbers, i.e. without any rounding).\n\nIf there are many such subsegments find the longest one.\n\n\n-----Input-----\n\nThe first line contains single integer $n$ ($1 \\le n \\le 10^5$) \u2014 length of the array $a$.\n\nThe second line contains $n$ integers $a_1, a_2, \\dots, a_n$ ($0 \\le a_i \\le 10^9$) \u2014 the array $a$.\n\n\n-----Output-----\n\nPrint the single integer \u2014 the length of the longest subsegment with maximum possible arithmetic mean.\n\n\n-----Example-----\nInput\n5\n6 1 6 6 0\n\nOutput\n2\n\n\n\n-----Note-----\n\nThe subsegment $[3, 4]$ is the longest among all subsegments with maximum arithmetic mean.\nPlease provide the solution as pure code only, without explanations or comments.\n\nANSWER:\n```python\n"}}