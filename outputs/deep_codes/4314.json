{"4314": {"code": ["H, W = map(int, input().split())\na = [input() for _ in range(H)]\n\nwhile True:\n    new_a = [''.join(col) for col in zip(*a) if '#' in col]\n    if len(new_a) == len(a[0]):\n        a", "H, W = map(int, input().split())\ngrid = [list(input()) for _ in range(H)]\n\nwhile True:\n    has_white = False\n    for i in range(H):\n        if '#' not in grid[i]:\n            has_white = True\n            del grid[i]\n            H", "H, W = map(int, input().split())\ngrid = [input() for _ in range(H)]\n\nwhile True:\n    is_removed = False\n    new_grid = [''.join(['.' if grid[i][j] == '.' and (i == 0 or grid[i-1][j] == '.", "H, W = map(int, input().split())\ngrid = [list(input()) for _ in range(H)]\n\nwhile True:\n    removed = False\n    for i in range(H):\n        if grid[i].count('.') == W:\n            del grid[i]\n            H -= 1\n            removed =", "H, W = map(int, input().split())\na = [input() for _ in range(H)]\nwhile True:\n    a = [''.join([a[i][j] for j in range(W) if '#' in a[i]]) for i in range(H)]\n    a = [a[i]"], "prompt": "\nQUESTION:\nThere is a grid of squares with H horizontal rows and W vertical columns.\nThe square at the i-th row from the top and the j-th column from the left is represented as (i, j).\nEach square is black or white.\nThe color of the square is given as an H-by-W matrix (a_{i, j}).\nIf a_{i, j} is ., the square (i, j) is white; if a_{i, j} is #, the square (i, j) is black.\nSnuke is compressing this grid.\nHe will do so by repeatedly performing the following operation while there is a row or column that consists only of white squares:\n - Operation: choose any one row or column that consists only of white squares, remove it and delete the space between the rows or columns.\nIt can be shown that the final state of the grid is uniquely determined regardless of what row or column is chosen in each operation.\nFind the final state of the grid.\n\n-----Constraints-----\n - 1 \\leq H, W \\leq 100\n - a_{i, j} is . or #.\n - There is at least one black square in the whole grid.\n\n-----Input-----\nInput is given from Standard Input in the following format:\nH W\na_{1, 1}...a_{1, W}\n:\na_{H, 1}...a_{H, W}\n\n-----Output-----\nPrint the final state of the grid in the same format as input (without the numbers of rows and columns); see the samples for clarity.\n\n-----Sample Input-----\n4 4\n##.#\n....\n##.#\n.#.#\n\n-----Sample Output-----\n###\n###\n.##\n\nThe second row and the third column in the original grid will be removed.\nPlease provide the solution as pure code only, without explanations or comments.\n\nANSWER:\n```python\n"}}