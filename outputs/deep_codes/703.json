{"703": {"code": ["import math", "def solve(", "def solve(", "def min_", "def min_"], "prompt": "\nQUESTION:\nYou have a nuts and lots of boxes. The boxes have a wonderful feature: if you put x (x \u2265 0) divisors (the spacial bars that can divide a box) to it, you get a box, divided into x + 1 sections.\n\nYou are minimalist. Therefore, on the one hand, you are against dividing some box into more than k sections. On the other hand, you are against putting more than v nuts into some section of the box. What is the minimum number of boxes you have to use if you want to put all the nuts in boxes, and you have b divisors?\n\nPlease note that you need to minimize the number of used boxes, not sections. You do not have to minimize the number of used divisors.\n\n\n-----Input-----\n\nThe first line contains four space-separated integers k, a, b, v (2 \u2264 k \u2264 1000; 1 \u2264 a, b, v \u2264 1000) \u2014 the maximum number of sections in the box, the number of nuts, the number of divisors and the capacity of each section of the box.\n\n\n-----Output-----\n\nPrint a single integer \u2014 the answer to the problem.\n\n\n-----Examples-----\nInput\n3 10 3 3\n\nOutput\n2\n\nInput\n3 10 1 3\n\nOutput\n3\n\nInput\n100 100 1 1000\n\nOutput\n1\n\n\n\n-----Note-----\n\nIn the first sample you can act like this:   Put two divisors to the first box. Now the first box has three sections and we can put three nuts into each section. Overall, the first box will have nine nuts.  Do not put any divisors into the second box. Thus, the second box has one section for the last nut. \n\nIn the end we've put all the ten nuts into boxes.\n\nThe second sample is different as we have exactly one divisor and we put it to the first box. The next two boxes will have one section each.\nPlease provide the solution as pure code only, without explanations or comments.\n\nANSWER:\n```python\n"}}