{"1134": {"code": ["def min_marks_underwater(n, m):\n    min_", "n = int(input().strip())\nm = list(map(int", "def min_marks_underwater(n, m):\n    marks_", "def min_marks_underwater():\n    n = int(input())", "n = int(input())\nm = list(map(int, input"], "prompt": "\nQUESTION:\nArkady decides to observe a river for n consecutive days. The river's water level on each day is equal to some real value.\n\nArkady goes to the riverside each day and makes a mark on the side of the channel at the height of the water level, but if it coincides with a mark made before, no new mark is created. The water does not wash the marks away. Arkady writes down the number of marks strictly above the water level each day, on the i-th day this value is equal to m_{i}.\n\nDefine d_{i} as the number of marks strictly under the water level on the i-th day. You are to find out the minimum possible sum of d_{i} over all days. There are no marks on the channel before the first day.\n\n\n-----Input-----\n\nThe first line contains a single positive integer n (1 \u2264 n \u2264 10^5)\u00a0\u2014 the number of days.\n\nThe second line contains n space-separated integers m_1, m_2, ..., m_{n} (0 \u2264 m_{i} < i)\u00a0\u2014 the number of marks strictly above the water on each day.\n\n\n-----Output-----\n\nOutput one single integer\u00a0\u2014 the minimum possible sum of the number of marks strictly below the water level among all days.\n\n\n-----Examples-----\nInput\n6\n0 1 0 3 0 2\n\nOutput\n6\n\nInput\n5\n0 1 2 1 2\n\nOutput\n1\n\nInput\n5\n0 1 1 2 2\n\nOutput\n0\n\n\n\n-----Note-----\n\nIn the first example, the following figure shows an optimal case. [Image] \n\nNote that on day 3, a new mark should be created because if not, there cannot be 3 marks above water on day 4. The total number of marks underwater is 0 + 0 + 2 + 0 + 3 + 1 = 6.\n\nIn the second example, the following figure shows an optimal case. [Image]\nPlease provide the solution as pure code only, without explanations or comments.\n\nANSWER:\n```python\n"}}