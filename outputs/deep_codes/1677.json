{"1677": {"code": ["def solve(n, arr):\n    dp = [1] * n\n    for i in range(1, n):", "from bisect import bisect_left\n\nn = int(input())\nb = list(map(int, input().split()))", "def longest_subsequence(n, sequence):\n    dp = [1]*n\n    for i in range(1,", "def solve(n, arr):\n    dp = [1] * n\n    for i in range(1, n):", "def almost_arithmetic(sequence):\n    n = len(sequence)\n    dp = [1]*n\n    for"], "prompt": "\nQUESTION:\nGena loves sequences of numbers. Recently, he has discovered a new type of sequences which he called an almost arithmetical progression. A sequence is an almost arithmetical progression, if its elements can be represented as:  a_1 = p, where p is some integer;  a_{i} = a_{i} - 1 + ( - 1)^{i} + 1\u00b7q (i > 1), where q is some integer. \n\nRight now Gena has a piece of paper with sequence b, consisting of n integers. Help Gena, find there the longest subsequence of integers that is an almost arithmetical progression.\n\nSequence s_1,  s_2,  ...,  s_{k} is a subsequence of sequence b_1,  b_2,  ...,  b_{n}, if there is such increasing sequence of indexes i_1, i_2, ..., i_{k} (1  \u2264  i_1  <  i_2  < ...   <  i_{k}  \u2264  n), that b_{i}_{j}  =  s_{j}. In other words, sequence s can be obtained from b by crossing out some elements.\n\n\n-----Input-----\n\nThe first line contains integer n (1 \u2264 n \u2264 4000). The next line contains n integers b_1, b_2, ..., b_{n} (1 \u2264 b_{i} \u2264 10^6).\n\n\n-----Output-----\n\nPrint a single integer \u2014 the length of the required longest subsequence.\n\n\n-----Examples-----\nInput\n2\n3 5\n\nOutput\n2\n\nInput\n4\n10 20 10 30\n\nOutput\n3\n\n\n\n-----Note-----\n\nIn the first test the sequence actually is the suitable subsequence. \n\nIn the second test the following subsequence fits: 10, 20, 10.\nPlease provide the solution as pure code only, without explanations or comments.\n\nANSWER:\n```python\n"}}