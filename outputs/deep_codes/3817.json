{"3817": {"code": ["MOD = 1000000009\nn, m = map(int, input().split())\n\nf = [1] * (n + 1)\nfor i in range(1, n + 1):\n    f", "MOD = 10**9 + 9\n\ndef powmod(a, b):\n    r = 1\n    while b > 0:\n        if b & 1:\n            r = (r * a) % MOD\n        b", "MOD = 1000000009\n\ndef solve(n, m):\n    dp = [[0]*m for _ in range(n+1)]\n    dp[0][0] = 1", "MOD = 10**9+9\n\ndef powmod(a, b):\n    r = 1\n    while b > 0:\n        if b & 1:\n            r = (r * a) % MOD\n        b", "MOD = 10**9 + 9\nn, m = map(int, input().split())\n\ndp = [[0]*m for _ in range(n+1)]\ndp[0][0] = 1\n\nfor i in"], "prompt": "\nQUESTION:\nA sequence of non-negative integers a_1, a_2, ..., a_{n} of length n is called a wool sequence if and only if there exists two integers l and r (1 \u2264 l \u2264 r \u2264 n) such that $a_{l} \\oplus a_{l + 1} \\oplus \\cdots \\oplus a_{r} = 0$. In other words each wool sequence contains a subsequence of consecutive elements with xor equal to 0.\n\nThe expression $x \\oplus y$ means applying the operation of a bitwise xor to numbers x and y. The given operation exists in all modern programming languages, for example, in languages C++ and Java it is marked as \"^\", in Pascal \u2014 as \"xor\".\n\nIn this problem you are asked to compute the number of sequences made of n integers from 0 to 2^{m} - 1 that are not a wool sequence. You should print this number modulo 1000000009 (10^9 + 9).\n\n\n-----Input-----\n\nThe only line of input contains two space-separated integers n and m (1 \u2264 n, m \u2264 10^5).\n\n\n-----Output-----\n\nPrint the required number of sequences modulo 1000000009 (10^9 + 9) on the only line of output.\n\n\n-----Examples-----\nInput\n3 2\n\nOutput\n6\n\n\n\n-----Note-----\n\nSequences of length 3 made of integers 0, 1, 2 and 3 that are not a wool sequence are (1, 3, 1), (1, 2, 1), (2, 1, 2), (2, 3, 2), (3, 1, 3) and (3, 2, 3).\nPlease provide the solution as pure code only, without explanations or comments.\n\nANSWER:\n```python\n"}}