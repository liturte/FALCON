{"1432": {"code": ["def", "N", "import", "N", "N"], "prompt": "\nQUESTION:\nThere are N mountains in a circle, called Mountain 1, Mountain 2, ..., Mountain N in clockwise order. N is an odd number.\nBetween these mountains, there are N dams, called Dam 1, Dam 2, ..., Dam N. Dam i (1 \\leq i \\leq N) is located between Mountain i and i+1 (Mountain N+1 is Mountain 1).\nWhen Mountain i (1 \\leq i \\leq N) receives 2x liters of rain, Dam i-1 and Dam i each accumulates x liters of water (Dam 0 is Dam N).\nOne day, each of the mountains received a non-negative even number of liters of rain.\nAs a result, Dam i (1 \\leq i \\leq N) accumulated a total of A_i liters of water.\nFind the amount of rain each of the mountains received. We can prove that the solution is unique under the constraints of this problem.\n\n-----Constraints-----\n - All values in input are integers.\n - 3 \\leq N \\leq 10^5-1\n - N is an odd number.\n - 0 \\leq A_i \\leq 10^9\n - The situation represented by input can occur when each of the mountains receives a non-negative even number of liters of rain.\n\n-----Input-----\nInput is given from Standard Input in the following format:\nN\nA_1 A_2 ... A_N\n\n-----Output-----\nPrint N integers representing the number of liters of rain Mountain 1, Mountain 2, ..., Mountain N received, in this order.\n\n-----Sample Input-----\n3\n2 2 4\n\n-----Sample Output-----\n4 0 4\n\nIf we assume Mountain 1, 2, and 3 received 4, 0, and 4 liters of rain, respectively, it is consistent with this input, as follows:\n - Dam 1 should have accumulated \\frac{4}{2} + \\frac{0}{2} = 2 liters of water.\n - Dam 2 should have accumulated \\frac{0}{2} + \\frac{4}{2} = 2 liters of water.\n - Dam 3 should have accumulated \\frac{4}{2} + \\frac{4}{2} = 4 liters of water.\nPlease provide the solution as pure code only, without explanations or comments.\n\nANSWER:\n```python\n"}}