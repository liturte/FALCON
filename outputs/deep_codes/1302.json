{"1302": {"code": ["def solve(n, k):\n    if k > n:\n        return [-1]\n    else:\n        return [(i+1)%n+1 for i in range(n)] + [n]*(k-n)\n\nprint(*solve(4, 2))\nprint(*solve(1, 1))\n\n\nThis solution works by creating a list of good elements. For the first n elements, it creates a permutation", "def gcd(a, b):\n    if b == 0:\n        return a\n    return gcd(b, a % b)\n\nn, k = map(int, input().split())\n\nif k > n or (n == 2 and k == 1):\n    print(-1)\nelse:\n    perm = [0] * n\n    perm[0] = 2\n    for i in range(1, n):\n        perm[", "from math import gcd\n\nn, k = map(int, input().split())\nif k > n or (n == 1 and k == 1):\n    print(-1)\nelse:\n    ans = [0] * n\n    ans[0] = 1\n    for i in range(1, n):\n        ans[i] = ans[i-1] + 1\n        while gcd(i+1, ans", "def solve(n, k):\n    if k > n:\n        return [-1]\n    else:\n        return [i%2+1 for i in range(n)] + [i%2 for i in range(n, n-k, -1)]\n\nn, k = map(int, input().split())\nprint(*solve(n, k))\n\nThis solution works by creating a permutation where all elements are good except the last", "def gcd(a, b):\n    if b==0:\n        return a\n    else:\n        return gcd(b, a%b)\n\nn, k = map(int, input().split())\n\nif k > n or (n-k)%2==1:\n    print(-1)\nelse:\n    p = [i for i in range(1, n+1)]\n    for i in range(k):"], "prompt": "\nQUESTION:\nLevko loves permutations very much. A permutation of length n is a sequence of distinct positive integers, each is at most n.\n\nLet\u2019s assume that value gcd(a, b) shows the greatest common divisor of numbers a and b. Levko assumes that element p_{i} of permutation p_1, p_2, ... , p_{n} is good if gcd(i, p_{i}) > 1. Levko considers a permutation beautiful, if it has exactly k good elements. Unfortunately, he doesn\u2019t know any beautiful permutation. Your task is to help him to find at least one of them.\n\n\n-----Input-----\n\nThe single line contains two integers n and k (1 \u2264 n \u2264 10^5, 0 \u2264 k \u2264 n).\n\n\n-----Output-----\n\nIn a single line print either any beautiful permutation or -1, if such permutation doesn\u2019t exist.\n\nIf there are multiple suitable permutations, you are allowed to print any of them.\n\n\n-----Examples-----\nInput\n4 2\n\nOutput\n2 4 3 1\nInput\n1 1\n\nOutput\n-1\n\n\n\n-----Note-----\n\nIn the first sample elements 4 and 3 are good because gcd(2, 4) = 2 > 1 and gcd(3, 3) = 3 > 1. Elements 2 and 1 are not good because gcd(1, 2) = 1 and gcd(4, 1) = 1. As there are exactly 2 good elements, the permutation is beautiful.\n\nThe second sample has no beautiful permutations.\nPlease provide the solution as pure code only, without explanations or comments.\n\nANSWER:\n```python\n"}}