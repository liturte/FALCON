{"322": {"code": ["n = int(input())\npoints = [tuple(map(int, input().split())) for _ in range(n)]\nprint(\"Yes\" if any(x < 0 for x, y in points) else \"No\")\n\n\nThis code reads the number of points and their coordinates from the input. It then checks if there is a point with a negative x-coordinate. If such a point exists, it prints \"Yes\"; otherwise, it prints \"No\".", "n = int(input())\npoints = [list(map(int, input().split())) for _ in range(n)]\n\npositive_x = [point for point in points if point[0] > 0]\nnegative_x = [point for point in points if point[0] < 0]\n\nif len(positive_x) > 0 and len(negative_x) > 0:\n    print(\"Yes\")\nelse:\n    print(\"No\")\n\n\nThis solution works by first reading in the number of points and the coordinates of each point. It then separates the points into two lists, one for positive x-coordinates and one for negative x-coordinates. If there are any points with positive x-coordinates and any points with negative x-co", "n = int(input())\npoints = [list(map(int, input().split())) for _ in range(n)]\npoints.sort()\nif points[0][0] > 0 or points[-1][0] < 0:\n    print(\"Yes\")\nelse:\n    print(\"No\")\n\n\nThis Python program first reads the number of points and the coordinates of each point. It then sorts the points by their x-coordinates. If the smallest x-coordinate is positive and the largest is negative, it means that there is a point that, when removed, makes all other points lie on one side of the OY axis. Therefore, it prints \"Yes\". Otherwise, it prints \"No\".", "n = int(input())\npoints = [list(map(int, input().split())) for _ in range(n)]\nif any(x[0] < 0 for x in points):\n    print(\"Yes\")\nelse:\n    print(\"No\")\n\n\nThis solution works by reading the number of points and their coordinates from the standard input. It then checks if there is any point located to the left of the OY axis (its x-coordinate is negative). If such a point exists, it prints \"Yes\", otherwise it prints \"No\".\n\nThis solution assumes that the input is in the correct format, i.e., there are no errors in the input. It also assumes that the points are not located on the OY axis.\n\nPlease note that the solution", "n = int(input())\npoints = [list(map(int, input().split())) for _ in range(n)]\n\npositive_x = any(x > 0 for x, y in points)\nnegative_x = any(x < 0 for x, y in points)\n\nprint(\"Yes\" if positive_x and negative_x else \"No\")\n\n\nThis Python code solves the problem by first reading the number of points and the coordinates of the points. It then checks if there are any points with positive x-coordinates and any points with negative x-coordinates. If both are true, it prints \"Yes\". Otherwise, it prints \"No\"."], "prompt": "\nQUESTION:\nYou have n distinct points on a plane, none of them lie on OY axis. Check that there is a point after removal of which the remaining points are located on one side of the OY axis.\n\n\n-----Input-----\n\nThe first line contains a single positive integer n (2 \u2264 n \u2264 10^5).\n\nThe following n lines contain coordinates of the points. The i-th of these lines contains two single integers x_{i} and y_{i} (|x_{i}|, |y_{i}| \u2264 10^9, x_{i} \u2260 0). No two points coincide.\n\n\n-----Output-----\n\nPrint \"Yes\" if there is such a point, \"No\" \u2014 otherwise.\n\nYou can print every letter in any case (upper or lower).\n\n\n-----Examples-----\nInput\n3\n1 1\n-1 -1\n2 -1\n\nOutput\nYes\nInput\n4\n1 1\n2 2\n-1 1\n-2 2\n\nOutput\nNo\nInput\n3\n1 2\n2 1\n4 60\n\nOutput\nYes\n\n\n-----Note-----\n\nIn the first example the second point can be removed.\n\nIn the second example there is no suitable for the condition point.\n\nIn the third example any point can be removed.\nPlease provide the solution as pure code only, without explanations or comments.\n\nANSWER:\n```python\n"}}