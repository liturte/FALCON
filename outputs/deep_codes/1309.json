{"1309": {"code": ["def min_instability(n, weights):\n    weights.sort()\n    tandem_instability = sum(abs(weights[i] - weights[i+1]) for i in range(0, 2*n, 2))\n    single_", "import sys\n\ndef min_instability(n, w):\n    w.sort()\n    tandem = sum(w[i] - w[i - 1] for i in range(1, 2 * n, 2))\n    single = sum", "def min_unstable(weights):\n    weights.sort()\n    n = len(weights) // 2\n    tandem_unstable = [0] * n\n    single_unstable = [0] * 2\n    for i in range", "import sys\n\ndef min_unstable(weights):\n    n = len(weights) // 2\n    weights.sort()\n    tandem_unstable = [0] * (n - 1)\n    single_unstable = [0]", "def kayaking():\n    n = int(input())\n    weights = sorted(map(int, input().split()))\n    total = 0\n    for i in range(n-1):\n        total += abs(weights[i] - weights[i+1"], "prompt": "\nQUESTION:\nVadim is really keen on travelling. Recently he heard about kayaking activity near his town and became very excited about it, so he joined a party of kayakers.\n\nNow the party is ready to start its journey, but firstly they have to choose kayaks. There are 2\u00b7n people in the group (including Vadim), and they have exactly n - 1 tandem kayaks (each of which, obviously, can carry two people) and 2 single kayaks. i-th person's weight is w_{i}, and weight is an important matter in kayaking \u2014 if the difference between the weights of two people that sit in the same tandem kayak is too large, then it can crash. And, of course, people want to distribute their seats in kayaks in order to minimize the chances that kayaks will crash.\n\nFormally, the instability of a single kayak is always 0, and the instability of a tandem kayak is the absolute difference between weights of the people that are in this kayak. Instability of the whole journey is the total instability of all kayaks.\n\nHelp the party to determine minimum possible total instability! \n\n\n-----Input-----\n\nThe first line contains one number n (2 \u2264 n \u2264 50).\n\nThe second line contains 2\u00b7n integer numbers w_1, w_2, ..., w_2n, where w_{i} is weight of person i (1 \u2264 w_{i} \u2264 1000).\n\n\n-----Output-----\n\nPrint minimum possible total instability.\n\n\n-----Examples-----\nInput\n2\n1 2 3 4\n\nOutput\n1\n\nInput\n4\n1 3 4 6 3 4 100 200\n\nOutput\n5\nPlease provide the solution as pure code only, without explanations or comments.\n\nANSWER:\n```python\n"}}