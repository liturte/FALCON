{"2657": {"code": ["import sys\n\nn = int(sys.stdin.readline())\nnumbers = list(map(int, sys.stdin.readline().split()))\n\nnumbers.sort()\n\nmax_comb =", "def solve():\n    n = int(input())\n    a = list(map(int, input().split()))\n    a.sort()\n    print(a[-1], a[-2])\n\nsolve()", "def solve():\n    n = int(input())\n    a = list(map(int, input().split()))\n    a.sort()\n    max_comb = 0\n    for i in range(n):", "import sys\n\nn = int(sys.stdin.readline().strip())\nnums = list(map(int, sys.stdin.readline().strip().split()))\n\nnums.sort()\nprint", "import sys\n\nn = int(sys.stdin.readline())\na = sorted([int(x) for x in sys.stdin.readline().split()])\n\nmax_comb = 0\nmax_"], "prompt": "\nQUESTION:\nLet {\\rm comb}(n,r) be the number of ways to choose r objects from among n objects, disregarding order.\nFrom n non-negative integers a_1, a_2, ..., a_n, select two numbers a_i > a_j so that {\\rm comb}(a_i,a_j) is maximized.\nIf there are multiple pairs that maximize the value, any of them is accepted.\n\n-----Constraints-----\n - 2 \\leq n \\leq 10^5\n - 0 \\leq a_i \\leq 10^9\n - a_1,a_2,...,a_n are pairwise distinct.\n - All values in input are integers.\n\n-----Input-----\nInput is given from Standard Input in the following format:\nn\na_1 a_2 ... a_n\n\n-----Output-----\nPrint a_i and a_j that you selected, with a space in between.\n\n-----Sample Input-----\n5\n6 9 4 2 11\n\n-----Sample Output-----\n11 6\n\n\\rm{comb}(a_i,a_j) for each possible selection is as follows:\n - \\rm{comb}(4,2)=6 \n - \\rm{comb}(6,2)=15 \n - \\rm{comb}(6,4)=15 \n - \\rm{comb}(9,2)=36 \n - \\rm{comb}(9,4)=126 \n - \\rm{comb}(9,6)=84 \n - \\rm{comb}(11,2)=55 \n - \\rm{comb}(11,4)=330 \n - \\rm{comb}(11,6)=462 \n - \\rm{comb}(11,9)=55\nThus, we should print 11 and 6.\nPlease provide the solution as pure code only, without explanations or comments.\n\nANSWER:\n```python\n"}}