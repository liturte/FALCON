{"77": {"code": ["def max_odd_sum(arr):\n    n = len(arr)\n    dp = [0] * (n + 1)\n    odd_sum = [0] * (n + 1)\n    even_sum = [0] * (n + 1)\n    for i in range(1, n + 1):\n        if arr[i - 1] % 2 == 0:\n            even_sum[i] = even_sum[i - 1] + arr[i - 1]\n            even_sum[i - 1] = max(even_sum[i - 1], odd_sum[i - 1])\n        else:\n            odd_sum[i] = odd_sum[i - 1] + arr[i - 1]\n            odd_sum[i - 1] = max(odd_sum[i - 1], even", "def max_odd_sum_subsequence(n, arr):\n    odd_sum = [0] * n\n    even_sum = [0] * n\n    odd_sum[0] = arr[0] if arr[0] % 2 else 0\n    even_sum[0] = arr[0] if arr[0] % 2 == 0 else 0\n    for i in range(1, n):\n        if arr[i] % 2:\n            odd_sum[i] = max(odd_sum[i-1] + arr[i], even_sum[i-1])\n            even_sum[i] = even_sum[i-1]\n        else:\n            even_sum[i] = max(even_sum[i-1] + arr[i], odd_sum[i-1])\n            odd_sum[i] =", "def max_odd_sum_subsequence(arr):\n    n = len(arr)\n    dp = [0] * n\n    dp[0] = arr[0] if arr[0] % 2 != 0 else 0\n    for i in range(1, n):\n        if arr[i] % 2 != 0:\n            dp[i] = max(dp[i-1] + arr[i], arr[i])\n        else:\n            dp[i] = max(dp[i-1], arr[i])\n    return dp[-1]\n\nn = int(input())\narr = list(map(int, input().split()))\nprint(max_odd_sum_subsequence(arr))\n\n\nThis program uses dynamic programming to solve the problem. It iterates over the given sequence, for each number it checks if it", "def max_odd_sum(n, arr):\n    dp = [0] * n\n    dp[0] = arr[0] if arr[0] % 2 else 0\n    for i in range(1, n):\n        if arr[i] % 2:\n            dp[i] = max(arr[i], dp[i-1] + arr[i])\n        else:\n            dp[i] = max(0, dp[i-1])\n    return max(dp)\n\nn = int(input())\narr = list(map(int, input().split()))\nprint(max_odd_sum(n, arr))\n\n\nThis solution uses dynamic programming to keep track of the maximum sum of odd-sum subsequences ending at each index in the array. It iterates through the array, updating the maximum sum at each index based on", "def max_odd_sum_subsequence(n, sequence):\n    dp = [0] * n\n    dp[0] = sequence[0] if sequence[0] % 2 == 1 else 0\n    max_sum = dp[0]\n\n    for i in range(1, n):\n        if sequence[i] % 2 == 1:\n            dp[i] = max(sequence[i], dp[i-1] + sequence[i])\n        else:\n            dp[i] = max(0, dp[i-1])\n        max_sum = max(max_sum, dp[i])\n\n    return max_sum\n\nn = int(input().strip())\nsequence = list(map(int, input().strip().split()))\nprint(max_odd_sum_subsequence(n, sequence))"], "prompt": "\nQUESTION:\nYou are given sequence a_1, a_2, ..., a_{n} of integer numbers of length n. Your task is to find such subsequence that its sum is odd and maximum among all such subsequences. It's guaranteed that given sequence contains subsequence with odd sum.\n\nSubsequence is a sequence that can be derived from another sequence by deleting some elements without changing the order of the remaining elements.\n\nYou should write a program which finds sum of the best subsequence.\n\n\n-----Input-----\n\nThe first line contains integer number n (1 \u2264 n \u2264 10^5).\n\nThe second line contains n integer numbers a_1, a_2, ..., a_{n} ( - 10^4 \u2264 a_{i} \u2264 10^4). The sequence contains at least one subsequence with odd sum.\n\n\n-----Output-----\n\nPrint sum of resulting subseqeuence.\n\n\n-----Examples-----\nInput\n4\n-2 2 -3 1\n\nOutput\n3\n\nInput\n3\n2 -5 -3\n\nOutput\n-1\n\n\n\n-----Note-----\n\nIn the first example sum of the second and the fourth elements is 3.\nPlease provide the solution as pure code only, without explanations or comments.\n\nANSWER:\n```python\n"}}