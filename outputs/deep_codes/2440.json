{"2440": {"code": ["QUESTION:\nGildong was hiking a mountain, walking by millions of trees. Inspired by them, he suddenly came up with an interesting idea for trees in data structures: What if we add another edge in a tree?\n\nThen he found that such tree-like graphs are called 1-trees. Since Gildong was bored of solving too many tree problems, he wanted to see if similar techniques in trees can be used in 1-trees as well. Instead of solving it by himself, he's going to test you by providing queries on 1-trees.\n\nFirst, he'll provide you a tree (not 1-tree) with $n$ vertices, then he will ask you $q$ queries. Each query contains $5$ integers: $x$, $y$, $a$, $b$, and $k$. This means you're asked to determine if there exists a path from vertex $a$ to $b$ that contains exactly $k$ edges after adding a bidirectional edge between vertices $x$ and $y$. A path can contain the same vertices and same edges multiple times. All queries are independent of each other; i.e. the added edge in a query is removed in the next query.\n\n\n-----Input-----\n\nThe first line contains an integer $n$ ($3 \\le n \\le 10^5$), the number of vertices of the tree.\n\nNext $n-1$ lines contain two integers $u$ and $v$ ($1 \\le u,v \\le n$, $u \\ne v$) each, which means there is an edge between vertex $u$ and $v$. All edges are bidirectional and distinct.\n\nNext line contains an integer $q$ ($1 \\le q \\le 10^5$), the number of queries Gildong wants to ask.\n\nNext $q$ lines contain five integers $x$, $y$, $a$, $b$, and $k$ each ($1 \\le x,y,a,b \\le n$, $x \\ne y$, $1 \\le k \\le 10^9$) \u2013 the integers explained in the description. It is guaranteed that the edge between $x$ and $y$ does not exist in the original tree.\n\n\n-----Output-----\n\nFor each query, print \"YES\" if there exists a path that contains exactly $k$ edges from vertex $a$ to $b$ after adding an edge between vertices $x$ and $y$. Otherwise, print \"NO\".\n\nYou can print each letter in any case (upper or lower).\n\n\n-----Example-----\nInput\n5\n1 2", "QUESTION:\nGildong was hiking a mountain, walking by millions of trees. Inspired by them, he suddenly came up with an interesting idea for trees in data structures: What if we add another edge in a tree?\n\nThen he found that such tree-like graphs are called 1-trees. Since Gildong was bored of solving too many tree problems, he wanted to see if similar techniques in trees can be used in 1-trees as well. Instead of solving it by himself, he's going to test you by providing queries on 1-trees.\n\nFirst, he'll provide you a tree (not 1-tree) with $n$ vertices, then he will ask you $q$ queries. Each query contains $5$ integers: $x$, $y$, $a$, $b$, and $k$. This means you're asked to determine if there exists a path from vertex $a$ to $b$ that contains exactly $k$ edges after adding a bidirectional edge between vertices $x$ and $y$. A path can contain the same vertices and same edges multiple times. All queries are independent of each other; i.e. the added edge in a query is removed in the next query.\n\n\n-----Input-----\n\nThe first line contains an integer $n$ ($3 \\le n \\le 10^5$), the number of vertices of the tree.\n\nNext $n-1$ lines contain two integers $u$ and $v$ ($1 \\le u,v \\le n$, $u \\ne v$) each, which means there is an edge between vertex $u$ and $v$. All edges are bidirectional and distinct.\n\nNext line contains an integer $q$ ($1 \\le q \\le 10^5$), the number of queries Gildong wants to ask.\n\nNext $q$ lines contain five integers $x$, $y$, $a$, $b$, and $k$ each ($1 \\le x,y,a,b \\le n$, $x \\ne y$, $1 \\le k \\le 10^9$) \u2013 the integers explained in the description. It is guaranteed that the edge between $x$ and $y$ does not exist in the original tree.\n\n\n-----Output-----\n\nFor each query, print \"YES\" if there exists a path that contains exactly $k$ edges from vertex $a$ to $b$ after adding an edge between vertices $x$ and $y$. Otherwise, print \"NO\".\n\nYou can print each letter in any case (upper or lower).\n\n\n-----Example-----\nInput\n5\n1 2", "QUESTION:\nGildong was hiking a mountain, walking by millions of trees. Inspired by them, he suddenly came up with an interesting idea for trees in data structures: What if we add another edge in a tree?\n\nThen he found that such tree-like graphs are called 1-trees. Since Gildong was bored of solving too many tree problems, he wanted to see if similar techniques in trees can be used in 1-trees as well. Instead of solving it by himself, he's going to test you by providing queries on 1-trees.\n\nFirst, he'll provide you a tree (not 1-tree) with $n$ vertices, then he will ask you $q$ queries. Each query contains $5$ integers: $x$, $y$, $a$, $b$, and $k$. This means you're asked to determine if there exists a path from vertex $a$ to $b$ that contains exactly $k$ edges after adding a bidirectional edge between vertices $x$ and $y$. A path can contain the same vertices and same edges multiple times. All queries are independent of each other; i.e. the added edge in a query is removed in the next query.\n\n\n-----Input-----\n\nThe first line contains an integer $n$ ($3 \\le n \\le 10^5$), the number of vertices of the tree.\n\nNext $n-1$ lines contain two integers $u$ and $v$ ($1 \\le u,v \\le n$, $u \\ne v$) each, which means there is an edge between vertex $u$ and $v$. All edges are bidirectional and distinct.\n\nNext line contains an integer $q$ ($1 \\le q \\le 10^5$), the number of queries Gildong wants to ask.\n\nNext $q$ lines contain five integers $x$, $y$, $a$, $b$, and $k$ each ($1 \\le x,y,a,b \\le n$, $x \\ne y$, $1 \\le k \\le 10^9$) \u2013 the integers explained in the description. It is guaranteed that the edge between $x$ and $y$ does not exist in the original tree.\n\n\n-----Output-----\n\nFor each query, print \"YES\" if there exists a path that contains exactly $k$ edges from vertex $a$ to $b$ after adding an edge between vertices $x$ and $y$. Otherwise, print \"NO\".\n\nYou can print each letter in any case (upper or lower).\n\n\n-----Example-----\nInput\n5\n1 2", "QUESTION:\nGildong was hiking a mountain, walking by millions of trees. Inspired by them, he suddenly came up with an interesting idea for trees in data structures: What if we add another edge in a tree?\n\nThen he found that such tree-like graphs are called 1-trees. Since Gildong was bored of solving too many tree problems, he wanted to see if similar techniques in trees can be used in 1-trees as well. Instead of solving it by himself, he's going to test you by providing queries on 1-trees.\n\nFirst, he'll provide you a tree (not 1-tree) with $n$ vertices, then he will ask you $q$ queries. Each query contains $5$ integers: $x$, $y$, $a$, $b$, and $k$. This means you're asked to determine if there exists a path from vertex $a$ to $b$ that contains exactly $k$ edges after adding a bidirectional edge between vertices $x$ and $y$. A path can contain the same vertices and same edges multiple times. All queries are independent of each other; i.e. the added edge in a query is removed in the next query.\n\n\n-----Input-----\n\nThe first line contains an integer $n$ ($3 \\le n \\le 10^5$), the number of vertices of the tree.\n\nNext $n-1$ lines contain two integers $u$ and $v$ ($1 \\le u,v \\le n$, $u \\ne v$) each, which means there is an edge between vertex $u$ and $v$. All edges are bidirectional and distinct.\n\nNext line contains an integer $q$ ($1 \\le q \\le 10^5$), the number of queries Gildong wants to ask.\n\nNext $q$ lines contain five integers $x$, $y$, $a$, $b$, and $k$ each ($1 \\le x,y,a,b \\le n$, $x \\ne y$, $1 \\le k \\le 10^9$) \u2013 the integers explained in the description. It is guaranteed that the edge between $x$ and $y$ does not exist in the original tree.\n\n\n-----Output-----\n\nFor each query, print \"YES\" if there exists a path that contains exactly $k$ edges from vertex $a$ to $b$ after adding an edge between vertices $x$ and $y$. Otherwise, print \"NO\".\n\nYou can print each letter in any case (upper or lower).\n\n\n-----Example-----\nInput\n5\n1 2", "QUESTION:\nGildong was hiking a mountain, walking by millions of trees. Inspired by them, he suddenly came up with an interesting idea for trees in data structures: What if we add another edge in a tree?\n\nThen he found that such tree-like graphs are called 1-trees. Since Gildong was bored of solving too many tree problems, he wanted to see if similar techniques in trees can be used in 1-trees as well. Instead of solving it by himself, he's going to test you by providing queries on 1-trees.\n\nFirst, he'll provide you a tree (not 1-tree) with $n$ vertices, then he will ask you $q$ queries. Each query contains $5$ integers: $x$, $y$, $a$, $b$, and $k$. This means you're asked to determine if there exists a path from vertex $a$ to $b$ that contains exactly $k$ edges after adding a bidirectional edge between vertices $x$ and $y$. A path can contain the same vertices and same edges multiple times. All queries are independent of each other; i.e. the added edge in a query is removed in the next query.\n\n\n-----Input-----\n\nThe first line contains an integer $n$ ($3 \\le n \\le 10^5$), the number of vertices of the tree.\n\nNext $n-1$ lines contain two integers $u$ and $v$ ($1 \\le u,v \\le n$, $u \\ne v$) each, which means there is an edge between vertex $u$ and $v$. All edges are bidirectional and distinct.\n\nNext line contains an integer $q$ ($1 \\le q \\le 10^5$), the number of queries Gildong wants to ask.\n\nNext $q$ lines contain five integers $x$, $y$, $a$, $b$, and $k$ each ($1 \\le x,y,a,b \\le n$, $x \\ne y$, $1 \\le k \\le 10^9$) \u2013 the integers explained in the description. It is guaranteed that the edge between $x$ and $y$ does not exist in the original tree.\n\n\n-----Output-----\n\nFor each query, print \"YES\" if there exists a path that contains exactly $k$ edges from vertex $a$ to $b$ after adding an edge between vertices $x$ and $y$. Otherwise, print \"NO\".\n\nYou can print each letter in any case (upper or lower).\n\n\n-----Example-----\nInput\n5\n1 2"], "prompt": "\nQUESTION:\nGildong was hiking a mountain, walking by millions of trees. Inspired by them, he suddenly came up with an interesting idea for trees in data structures: What if we add another edge in a tree?\n\nThen he found that such tree-like graphs are called 1-trees. Since Gildong was bored of solving too many tree problems, he wanted to see if similar techniques in trees can be used in 1-trees as well. Instead of solving it by himself, he's going to test you by providing queries on 1-trees.\n\nFirst, he'll provide you a tree (not 1-tree) with $n$ vertices, then he will ask you $q$ queries. Each query contains $5$ integers: $x$, $y$, $a$, $b$, and $k$. This means you're asked to determine if there exists a path from vertex $a$ to $b$ that contains exactly $k$ edges after adding a bidirectional edge between vertices $x$ and $y$. A path can contain the same vertices and same edges multiple times. All queries are independent of each other; i.e. the added edge in a query is removed in the next query.\n\n\n-----Input-----\n\nThe first line contains an integer $n$ ($3 \\le n \\le 10^5$), the number of vertices of the tree.\n\nNext $n-1$ lines contain two integers $u$ and $v$ ($1 \\le u,v \\le n$, $u \\ne v$) each, which means there is an edge between vertex $u$ and $v$. All edges are bidirectional and distinct.\n\nNext line contains an integer $q$ ($1 \\le q \\le 10^5$), the number of queries Gildong wants to ask.\n\nNext $q$ lines contain five integers $x$, $y$, $a$, $b$, and $k$ each ($1 \\le x,y,a,b \\le n$, $x \\ne y$, $1 \\le k \\le 10^9$) \u2013 the integers explained in the description. It is guaranteed that the edge between $x$ and $y$ does not exist in the original tree.\n\n\n-----Output-----\n\nFor each query, print \"YES\" if there exists a path that contains exactly $k$ edges from vertex $a$ to $b$ after adding an edge between vertices $x$ and $y$. Otherwise, print \"NO\".\n\nYou can print each letter in any case (upper or lower).\n\n\n-----Example-----\nInput\n5\n1 2\n2 3\n3 4\n4 5\n5\n1 3 1 2 2\n1 4 1 3 2\n1 4 1 3 3\n4 2 3 3 9\n5 2 3 3 9\n\nOutput\nYES\nYES\nNO\nYES\nNO\n\n\n\n-----Note-----\n\nThe image below describes the tree (circles and solid lines) and the added edges for each query (dotted lines). [Image] \n\nPossible paths for the queries with \"YES\" answers are:   $1$-st query: $1$ \u2013 $3$ \u2013 $2$  $2$-nd query: $1$ \u2013 $2$ \u2013 $3$  $4$-th query: $3$ \u2013 $4$ \u2013 $2$ \u2013 $3$ \u2013 $4$ \u2013 $2$ \u2013 $3$ \u2013 $4$ \u2013 $2$ \u2013 $3$\nPlease provide the solution as pure code only, without explanations or comments.\n\nANSWER:\n```python\n"}}