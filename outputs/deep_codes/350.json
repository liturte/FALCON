{"350": {"code": ["import heapq\n\ndef maxLength(self, arr):\n    arr = sorted(arr)[::-1]\n    h = [(-arr[0], 1)]\n    for a in arr[1:]:\n        _, c = heapq.heappop(h)\n        heapq.heappush(h, (-a, c+1))\n        if a < -h[0][0]:\n            heapq.heappush(h, (-(a+1), c-1))\n    return -h[0][0] if -h[0][0] <= h[0][1] else -h[0][0] + 1", "n = int(input())\na = list(map(int, input().split()))\n\na.sort()\na.reverse()\n\nresult = 0\nmax_a = max(a)\n\nfor i in range(n):\n    if a[i] < max_a:\n        result += a[i]\n        max_a -= 1\n    else:\n        result += max_a\n        break\n\nprint(result)\n\n\nExplanation:\nThe problem is to find the maximum possible length of the string that meets all the requirements. The string length is equal to the sum of the minimum of the occurrences of each character and the number of", "import heapq\ndef maxLength(a):\n    heap = []\n    for i in a:\n        heapq.heappush(heap, -i)\n    count = 0\n    while len(heap) > 1:\n        x = -heapq.heappop(heap)\n        y = -heapq.heappop(heap)\n        if x == y:\n            count += x\n            heapq.heappush(heap, -(x + 1))\n        else:\n            count += x + y\n            heapq.heappush(heap, -(x + 1))\n            heapq.heappush", "import sys\nimport heapq\n\ndef max_string_length(n, a):\n    h = []\n    for i in range(n):\n        heapq.heappush(h, -a[i])\n    while len(h) > 1:\n        x = heapq.heappop(h)\n        y = heapq.heappop(h)\n        if x == y:\n            heapq.heappush(h, y+1)\n            heapq.heappush(h, y+1)\n        else:\n            heapq.heappush(h, y)\n            heapq.heappush(h, y)", "n = int(input())\na = list(map(int, input().split()))\n\na.sort()\ncount = 0\nwhile a:\n    x = a.pop()\n    count += min(x, len(a)+1)\n\nprint(count)\n\n\nEXPLANATION:\nThe logic of the solution is based on the observation that we can always increase the length of the string by 1. We can achieve this by adding a new character that occurs more often than the current maximum number of times. However, we need to take care of the constraint that the number of occurrences of each character in the string must be distinct.\n\nWe start by sorting the"], "prompt": "\nQUESTION:\nYou are given an alphabet consisting of n letters, your task is to make a string of the maximum possible length so that the following conditions are satisfied:   the i-th letter occurs in the string no more than a_{i} times;  the number of occurrences of each letter in the string must be distinct for all the letters that occurred in the string at least once. \n\n\n-----Input-----\n\nThe first line of the input contains a single integer n (2  \u2264  n  \u2264  26)\u00a0\u2014 the number of letters in the alphabet.\n\nThe next line contains n integers a_{i} (1 \u2264 a_{i} \u2264 10^9)\u00a0\u2014 i-th of these integers gives the limitation on the number of occurrences of the i-th character in the string.\n\n\n-----Output-----\n\nPrint a single integer \u2014 the maximum length of the string that meets all the requirements.\n\n\n-----Examples-----\nInput\n3\n2 5 5\n\nOutput\n11\n\nInput\n3\n1 1 2\n\nOutput\n3\n\n\n\n-----Note-----\n\nFor convenience let's consider an alphabet consisting of three letters: \"a\", \"b\", \"c\". In the first sample, some of the optimal strings are: \"cccaabbccbb\", \"aabcbcbcbcb\". In the second sample some of the optimal strings are: \"acc\", \"cbc\".\nPlease provide the solution as pure code only, without explanations or comments.\n\nANSWER:\n```python\n"}}