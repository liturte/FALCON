{"1718": {"code": ["from heapq import *\n\nN, K = map(int, input().split())\nA = list(map(int, input().split()))\n\nheap = []\nfor i in range(N):\n    heappush(heap, (A[i], i))\n\nres = 0\nwhile heap[0][0] < N:\n    start = heap[0][1]\n    end = min(start + K, N)\n    min_val = heap[0][0]\n    count = 0\n    while heap[0][1] < end:\n        val, idx = heappop(heap)", "from sys import stdin\nfrom heapq import *\n\ndef main():\n    n, k = map(int, stdin.readline().split())\n    a = list(map(int, stdin.readline().split()))\n\n    h = []\n    for i in range(n):\n        heappush(h, (a[i], i))\n\n    ops = 0\n    while h[0][0] != min(a):\n        i = h[0][1]\n        while i < n and h[0][0] == a[i]:\n            heappop(h)\n            i", "import sys\nfrom heapq import *\n\nN, K = map(int, sys.stdin.readline().split())\nA = list(map(int, sys.stdin.readline().split()))\n\nA = [0] + A + [N + 1]\nQ = []\nres = 0\n\nfor i in range(N + 2):\n    if i > 1 and i <= N:\n        heappush(Q, (A[i] - A[i - 1], A[i] - A[i - 1]))\n    if len(Q) == K + 1:\n        x, y =", "from sys import stdin\n\ndef solve():\n    n, k = map(int, stdin.readline().split())\n    a = list(map(int, stdin.readline().split()))\n    a = [0] + a + [n + 1]\n    a.sort()\n\n    ans = float('inf')\n    for i in range(1, len(a) - 1):\n        if a[i] - a[i - 1] <= a[i + 1] - a[i]:\n            ans = min(ans, a[i] - a[i - 1])", "from collections import deque\nfrom sys import stdin\n\ndef solve():\n    N, K = map(int, stdin.readline().split())\n    A = list(map(int, stdin.readline().split()))\n    que = deque([])\n    ans = 0\n    for i in range(N):\n        while que and que[-1][0] > A[i]:\n            que.pop()\n        que.append((A[i], 1 if not que else que[-1][1] + 1))\n        if que[0][1] == K:\n            que.popleft()"], "prompt": "\nQUESTION:\nThere is a sequence of length N: A_1, A_2, ..., A_N. Initially, this sequence is a permutation of 1, 2, ..., N.\nOn this sequence, Snuke can perform the following operation:\n - Choose K consecutive elements in the sequence. Then, replace the value of each chosen element with the minimum value among the chosen elements.\nSnuke would like to make all the elements in this sequence equal by repeating the operation above some number of times.\nFind the minimum number of operations required.\nIt can be proved that, Under the constraints of this problem, this objective is always achievable.\n\n-----Constraints-----\n - 2 \\leq K \\leq N \\leq 100000\n - A_1, A_2, ..., A_N is a permutation of 1, 2, ..., N.\n\n-----Input-----\nInput is given from Standard Input in the following format:\nN K\nA_1 A_2 ... A_N\n\n-----Output-----\nPrint the minimum number of operations required.\n\n-----Sample Input-----\n4 3\n2 3 1 4\n\n-----Sample Output-----\n2\n\nOne optimal strategy is as follows:\n - In the first operation, choose the first, second and third elements. The sequence A becomes 1, 1, 1, 4.\n - In the second operation, choose the second, third and fourth elements. The sequence A becomes 1, 1, 1, 1.\nPlease provide the solution as pure code only, without explanations or comments.\n\nANSWER:\n```python\n"}}