{"3929": {"code": ["def solve(N, K):\n    MOD = 10**9 + 7\n    fact = [0]*(N+1)\n    factinv = [0]*(N+1)\n    fact[0] = factinv[0] = 1\n    for i in range(1, N+1):\n        fact[i] = (fact[i-1] * i) % MOD\n        factinv[i] = factinv[i-1] * pow(i, MOD-2, MOD)\n    comb = lambda n, r: fact[n]*factinv[r]*factinv[n-r] % MOD if r", "MOD = 10**9 + 7\nN, K = map(int, input().split())\nfact = [1] * (N+1)\ninv = [1] * (N+1)\nfor i in range(1, N+1):\n    fact[i] = (fact[i-1] * i) % MOD\n    inv[i] = pow(fact[i], MOD-2, MOD)\n\ndef comb(n, k):\n    return fact[n] * inv[k] * inv[n-k] % MOD\n\nprint((comb(N, K) - comb(N, K-1) + MOD", "def solve(n, k):\n    MOD = 10**9+7\n    fact = [0]*(n+1)\n    factinv = [0]*(n+1)\n    fact[0] = factinv[0] = 1\n    for i in range(1, n+1):\n        fact[i] = (fact[i-1]*i)%MOD\n        factinv[i] = factinv[i-1]*pow(i, MOD-2, MOD)\n    inv = [0]*(n+1)\n    inv[1] = 1\n    for i in range(2, n+1):", "MOD = 10**9+7\nN, K = map(int, input().split())\n\nfac = [1]*(N+1)\nfor i in range(1, N+1):\n    fac[i] = (fac[i-1]*i)%MOD\n\ninv = [1]*(N+1)\ninv[N] = pow(fac[N], MOD-2, MOD)\nfor i in range(N, 0, -1):\n    inv[i-1] = (inv[i]*i)%MOD\n\ndef comb(n, k):\n    if n < k or k < 0:", "MOD = 10**9+7\nN, K = map(int, input().split())\nfact = [1]*(N+1)\ninv = [1]*(N+1)\nfor i in range(1, N+1):\n    fact[i] = fact[i-1]*i%MOD\n    inv[i] = inv[i-1]*pow(i, MOD-2, MOD)\ndef comb(n, k):\n    if n < k or k < 0:\n        return 0\n    return fact[n]*inv[k]*inv[n-k]%MOD\nprint((comb(N, K"], "prompt": "\nQUESTION:\nSnuke has decided to play with N cards and a deque (that is, a double-ended queue).\nEach card shows an integer from 1 through N, and the deque is initially empty.\nSnuke will insert the cards at the beginning or the end of the deque one at a time, in order from 1 to N.\nThen, he will perform the following action N times: take out the card from the beginning or the end of the deque and eat it.\nAfterwards, we will construct an integer sequence by arranging the integers written on the eaten cards, in the order they are eaten. Among the sequences that can be obtained in this way, find the number of the sequences such that the K-th element is 1. Print the answer modulo 10^{9} + 7.\n\n-----Constraints-----\n - 1 \u2266 K \u2266 N \u2266 2{,}000\n\n-----Input-----\nThe input is given from Standard Input in the following format:\nN K\n\n-----Output-----\nPrint the answer modulo 10^{9} + 7.\n\n-----Sample Input-----\n2 1\n\n-----Sample Output-----\n1\n\nThere is one sequence satisfying the condition: 1,2. One possible way to obtain this sequence is the following:\n - Insert both cards, 1 and 2, at the end of the deque.\n - Eat the card at the beginning of the deque twice.\nPlease provide the solution as pure code only, without explanations or comments.\n\nANSWER:\n```python\n"}}