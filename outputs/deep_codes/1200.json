{"1200": {"code": ["def min_points_to_equal_distances(n, x):\n    if n <= 2:\n        return 0\n    x.sort()\n    min_diff = float('inf')\n    for i in range(1, n):\n        diff = x[i] - x[i-1]\n        if diff < min_diff:\n            min_diff = diff\n    return (x[-1] - x[0] + min_diff - 1) // min_diff - n + 1\n\nn = int(input().strip())\nx = list(map(int, input().strip().split()))\nprint", "def min_points_to_add(n, x):\n    x.sort()\n    min_diff = float('inf')\n    for i in range(1, n):\n        min_diff = min(min_diff, x[i] - x[i-1])\n    m = max((x[i] - x[i-1] - min_diff + 1) // 2 for i in range(1, n))\n    return m\n\nn = int(input())\nx = list(map(int, input().split()))\nprint(min_points_to_add(n, x))", "def min_points_to_equal_distances(n, x):\n    x.sort()\n    min_diff = float('inf')\n    for i in range(1, n):\n        min_diff = min(min_diff, x[i] - x[i-1])\n    m = (x[-1] - x[0]) // min_diff + 1 - n\n    return m if (x[-1] - x[0]) % min_diff == 0 else m + 1\n\nn = int(input())\nx = list(map(int, input().split()))\nprint(min_points_to", "def min_additions(n, x):\n    x.sort()\n    return max(0, x[i+1] - x[i] for i in range(n-1)) - (x[-1] - x[0]) // 2\n\nn = int(input())\nx = list(map(int, input().split()))\nprint(min_additions(n, x))\n\n\nExplanation:\nThe function min_additions calculates the smallest number of points to add to make the distances between all neighboring points equal. It first sorts the list of points. Then it calculates the maximum difference between two neighboring", "def solve(n, x):\n    x.sort()\n    min_diff = float('inf')\n    for i in range(1, n):\n        min_diff = min(min_diff, x[i] - x[i-1])\n    m = 0\n    for i in range(1, n):\n        if x[i] - x[i-1] != min_diff:\n            m += 1\n    return m\n\nn = int(input())\nx = list(map(int, input().split()))\nprint(solve(n, x))\n\n\nThis Python solution sorts the"], "prompt": "\nQUESTION:\nThere are n points on a straight line, and the i-th point among them is located at x_{i}. All these coordinates are distinct.\n\nDetermine the number m \u2014 the smallest number of points you should add on the line to make the distances between all neighboring points equal. \n\n\n-----Input-----\n\nThe first line contains a single integer n (3 \u2264 n \u2264 100 000) \u2014 the number of points.\n\nThe second line contains a sequence of integers x_1, x_2, ..., x_{n} ( - 10^9 \u2264 x_{i} \u2264 10^9) \u2014 the coordinates of the points. All these coordinates are distinct. The points can be given in an arbitrary order.\n\n\n-----Output-----\n\nPrint a single integer m \u2014 the smallest number of points you should add on the line to make the distances between all neighboring points equal. \n\n\n-----Examples-----\nInput\n3\n-5 10 5\n\nOutput\n1\n\nInput\n6\n100 200 400 300 600 500\n\nOutput\n0\n\nInput\n4\n10 9 0 -1\n\nOutput\n8\n\n\n\n-----Note-----\n\nIn the first example you can add one point with coordinate 0.\n\nIn the second example the distances between all neighboring points are already equal, so you shouldn't add anything.\nPlease provide the solution as pure code only, without explanations or comments.\n\nANSWER:\n```python\n"}}