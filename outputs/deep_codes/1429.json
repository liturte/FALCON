{"1429": {"code": ["from collections import Counter\n\ndef complement(s):\n    return s.translate(str.maketrans('ATCG', 'TAGC'))\n\ndef solve(s):\n    n = len(s)\n    c = Counter(s)\n    c_comp = Counter(complement(s))\n    counts = [0] * 4\n    count_comp = [0] * 4\n    for i in range(n):\n        counts[i % 4] += c[s[i]]\n        count_comp[i % 4] += c_comp[s[i]]\n    return sum(counts[i]", "from collections import Counter\n\nN = int(input().split()[0])\nS = input().split()[0]\n\ncomplement = {'A': 'T', 'T': 'A', 'C': 'G', 'G': 'C'}\n\ncount = Counter()\nanswer = 0\n\nfor i in range(N):\n    if i > 0:\n        count[S[i-1]] -= 1\n    count[complement[S[i]]] += 1\n    answer += count[complement[S[i]]]\n\nprint(answer)\n\nThis python code uses a sliding window approach to solve the problem. It", "from collections import Counter\n\nN = int(input().split()[0])\nS = input().split()[0]\n\ncomplement = {'A': 'T', 'T': 'A', 'C': 'G', 'G': 'C'}\n\ncount = Counter()\nacgt = [0] * (N + 1)\n\nfor i in range(N):\n    acgt[i + 1] = acgt[i].copy()\n    acgt[i + 1][S[i]] += 1\n\nfor i in range(N, -1, -1):\n    count += Counter({S[j]: acgt[i", "from collections import Counter\n\ndef complementary_substrings(s):\n    n = len(s)\n    s = ''.join([{'A': 'T', 'T': 'A', 'C': 'G', 'G': 'C'}[c] for c in s])\n    s = s[::-1]\n    c = Counter()\n    count = 0\n    for i in range(n):\n        count += c[s[i]]\n        c[s[i]] += 1\n    return count\n\nn = int(input().strip())\ns = input().strip()\nprint(complementary_substrings(s))", "from collections import Counter\n\nN = int(input().split()[0])\nS = input().split()[0]\n\ndef complement(c):\n    if c == 'A': return 'T'\n    elif c == 'T': return 'A'\n    elif c == 'C': return 'G'\n    elif c == 'G': return 'C'\n\ndef count_substrings(S):\n    count = Counter()\n    complement_count = Counter()\n    for i in range(len(S)):\n        complement_count[S[i]] += 1\n        for j in range(i + 1, len(S)"], "prompt": "\nQUESTION:\nWe have a string S of length N consisting of A, T, C, and G.\nStrings T_1 and T_2 of the same length are said to be complementary when, for every i (1 \\leq i \\leq l), the i-th character of T_1 and the i-th character of T_2 are complementary. Here, A and T are complementary to each other, and so are C and G.\nFind the number of non-empty contiguous substrings T of S that satisfies the following condition:\n - There exists a string that is a permutation of T and is complementary to T.\nHere, we distinguish strings that originate from different positions in S, even if the contents are the same.\n\n-----Constraints-----\n - 1 \\leq N \\leq 5000\n - S consists of A, T, C, and G.\n\n-----Input-----\nInput is given from Standard Input in the following format:\nN S\n\n-----Output-----\nPrint the number of non-empty contiguous substrings T of S that satisfies the condition.\n\n-----Sample Input-----\n4 AGCT\n\n-----Sample Output-----\n2\n\nThe following two substrings satisfy the condition:\n - GC (the 2-nd through 3-rd characters) is complementary to CG, which is a permutation of GC.\n - AGCT (the 1-st through 4-th characters) is complementary to TCGA, which is a permutation of AGCT.\nPlease provide the solution as pure code only, without explanations or comments.\n\nANSWER:\n```python\n"}}