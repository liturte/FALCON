{"2581": {"code": ["from sys import argv, exit", "import sys\n\ndef solve(board", "def find_max_sum(che", "def solve(n, board):", "def findMaxSum(mat, n"], "prompt": "\nQUESTION:\nGargari is jealous that his friend Caisa won the game from the previous problem. He wants to prove that he is a genius.\n\nHe has a n \u00d7 n chessboard. Each cell of the chessboard has a number written on it. Gargari wants to place two bishops on the chessboard in such a way that there is no cell that is attacked by both of them. Consider a cell with number x written on it, if this cell is attacked by one of the bishops Gargari will get x dollars for it. Tell Gargari, how to place bishops on the chessboard to get maximum amount of money.\n\nWe assume a cell is attacked by a bishop, if the cell is located on the same diagonal with the bishop (the cell, where the bishop is, also considered attacked by it).\n\n\n-----Input-----\n\nThe first line contains a single integer n (2 \u2264 n \u2264 2000). Each of the next n lines contains n integers a_{ij} (0 \u2264 a_{ij} \u2264 10^9) \u2014 description of the chessboard.\n\n\n-----Output-----\n\nOn the first line print the maximal number of dollars Gargari will get. On the next line print four integers: x_1, y_1, x_2, y_2 (1 \u2264 x_1, y_1, x_2, y_2 \u2264 n), where x_{i} is the number of the row where the i-th bishop should be placed, y_{i} is the number of the column where the i-th bishop should be placed. Consider rows are numbered from 1 to n from top to bottom, and columns are numbered from 1 to n from left to right.\n\nIf there are several optimal solutions, you can print any of them.\n\n\n-----Examples-----\nInput\n4\n1 1 1 1\n2 1 1 0\n1 1 1 0\n1 0 0 1\n\nOutput\n12\n2 2 3 2\nPlease provide the solution as pure code only, without explanations or comments.\n\nANSWER:\n```python\n"}}