{"1587": {"code": ["def min_operations(N, stones):\n    r_count = stones.count('R')\n    w_count = N - r_count\n    return min(r_count, w_count)\n\nN = int(input())\nstones = input()\nprint(min_operations(N, stones))\n\n\nThis solution works by first counting the number of red stones (`r_count`) and the number of white stones (`w_count`). The minimum number of operations needed is the smaller of `r_count` and `w_count`, because each operation can either swap a red stone with a white one or change the color of a stone.\n\nNote: This solution assumes that the input is valid and does not handle any", "def min_operations():\n    N = int(input())\n    stones = input()\n    reds = stones.count('R')\n    whites = N - reds\n    return min(reds, whites) - 1\n\nprint(min_operations())\n\nThis code works by counting the number of red stones and white stones, then returning the minimum of these two counts minus one. This is because the minimum number of operations needed to achieve the objective is the number of stones of the minority color minus one. This is because you can always make a move to balance the color distribution.\n\nFor example, if there are 3 red stones and 2 white stones, you can make a move to swap the red stones to the left to balance the distribution, which takes", "def min_operations(N, stones):\n    operations = 0\n    reds = stones.count('R')\n    whites = stones.count('W')\n    \n    if reds > whites:\n        operations += reds - whites\n        stones = 'W' * (N - reds) + 'R' * (N - whites)\n        reds = N - whites\n        \n    for i in range(N - 1):\n        if stones[i] == 'W' and stones[i + 1] == 'R':\n            operations += 1\n            stones = stones[:i] + 'R' + stones[i + 1:] + 'W'\n            whites -= 1\n            reds -= 1", "from sys import stdin\n\ndef min_operations(n, stones):\n    reds = stones.count('R')\n    whites = n - reds\n    return min(reds, whites) - 1 if whites > 0 else 0\n\nn = int(stdin.readline().strip())\nstones = stdin.readline().strip()\nprint(min_operations(n, stones))\n\n\nThis solution works by counting the number of red stones and white stones. The minimum number of operations needed is either the number of red stones or white stones, whichever is smaller. If there are any white stones, we subtract 1 from this number, because the fortune-teller's prophecy requires a white stone to be", "n = int(input())\nstones = input()\n\nr_count = stones.count('R')\nw_count = n - r_count\n\nmin_ops = min(r_count, w_count)\n\nprint(min_ops)\n\nThis solution works by counting the number of red stones and white stones. The minimum number of operations needed is the minimum of these two counts, because each operation can either swap a red stone with a white stone or change the color of a white stone.\n\nNote: This solution assumes that the input is always valid, i.e., that the number of red and white stones is at least 1.\n\nThis solution has a time complexity of O(n), where n is the number of stones. This is because"], "prompt": "\nQUESTION:\nAn altar enshrines N stones arranged in a row from left to right. The color of the i-th stone from the left (1 \\leq i \\leq N) is given to you as a character c_i; R stands for red and W stands for white.\nYou can do the following two kinds of operations any number of times in any order:\n - Choose two stones (not necessarily adjacent) and swap them.\n - Choose one stone and change its color (from red to white and vice versa).\nAccording to a fortune-teller, a white stone placed to the immediate left of a red stone will bring a disaster. At least how many operations are needed to reach a situation without such a white stone?\n\n-----Constraints-----\n - 2 \\leq N \\leq 200000\n - c_i is R or W.\n\n-----Input-----\nInput is given from Standard Input in the following format:\nN\nc_{1}c_{2}...c_{N}\n\n-----Output-----\nPrint an integer representing the minimum number of operations needed.\n\n-----Sample Input-----\n4\nWWRR\n\n-----Sample Output-----\n2\n\nFor example, the two operations below will achieve the objective.\n - Swap the 1-st and 3-rd stones from the left, resulting in RWWR.\n - Change the color of the 4-th stone from the left, resulting in RWWW.\nPlease provide the solution as pure code only, without explanations or comments.\n\nANSWER:\n```python\n"}}