{"1875": {"code": ["import sys\n\ndef max_area(n, points):\n    max_area = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            for k in range(j+1, n):\n                for l in range(k+1, n):\n                    area = abs(points[i][0]*(points[j][1]-points[k][1]) +\n                               points[j][0]*(points[k][1]-points[l][1]) +\n                               points[", "from itertools import combinations\nfrom sys import argv, stdin\n\ndef read_input():\n    n = int(stdin.readline())\n    points = [tuple(map(int, stdin.readline().split())) for _ in range(n)]\n    return points\n\ndef dist(a, b):\n    return (a[0] - b[0]) ** 2 + (a[1] - b[1]) ** 2\n\ndef area(a, b, c, d):\n    return abs", "import sys\n\ndef max_quad_area(points):\n    def distance_squared(p1, p2):\n        return (p1[0] - p2[0]) ** 2 + (p1[1] - p2[1]) ** 2\n\n    n = len(points)\n    min_distances = [None] * n\n    for i in range(n):\n        min_distances[i] = min(distance_squared(points[i], points[j])\n                                for j", "import sys\n\ndef solve(xs, ys):\n    n = len(xs)\n    res = 0.0\n    for i in range(n):\n        for j in range(i+1, n):\n            for k in range(j+1, n):\n                for l in range(k+1, n):\n                    area = abs(xs[i]*ys[j] + xs[j]*ys[k] + xs[k]*ys[l] + xs[l]*ys", "from itertools import combinations\n\ndef max_area(n, points):\n    max_area = 0\n    for p1, p2, p3, p4 in combinations(points, 4):\n        area = abs((p2[0] - p1[0])*(p3[1] - p1[1]) - (p2[1] - p1[1])*(p3[0] - p1[0]))\n        max_area = max(max_area, area)\n    return max_area"], "prompt": "\nQUESTION:\nIahub has drawn a set of n points in the cartesian plane which he calls \"special points\". A quadrilateral is a simple polygon without self-intersections with four sides (also called edges) and four vertices (also called corners). Please note that a quadrilateral doesn't have to be convex. A special quadrilateral is one which has all four vertices in the set of special points. Given the set of special points, please calculate the maximal area of a special quadrilateral. \n\n\n-----Input-----\n\nThe first line contains integer n (4 \u2264 n \u2264 300). Each of the next n lines contains two integers: x_{i}, y_{i} ( - 1000 \u2264 x_{i}, y_{i} \u2264 1000) \u2014 the cartesian coordinates of ith special point. It is guaranteed that no three points are on the same line. It is guaranteed that no two points coincide. \n\n\n-----Output-----\n\nOutput a single real number \u2014 the maximal area of a special quadrilateral. The answer will be considered correct if its absolute or relative error does't exceed 10^{ - 9}.\n\n\n-----Examples-----\nInput\n5\n0 0\n0 4\n4 0\n4 4\n2 3\n\nOutput\n16.000000\n\n\n-----Note-----\n\nIn the test example we can choose first 4 points to be the vertices of the quadrilateral. They form a square by side 4, so the area is 4\u00b74 = 16.\nPlease provide the solution as pure code only, without explanations or comments.\n\nANSWER:\n```python\n"}}