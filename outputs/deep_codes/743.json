{"743": {"code": ["n = int(input())\nnums = sorted(map(int, input().split()))\nprint(sum(nums[:n-1]))\n\n\nThis solution works by first sorting the input numbers. Since the game rules allow us to subtract the smaller numbers from the larger ones, we want to minimize the sum of the larger numbers, which means adding up the smallest numbers in the sorted list. The sum of the first n-1 elements in the sorted list is the minimal sum.\n\nThis solution is Python-based and it works in O(n log n) time complexity due to", "n = int(input())\nnums = sorted(map(int, input().split()))\nprint(sum(nums[:-1]))\n\n\nExplanation:\n\nThis code works by first reading the number of integers and the integers themselves. It then sorts the integers in ascending order and sums all but the last one (which will be the largest, so it won't affect the sum). The sum of all numbers except the largest one is the minimal sum that can be achieved.\n\nFor example, for the input \"2 1 2\", the sorted list is [1", "n = int(input())\nnums = sorted(map(int, input().split()))\nprint(sum(nums[:n-1]))\n\n\nEXPLANATION:\nThe problem asks to minimize the sum of the numbers. This is equivalent to maximizing the sum of the numbers that are left after performing the given operations. Since we can always subtract the smallest number from the next smallest number, we can maximize the sum by subtracting the smallest numbers from the next smallest numbers until there are only two numbers left. The sum of the remaining numbers is the answer.\n\nThis can be", "n = int(input())\nx = list(map(int, input().split()))\nx.sort()\nprint(sum(x[:n-1]))\n\n\nEXPLANATION:\nThe problem is to minimize the sum of the numbers, so we should choose the smallest numbers and subtract them from the largest numbers. After sorting the numbers, we just need to sum up the first n-1 numbers because the remaining nth number will be the largest and subtract from all other numbers.\n\nThis solution is implemented in Python, which is a high-level, interpreted programming language", "n = int(input())\nnums = sorted(map(int, input().split()))\nprint(sum(nums[:-1]))\n\n\nExplanation:\n\nThis program first reads the number of integers and the integers themselves. It then sorts the integers in ascending order and sums up all but the largest integer. The largest integer is the one that would be subtracted from the smallest integers in the optimal solution, and it can't be subtracted from itself because it's the only integer left that is greater than it. Thus, it doesn't contribute to the sum of"], "prompt": "\nQUESTION:\nFox Ciel is playing a game with numbers now. \n\nCiel has n positive integers: x_1, x_2, ..., x_{n}. She can do the following operation as many times as needed: select two different indexes i and j such that x_{i} > x_{j} hold, and then apply assignment x_{i} = x_{i} - x_{j}. The goal is to make the sum of all numbers as small as possible.\n\nPlease help Ciel to find this minimal sum.\n\n\n-----Input-----\n\nThe first line contains an integer n (2 \u2264 n \u2264 100). Then the second line contains n integers: x_1, x_2, ..., x_{n} (1 \u2264 x_{i} \u2264 100).\n\n\n-----Output-----\n\nOutput a single integer \u2014 the required minimal sum.\n\n\n-----Examples-----\nInput\n2\n1 2\n\nOutput\n2\n\nInput\n3\n2 4 6\n\nOutput\n6\n\nInput\n2\n12 18\n\nOutput\n12\n\nInput\n5\n45 12 27 30 18\n\nOutput\n15\n\n\n\n-----Note-----\n\nIn the first example the optimal way is to do the assignment: x_2 = x_2 - x_1.\n\nIn the second example the optimal sequence of operations is: x_3 = x_3 - x_2, x_2 = x_2 - x_1.\nPlease provide the solution as pure code only, without explanations or comments.\n\nANSWER:\n```python\n"}}