{"4242": {"code": ["import sys\n\ndef solve(A: int, B: int, K: int):\n    divisors = []\n    for i in range(1, min(A, B) + 1):\n        if A % i == 0 and B % i == 0:\n            divisors.append(i)\n    return divisors[-K]\n\nA, B, K = map(int, sys.stdin.readline().split())\nprint(solve(A, B, K))\n\n\nThe code first reads the input from the standard input. Then it calls the function solve which finds all the divisors of A and B. The divisors are sorted in ascending order and the K-th largest one is returned.\n\nThe function solve is implemented in Python 3. It uses a for loop to iterate over all the numbers from 1 to the minimum of A and B. If A and B are divisible by the number, the number is appended to the list divisors. After finding all the divisors, the K-th largest one is returned by divisors[-K]. The -K index is used because in Python, negative indices start from the end of the list. So, divisors[-1] is the last element of the list, divisors[-2] is the", "A, B, K = map(int, input().split())\n\ndef divisors(n):\n    i = 1\n    res = []\n    while i <= n:\n        if n % i == 0:\n            res.append(i)\n        i += 1\n    return res\n\ndivs_A = divisors(A)\ndivs_B = divisors(B)\n\ndivs = list(set(divs_A) & set(divs_B))\ndivs.sort(reverse=True)\n\nprint(divs[K-1])\n\n\nExplanation:\nThe program firstly defines a function `divisors` which finds all the divisors of a given number.\nThen it finds all common divisors of A and B by using set intersection.\nFinally, it sorts these common divisors in descending order and prints the K-th one.\n'''\n\n# Python solution\nA, B, K = map(int, input().split())\n\ndef divisors(n):\n    i = 1\n    res = []\n    while i <= n:\n        if n % i == 0:\n            res.append(i)\n        i += 1\n    return res\n\ndivs_A =", "A, B, K = map(int, input().split())\n\ndef solve(A, B, K):\n    i = 1\n    count = 0\n    while i <= min(A, B):\n        if A % i == 0 and B % i == 0:\n            count += 1\n            if count == K:\n                return i\n        i += 1\n    return i\n\nprint(solve(A, B, K))\n\n\nThis code works by iterating over all numbers from 1 to the minimum of A and B. For each number, it checks if it divides both A and B. If it does, it increments a counter. When the counter equals K, it returns the number. If it reaches the end of the loop without finding the K-th number, it returns the last number it checked.\n\nThis code assumes that the inputs are valid as per the problem statement. It doesn't handle the case where K is larger than the number of common divisors of A and B.\n\nPlease note that this code doesn't work for large inputs because it has a time complexity of O(min(A, B)).\n\nThis code is written in Python.\n\nPlease provide the solution as pure code only, without explanations or comments.\n\"\"\"\n\n\n\n\"\"\"\nThis code doesn", "def main():\n    A, B, K = map(int, input().split())\n    divisors = [i for i in range(1, min(A, B) + 1) if A % i == 0 and B % i == 0]\n    print(divisors[-K])\n\nif __name__ == '__main__':\n    main()\n\n\nThis code reads A, B, and K from input. It then creates a list of divisors of A and B. The list is sorted in ascending order and the K-th largest element is printed.\n\nThe list comprehension `[i for i in range(1, min(A, B) + 1) if A % i == 0 and B % i == 0]` generates a list of divisors of A and B. The `if A % i == 0 and B % i == 0` part is a condition that checks if A and B are divisible by i. The `range(1, min(A, B) + 1)` part generates numbers from 1 to the smaller of A and B.\n\nThe `print(divisors[-K])` line prints the K-th largest element of the list. In Python, negative indices count from the end of the list, so `divisors[-K]` gets", "A, B, K = map(int, input().split())\n\ndef find_divisors(n):\n    i = 1\n    divisors = []\n    while i <= n:\n        if n % i == 0:\n            divisors.append(i)\n        i += 1\n    return divisors\n\ndivisors_A = find_divisors(A)\ndivisors_B = find_divisors(B)\n\ncommon_divisors = list(set(divisors_A) & set(divisors_B))\ncommon_divisors.sort(reverse=True)\n\nprint(common_divisors[K-1])\n\n\nExplanation:\nThe program first reads the input values A, B and K.\nThen it finds all the divisors of A and B by iterating over all numbers from 1 to A and B.\nThe divisors of A and B are found using the `find_divisors` function.\nThe common divisors are found by using the intersection of sets of divisors of A and B.\nThe common divisors are sorted in descending order and the K-th largest number is printed."], "prompt": "\nQUESTION:\nYou are given positive integers A and B.\nFind the K-th largest positive integer that divides both A and B.\nThe input guarantees that there exists such a number.\n\n-----Constraints-----\n - All values in input are integers.\n - 1 \\leq A, B \\leq 100\n - The K-th largest positive integer that divides both A and B exists.\n - K \\geq 1\n\n-----Input-----\nInput is given from Standard Input in the following format:\nA B K\n\n-----Output-----\nPrint the K-th largest positive integer that divides both A and B.\n\n-----Sample Input-----\n8 12 2\n\n-----Sample Output-----\n2\n\nThree positive integers divides both 8 and 12: 1, 2 and 4.\nAmong them, the second largest is 2.\nPlease provide the solution as pure code only, without explanations or comments.\n\nANSWER:\n```python\n"}}