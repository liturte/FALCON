{"3375": {"code": ["MOD = 10**9 + 7\n\ndef power(a, b):\n    res = 1\n    while b > 0:\n        if b % 2 == 1:\n            res = res * a % MOD\n        a = a * a % MOD\n        b = b // 2\n    return res\n\ndef solve(n, m):\n    fact = [0] * (n + m + 1)\n    factinv = [0] * (n + m + 1)\n    fact[0] = 1\n    for i in range(1, n + m + 1):\n        fact[i] = fact[i - 1] * i % MOD\n    factinv[-1] = power(fact[-1], MOD - 2)\n    for", "MOD = 10**9 + 7\ndp = [[0]*18 for _ in range(18)]\nc = [[0]*18 for _ in range(18)]\ndp[0][0] = 1\nc[0][0] = 1\nfor i in range(1, 18):\n    dp[i][0] = 1\n    for j in range(1, i+1):\n        c[i][j] = (c[i-1][j-1] + c[i-1][j]) % MOD\n        c[i][i-j] = c[i][j]\n    for j in range(1, i):\n        for k in range(j):\n            dp[i][j] = (", "MOD = 10**9 + 7\n\ndef powmod(a, b):\n    r = 1\n    while b > 0:\n        if b & 1:\n            r = (r * a) % MOD\n        b >>= 1\n        a = (a * a) % MOD\n    return r\n\ndef solve(V, E, edges):\n    dp = [0] * (V + 1)\n    dp[0] = 1\n    for i in range(1, V + 1):\n        dp[i] = dp[i - 1] * i % MOD\n    fact = [0] * (E + 1)\n    fact[0] = 1\n    for i in range(1, E + 1):", "MOD = 10**9 + 7\n\ndef powmod(a, b):\n    if b == 0:\n        return 1\n    half = powmod(a, b // 2)\n    if b % 2 == 0:\n        return half * half % MOD\n    return a * half * half % MOD\n\ndef solve(V, E, adj):\n    dp = [[0] * (V + 1) for _ in range(V + 1)]\n    dp[0][0] = 1\n    for i in range(1, V + 1):\n        dp[i][0] = 1\n        for j in range(1, i + 1):\n            dp[i][j] = (dp[i - 1][j -", "MOD = 10**9 + 7\n\ndef powmod(a, b):\n    r = 1\n    while b > 0:\n        if b & 1:\n            r = (r * a) % MOD\n        b >>= 1\n        a = (a * a) % MOD\n    return r\n\ndef solve(V, E, edges):\n    dp = [0] * (V + 1)\n    dp[0] = 1\n    for i in range(1, V + 1):\n        dp[i] = (dp[i - 1] * 2) % MOD\n    fact = [0] * (V + 1)\n    fact[0] = 1\n    for i in range(1, V + 1):"], "prompt": "\nQUESTION:\nA unicyclic graph is a graph with exactly one cycle. A spanning subgraph of a graph $G$ is a subgraph that has one component and includes all the vertices of $G$. Given a simple graph $G$, count the number of spanning unicyclic subgraphs. The illustration below shows the visualization of Sample Input/Output $1$.\n\n-----Input-----\nThe first line of the input contains two integers, $V$ and $E$, representing the number of vertices and edges of the graph $G$ respectively. ($1 \\leq V \\leq 17, 0 \\leq E \\leq V(V-1)/2$.)\n\nThe following $E$ lines each contains two integers $A_ i$ and $B_ i$, representing an edge $(A_ i, B_ i)$. It is guaranteed that $1 \\leq A_ i < B_ i \\leq V$ and as the graph is simple, no two pairs represent the same edge.\n\n-----Output-----\nOutput one integer, representing the number of spanning unicylic subgraphs. As the number can be rather big, output it modulo $10^9 + 7$.\n\n-----Examples-----\nSample Input:\n4 5\n1 2\n1 3\n2 3\n1 4\n2 4\nSample Output:\n5\nPlease provide the solution as pure code only, without explanations or comments.\n\nANSWER:\n```python\n"}}