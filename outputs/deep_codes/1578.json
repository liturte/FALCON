{"1578": {"code": ["N = int(input())\nprint((N * (N + 1)) // 2)\n\n\nExplanation:\nThis is a mathematical problem. The maximum possible value of M_i is i-1. So, the maximum possible value of M_1 + M_2 + ... + M_N is (N*(N+1))/2. This is because for each i from 1 to N, we can choose P_i = i and get M_i = i - 1. By choosing the permutation P, we can achieve this maximum value.\n\nHere is the Python code that solves the problem:\n\nN = int(input())\nprint((N * (N + 1)) // 2)\n\nThis code reads the integer N from the standard input, and then prints the maximum possible value of M_1 + M_2 + ... + M_N.\n\"\"\"\n\n\ndef solve():\n    N = int(input())\n    print((N * (N + 1)) // 2)\n\n\nif __name__ == \"__main__\":\n    solve()\n\n\"\"\"\n\n\ndef solve():\n    N = int(input())\n    print", "N = int(input())\nprint((N*(N+1))//2)\n\n\nEXPLANATION:\nThe maximum possible value of M_i is when P_i is as small as possible, i.e., P_i = i. \nThis can be achieved by choosing a permutation where each P_i is the index of the number in the sequence. \n\nSo, the maximum possible value of M_1 + M_2 + ... + M_N can be calculated as N*(N+1)/2. \n\nThis is because for each i from 1 to N, M_i is equal to i, so the sum M_1 + M_2 + ... + M_N is equal to the sum of the first N natural numbers, which is N*(N+1)/2.\n\nThis solution works because the permutation chosen is one where each P_i is the index of the number in the sequence, and so M_i is always zero because i is divisible by P_i. The maximum possible sum of M_i is thus achieved when each M_i is as large as possible, which is zero because i is divisible by P_i.\n\nThe solution is implemented in", "def max_remainder_sum(N):\n    if N % 2 == 0:\n        return N * (N-1) // 2\n    else:\n        return N * (N-1) // 2 + N // 2\n\nN = int(input())\nprint(max_remainder_sum(N))\n\n\nThis solution works by realizing that the maximum possible value of M_i is i-1 for all i. This is because when i is divided by P_i, the remainder is the largest possible value that is less than i.\n\nTherefore, the maximum possible sum M_1 + M_2 + \\cdots + M_N is achieved when P_1, P_2, \\cdots, P_N are chosen to be in decreasing order, i.e., P_i = N - i + 1 for all i. This achieves a sum of (N*(N+1))//2.\n\nFor even N, this sum is simply the sum of all integers from 1 to N. For odd N, we add an additional term of N//2 to the sum, which is the middle integer. This is because when N is odd, there is one integer that", "N = int(input())\nprint((N*(", "N = int(input())\nprint((N * (N + 1)) // 2)\n\n\nEXPLANATION:\nThe maximum possible value of M_i is i - 1, for each i.\nSo, the maximum possible value of M_1 + M_2 + ... + M_N is (1 + 2 + ... + N) = N*(N+1)/2.\nThis is the sum of arithmetic series, and it can be calculated in O(1) time.\n\nThis code reads the input N, and then calculates and prints the maximum possible value of M_1 + M_2 + ... + M_N.\n\nThis solution is based on the fact that if the permutation P is chosen such that for each i, P_i is as large as possible, then the sum M_1 + M_2 + ... + M_N will be as large as possible.\n\"\"\"\n\nprint((N * (N + 1)) // 2)\n\n\"\"\"\n\n# ---------------------\n# Test cases\n# ---------------------\n\n# Test case 1\nN = 1\nprint((N * (N + 1)) // 2)  # Expected output:"], "prompt": "\nQUESTION:\nFor an integer N, we will choose a permutation \\{P_1, P_2, ..., P_N\\} of \\{1, 2, ..., N\\}.\nThen, for each i=1,2,...,N, let M_i be the remainder when i is divided by P_i.\nFind the maximum possible value of M_1 + M_2 + \\cdots + M_N.\n\n-----Constraints-----\n - N is an integer satisfying 1 \\leq N \\leq 10^9.\n\n-----Input-----\nInput is given from Standard Input in the following format:\nN\n\n-----Output-----\nPrint the maximum possible value of M_1 + M_2 + \\cdots + M_N.\n\n-----Sample Input-----\n2\n\n-----Sample Output-----\n1\n\nWhen the permutation \\{P_1, P_2\\} = \\{2, 1\\} is chosen, M_1 + M_2 = 1 + 0 = 1.\nPlease provide the solution as pure code only, without explanations or comments.\n\nANSWER:\n```python\n"}}