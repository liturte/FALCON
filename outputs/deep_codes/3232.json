{"3232": {"code": ["from collections import Counter\n\ndef solve(s):\n    n = len(s)\n    half = n // 2\n    counter = Counter(s)\n    for ch in 'abcdefghijklmnopqrstuvwxyz':\n        if counter[ch] > half:\n            return \"-1\"\n    pairs = [(s[i], s[i+1]) for i in range(half)]\n    pairs.sort()\n    left = [p[0] for p in pairs]\n    right = [p[1] for p in pairs]\n    return ''.join(left + right)\n\nprint(", "from collections import Counter\nfrom sys import argv\n\ndef solve(s):\n    n = len(s)\n    half = n // 2\n    counter = Counter(s)\n    for k, v in counter.items():\n        if v > half:\n            return \"-1\"\n    used = [0] * n\n    res = [None] * n\n    for i in range(half):\n        j = i\n        while j < n:\n            if s[j] not in s[i:j] and used[j] == 0:\n                used[j] = 1\n                res[i] = s[", "from collections import Counter\n\ndef solve(s):\n    n = len(s)\n    half = n // 2\n    c = Counter(s[:half])\n\n    for i in range(half, n):\n        if c[s[i]] > 0:\n            c[s[i]] -= 1\n        else:\n            if not c:\n                return \"-1\"\n            for key in c.keys():\n                if c[key] == 0:\n                    c[key] -= 1\n                    break\n            else:\n                return \"-1\"\n    return \"\".join(s[i-half:i]", "from collections import Counter\n\ndef rearrange(s):\n    n = len(s)\n    half = n // 2\n    counter = Counter(s[i:i+half] for i in range(half))\n    if max(counter.values()) > 1:\n        return '-1'\n    return ''.join(s[i:i+half] for i in range(half)) + ''.join(s[i:i+half] for i in range(half, n))\n\ns = input()\nprint(rearrange(s))\n\nThis solution uses the `Counter` class from the `collections`", "from collections import Counter\n\ndef solve(s):\n    n = len(s)\n    if n % 2 == 1:\n        return \"-1\"\n\n    half = n // 2\n    first_half = s[:half]\n    second_half = s[half:]\n\n    first_counter = Counter(first_half)\n    second_counter = Counter(second_half)\n\n    if first_counter != second_counter:\n        return \"-1\"\n\n    for i in range(half - 1):\n        if first_half[i] == first_half[i + 1]:\n            for j"], "prompt": "\nQUESTION:\nConsider a string of $N$ letters, where $N$ is an even number. Rearrange the letters such that all $N/2+1$ substrings of length $N/2$ are different.\n\n-----Input-----\nA single line containing string $S$ of length $N$, where $2 \\leq N \\leq 10^5$ and $N$ is even. The string consists of lower-case letters from the English alphabet, \u201ca\u201d to \u201cz\u201d.\n\n-----Output-----\nIf possible, print a string of length $N$ that is a rearrangement of the letters in $S$ such that all substrings of length $N/2$ are different. If this is impossible, print $-1$.\n\nIf there is more than one solution, any one will do.\n\n-----Explanation of Sample Inputs-----\nIn the first example, the substrings before rearrangement are \u201ctral\u201d, \u201crala\u201d, \u201calal\u201d, \u201clala\u201d, and \u201calal\u201d. Note that \u201calal\u201d appears twice. After the rearrangement, all substrings are different.\n\nIn the third example, all substrings are different already in the input, so it suffices to print the original string.\n\n-----Examples-----\nSample Input 1:\ntralalal\nSample Output 1:\nallatral\n\nSample Input 2:\nzzzz\nSample Output 2:\n-1\nPlease provide the solution as pure code only, without explanations or comments.\n\nANSWER:\n```python\n"}}