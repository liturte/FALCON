{"3680": {"code": ["def min_cuts(K, N, poles):\n    poles.sort()\n    left, right = 0, max(poles)\n    while left < right:\n        mid = (left + right) // 2\n        if sum(p // mid for p in poles) >= N:\n            left = mid + 1\n        else:\n            right = mid\n    return left - 1\n\nK, N = map(int, input().split())\npoles = list(map(int, input().split()))\nprint(min_cuts(K, N, poles))\n\n\nThis solution uses binary search to find the maximum length of the fence post. The binary search is performed on the range", "import sys\n\ndef binary_search(start, end, target, poles):\n    while start <= end:\n        mid = (start + end) // 2\n        if can_cut(mid, target, poles):\n            if not can_cut(mid + 1, target, poles):\n                return mid\n            else:\n                start = mid + 1\n        else:\n            end = mid - 1\n    return -1\n\ndef can_cut(length, target, poles):\n    return sum(p // length for p in poles) >= target\n\ndef solve():\n    K, N = map(int, sys.stdin.readline().split())\n    poles = list(", "def min_cuts(K, N, poles):\n    # Initialize the minimum cuts to 0\n    min_cuts = 0\n\n    # While the length of the longest pole is greater than or equal to the length of the fence\n    while max(poles) >= N:\n        # Increment the minimum cuts\n        min_cuts += 1\n        # Find the index of the longest pole\n        longest_pole_index = poles.index(max(poles))\n        # Cut the longest pole into two parts\n        poles[longest_pole_index] = poles[longest_pole_index] // 2\n        # Add the second part of the pole to the list of poles", "def min_cuts(K, N, poles):\n    total_length = sum(poles)\n    dp = [0] + [float('inf')] * N\n    for length in range(1, N + 1):\n        for pole in poles:\n            if pole <= length:\n                dp[length] = min(dp[length], dp[length - pole] + 1)\n    return total_length - dp[-1]\n\nK, N = map(int, input().split())\npoles = list(map(int, input().split()))\nprint(min_cuts(K, N, poles))\n\n\nThis solution uses dynamic programming to find the minimum", "def min_cuts(K, N, poles):\n    poles.sort()\n    total_length = sum(poles)\n    avg_length = total_length // N\n    cuts = sum(max(0, pole - avg_length) for pole in poles)\n    return cuts\n\nK, N = map(int, input().split())\npoles = list(map(int, input().split()))\nprint(min_cuts(K, N, poles))\n\n\nThis solution works by first sorting the lengths of the poles. Then it calculates the average length of the posts by dividing the total length of the poles by the number of posts. It then calculates the number of"], "prompt": "\nQUESTION:\nDonald is a fence builder. He wants to build a fence that is $N - 1$ meters long. He needs a fence post every meter along the fence, which means he needs $N$ fence posts. Donald has $K$ poles of varying lengths that he wants to use as fence posts. The fence posts must have the same lengths, and be as long as possible. Also, the parts of the poles that are not used for the posts must not be longer than the ones used for the posts. Donald can cut the poles as many times as he wants, and at any position he wants. However, cutting a pole takes time, so he wants to make as few cuts as possible while achieving his other goals.\n\nHow many cuts does Donald have to make to get the fence posts for his fence?\n\n-----Input-----\nThe first line has two space-separated integers, $K$ and $N$. The second line consists of $K$ space-separated integers $p_1$, $p_2$, \u2026, $p_ K$, where $p_ i$ represents the length of the $i$th pole.\n\n-----Output-----\nOutput the minimum number of cuts needed to build the fence.\n\n-----Limits-----\n - $1 \\leq K \\leq N \\leq 10000$\n - $1 \\leq p_ i \\leq 10000$\n\n-----Examples-----\nSample Input:\n1 2\n3\nSample Output:\n1\nPlease provide the solution as pure code only, without explanations or comments.\n\nANSWER:\n```python\n"}}