{"3891": {"code": ["n, m = map(int, input().split())\ngrid = [list(input()) for _ in range(n)]\n\nfor i in range(1, n-1):\n    for j in range(1, m-1):\n        if grid[i][j] == 'B' and grid[i-1][j-1] == 'B' and grid[i-1][j+1] == 'B' and grid[i+1][j-1] == 'B' and grid[i+1][j+1] == 'B':\n            print(i+1, j+1)\n            break\n\n\nEXPLANATION:\nThe solution works by iterating over each cell in the grid (", "n, m = map(int, input().split())\ntable = [input() for _ in range(n)]\n\nfor i in range(1, n-1):\n    for j in range(1, m-1):\n        if table[i][j] == 'B' and table[i-1][j-1] == 'B' and table[i-1][j+1] == 'B' and table[i+1][j-1] == 'B' and table[i+1][j+1] == 'B':\n            print(i+1, j+1)\n            break\n\n\nThis solution iterates over the table, skipping the edges since we cannot have a square centered at the", "n, m = map(int, input().split())\ntable = [input() for _ in range(n)]\n\nfor i in range(1, min(n, m) // 2 + 1):\n    if i * 2 + 1 > min(n, m):\n        break\n    for r in range(n - 2 * i):\n        for c in range(m - 2 * i):\n            if all(table[r+i][c:c+2*i+1]) and all(table[r+2*i][c:c+2*i+1]) and all(row[c+i] for row in table[r:r+2*i+1]):\n                print(", "n, m = map(int, input().split())\ngrid = [input() for _ in range(n)]\n\nfor i in range(n):\n    for j in range(m):\n        if grid[i][j] == 'B':\n            r, c = i+1, j+1\n            break\n\nprint(r, c)\n\nThis program works by reading the input and storing it in a 2D list. It then iterates through the list, checking each element. If it finds a 'B', it records the row and column numbers (+1 because the problem statement is 1-indexed). It then prints the coordinates.\n\nNote: The `break` statement is used to stop the inner loop as soon", "n, m = map(int, input().split())\ns = [input() for _ in range(n)]\nfor i in range(1, n - 1):\n    for j in range(1, m - 1):\n        if s[i][j] == 'B' and s[i - 1][j - 1] == 'B' and s[i - 1][j + 1] == 'B' and s[i + 1][j - 1] == 'B' and s[i + 1][j + 1] == 'B':\n            print(i + 1, j + 1)\n            break\n\n\nExplanation:\nThe code reads the input and stores it in a"], "prompt": "\nQUESTION:\nConsider a table of size $n \\times m$, initially fully white. Rows are numbered $1$ through $n$ from top to bottom, columns $1$ through $m$ from left to right. Some square inside the table with odd side length was painted black. Find the center of this square.\n\n\n-----Input-----\n\nThe first line contains two integers $n$ and $m$ ($1 \\le n, m \\le 115$) \u2014 the number of rows and the number of columns in the table.\n\nThe $i$-th of the next $n$ lines contains a string of $m$ characters $s_{i1} s_{i2} \\ldots s_{im}$ ($s_{ij}$ is 'W' for white cells and 'B' for black cells), describing the $i$-th row of the table.\n\n\n-----Output-----\n\nOutput two integers $r$ and $c$ ($1 \\le r \\le n$, $1 \\le c \\le m$) separated by a space \u2014 the row and column numbers of the center of the black square.\n\n\n-----Examples-----\nInput\n5 6\nWWBBBW\nWWBBBW\nWWBBBW\nWWWWWW\nWWWWWW\n\nOutput\n2 4\n\nInput\n3 3\nWWW\nBWW\nWWW\n\nOutput\n2 1\nPlease provide the solution as pure code only, without explanations or comments.\n\nANSWER:\n```python\n"}}