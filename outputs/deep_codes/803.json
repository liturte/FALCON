{"803": {"code": ["def min_time(n, s):\n    standing = s.count('X')\n    sitting = n - standing\n    if sitting > standing:\n        s = s.replace('X', 'x', n - (n - sitting) // 2)\n    else:\n        s = s.replace('x', 'X', (n - standing) // 2)\n    return (n - standing) // 2 if sitting > standing else standing - (n - sitting) // 2, s\n\nn = int(input())\ns = input()\nprint(*min_time(n, s), sep='\\n')\n\n\nThis code works by first counting the number of standing and sitting hamsters. It then checks", "def solve():\n    n = int(input())\n    s = input()\n\n    standing = s.count('X')\n    sitting = n // 2\n    minutes = 0\n\n    if standing < sitting:\n        minutes = sitting - standing\n\n    print(minutes)\n    print(s.replace('X', 'x') if standing < sitting else s)\n\nsolve()\n\nThis solution works by counting the number of standing hamsters and the number of sitting hamsters. If the number of standing hamsters is less than the number of sitting hamsters, Pasha needs to make some hamsters stand up. The number of minutes needed is the difference between the number of sitting hamsters and the number of standing hamsters.", "def min_changes(n, hamsters):\n    standing = hamsters.count('X')\n    sitting = n // 2\n    changes = 0\n    for i in range(n):\n        if hamsters[i] == 'X' and standing > sitting:\n            hamsters = hamsters[:i] + 'x' + hamsters[i+1:]\n            changes += 1\n            standing -= 1\n            sitting += 1\n    return changes, hamsters\n\nn = int(input())\nhamsters = input()\nprint(*min_changes(n, hamsters), sep='\\n')\n\nThis code first counts the number of standing and sitting hamsters. Then, it iterates through the hamsters.", "def min_time_to_change(n, initial_state):\n    standing = initial_state.count('X')\n    sitting = n // 2\n\n    if standing > sitting:\n        return 1, ''.join(['X' if c == 'x' else 'x' for c in initial_state])\n    else:\n        return 0, initial_state\n\nn = int(input())\ninitial_state = input()\nprint(*min_time_to_change(n, initial_state), sep='\\n')\n\n\nThis Python program reads the number of hamsters and their initial state from the input. It then calculates the number of hamsters standing and sitting. If the number of hamsters", "def solve(n, s):\n    a = s.count('X')\n    b = s.count('x')\n    if a > n // 2:\n        return a, s.replace('X', 'x', a - n // 2)\n    if b > n // 2:\n        return b, s.replace('x', 'X', b - n // 2)\n    return (n - a, s.replace('x', 'X', n - a)) if a < n // 2 else (n - b, s.replace('X', 'x', n - b))\n\nn = int(input())\ns = input()\nm, r = solve(n, s)\nprint"], "prompt": "\nQUESTION:\nPasha has many hamsters and he makes them work out. Today, n hamsters (n is even) came to work out. The hamsters lined up and each hamster either sat down or stood up.\n\nFor another exercise, Pasha needs exactly $\\frac{n}{2}$ hamsters to stand up and the other hamsters to sit down. In one minute, Pasha can make some hamster ether sit down or stand up. How many minutes will he need to get what he wants if he acts optimally well?\n\n\n-----Input-----\n\nThe first line contains integer n (2 \u2264 n \u2264 200; n is even). The next line contains n characters without spaces. These characters describe the hamsters' position: the i-th character equals 'X', if the i-th hamster in the row is standing, and 'x', if he is sitting.\n\n\n-----Output-----\n\nIn the first line, print a single integer \u2014 the minimum required number of minutes. In the second line, print a string that describes the hamsters' position after Pasha makes the required changes. If there are multiple optimal positions, print any of them.\n\n\n-----Examples-----\nInput\n4\nxxXx\n\nOutput\n1\nXxXx\n\nInput\n2\nXX\n\nOutput\n1\nxX\n\nInput\n6\nxXXxXx\n\nOutput\n0\nxXXxXx\nPlease provide the solution as pure code only, without explanations or comments.\n\nANSWER:\n```python\n"}}