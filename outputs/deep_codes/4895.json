{"4895": {"code": ["def solve():\n    n = int(input().strip())\n    sticks = list(map(int, input().strip().split()))\n    sticks.sort()\n    for i in range(n-2):\n        if sticks[i] + sticks[i+1] > sticks[i+2]:\n            print('possible')\n            return\n    print('impossible')\nsolve()\n\n\nExplanation:\nThe program starts by reading the number of sticks and the lengths", "def solve(n, lengths):\n    lengths.sort()\n    for i in range(n-2):\n        if lengths[i] + lengths[i+1] > lengths[i+2]:\n            return \"possible\"\n    return \"impossible\"\n\nn = int(input().strip())\nlengths = list(map(int, input().strip().split()))\nprint(solve(n, lengths))\n\n\nThis program works by sorting the lengths of the", "def solve():\n    n = int(input().strip())\n    lengths = list(map(int, input().strip().split()))\n    lengths.sort()\n    if lengths[0] + lengths[1] > lengths[2]:\n        print('possible')\n    else:\n        print('impossible')\n\nsolve()\n\n\nThis Python solution works by first sorting the lengths of the sticks. It then checks if the sum of the two smallest sticks is greater than the longest", "def solve(n, lengths):\n    lengths.sort()\n    for i in range(n-2):\n        if lengths[i] + lengths[i+1] > lengths[i+2]:\n            return 'possible'\n    return 'impossible'\n\nn = int(input())\nlengths = list(map(int, input().split()))\nprint(solve(n, lengths))\n\nThis solution works by first sorting the lengths of the sticks. Then it", "def solve():\n    n = int(input().strip())\n    lengths = list(map(int, input().strip().split()))\n    lengths.sort()\n    if lengths[0] + lengths[1] > lengths[2]:\n        print('possible')\n    else:\n        print('impossible')\n\n\nExplanation:\nThe triangle inequality theorem states that for any triangle, the sum of the lengths of any two sides must be greater than the length of the remaining side."], "prompt": "\nQUESTION:\nWhile on summer camp, you are playing a game of hide-and-seek in the forest. You need to designate a \u201csafe zone\u201d, where, if the players manage to sneak there without being detected, they beat the seeker. It is therefore of utmost importance that this zone is well-chosen.\n\nYou point towards a tree as a suggestion, but your fellow hide-and-seekers are not satisfied. After all, the tree has branches stretching far and wide, and it will be difficult to determine whether a player has reached the safe zone. They want a very specific demarcation for the safe zone. So, you tell them to go and find some sticks, of which you will use three to mark a non-degenerate triangle (i.e.\u00a0with strictly positive area) next to the tree which will count as the safe zone. After a while they return with a variety of sticks, but you are unsure whether you can actually form a triangle with the available sticks.\n\nCan you write a program that determines whether you can make a triangle with exactly three of the collected sticks?\n\n-----Input-----\nThe first line contains a single integer $N$, with $3 \\leq N \\leq 20000$, the number of sticks collected. Then follows one line with $N$ positive integers, each less than $2^{60}$, the lengths of the sticks which your fellow campers have collected.\n\n-----Output-----\nOutput a single line containing a single word: possible if you can make a non-degenerate triangle with three sticks of the provided lengths, and impossible if you can not.\n\n-----Examples-----\nSample Input:\n3\n1 1 1\nSample Output:\npossible\nPlease provide the solution as pure code only, without explanations or comments.\n\nANSWER:\n```python\n"}}