{"357": {"code": ["friends = ['Danil', 'Olya', 'Slava', 'Ann', 'Nikita']\nproblem = input()\n\ncount = sum(problem.count(friend) for friend in friends)\n\nprint('YES' if count == 1 else 'NO')\n\n\nThis Python program works by counting the occurrences of each friend's name in the problem's name. If exactly one occurrence is found, it means the problem is from the contest, so it prints \"YES\". Otherwise, it prints \"NO\".\n\nNote that this solution assumes that the problem's name will not contain any of the friends' names as a substring. For example, if the problem's name is \"Danil\", this solution would not correctly identify it as a problem from the contest.", "friends = ['Danil', 'Olya', 'Slava', 'Ann', 'Nikita']\nproblem = input()\n\ndef check_contest_problem(friends, problem):\n    count = 0\n    for friend in friends:\n        if friend in problem:\n            count += 1\n    return 'YES' if count == 1 else 'NO'\n\nprint(check_contest_problem(friends, problem))\n\n\nThis program reads a problem name from the input, and then checks if it contains one of Alex's friends' names exactly once. If it does, it prints \"YES\", otherwise it prints \"NO\".\n\nThis solution assumes that a problem is from the contest if and only if its name contains one of Alex's friends' names exactly once.\n\nIt works by iterating over each friend in the list of friends, and checking if the friend's name is in the problem name. If it is, it increments a count. Finally, it checks if the count is exactly 1", "print(\"YES\" if [i for i in ['Danil', 'Olya', 'Slava', 'Ann', 'Nikita'] if i in input()] else \"NO\")\n\n\nExplanation:\nThis program creates a list of Alex's friends' names and checks if any of these names are in the input string. If any name is found, it prints \"YES\", otherwise it prints \"NO\". The 'in' operator is used to check if a string is a substring of another string.\n\nThe expression inside the print function is a conditional expression (also known as a ternary operator). It is equivalent to the following if-else statement:\n\n\nif [i for i in ['Danil', 'Olya', 'Slava', 'Ann', 'Nikita'] if i in input()]:\n    print(\"YES\")\nelse:\n    print(\"NO\")\n\n\nThe expression `[i for i in ['Danil', 'Olya', 'Sl", "friends = ['Danil', 'Olya', 'Slava', 'Ann', 'Nikita']\nproblem = input()\n\nprint('YES' if sum(problem.count(friend) for friend in friends) == 1 else 'NO')\n\n\nEXPLANATION:\nThe program reads the problem name from input, then checks how many of Alex's friends' names appear in the problem name. If exactly one name appears, it prints \"YES\", otherwise it prints \"NO\".\n\nThis is done by using a list of Alex's friends' names and the count() method of strings in a for loop. The sum() function adds up the counts for all friends, and the condition checks if the sum is exactly 1.\n\nThe 'YES' if sum(problem.count(friend) for friend in friends) == 1 else 'NO' is a ternary expression that does the same thing as the if-else statement.\n\nThe 'count' method is used to count the number of times a friend'", "friends = [\"Danil\", \"Olya\", \"Slava\", \"Ann\", \"Nikita\"]\nproblem = input()\ncount = sum(problem.count(friend) for friend in friends)\nprint(\"YES\" if count == 1 else \"NO\")\n\n\nExplanation:\nWe first define the list of friends. Then we take the problem's name as input. We count the number of occurrences of each friend's name in the problem's name. If exactly one friend's name is found, the problem is from the contest, so we print \"YES\". Otherwise, we print \"NO\".\n\nThis solution assumes that a problem can only be from the contest if it contains exactly one friend's name. If there can be more than one occurrence of a friend's name, we would need to modify the solution accordingly.\n\nThis solution also assumes that the problem name does not contain any other numbers or special characters. If this is not the case, we would need to modify the solution to ignore these characters"], "prompt": "\nQUESTION:\nOne day Alex was creating a contest about his friends, but accidentally deleted it. Fortunately, all the problems were saved, but now he needs to find them among other problems.\n\nBut there are too many problems, to do it manually. Alex asks you to write a program, which will determine if a problem is from this contest by its name.\n\nIt is known, that problem is from this contest if and only if its name contains one of Alex's friends' name exactly once. His friends' names are \"Danil\", \"Olya\", \"Slava\", \"Ann\" and \"Nikita\".\n\nNames are case sensitive.\n\n\n-----Input-----\n\nThe only line contains string from lowercase and uppercase letters and \"_\" symbols of length, not more than 100 \u2014 the name of the problem.\n\n\n-----Output-----\n\nPrint \"YES\", if problem is from this contest, and \"NO\" otherwise.\n\n\n-----Examples-----\nInput\nAlex_and_broken_contest\n\nOutput\nNO\nInput\nNikitaAndString\n\nOutput\nYES\nInput\nDanil_and_Olya\n\nOutput\nNO\nPlease provide the solution as pure code only, without explanations or comments.\n\nANSWER:\n```python\n"}}