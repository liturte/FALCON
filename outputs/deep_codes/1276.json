{"1276": {"code": ["N = int(input())\nS = input()\n\nRGB = [0]*3\nfor i in range(N):\n    if S[i] == 'R':\n        RGB[0] += 1\n    elif S[i] == 'G':\n        RGB[1] += 1\n    elif S[i] == 'B':\n        RGB[2] += 1\n\nans = RGB[0]*RGB[1]*RGB[2]\nfor i in range(1,N-1):\n    if S[i-1] != S[i+1]:\n        for j in range(3):\n            if S[i] == chr('RGB'[j]):\n                ans += RGB[(j+1)%3]*(RGB[(j+2)%3]-1)//2\n                break\nprint(ans)\n\n\nThis code works by first counting the number of each color in the string. Then, it calculates the number of valid triplets by multiplying the counts of each color. For each color in the string, it", "def count_triplets(N, S):\n    R, G, B = 'R', 'G', 'B'\n    counts = {R: [0, 0, 0], G: [0, 0, 0], B: [0, 0, 0]}\n    same = {R: [0, 0, 0], G: [0, 0, 0], B: [0, 0, 0]}\n    diff = {R: [0, 0, 0], G: [0, 0, 0], B: [0, 0, 0]}\n    total = {R: [0, 0, 0], G: [0, 0, 0], B: [0, 0, 0]}\n    ans = 0\n\n    for i in range(N):\n        color = S[i]\n        counts[color][i%3] += 1\n        same[color][(i-1)%3] += counts[color][(i-1)%3]\n        diff", "N = int(input())\nS = input()\nR, G, B = [0]*N, [0]*N, [0]*N\nfor i in range(N):\n    if S[i] == 'R':\n        R[i] = 1\n    elif S[i] == 'G':\n        G[i] = 1\n    else:\n        B[i] = 1\nR_cum, G_cum, B_cum = [0]*(N+1), [0]*(N+1), [0]*(N+1)\nfor i in range(N):\n    R_cum[i+1] = R_cum[i] + R[i]\n    G_cum[i+1] = G_cum[i] + G[i]\n    B_cum[i+1] = B_cum[i] + B[i]\nans = 0\nfor j in range(2,N):\n    if S[j] != S[0]:\n        ans += (", "N = int(input())\nS = input()\n\ncounts = [[0, 0, 0] for _ in range(N)]\nfor i in range(N):\n    if S[i] == 'R':\n        counts[i][0] += 1\n    elif S[i] == 'G':\n        counts[i][1] += 1\n    else:\n        counts[i][2] += 1\n\nfor i in range(1, N):\n    for j in range(3):\n        counts[i][j] += counts[i - 1][j]\n\nanswer = 0\nfor j in range(N):\n    for k in range(j + 2, N):\n        if S[j] != S[k]:\n            if k - j != counts[k - 1][(j + 1) % 3] - counts[j - 1][(j + 1) % 3]:\n                answer += 1\n\nprint(answer)\n\nThis solution works by first counting the number of each color at each position in the string.", "N = int(input())\nS = input()\n\nRGB = [0]*3\nfor i in range(N):\n    if S[i] == 'R':\n        RGB[0] += 1\n    elif S[i] == 'G':\n        RGB[1] += 1\n    else:\n        RGB[2] += 1\n\nans = 0\nfor i in range(3):\n    for j in range(3):\n        if i != j:\n            ans += RGB[i] * (RGB[j]*(RGB[j]-1)//2)\n\nprint(ans)\n\n\nThis solution works by first counting the number of each color in the string. Then, for each pair of colors, it calculates the number of ways to choose two indices with one color and then multiplies that by the number of ways to choose an index with the other color. This is done for each pair of colors. The result is the total number of triples that satisfy both conditions.\n\nThe time complexity of this solution is O(N), as it goes through the string once to"], "prompt": "\nQUESTION:\nWe have a string S of length N consisting of R, G, and B.\nFind the number of triples (i,~j,~k)~(1 \\leq i < j < k \\leq N) that satisfy both of the following conditions:\n - S_i \\neq S_j, S_i \\neq S_k, and S_j \\neq S_k.\n - j - i \\neq k - j.\n\n-----Constraints-----\n - 1 \\leq N \\leq 4000\n - S is a string of length N consisting of R, G, and B.\n\n-----Input-----\nInput is given from Standard Input in the following format:\nN\nS\n\n-----Output-----\nPrint the number of triplets in question.\n\n-----Sample Input-----\n4\nRRGB\n\n-----Sample Output-----\n1\n\nOnly the triplet (1,~3,~4) satisfies both conditions. The triplet (2,~3,~4) satisfies the first condition but not the second, so it does not count.\nPlease provide the solution as pure code only, without explanations or comments.\n\nANSWER:\n```python\n"}}