{"3078": {"code": ["from collections import deque\n\ndef longest_interesting_subsequence(n, s, a):\n    prefix_sum = [0] * (n + 1)\n    for i in range(n):\n        prefix_sum[i+1] = prefix_sum[i] + a[i]\n\n    res = [0] * n\n    q = deque()\n    for i in range(n):\n        while q and prefix_sum[q[-1]] <= prefix_sum[i]:\n            q.pop()\n        while q and prefix_sum[i] - prefix_sum[q[0]] > s:\n            res[q[0]] = i - q[0]\n            q.popleft()", "from bisect import bisect_right\n\ndef longest_interesting_subsequence(n, s, a):\n    prefix_sum = [0] * (n + 1)\n    for i in range(n):\n        prefix_sum[i + 1] = prefix_sum[i] + a[i]\n\n    max_len = [0] * n\n    sorted_prefix_sum = sorted(prefix_sum)\n    for i in range(n):\n        max_len[i] = max(max_len[i], bisect_right(sorted_prefix_sum, s - prefix_sum[i + 1]) - bisect_right(sorted_prefix_sum, prefix_sum[i] - s))", "import bisect\n\ndef longest_interesting_subsequence(n, s, a):\n    prefix_sum = [0] * (n + 1)\n    for i in range(n):\n        prefix_sum[i+1] = prefix_sum[i] + a[i]\n\n    left_max = [0] * (n + 1)\n    left_max[0] = -1\n    for i in range(1, n + 1):\n        left_max[i] = max(left_max[i-1], bisect.bisect_right(prefix_sum, prefix_sum[i-1] + s) - 1)\n\n    right_max = [0] * (n + 1)", "from bisect import bisect_right\n\ndef longest_interesting_subsequence(N, S, A):\n    prefix_sum = [0] * (N+1)\n    for i in range(N):\n        prefix_sum[i+1] = prefix_sum[i] + A[i]\n\n    prefix_set = set()\n    max_len = 0\n    for i in range(N):\n        if i >= max_len:\n            prefix_set = set([prefix_sum[i]])\n        max_len = max(max_len, bisect_right(prefix_set, S - prefix_sum[i+1]) * 2)\n        prefix_set.add(prefix_sum[i", "from collections import deque\n\ndef solve():\n    N, S = map(int, input().split())\n    A = [int(input()) for _ in range(N)]\n\n    def calc(x):\n        d = deque()\n        res = [0] * N\n        s = 0\n        for i in range(N):\n            s += A[i]\n            while d and A[i] > A[d[-1]]:\n                d.pop()\n            if d and i - d[0] + 1 > x:\n                d.popleft()\n            if i >= x - 1:\n                res[i - x + 1] = max(res[i - x + 1], s - A["], "prompt": "\nQUESTION:\nWe say that a sequence of $2K$ elements is interesting if neither the sum of the first $K$ elements, nor the sum of the last $K$ elements, is greater than $S$. A sequence $A$ of length $N$ is given. For every element, output the length of the longest interesting subsequence starting with that element.\n\n-----Input-----\nThe first line contains integers $N$ and $S$ ($2 \\leq N \\leq 100000$, $1 \\leq S \\leq 2 \\cdot 10^9$ ).\n\nThe following $N$ lines contain the sequence $A$, one integer per line. The integers are non-negative and their sum does not exceed $2\\cdot 10^9$.\n\n-----Output-----\nOutput $N$ lines. The $i$-th line must contain one integer, the length of the longest interesting subsequence starting with the i-th element. If an interesting subsequence at that position doesn\u2019t exist, output 0 (zero).\n\n-----Examples-----\nSample Input 1:\n5 10000\n1\n1\n1\n1\n1\nSample Output 1:\n4\n4\n2\n2\n0\n\nSample Input 2:\n5 9\n1\n1\n10\n1\n9\nSample Output 2:\n2\n0\n0\n2\n0\nPlease provide the solution as pure code only, without explanations or comments.\n\nANSWER:\n```python\n"}}