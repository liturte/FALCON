{"2665": {"code": ["from collections import Counter\n\ndef min_points_to_form_square(n, points):\n    counter = Counter()\n    for x, y in points:\n        counter[(x, y)] += 1\n    corners = [(x, y) for (x, y), count in counter.items() if count == 1]\n    if len(corners) < 4:\n        return 4 - len(corners)\n    corners.sort()\n    if corners[0][0] == corners[1][0] and corners[2][0]", "from collections import defaultdict\ndef solve():\n    n = int(input().strip())\n    points = [list(map(int, input().split())) for _ in range(n)]\n    x_dict = defaultdict(int)\n    y_dict = defaultdict(int)\n    for x, y in points:\n        x_dict[x] += 1\n        y_dict[y] += 1\n    x_values = sorted([(x, count) for x, count in x_dict.items() if count > 1])\n    y_values", "import sys\n\ndef min_points_to_square():\n    n = int(input().strip())\n    points = [list(map(int, input().strip().split())) for _ in range(n)]\n\n    x_coords = [point[0] for point in points]\n    y_coords = [point[1] for point in points]\n\n    min_x, max_x = min(x_coords), max(x_coords)\n    min_y, max_y = min(y_coords), max(", "from collections import defaultdict\n\ndef min_points(n, points):\n    x_dict = defaultdict(set)\n    y_dict = defaultdict(set)\n    for x, y in points:\n        x_dict[x].add(y)\n        y_dict[y].add(x)\n    x_values = list(x_dict.keys())\n    y_values = list(y_dict.keys())\n    x_values.sort()\n    y_values.sort()\n    for i in range(len(x_", "import sys\nfrom collections import Counter\n\ndef solve():\n    n = int(input())\n    points = [tuple(map(int, input().split())) for _ in range(n)]\n    x_counts = Counter(x for x, y in points)\n    y_counts = Counter(y for x, y in points)\n    return max(max(x_counts.values()), max(y_counts.values())) * 2 - n\n\nprint(solve())\n\n\nThis solution uses the Python `col"], "prompt": "\nQUESTION:\nChef loves squares! You are given N points with integers coordinates, Chef asks you to find out how many points he should add to these set of N points, so that one could create at least one square having its vertices from the points of the resulting set. Note that the square created need not to be parallel to the axis.\n\n-----Input-----\nThe first line contains singe integer N. \nEach of next N lines contains two integers Xi and Yi denotine the coordinates of i-th point. \n\n-----Output-----\nIn a single line print single integer - the minimal number of points Chef need to paint to receive at least one square. \n\n-----Constraints-----\n- 0 \u2264 N \u2264 2000\n- -10^6 \u2264 Xi, Yi \u2264 10^6\n- There are NO coincided points\n\n-----Example-----\nInput:\n3\n0 0\n2 2\n3 3\n\nOutput:\n2\n\nInput:\n5\n0 0\n100 100\n200 200\n100 0\n0 100\n\nOutput:\n0\n\n-----Explanation-----\nFor the first example Chef can add points (2, 0), (0, 2) or (2, 3), (3, 2)\nFor the second example Chef already has square (0, 0), (100, 0), (0, 100), (100, 100).\nPlease provide the solution as pure code only, without explanations or comments.\n\nANSWER:\n```python\n"}}