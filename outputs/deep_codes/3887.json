{"3887": {"code": ["import re\n\ndef solve(equation):\n    parts = re.split(r'([+-])', equation)\n    total = sum(int(part) for part in parts[::2])\n    for i in range(1, total+1):\n        if i not in parts:\n            return \"Impossible\"\n    return \"Possible\"\n\nequation = input().strip()\nprint(solve(equation))\n\n\n\nimport re\n\ndef solve(equation):\n    parts = re.split(r'([+-])', equation)\n    total = sum(int(part) for part in parts[::2])\n    for i in range(1, total+1):\n        if i not in parts:", "from sympy import *\n\ndef solve_rebus(rebus):\n    n, *equations = rebus.split('=')\n    n = int(n.strip())\n    equations = [eq.strip() for eq in equations]\n    \n    unknowns = n - len(equations) + 1\n    variables = [symbols('x%d' % i) for i in range(1, unknowns+1)]\n    \n    for i in range(len(equations)):\n        equations[i] = equations[i].replace('?', str(variables[i]))\n    \n    for i in range(len(equations)-1, -1, -1):\n        equations[i] = Eq(eval(equations[i]),", "from sympy import *\n\ndef solve_rebus(rebus):\n    n, equations = rebus.split(' = ')\n    n = int(n)\n    equations = equations.split(' + ')\n    for i in range(len(equations)):\n        if '-' in equations[i]:\n            a, b = equations[i].split(' - ')\n            equations[i] = f'{int(a) - int(b)}'\n    equations = [str(int(x)) for x in equations]\n    equations = ' + '.join(equations)\n    x = symbols('x')\n    try:\n        result = solve(equations, x)\n        if len(result) > 1:\n            return \"", "import sys\nfrom sympy import *\n\ndef solve_rebus(rebus):\n    # Split the rebus into parts separated by '+' or '-'\n    parts = rebus.split('=') if '=' in rebus else rebus.split('+')\n    parts = [part.strip() for part in parts]\n    \n    # If the rebus contains '=', we are looking for a solution\n    # If the rebus contains '+', we are looking for a solution that adds up to the number on the right\n    if '=' in rebus:\n        parts[1] = parts[1].replace('+', '+-')[1:]\n        parts[0] = parts[0].replace('?',", "from sympy import symbols, Eq, solve\n\ndef rebus_solver(rebus):\n    n = int(rebus.split(' = ')[1])\n    variables = rebus.count('?')\n    question_marks = symbols('x:%d' % variables)\n    rebus = rebus.replace('= ', '==')\n    for q in question_marks:\n        rebus = rebus.replace('?', str(q), 1)\n    equation = eval(rebus)\n    solution = solve(Eq(equation, n))\n    if not solution:\n        return \"Impossible\"\n    else:\n        return \"Possible\\n\" + rebus.replace('==', '=').replace('x"], "prompt": "\nQUESTION:\nYou are given a rebus of form ? + ? - ? + ? = n, consisting of only question marks, separated by arithmetic operation '+' and '-', equality and positive integer n. The goal is to replace each question mark with some positive integer from 1 to n, such that equality holds.\n\n\n-----Input-----\n\nThe only line of the input contains a rebus. It's guaranteed that it contains no more than 100 question marks, integer n is positive and doesn't exceed 1 000 000, all letters and integers are separated by spaces, arithmetic operations are located only between question marks.\n\n\n-----Output-----\n\nThe first line of the output should contain \"Possible\" (without quotes) if rebus has a solution and \"Impossible\" (without quotes) otherwise.\n\nIf the answer exists, the second line should contain any valid rebus with question marks replaced by integers from 1 to n. Follow the format given in the samples.\n\n\n-----Examples-----\nInput\n? + ? - ? + ? + ? = 42\n\nOutput\nPossible\n9 + 13 - 39 + 28 + 31 = 42\n\nInput\n? - ? = 1\n\nOutput\nImpossible\n\nInput\n? = 1000000\n\nOutput\nPossible\n1000000 = 1000000\nPlease provide the solution as pure code only, without explanations or comments.\n\nANSWER:\n```python\n"}}