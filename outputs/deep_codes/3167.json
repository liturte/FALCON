{"3167": {"code": ["QUESTION:\nMirko is trying to debug a piece of his code. First he creates an array of $N$ integers and fills it with zeros. Then he repeatedly calls the following C++ procedure:\n\nvoid something( int jump ) {\n  int i = 0;\n  while( i < N ) { seq[i] = seq[i] + 1; i = i + jump;\n  }\n}\n\nAs you can see, this procedure increases by one all elements in the array whose indices are divisible by jump.\n\nMirko calls the procedure exactly $K$ times, using the sequence $X_1,X_2,X_3, \\ldots , X_ k$ as arguments.\n\nAfter this, Mirko has a list of $Q$ special parts of the array he needs to check to verify that his code is working as it should be. Each of these parts is defined by two numbers, $L$ and $R$ ($L \\leq R$) the left and right bound of the special part. To check the code, Mirko must compute the sum of all elements of seq between and including $L$ and $R$. In other words $\\mathtt{seq}[L] + \\mathtt{seq}[L+1] + \\mathtt{seq}[L+2] + \\ldots + \\mathtt{seq}[R]$. Since he needs to know the answer in advance in order to check it, he asked you to help him.\n\n-----Input-----\nThe first line of input contains two integers, $N$ ($1 \\leq N \\leq 10^6$), the size of the array, and $K$ ($1 \\leq K \\leq 10^6$), the number of calls to something that Mirko makes.\n\nThe second line contains $K$ integers: $X_1,X_2,X_3, \\ldots ,X_ k$, the arguments passed to the procedure ($1 \\leq X_ i < N$).\n\nThe third line contains one integer $Q$ ($1 \\leq Q \\leq 10^6$), the number of special parts of the array Mirko needs to check.\n\nThe next $Q$ lines contain two integers each $L_ i$ and $R_ i$ ($0 \\leq L_ i \\leq R_ i < N$), the bounds of each special part.\n\n-----Output-----\nThe output should contain exactly $Q$ lines. The $i$-th line should contain the sum of elements $\\mathtt{seq}[L_ i] + \\mathtt{seq}[L_ i+1] + \\mathtt{seq}[L_ i+2] + \\ldots + \\mathtt{", "QUESTION:\nMirko is trying to debug a piece of his code. First he creates an array of $N$ integers and fills it with zeros. Then he repeatedly calls the following C++ procedure:\n\nvoid something( int jump ) {\n  int i = 0;\n  while( i < N ) { seq[i] = seq[i] + 1; i = i + jump;\n  }\n}\n\nAs you can see, this procedure increases by one all elements in the array whose indices are divisible by jump.\n\nMirko calls the procedure exactly $K$ times, using the sequence $X_1,X_2,X_3, \\ldots , X_ k$ as arguments.\n\nAfter this, Mirko has a list of $Q$ special parts of the array he needs to check to verify that his code is working as it should be. Each of these parts is defined by two numbers, $L$ and $R$ ($L \\leq R$) the left and right bound of the special part. To check the code, Mirko must compute the sum of all elements of seq between and including $L$ and $R$. In other words $\\mathtt{seq}[L] + \\mathtt{seq}[L+1] + \\mathtt{seq}[L+2] + \\ldots + \\mathtt{seq}[R]$. Since he needs to know the answer in advance in order to check it, he asked you to help him.\n\n-----Input-----\nThe first line of input contains two integers, $N$ ($1 \\leq N \\leq 10^6$), the size of the array, and $K$ ($1 \\leq K \\leq 10^6$), the number of calls to something that Mirko makes.\n\nThe second line contains $K$ integers: $X_1,X_2,X_3, \\ldots ,X_ k$, the arguments passed to the procedure ($1 \\leq X_ i < N$).\n\nThe third line contains one integer $Q$ ($1 \\leq Q \\leq 10^6$), the number of special parts of the array Mirko needs to check.\n\nThe next $Q$ lines contain two integers each $L_ i$ and $R_ i$ ($0 \\leq L_ i \\leq R_ i < N$), the bounds of each special part.\n\n-----Output-----\nThe output should contain exactly $Q$ lines. The $i$-th line should contain the sum of elements $\\mathtt{seq}[L_ i] + \\mathtt{seq}[L_ i+1] + \\mathtt{seq}[L_ i+2] + \\ldots + \\mathtt{", "QUESTION:\nMirko is trying to debug a piece of his code. First he creates an array of $N$ integers and fills it with zeros. Then he repeatedly calls the following C++ procedure:\n\nvoid something( int jump ) {\n  int i = 0;\n  while( i < N ) { seq[i] = seq[i] + 1; i = i + jump;\n  }\n}\n\nAs you can see, this procedure increases by one all elements in the array whose indices are divisible by jump.\n\nMirko calls the procedure exactly $K$ times, using the sequence $X_1,X_2,X_3, \\ldots , X_ k$ as arguments.\n\nAfter this, Mirko has a list of $Q$ special parts of the array he needs to check to verify that his code is working as it should be. Each of these parts is defined by two numbers, $L$ and $R$ ($L \\leq R$) the left and right bound of the special part. To check the code, Mirko must compute the sum of all elements of seq between and including $L$ and $R$. In other words $\\mathtt{seq}[L] + \\mathtt{seq}[L+1] + \\mathtt{seq}[L+2] + \\ldots + \\mathtt{seq}[R]$. Since he needs to know the answer in advance in order to check it, he asked you to help him.\n\n-----Input-----\nThe first line of input contains two integers, $N$ ($1 \\leq N \\leq 10^6$), the size of the array, and $K$ ($1 \\leq K \\leq 10^6$), the number of calls to something that Mirko makes.\n\nThe second line contains $K$ integers: $X_1,X_2,X_3, \\ldots ,X_ k$, the arguments passed to the procedure ($1 \\leq X_ i < N$).\n\nThe third line contains one integer $Q$ ($1 \\leq Q \\leq 10^6$), the number of special parts of the array Mirko needs to check.\n\nThe next $Q$ lines contain two integers each $L_ i$ and $R_ i$ ($0 \\leq L_ i \\leq R_ i < N$), the bounds of each special part.\n\n-----Output-----\nThe output should contain exactly $Q$ lines. The $i$-th line should contain the sum of elements $\\mathtt{seq}[L_ i] + \\mathtt{seq}[L_ i+1] + \\mathtt{seq}[L_ i+2] + \\ldots + \\mathtt{", "QUESTION:\nMirko is trying to debug a piece of his code. First he creates an array of $N$ integers and fills it with zeros. Then he repeatedly calls the following C++ procedure:\n\nvoid something( int jump ) {\n  int i = 0;\n  while( i < N ) { seq[i] = seq[i] + 1; i = i + jump;\n  }\n}\n\nAs you can see, this procedure increases by one all elements in the array whose indices are divisible by jump.\n\nMirko calls the procedure exactly $K$ times, using the sequence $X_1,X_2,X_3, \\ldots , X_ k$ as arguments.\n\nAfter this, Mirko has a list of $Q$ special parts of the array he needs to check to verify that his code is working as it should be. Each of these parts is defined by two numbers, $L$ and $R$ ($L \\leq R$) the left and right bound of the special part. To check the code, Mirko must compute the sum of all elements of seq between and including $L$ and $R$. In other words $\\mathtt{seq}[L] + \\mathtt{seq}[L+1] + \\mathtt{seq}[L+2] + \\ldots + \\mathtt{seq}[R]$. Since he needs to know the answer in advance in order to check it, he asked you to help him.\n\n-----Input-----\nThe first line of input contains two integers, $N$ ($1 \\leq N \\leq 10^6$), the size of the array, and $K$ ($1 \\leq K \\leq 10^6$), the number of calls to something that Mirko makes.\n\nThe second line contains $K$ integers: $X_1,X_2,X_3, \\ldots ,X_ k$, the arguments passed to the procedure ($1 \\leq X_ i < N$).\n\nThe third line contains one integer $Q$ ($1 \\leq Q \\leq 10^6$), the number of special parts of the array Mirko needs to check.\n\nThe next $Q$ lines contain two integers each $L_ i$ and $R_ i$ ($0 \\leq L_ i \\leq R_ i < N$), the bounds of each special part.\n\n-----Output-----\nThe output should contain exactly $Q$ lines. The $i$-th line should contain the sum of elements $\\mathtt{seq}[L_ i] + \\mathtt{seq}[L_ i+1] + \\mathtt{seq}[L_ i+2] + \\ldots + \\mathtt{", "QUESTION:\nMirko is trying to debug a piece of his code. First he creates an array of $N$ integers and fills it with zeros. Then he repeatedly calls the following C++ procedure:\n\nvoid something( int jump ) {\n  int i = 0;\n  while( i < N ) { seq[i] = seq[i] + 1; i = i + jump;\n  }\n}\n\nAs you can see, this procedure increases by one all elements in the array whose indices are divisible by jump.\n\nMirko calls the procedure exactly $K$ times, using the sequence $X_1,X_2,X_3, \\ldots , X_ k$ as arguments.\n\nAfter this, Mirko has a list of $Q$ special parts of the array he needs to check to verify that his code is working as it should be. Each of these parts is defined by two numbers, $L$ and $R$ ($L \\leq R$) the left and right bound of the special part. To check the code, Mirko must compute the sum of all elements of seq between and including $L$ and $R$. In other words $\\mathtt{seq}[L] + \\mathtt{seq}[L+1] + \\mathtt{seq}[L+2] + \\ldots + \\mathtt{seq}[R]$. Since he needs to know the answer in advance in order to check it, he asked you to help him.\n\n-----Input-----\nThe first line of input contains two integers, $N$ ($1 \\leq N \\leq 10^6$), the size of the array, and $K$ ($1 \\leq K \\leq 10^6$), the number of calls to something that Mirko makes.\n\nThe second line contains $K$ integers: $X_1,X_2,X_3, \\ldots ,X_ k$, the arguments passed to the procedure ($1 \\leq X_ i < N$).\n\nThe third line contains one integer $Q$ ($1 \\leq Q \\leq 10^6$), the number of special parts of the array Mirko needs to check.\n\nThe next $Q$ lines contain two integers each $L_ i$ and $R_ i$ ($0 \\leq L_ i \\leq R_ i < N$), the bounds of each special part.\n\n-----Output-----\nThe output should contain exactly $Q$ lines. The $i$-th line should contain the sum of elements $\\mathtt{seq}[L_ i] + \\mathtt{seq}[L_ i+1] + \\mathtt{seq}[L_ i+2] + \\ldots + \\mathtt{"], "prompt": "\nQUESTION:\nMirko is trying to debug a piece of his code. First he creates an array of $N$ integers and fills it with zeros. Then he repeatedly calls the following C++ procedure:\n\nvoid something( int jump ) {\n  int i = 0;\n  while( i < N ) { seq[i] = seq[i] + 1; i = i + jump;\n  }\n}\n\nAs you can see, this procedure increases by one all elements in the array whose indices are divisible by jump.\n\nMirko calls the procedure exactly $K$ times, using the sequence $X_1,X_2,X_3, \\ldots , X_ k$ as arguments.\n\nAfter this, Mirko has a list of $Q$ special parts of the array he needs to check to verify that his code is working as it should be. Each of these parts is defined by two numbers, $L$ and $R$ ($L \\leq R$) the left and right bound of the special part. To check the code, Mirko must compute the sum of all elements of seq between and including $L$ and $R$. In other words $\\mathtt{seq}[L] + \\mathtt{seq}[L+1] + \\mathtt{seq}[L+2] + \\ldots + \\mathtt{seq}[R]$. Since he needs to know the answer in advance in order to check it, he asked you to help him.\n\n-----Input-----\nThe first line of input contains two integers, $N$ ($1 \\leq N \\leq 10^6$), the size of the array, and $K$ ($1 \\leq K \\leq 10^6$), the number of calls to something that Mirko makes.\n\nThe second line contains $K$ integers: $X_1,X_2,X_3, \\ldots ,X_ k$, the arguments passed to the procedure ($1 \\leq X_ i < N$).\n\nThe third line contains one integer $Q$ ($1 \\leq Q \\leq 10^6$), the number of special parts of the array Mirko needs to check.\n\nThe next $Q$ lines contain two integers each $L_ i$ and $R_ i$ ($0 \\leq L_ i \\leq R_ i < N$), the bounds of each special part.\n\n-----Output-----\nThe output should contain exactly $Q$ lines. The $i$-th line should contain the sum of elements $\\mathtt{seq}[L_ i] + \\mathtt{seq}[L_ i+1] + \\mathtt{seq}[L_ i+2] + \\ldots + \\mathtt{seq}[R_ i]$.\n\n-----Examples-----\nSample Input 1:\n10 4\n1 1 2 1\n3\n0 9\n2 6\n7 7\nSample Output 1:\n35\n18\n3\n\nSample Input 2:\n11 3\n3 7 10\n3\n0 10\n2 6\n7 7\nSample Output 2:\n8\n2\n1\nPlease provide the solution as pure code only, without explanations or comments.\n\nANSWER:\n```python\n"}}