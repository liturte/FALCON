{"4181": {"code": ["from heapq import *\n\nN = int(input())\nA = list(map(int, input().split()))\nB = list(map(int, input().split()))\n\n# Create a min heap to store the monsters\nmonsters = []\nfor i in range(N+1):\n    heappush(monsters, (A[i], B[i-1]))\n\n# Create a max heap to store the heroes\nheroes = []\nfor i in range(N):\n    heappush(heroes, -B[i])\n\n# The maximum total number of monsters the heroes can defeat\ntotal = 0\n\n# While there are monsters left to defeat\nwhile monsters:\n    monster, limit = heappop(monsters", "import heapq\n\nN = int(input())\nA = list(map(int, input().split()))\nB = list(map(int, input().split()))\n\nmonsters = []\nfor i in range(N+1):\n    heapq.heappush(monsters, (A[i], B[i-1]))\n\nheroes = []\nfor _ in range(N):\n    b = int(input())\n    heapq.heappush(heroes, -b)\n\ntotal = 0\nwhile heroes:\n    b = -heapq.heappop(heroes)\n    a, _ = heapq.heappop(monsters)\n    if a <= b:\n        total += a\n        _, b", "import heapq\n\nN = int(input())\nA = list(map(int, input().split()))\nB = list(map(int, input().split()))\n\nmonsters = []\nfor i in range(N):\n    heapq.heappush(monsters, (A[i], B[i]))\n\nheroes = list(map(int, input().split()))\nheroes.sort()\n\ntotal = 0\nfor hero in heroes:\n    while monsters and monsters[0][0] <= hero:\n        _, b = heapq.heappop(monsters)\n        if monsters and monsters[0][0] <= hero + monsters[0][1]:\n            _, b = heapq.heappop(", "import heapq\n\nN = int(input())\nA = list(map(int, input().split()))\nB = list(map(int, input().split()))\n\nmonsters = []\nfor i in range(N+1):\n    heapq.heappush(monsters, (A[i], B[i]))\n\nheroes = []\nfor _ in range(N):\n    b = int(input())\n    heapq.heappush(heroes, (-b, _))\n\ntotal = 0\nwhile heroes and monsters:\n    b, hero = heapq.heappop(heroes)\n    a, town = heapq.heappop(monsters)\n    total += min(a, -b)", "import heapq\n\nN = int(input())\nA = list(map(int, input().split()))\nB = list(map(int, input().split()))\n\nmonsters = []\nfor i in range(N+1):\n    heapq.heappush(monsters, (A[i], B[i-1]))\n\ntotal_monsters = 0\nwhile monsters:\n    a, b = heapq.heappop(monsters)\n    if b >= a:\n        total_monsters += a\n        if monsters:\n            _, b = heapq.heappop(monsters)\n            total_monsters += min(b, a)\n    else:\n        total_monsters += b\n\nprint("], "prompt": "\nQUESTION:\nThere are N+1 towns. The i-th town is being attacked by A_i monsters.\nWe have N heroes. The i-th hero can defeat monsters attacking the i-th or (i+1)-th town, for a total of at most B_i monsters.\nWhat is the maximum total number of monsters the heroes can cooperate to defeat?\n\n-----Constraints-----\n - All values in input are integers.\n - 1 \\leq N \\leq 10^5\n - 1 \\leq A_i \\leq 10^9\n - 1 \\leq B_i \\leq 10^9\n\n-----Input-----\nInput is given from Standard Input in the following format:\nN\nA_1 A_2 ... A_{N+1}\nB_1 B_2 ... B_N\n\n-----Output-----\nPrint the maximum total number of monsters the heroes can defeat.\n\n-----Sample Input-----\n2\n3 5 2\n4 5\n\n-----Sample Output-----\n9\n\nIf the heroes choose the monsters to defeat as follows, they can defeat nine monsters in total, which is the maximum result.\n - The first hero defeats two monsters attacking the first town and two monsters attacking the second town.\n - The second hero defeats three monsters attacking the second town and two monsters attacking the third town.\nPlease provide the solution as pure code only, without explanations or comments.\n\nANSWER:\n```python\n"}}