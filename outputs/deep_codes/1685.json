{"1685": {"code": ["QUESTION:\nT is a complete binary tree consisting of n vertices. It means that exactly one vertex is a root, and each vertex is either a leaf (and doesn't have children) or an inner node (and has exactly two children). All leaves of a complete binary tree have the same depth (distance from the root). So n is a number such that n + 1 is a power of 2.\n\nIn the picture you can see a complete binary tree with n = 15. [Image] \n\nVertices are numbered from 1 to n in a special recursive way: we recursively assign numbers to all vertices from the left subtree (if current vertex is not a leaf), then assign a number to the current vertex, and then recursively assign numbers to all vertices from the right subtree (if it exists). In the picture vertices are numbered exactly using this algorithm. It is clear that for each size of a complete binary tree exists exactly one way to give numbers to all vertices. This way of numbering is called symmetric.\n\nYou have to write a program that for given n answers q queries to the tree.\n\nEach query consists of an integer number u_{i} (1 \u2264 u_{i} \u2264 n) and a string s_{i}, where u_{i} is the number of vertex, and s_{i} represents the path starting from this vertex. String s_{i} doesn't contain any characters other than 'L', 'R' and 'U', which mean traverse to the left child, to the right child and to the parent, respectively. Characters from s_{i} have to be processed from left to right, considering that u_{i} is the vertex where the path starts. If it's impossible to process a character (for example, to go to the left child of a leaf), then you have to skip it. The answer is the number of vertex where the path represented by s_{i} ends.\n\nFor example, if u_{i} = 4 and s_{i} = \u00abUURL\u00bb, then the answer is 10.\n\n\n-----Input-----\n\nThe first line contains two integer numbers n and q (1 \u2264 n \u2264 10^18, q \u2265 1). n is such that n + 1 is a power of 2.\n\nThe next 2q lines represent queries; each query consists of two consecutive lines. The first of these two lines contains u_{i} (1 \u2264 u_{i} \u2264 n), the second contains non-empty string s_{i}. s_{i} doesn't contain any characters other than 'L', 'R' and 'U'.\n\nIt is guaranteed that the sum of lengths of all", "QUESTION:\nT is a complete binary tree consisting of n vertices. It means that exactly one vertex is a root, and each vertex is either a leaf (and doesn't have children) or an inner node (and has exactly two children). All leaves of a complete binary tree have the same depth (distance from the root). So n is a number such that n + 1 is a power of 2.\n\nIn the picture you can see a complete binary tree with n = 15. [Image] \n\nVertices are numbered from 1 to n in a special recursive way: we recursively assign numbers to all vertices from the left subtree (if current vertex is not a leaf), then assign a number to the current vertex, and then recursively assign numbers to all vertices from the right subtree (if it exists). In the picture vertices are numbered exactly using this algorithm. It is clear that for each size of a complete binary tree exists exactly one way to give numbers to all vertices. This way of numbering is called symmetric.\n\nYou have to write a program that for given n answers q queries to the tree.\n\nEach query consists of an integer number u_{i} (1 \u2264 u_{i} \u2264 n) and a string s_{i}, where u_{i} is the number of vertex, and s_{i} represents the path starting from this vertex. String s_{i} doesn't contain any characters other than 'L', 'R' and 'U', which mean traverse to the left child, to the right child and to the parent, respectively. Characters from s_{i} have to be processed from left to right, considering that u_{i} is the vertex where the path starts. If it's impossible to process a character (for example, to go to the left child of a leaf), then you have to skip it. The answer is the number of vertex where the path represented by s_{i} ends.\n\nFor example, if u_{i} = 4 and s_{i} = \u00abUURL\u00bb, then the answer is 10.\n\n\n-----Input-----\n\nThe first line contains two integer numbers n and q (1 \u2264 n \u2264 10^18, q \u2265 1). n is such that n + 1 is a power of 2.\n\nThe next 2q lines represent queries; each query consists of two consecutive lines. The first of these two lines contains u_{i} (1 \u2264 u_{i} \u2264 n), the second contains non-empty string s_{i}. s_{i} doesn't contain any characters other than 'L', 'R' and 'U'.\n\nIt is guaranteed that the sum of lengths of all", "QUESTION:\nT is a complete binary tree consisting of n vertices. It means that exactly one vertex is a root, and each vertex is either a leaf (and doesn't have children) or an inner node (and has exactly two children). All leaves of a complete binary tree have the same depth (distance from the root). So n is a number such that n + 1 is a power of 2.\n\nIn the picture you can see a complete binary tree with n = 15. [Image] \n\nVertices are numbered from 1 to n in a special recursive way: we recursively assign numbers to all vertices from the left subtree (if current vertex is not a leaf), then assign a number to the current vertex, and then recursively assign numbers to all vertices from the right subtree (if it exists). In the picture vertices are numbered exactly using this algorithm. It is clear that for each size of a complete binary tree exists exactly one way to give numbers to all vertices. This way of numbering is called symmetric.\n\nYou have to write a program that for given n answers q queries to the tree.\n\nEach query consists of an integer number u_{i} (1 \u2264 u_{i} \u2264 n) and a string s_{i}, where u_{i} is the number of vertex, and s_{i} represents the path starting from this vertex. String s_{i} doesn't contain any characters other than 'L', 'R' and 'U', which mean traverse to the left child, to the right child and to the parent, respectively. Characters from s_{i} have to be processed from left to right, considering that u_{i} is the vertex where the path starts. If it's impossible to process a character (for example, to go to the left child of a leaf), then you have to skip it. The answer is the number of vertex where the path represented by s_{i} ends.\n\nFor example, if u_{i} = 4 and s_{i} = \u00abUURL\u00bb, then the answer is 10.\n\n\n-----Input-----\n\nThe first line contains two integer numbers n and q (1 \u2264 n \u2264 10^18, q \u2265 1). n is such that n + 1 is a power of 2.\n\nThe next 2q lines represent queries; each query consists of two consecutive lines. The first of these two lines contains u_{i} (1 \u2264 u_{i} \u2264 n), the second contains non-empty string s_{i}. s_{i} doesn't contain any characters other than 'L', 'R' and 'U'.\n\nIt is guaranteed that the sum of lengths of all", "QUESTION:\nT is a complete binary tree consisting of n vertices. It means that exactly one vertex is a root, and each vertex is either a leaf (and doesn't have children) or an inner node (and has exactly two children). All leaves of a complete binary tree have the same depth (distance from the root). So n is a number such that n + 1 is a power of 2.\n\nIn the picture you can see a complete binary tree with n = 15. [Image] \n\nVertices are numbered from 1 to n in a special recursive way: we recursively assign numbers to all vertices from the left subtree (if current vertex is not a leaf), then assign a number to the current vertex, and then recursively assign numbers to all vertices from the right subtree (if it exists). In the picture vertices are numbered exactly using this algorithm. It is clear that for each size of a complete binary tree exists exactly one way to give numbers to all vertices. This way of numbering is called symmetric.\n\nYou have to write a program that for given n answers q queries to the tree.\n\nEach query consists of an integer number u_{i} (1 \u2264 u_{i} \u2264 n) and a string s_{i}, where u_{i} is the number of vertex, and s_{i} represents the path starting from this vertex. String s_{i} doesn't contain any characters other than 'L', 'R' and 'U', which mean traverse to the left child, to the right child and to the parent, respectively. Characters from s_{i} have to be processed from left to right, considering that u_{i} is the vertex where the path starts. If it's impossible to process a character (for example, to go to the left child of a leaf), then you have to skip it. The answer is the number of vertex where the path represented by s_{i} ends.\n\nFor example, if u_{i} = 4 and s_{i} = \u00abUURL\u00bb, then the answer is 10.\n\n\n-----Input-----\n\nThe first line contains two integer numbers n and q (1 \u2264 n \u2264 10^18, q \u2265 1). n is such that n + 1 is a power of 2.\n\nThe next 2q lines represent queries; each query consists of two consecutive lines. The first of these two lines contains u_{i} (1 \u2264 u_{i} \u2264 n), the second contains non-empty string s_{i}. s_{i} doesn't contain any characters other than 'L', 'R' and 'U'.\n\nIt is guaranteed that the sum of lengths of all", "QUESTION:\nT is a complete binary tree consisting of n vertices. It means that exactly one vertex is a root, and each vertex is either a leaf (and doesn't have children) or an inner node (and has exactly two children). All leaves of a complete binary tree have the same depth (distance from the root). So n is a number such that n + 1 is a power of 2.\n\nIn the picture you can see a complete binary tree with n = 15. [Image] \n\nVertices are numbered from 1 to n in a special recursive way: we recursively assign numbers to all vertices from the left subtree (if current vertex is not a leaf), then assign a number to the current vertex, and then recursively assign numbers to all vertices from the right subtree (if it exists). In the picture vertices are numbered exactly using this algorithm. It is clear that for each size of a complete binary tree exists exactly one way to give numbers to all vertices. This way of numbering is called symmetric.\n\nYou have to write a program that for given n answers q queries to the tree.\n\nEach query consists of an integer number u_{i} (1 \u2264 u_{i} \u2264 n) and a string s_{i}, where u_{i} is the number of vertex, and s_{i} represents the path starting from this vertex. String s_{i} doesn't contain any characters other than 'L', 'R' and 'U', which mean traverse to the left child, to the right child and to the parent, respectively. Characters from s_{i} have to be processed from left to right, considering that u_{i} is the vertex where the path starts. If it's impossible to process a character (for example, to go to the left child of a leaf), then you have to skip it. The answer is the number of vertex where the path represented by s_{i} ends.\n\nFor example, if u_{i} = 4 and s_{i} = \u00abUURL\u00bb, then the answer is 10.\n\n\n-----Input-----\n\nThe first line contains two integer numbers n and q (1 \u2264 n \u2264 10^18, q \u2265 1). n is such that n + 1 is a power of 2.\n\nThe next 2q lines represent queries; each query consists of two consecutive lines. The first of these two lines contains u_{i} (1 \u2264 u_{i} \u2264 n), the second contains non-empty string s_{i}. s_{i} doesn't contain any characters other than 'L', 'R' and 'U'.\n\nIt is guaranteed that the sum of lengths of all"], "prompt": "\nQUESTION:\nT is a complete binary tree consisting of n vertices. It means that exactly one vertex is a root, and each vertex is either a leaf (and doesn't have children) or an inner node (and has exactly two children). All leaves of a complete binary tree have the same depth (distance from the root). So n is a number such that n + 1 is a power of 2.\n\nIn the picture you can see a complete binary tree with n = 15. [Image] \n\nVertices are numbered from 1 to n in a special recursive way: we recursively assign numbers to all vertices from the left subtree (if current vertex is not a leaf), then assign a number to the current vertex, and then recursively assign numbers to all vertices from the right subtree (if it exists). In the picture vertices are numbered exactly using this algorithm. It is clear that for each size of a complete binary tree exists exactly one way to give numbers to all vertices. This way of numbering is called symmetric.\n\nYou have to write a program that for given n answers q queries to the tree.\n\nEach query consists of an integer number u_{i} (1 \u2264 u_{i} \u2264 n) and a string s_{i}, where u_{i} is the number of vertex, and s_{i} represents the path starting from this vertex. String s_{i} doesn't contain any characters other than 'L', 'R' and 'U', which mean traverse to the left child, to the right child and to the parent, respectively. Characters from s_{i} have to be processed from left to right, considering that u_{i} is the vertex where the path starts. If it's impossible to process a character (for example, to go to the left child of a leaf), then you have to skip it. The answer is the number of vertex where the path represented by s_{i} ends.\n\nFor example, if u_{i} = 4 and s_{i} = \u00abUURL\u00bb, then the answer is 10.\n\n\n-----Input-----\n\nThe first line contains two integer numbers n and q (1 \u2264 n \u2264 10^18, q \u2265 1). n is such that n + 1 is a power of 2.\n\nThe next 2q lines represent queries; each query consists of two consecutive lines. The first of these two lines contains u_{i} (1 \u2264 u_{i} \u2264 n), the second contains non-empty string s_{i}. s_{i} doesn't contain any characters other than 'L', 'R' and 'U'.\n\nIt is guaranteed that the sum of lengths of s_{i} (for each i such that 1 \u2264 i \u2264 q) doesn't exceed 10^5.\n\n\n-----Output-----\n\nPrint q numbers, i-th number must be the answer to the i-th query.\n\n\n-----Example-----\nInput\n15 2\n4\nUURL\n8\nLRLLLLLLLL\n\nOutput\n10\n5\nPlease provide the solution as pure code only, without explanations or comments.\n\nANSWER:\n```python\n"}}