{"2691": {"code": ["from collections import defaultdict\n\ndef max_cost(s, p):\n    n = len(s)\n    prefix_sum = defaultdict(int)\n    prefix_sum[0] = 1\n    max_length = 1\n    cur_length = 1\n    for i in range(1, n):\n        if s[i] == s[i-1]:\n            cur_length += 1\n        else:\n            if p > 0:\n                p -= 1\n                cur_length += 1\n            else:\n                max_length = max(max_length, cur_length)\n                cur_length = 1\n        prefix_sum[cur_length] += 1\n    max_length = max(max_length, cur_length", "def maximum_cost(s, p):\n    n = len(s)\n    cost = [0]*n\n    max_cost = 0\n    for i in range(n):\n        j = i\n        while j<n and s[i]==s[j]:\n            j += 1\n        if s[i]=='d':\n            max_cost = max(max_cost, j-i)\n        else:\n            max_cost = max(max_cost, min(j, i+1+p))\n    return max_cost\n\nn, p = map(int, input().split())\ns = input()\nprint(maximum_cost(s, p))\n\n\nPlease provide the solution as pure code", "def maximum_cost(n, p, s):\n    i = 0\n    max_length = 0\n    cost = [0]*n\n    while i < n:\n        j = i\n        while j < n and s[i] == s[j]:\n            j += 1\n        max_length = max(max_length, j-i)\n        if j < n:\n            cost[j] = max(cost[i] + (j-i+1), cost[j-1])\n        else:\n            cost[j-1] = max(cost[i] + (j-i+1), cost[j-1])\n        i = j\n    return min(max_length + p, max(cost))", "from collections import Counter\n\ndef max_cost(s, p):\n    count = Counter(s)\n    return max(min(p, count[c]) for c in count)\n\nn, p = map(int, input().split())\ns = input()\nprint(max_cost(s, p))\n\n\n\nfrom collections import Counter\n\ndef max_cost(s, p):\n    count = Counter(s)\n    return max(min(p, count[c]) for c in count)\n\nn, p = map(int, input().split())\ns = input()\nprint(max_cost(s, p))\n\n\n\nfrom collections import Counter\n\ndef max", "from collections import defaultdict\n\ndef max_substring_length(s, p):\n    n = len(s)\n    max_length = defaultdict(int)\n    max_length[s[0]] = 1\n    cur_max = 1\n    max_cost = 1\n\n    for i in range(1, n):\n        if s[i] == s[i-1]:\n            cur_max += 1\n        else:\n            if p > 0:\n                p -= 1\n                cur_max += 1\n            else:\n                max_length[s[i-1]] = max(max_length[s[i-1]], cur_max)\n                cur_max = max_length[s[i]]"], "prompt": "\nQUESTION:\nTim buy a string of  length N from his friend which consist of  \u2018d\u2019 and \u2018u\u2019 letters only\n,but now Tim wants to sell the string at maximum cost.  \nThe maximum cost of string is defined as the maximum length of a Substring (consecutive subsequence) consisting of equal letters.\nTim can change at most P characters of string (\u2018d\u2019 to \u2018u\u2019   and   \u2018u\u2019 to \u2018d\u2019) you have to find out the maximum cost of string?\n\n-----Input:-----\n- First line will contain $N$ and $P$ .\n- Second line will contain the String $S$.\n\n-----Output:-----\nMaximum cost of string S.\n\n-----Constraints-----\n- $1 \\leq N\\leq 10^5$\n- $0 \\leq P \\leq N$\n\n-----Sample Input 1:-----\n4  2\n$duud$\n\n-----Sample Output 1:-----\n4\n\n-----Sample Input 2 :-----\n10 1\n$dduddudddu$\n\n-----Sample Output 2:-----\n6\n\n-----EXPLANATION:-----\nIn the first sample input , We can obtain both strings $dddd$ and $uuuu$ .\nIn the second sample, the optimal answer is obtained with the string $dddddudd$ or with the string $dduddddd$\nPlease provide the solution as pure code only, without explanations or comments.\n\nANSWER:\n```python\n"}}