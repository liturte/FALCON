{"576": {"code": ["def gcd(a, b):\n    while b:\n        a, b = b, a % b\n    return a\n\ndef lcm(a, b):\n    return a * b // gcd(a, b)\n\ndef solve(n, arr):\n    max_lcm = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            max_lcm = max(max_lcm, lcm(arr[i], arr[j]))\n    return max_lcm\n\nn = int(input())\narr = list(map(int, input().split()))\nprint(solve(n, arr))\n\nThis solution works by iterating over all pairs of elements in the array and calculating their least common multiple (", "def gcd(x, y):\n    while y:\n        x, y = y, x % y\n    return x\n\ndef lcm(x, y):\n    return x * y // gcd(x, y)\n\nn = int(input())\na = list(map(int, input().split()))\n\nmax_lcm = 0\nfor i in range(n):\n    for j in range(i+1, n):\n        max_lcm = max(max_lcm, lcm(a[i], a[j]))\n\nprint(max_lcm)\n\n\nThis solution uses the Euclidean algorithm to find the greatest common divisor (gcd) of two numbers, and then calculates the least common multiple (lcm) by dividing the", "def gcd(x, y):\n    while y:\n        x, y = y, x % y\n    return x\n\ndef lcm(x, y):\n    return x * y // gcd(x, y)\n\ndef solve(n, a):\n    max_lcm = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            max_lcm = max(max_lcm, lcm(a[i], a[j]))\n    return max_lcm\n\nn = int(input())\na = list(map(int, input().split()))\nprint(solve(n, a))\n\n\nThis Python code uses the Euclidean algorithm to calculate the greatest common divisor (gcd) of", "def gcd(a,b):\n    if b==0:\n        return a\n    else:\n        return gcd(b,a%b)\n\ndef lcm(a,b):\n    return a*b//gcd(a,b)\n\nn = int(input())\narr = list(map(int,input().split()))\narr.sort()\n\nmax_lcm = max(lcm(arr[0],arr[1]),lcm(arr[-1],arr[-2]))\n\nfor i in range(1,n-1):\n    max_lcm = max(max_lcm,lcm(arr[i],arr[i+1]))\n    max_lcm = max(max_lcm,lcm(arr[i],", "n = int(input())\na = list(map(int, input().split()))\na.sort()\nprint(max(a[-1]*a[-2], a[0]*a[1]))\n\n\nThis solution works by first sorting the array. The largest two numbers in the array will be at the end of the array, and the smallest two numbers at the beginning. Therefore, the maximum possible LCM of any two numbers in the array will be either the product of the last two numbers in the sorted array (since they are the largest) or the product of the first two numbers in the array (since they are the smallest).\n\nThis solution has a time complexity of O(n log n), due to the sorting operation.\n\nThis solution assumes that the input array will always contain at least two elements."], "prompt": "\nQUESTION:\nGiven an array $a$, consisting of $n$ integers, find:\n\n$$\\max\\limits_{1 \\le i < j \\le n} LCM(a_i,a_j),$$\n\nwhere $LCM(x, y)$ is the smallest positive integer that is divisible by both $x$ and $y$. For example, $LCM(6, 8) = 24$, $LCM(4, 12) = 12$, $LCM(2, 3) = 6$.\n\n\n-----Input-----\n\nThe first line contains an integer $n$ ($2 \\le n \\le 10^5$)\u00a0\u2014 the number of elements in the array $a$.\n\nThe second line contains $n$ integers $a_1, a_2, \\dots, a_n$ ($1 \\le a_i \\le 10^5$)\u00a0\u2014 the elements of the array $a$.\n\n\n-----Output-----\n\nPrint one integer, the maximum value of the least common multiple of two elements in the array $a$.\n\n\n-----Examples-----\nInput\n3\n13 35 77\n\nOutput\n1001\nInput\n6\n1 2 4 8 16 32\n\nOutput\n32\nPlease provide the solution as pure code only, without explanations or comments.\n\nANSWER:\n```python\n"}}