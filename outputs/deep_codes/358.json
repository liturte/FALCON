{"358": {"code": ["import math\n\ndef is_prime(n):\n    if n == 1:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    sqrt_n = math.isqrt(n)\n    for i in range(3, sqrt_n + 1, 2):\n        if n % i == 0:\n            return False\n    return True\n\ndef solve(a, b, k):\n    primes = [is_prime(n) for n in range(a, b + 1)]\n    prefix_sums = [0] * (b - a + 2)\n    for i in range(a, b + 1):\n        prefix_sums[i - a + 1] = prefix_sums[i - a] +", "from math import sqrt\n\ndef sieve(n):\n    is_prime = [True] * (n+1)\n    is_prime[0] = False\n    is_prime[1] = False\n    for i in range(2, int(sqrt(n)) + 1):\n        if is_prime[i]:\n            for j in range(i*i, n + 1, i):\n                is_prime[j] = False\n    return is_prime\n\ndef min_length(a, b, k):\n    primes = sieve(b)\n    count = [0] * (b - a + 1)\n    for i in range(a, b + 1):\n        if primes[i]:\n            count[i - a] = 1\n    for i in range(1, b", "def is_prime(n):\n    if n == 1:\n        return False\n    elif n == 2:\n        return True\n    else:\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\ndef min_length(a, b, k):\n    primes = [is_prime(i) for i in range(a, b+1)]\n    prefix_sums = [0] * (b - a + 2)\n    for i in range(a, b+1):\n        prefix_sums[i-a+1] = prefix_sums[i-a] + (1 if primes[i-a] else 0)\n    min_len = b - a + 1", "import math\n\ndef is_prime(n):\n    if n == 1:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    max_div = math.floor(math.sqrt(n))\n    for i in range(3, 1 + max_div, 2):\n        if n % i == 0:\n            return False\n    return True\n\ndef min_length(a, b, k):\n    primes = [0] * (b - a + 1)\n    for i in range(a, b + 1):\n        primes[i - a] = is_prime(i)\n    for l in range(1, b - a + 2):\n        count = 0\n        for i in range(l):", "import math\n\ndef is_prime(n):\n    if n <= 1:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    sqr = int(math.sqrt(n)) + 1\n    for divisor in range(3, sqr, 2):\n        if n % divisor == 0:\n            return False\n    return True\n\ndef solve(a, b, k):\n    primes = [is_prime(x) for x in range(a, b + 1)]\n    cnt = [0] * (b - a + 1)\n    cnt[0] = primes[0]\n    for i in range(1, b - a + 1):\n        cnt[i] = cnt[i -"], "prompt": "\nQUESTION:\nYou've decided to carry out a survey in the theory of prime numbers. Let us remind you that a prime number is a positive integer that has exactly two distinct positive integer divisors.\n\nConsider positive integers a, a + 1, ..., b (a \u2264 b). You want to find the minimum integer l (1 \u2264 l \u2264 b - a + 1) such that for any integer x (a \u2264 x \u2264 b - l + 1) among l integers x, x + 1, ..., x + l - 1 there are at least k prime numbers. \n\nFind and print the required minimum l. If no value l meets the described limitations, print -1.\n\n\n-----Input-----\n\nA single line contains three space-separated integers a, b, k (1 \u2264 a, b, k \u2264 10^6;\u00a0a \u2264 b).\n\n\n-----Output-----\n\nIn a single line print a single integer \u2014 the required minimum l. If there's no solution, print -1.\n\n\n-----Examples-----\nInput\n2 4 2\n\nOutput\n3\n\nInput\n6 13 1\n\nOutput\n4\n\nInput\n1 4 3\n\nOutput\n-1\nPlease provide the solution as pure code only, without explanations or comments.\n\nANSWER:\n```python\n"}}