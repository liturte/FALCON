{"4891": {"code": ["k, q, r, b, n, p = map(int, input().split())\nprint(1 - k, 1 - q, 2 - r, 2 - b, 2 - n, 8 - p)\n\n\nThis program reads the number of each piece from the input, calculates how many are missing, and prints the result.\n\nThe `map` function applies the `int` function to each item in the input, turning them into integers. The `split` function splits the input on whitespace (by default, it splits on spaces and tabs), and `input().split()` reads a line from the input.\n\nThe print statement prints the number of missing pieces for each type: a king (1 - k), a queen (1 - q), rooks (2 - r), bishops (2 - b), knights (2 - n), and pawns (8 - p).\n\nIf a piece is missing", "def chess_pieces(k, q, r, b, n, p):\n    return [1-k, 1-q, 2-r, 2-b, 2-n, 8-p]\n\nk, q, r, b, n, p = map(int, input().split())\nprint(*chess_pieces(k, q, r, b, n, p))\n\n\nThis program works by first defining a function `chess_pieces` that takes in the number of each type of piece in the set Mirko found, and returns a list of how many pieces of each type he needs to add or remove. It does this by subtracting the number of pieces Mirko already has from the number needed for a valid set. The inputs are then read from the user, and the function is called with these inputs. The result is printed out.\n\nFor example, if Mirko has 0 kings, 1", "def solve(kings, queens, rooks, bishops, knights, pawns):\n    return [1-kings, 1-queens, 2-rooks, 2-bishops, 2-knights, 8-pawns]\n\nkings, queens, rooks, bishops, knights, pawns = map(int, input().split())\nprint(*solve(kings, queens, rooks, bishops, knights, pawns))\n\nThis code first defines a function `solve` that takes the number of each piece as arguments and returns a list of how many pieces Mirko needs to add or remove for each type. The numbers are then read from the input, and the result of `solve` is printed.\n\nThe `*` operator is used to unpack the result of `solve` into individual arguments to `print`,", "def solve(kings, queens, rooks, bishops, knights, pawns):\n    return [1-kings, 1-queens, 2-rooks, 2-bishops, 2-knights, 8-pawns]\n\nkings, queens, rooks, bishops, knights, pawns = map(int, input().split())\nprint(*solve(kings, queens, rooks, bishops, knights, pawns))\n\n\nExplanation:\nThis program is a solution to the problem. It first defines a function `solve` that takes in the number of each type of piece in the set, and returns a list of how many pieces of each type Mirko needs to add or remove. It then reads in the numbers of each type of piece from the input, uses the `solve` function to calculate the number of", "def solve(k, q, r, b, n, p):\n    return [1-k, 1-q, 2-r, 2-b, 2-n, 8-p]\n\nk, q, r, b, n, p = map(int, input().split())\nprint(*solve(k, q, r, b, n, p))\n\n\nThis code defines a function solve that takes in the number of each type of piece in the set Mirko found, and returns a list of how many pieces of each type he needs to add or remove. It then reads in the numbers of pieces from Mirko's set, calls solve with these numbers, and prints the result.\n\nIn the solve function, for each type of piece, it subtracts the number of pieces Mirko found from the number of pieces that should be in a valid set of pieces. If a number is positive, Mirko needs to add that many"], "prompt": "\nQUESTION:\nMirko has found an old chessboard and a set of pieces in his attic. Unfortunately, the set contains only white pieces, and apparently an incorrect number of them. A set of pieces should contain:\n - One king\n - One queen\n - Two rooks\n - Two bishops\n - Two knights\n - Eight pawns\n\nMirko would like to know how many pieces of each type he should add or remove to make a valid set.\n\n-----Input-----\nThe input consists of $6$ integers on a single line, each between $0$ and $10$ (inclusive). The numbers are, in order, the numbers of kings, queens, rooks, bishops, knights and pawns in the set Mirko found.\n\n-----Output-----\nOutput should consist of $6$ integers on a single line; the number of pieces of each type Mirko should add or remove. If a number is positive, Mirko needs to add that many pieces. If a number is negative, Mirko needs to remove pieces.\n\n-----Examples-----\nSample Input:\n0 1 2 2 2 7\nSample Output:\n1 0 0 0 0 1\nPlease provide the solution as pure code only, without explanations or comments.\n\nANSWER:\n```python\n"}}