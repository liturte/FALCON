{"2376": {"code": ["def knapsack(W, wt, val, n):\n    K = [[0 for w in range(W+1)] for i in range(n+1)]\n    for i in range(n+1):\n        for w in range(W+1):\n            if i == 0 or w == 0:\n                K[i][w] = 0\n            elif wt[i-1] <= w:\n                K[i][w] = max(val[i-1] + K[i-1][w-wt[i-1]],  K[i-1][w])\n            else:\n                K[i][w] = K[i-1][w]\n    return K[n][W]", "def knapsack(N, W, items):\n    dp = [0] * (W + 1)\n    for w, v in items:\n        for i in range(W, w - 1, -1):\n            dp[i] = max(dp[i], dp[i - w] + v)\n    return dp[W]\n\nN, W = map(int, input().split())\nitems = [tuple(map(int, input().split())) for _ in range(N)]\nprint(knapsack(N, W, items))\n\n\nThis code uses a dynamic programming approach to solve the knapsack problem. It iteratively builds up a list `dp` of the maximum value that can be", "def knapsack(W, wt, val, n):\n    K = [[0 for w in range(W+1)] for i in range(n+1)]\n    for i in range(n+1):\n        for w in range(W+1):\n            if i == 0 or w == 0:\n                K[i][w] = 0\n            elif wt[i-1] <= w:\n                K[i][w] = max(val[i-1] + K[i-1][w-wt[i-1]],  K[i-1][w])\n            else:\n                K[i][w] = K[i-1][w]\n    return K[n][W]", "def knapsack(W, wt, val, n):\n    K = [[0 for w in range(W+1)]\n            for i in range(n+1)]\n             \n    for i in range(n+1):\n        for w in range(W+1):\n            if i == 0 or w == 0:\n                K[i][w] = 0\n            elif wt[i-1] <= w:\n                K[i][w] = max(val[i-1] + K[i-1][w-wt[i-1]],  K[i-1][w])\n            else:\n                K[i][w] = K[i-1][w]\n \n    return K[", "def knapsack(W, wt, val, n):\n    K = [[0 for w in range(W+1)] for i in range(n+1)]\n    for i in range(n+1):\n        for w in range(W+1):\n            if i == 0 or w == 0:\n                K[i][w] = 0\n            elif wt[i-1] <= w:\n                K[i][w] = max(val[i-1] + K[i-1][w-wt[i-1]],  K[i-1][w])\n            else:\n                K[i][w] = K[i-1][w]\n    return K[n][W]"], "prompt": "\nQUESTION:\nYou have N items and a bag of strength W.\nThe i-th item has a weight of w_i and a value of v_i.\nYou will select some of the items and put them in the bag.\nHere, the total weight of the selected items needs to be at most W.\nYour objective is to maximize the total value of the selected items.\n\n-----Constraints-----\n - 1 \u2264 N \u2264 100\n - 1 \u2264 W \u2264 10^9\n - 1 \u2264 w_i \u2264 10^9\n - For each i = 2,3,...,N, w_1 \u2264 w_i \u2264 w_1 + 3.\n - 1 \u2264 v_i \u2264 10^7\n - W, each w_i and v_i are integers.\n\n-----Input-----\nInput is given from Standard Input in the following format:\nN W\nw_1 v_1\nw_2 v_2\n:\nw_N v_N\n\n-----Output-----\nPrint the maximum possible total value of the selected items.\n\n-----Sample Input-----\n4 6\n2 1\n3 4\n4 10\n3 4\n\n-----Sample Output-----\n11\n\nThe first and third items should be selected.\nPlease provide the solution as pure code only, without explanations or comments.\n\nANSWER:\n```python\n"}}