{"4645": {"code": ["def permutation(n):\n    if n==2:\n        return [", "from collections import deque\n\ndef generate_permutation(n):", "def solve(n):\n    if n < 4:\n        return [-1", "def solve(n):\n    if n == 2 or n == 3:", "def solve(n):\n    if n == 2:\n        return [2"], "prompt": "\nQUESTION:\nA permutation of length $n$ is an array $p=[p_1,p_2,\\dots,p_n]$, which contains every integer from $1$ to $n$ (inclusive) and, moreover, each number appears exactly once. For example, $p=[3,1,4,2,5]$ is a permutation of length $5$.\n\nFor a given number $n$ ($n \\ge 2$), find a permutation $p$ in which absolute difference (that is, the absolute value of difference) of any two neighboring (adjacent) elements is between $2$ and $4$, inclusive. Formally, find such permutation $p$ that $2 \\le |p_i - p_{i+1}| \\le 4$ for each $i$ ($1 \\le i < n$).\n\nPrint any such permutation for the given integer $n$ or determine that it does not exist.\n\n\n-----Input-----\n\nThe first line contains an integer $t$ ($1 \\le t \\le 100$) \u2014 the number of test cases in the input. Then $t$ test cases follow.\n\nEach test case is described by a single line containing an integer $n$ ($2 \\le n \\le 1000$).\n\n\n-----Output-----\n\nPrint $t$ lines. Print a permutation that meets the given requirements. If there are several such permutations, then print any of them. If no such permutation exists, print -1.\n\n\n-----Example-----\nInput\n6\n10\n2\n4\n6\n7\n13\n\nOutput\n9 6 10 8 4 7 3 1 5 2 \n-1\n3 1 4 2 \n5 3 6 2 4 1 \n5 1 3 6 2 4 7 \n13 9 7 11 8 4 1 3 5 2 6 10 12\nPlease provide the solution as pure code only, without explanations or comments.\n\nANSWER:\n```python\n"}}