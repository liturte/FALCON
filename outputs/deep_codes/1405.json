{"1405": {"code": ["def longest_fibonacci_ish_prefix(n, a):\n    fib = [0, 1]\n    while len(fib) <= n + 2:\n        fib.append(fib[-1] + fib[-2])\n    a = [(i, x) for i, x in enumerate(a)]\n    a.sort(key=lambda x: x[1])", "def longest_fib_subsequence(nums):\n    n = len(nums)\n    index = {x: i for i, x in enumerate(nums)}\n    dp = [2] * n\n    for i in range(n):\n        for j in range(i):\n            if nums[i] - nums[j] < nums[j] and nums[i", "def longest_fibonacci_like_prefix(n, seq):\n    seq.sort()\n    fib = [0]*n\n    fib[0] = seq[0]\n    fib[1] = seq[1]\n    i = 2\n    while i < n and fib[i-1] < seq[-1]:\n        fib[i] = fib[i-", "def longest_fib_ish_prefix(n, a):\n    a.sort()\n    fib = [a[0], a[1]]\n    for i in range(2, n):\n        fib.append(fib[-1] + fib[-2])\n        if fib[-1] > a[i]:\n            fib.pop()\n            break\n    return len(fib)\n\nn =", "def longest_fib_subsequence(n, a):\n    s = set(a)\n    dp = [2]*n\n    for i in range(n):\n        if a[i]+2 in s:\n            dp[i] = max(dp[i], 1+dp[a.index(a[i]+2)] if a[i]+2 in a else"], "prompt": "\nQUESTION:\nYash has recently learnt about the Fibonacci sequence and is very excited about it. He calls a sequence Fibonacci-ish if   the sequence consists of at least two elements  f_0 and f_1 are arbitrary  f_{n} + 2 = f_{n} + 1 + f_{n} for all n \u2265 0. \n\nYou are given some sequence of integers a_1, a_2, ..., a_{n}. Your task is rearrange elements of this sequence in such a way that its longest possible prefix is Fibonacci-ish sequence.\n\n\n-----Input-----\n\nThe first line of the input contains a single integer n (2 \u2264 n \u2264 1000)\u00a0\u2014 the length of the sequence a_{i}.\n\nThe second line contains n integers a_1, a_2, ..., a_{n} (|a_{i}| \u2264 10^9).\n\n\n-----Output-----\n\nPrint the length of the longest possible Fibonacci-ish prefix of the given sequence after rearrangement.\n\n\n-----Examples-----\nInput\n3\n1 2 -1\n\nOutput\n3\n\nInput\n5\n28 35 7 14 21\n\nOutput\n4\n\n\n\n-----Note-----\n\nIn the first sample, if we rearrange elements of the sequence as  - 1, 2, 1, the whole sequence a_{i} would be Fibonacci-ish.\n\nIn the second sample, the optimal way to rearrange elements is $7$, $14$, $21$, $35$, 28.\nPlease provide the solution as pure code only, without explanations or comments.\n\nANSWER:\n```python\n"}}