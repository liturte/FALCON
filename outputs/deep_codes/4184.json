{"4184": {"code": ["def min_diff():\n    N = int(input())\n    W = list(map(int, input().split()))\n\n    total_sum = sum(W)\n    min_diff = float('inf')\n\n    for T in range(1, N):\n        S1 = sum(W[:T])\n        S2 = total_sum - S1\n        min_diff = min(min_diff, abs(S1 - S2))\n\n    print(min_diff)\n\nmin_diff()\n\n\nThis solution works by iterating through all possible values of T and calculating the sums S1 and S2 for each. It then keeps track of the minimum absolute difference found.\n\nIt starts by reading the input N and the list of weights W. It then calculates the total sum of all weights. It initializes the minimum difference min_diff to be infinity.\n\nThen it iterates through all possible values of T", "def min_difference(weights):\n    N = weights[0]\n    W = weights[1:]\n    min_diff = float('inf')\n    for T in range(1, N):\n        S1 = sum(W[:T])\n        S2 = sum(W[T:])\n        diff = abs(S1 - S2)\n        if diff < min_diff:\n            min_diff = diff\n    return min_diff\n\nN = int(input())\nweights = list(map(int, input().split()))\nprint(min_difference(weights))\n\n\nEXPLANATION:\nThe code reads the number of weights and the weights themselves from the standard input. It then iterates over all possible values of T, calculating S1 and S2 for each T, and updating the minimum difference encountered so far. Finally, it prints the minimum difference.\n\nThe time complexity of this code", "def min_difference():\n    N = int(input())\n    weights = list(map(int, input().split()))\n    total_weight = sum(weights)\n    min_diff = float('inf')\n    current_weight = 0\n    for i in range(N):\n        current_weight += weights[i]\n        diff = abs(current_weight - (total_weight - current_weight))\n        if diff < min_diff:\n            min_diff = diff\n    return min_diff\n\nprint(min_difference())\n\n\nThis code first reads in the number of weights and the weights themselves. It then calculates the total weight of all the weights. It initializes the minimum difference to infinity and the current weight to 0. It then iterates over all the weights, adding each one to the current weight and calculating the difference between the current weight and the total weight minus the current weight. If this difference is", "def solve():\n    N = int(input())\n    W = list(map(int, input().split()))\n    total = sum(W)\n    min_diff = float('inf')\n    s1 = 0\n    for T in range(1, N):\n        s1 += W[T-1]\n        s2 = total - s1\n        diff = abs(s1 - s2)\n        if diff < min_diff:\n            min_diff = diff\n    print(min_diff)\n\nsolve()\n\n\nThis code works by iterating over all possible values of T (the index of the last weight in the first group), calculating the sums S_1 and S_2, and updating the minimum difference encountered. The minimum difference is the answer to the problem.\n\nThis solution has a time complexity of O(N), because it iterates over the list of weights once. The space complexity is O(N", "def min_difference(N, W):\n    total_sum = sum(W)\n    min_diff = float('inf')\n    left_sum = 0\n    for i in range(N):\n        left_sum += W[i]\n        right_sum = total_sum - left_sum\n        diff = abs(left_sum - right_sum)\n        if diff < min_diff:\n            min_diff = diff\n    return min_diff\n\nN = int(input())\nW = list(map(int, input().split()))\nprint(min_difference(N, W))\n\n\nEXPLANATION:\nThe solution is based on the idea of dynamic programming.\nThe idea is to iterate over all possible division points (T) and calculate the difference of sums of weights in the left and right group. The minimum difference is the answer.\nThe time complexity of this solution is O(N),"], "prompt": "\nQUESTION:\nWe have N weights indexed 1 to N. The mass of the weight indexed i is W_i.\nWe will divide these weights into two groups: the weights with indices not greater than T, and those with indices greater than T, for some integer 1 \\leq T < N. Let S_1 be the sum of the masses of the weights in the former group, and S_2 be the sum of the masses of the weights in the latter group.\nConsider all possible such divisions and find the minimum possible absolute difference of S_1 and S_2.\n\n-----Constraints-----\n - 2 \\leq N \\leq 100\n - 1 \\leq W_i \\leq 100\n - All values in input are integers.\n\n-----Input-----\nInput is given from Standard Input in the following format:\nN\nW_1 W_2 ... W_{N-1} W_N\n\n-----Output-----\nPrint the minimum possible absolute difference of S_1 and S_2.\n\n-----Sample Input-----\n3\n1 2 3\n\n-----Sample Output-----\n0\n\nIf T = 2, S_1 = 1 + 2 = 3 and S_2 = 3, with the absolute difference of 0.\nPlease provide the solution as pure code only, without explanations or comments.\n\nANSWER:\n```python\n"}}