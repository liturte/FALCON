{"750": {"code": ["def solve():\n    n, k = map(int, input().split())\n    r, n = divmod(n*2, 8)\n    g, n = divmod(n*5, 8)\n    b, n = divmod(n*8, 8)\n    print((r+1)*(g+1)*(b+1))\n\nsolve()\n\n\nThis code uses the built-in `divmod` function to divide the number of friends by 8, keeping track of the remainder. This is because each notebook can cover 8 friends. The number of notebooks required for each color is the quotient plus one (rounding up) if there is a remainder. The total", "import math\n\nn, k = map(int, input().split())\nprint(math.ceil(n/2)*2*k + math.ceil(n/5)*5*k + math.ceil(n/8)*8*k)\n\n\nEXPLANATION:\nWe are asked to calculate the minimum number of notebooks Petya needs to buy. Each notebook contains $k$ sheets. We have $2$ friends for each red notebook, $5$ for green, and $8$ for blue.\n\nWe calculate the total number of required sheets by dividing the total number of friends by the number of sheets per notebook and then rounding up to the nearest whole number (because we can't buy", "n, k = map(int, input().split())\nprint((2 * n * k + 4 * k - 1) // (2 * k) * 2 + (5 * n * k + 4 * k - 1) // (5 * k) * 2 + (8 * n * k + 7 * k - 1) // (8 * k))\n\n\nEXPLANATION:\nWe calculate the number of notebooks needed for each color separately and then sum them up. The `//` operator is used for integer division. The multiplication by `2` is done to account for the fact that we need two sheets for each invitation. The `-1` is used to account for the fact that we start with one", "def min_notebooks(n, k):\n    total_sheets = n * (2 + 5 + 8)\n    notebooks = total_sheets // (2 * k)\n    if total_sheets % (2 * k) != 0:\n        notebooks += 1\n    return notebooks\n\nn, k = map(int, input().split())\nprint(min_notebooks(n, k))\n\n\nThis code defines a function min_notebooks that calculates the minimum number of notebooks Petya needs to buy to invite all his friends. The function takes two arguments: the number of friends and the number of sheets in each notebook. It calculates the total number of sheets needed by multip", "def invite_friends(n, k):\n    # Calculate the number of friends\n    red_friends = n // 2\n    green_friends = n // 5\n    blue_friends = n // 8\n\n    # Calculate the number of notebooks needed for each color\n    red_notebooks = (red_friends + k - 1) // k\n    green_notebooks = (green_friends + k - 1) // k\n    blue_notebooks = (blue_friends + k - 1) // k\n\n    # Return the total number of notebooks\n    return red_notebooks + green_notebooks + blue_notebooks\n\n# Read the input\nn, k = map"], "prompt": "\nQUESTION:\nPetya is having a party soon, and he has decided to invite his $n$ friends.\n\nHe wants to make invitations in the form of origami. For each invitation, he needs two red sheets, five green sheets, and eight blue sheets. The store sells an infinite number of notebooks of each color, but each notebook consists of only one color with $k$ sheets. That is, each notebook contains $k$ sheets of either red, green, or blue.\n\nFind the minimum number of notebooks that Petya needs to buy to invite all $n$ of his friends.\n\n\n-----Input-----\n\nThe first line contains two integers $n$ and $k$ ($1\\leq n, k\\leq 10^8$)\u00a0\u2014 the number of Petya's friends and the number of sheets in each notebook respectively.\n\n\n-----Output-----\n\nPrint one number\u00a0\u2014 the minimum number of notebooks that Petya needs to buy.\n\n\n-----Examples-----\nInput\n3 5\n\nOutput\n10\n\nInput\n15 6\n\nOutput\n38\n\n\n\n-----Note-----\n\nIn the first example, we need $2$ red notebooks, $3$ green notebooks, and $5$ blue notebooks.\n\nIn the second example, we need $5$ red notebooks, $13$ green notebooks, and $20$ blue notebooks.\nPlease provide the solution as pure code only, without explanations or comments.\n\nANSWER:\n```python\n"}}