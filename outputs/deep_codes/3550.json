{"3550": {"code": ["QUESTION:\nIn the 21st century, Hunters are expected to master programming languages, in order to effectively gather information on the Internet.\n\nGon is currently learning NenScript\u00a0\u2014 the most popular programming language amongst Hunters.\n\nToday, Gon is learning variables. In NenScript, a variable always stores a string of zero or more characters, each character is any of the following: lowercase and uppercase English letters, digits, space and special characters: [email\u00a0protected]#$%^&*()-_=+. In this problem, we call these characters good characters. The name of every variable only consists of lowercase English letters, and underscore (_). The length of a variable name is between $1$ and $10$, inclusive.\n\nIn order to use a variable, first we need to declare it. The syntax of the declaration is as below:\n\nvar <name> = <value>;\n\nHere <name> is the name of the variable you want to declare, and <value> is an expression which denotes the string assigned to this variable. There are $3$ types of expression in NenScript:\n - Variable name, which means that the value equals to some previously declared variable.\n - String literal, which explicitly states the value by putting its sequence of characters in quotes.\n - Template literal, which allows you to create a string based on values of other variables by embedding expressions.\n\nIn a template literal, embedded expressions are calculated, then concatented with other parts to create a string. Template literals are enclosed by back-tick (`) and contain several (possibly zero) string expressions. String expressions are put inside curly braces following a dollar sign (${expression}). In other words, a template literal is an expression of the form `$S_1\\$ \\{ E_1\\} S_2\\$ \\{ E_2\\} \\ldots S_ n\\$ \\{ E_ n\\} S_{n+1}$`, where $n \\ge 0$. For every valid $i$, $S_ i$ is a string consisting of zero or more good characters, and $E_ i$ is an expression.\n\nLet\u2019s take an example:\n\nvar a = \"Gon\";\nvar b = a;\nvar c = `My name is ${a}`;\n\nHere, the values of a, b and c are \u201cGon\u201d, \u201cGon\u201d and \u201cMy name is Gon\u201d, respectively. Note that quotes are for clarity only, no vairable\u2019s value contains any quotes.\n\nTemplate literals can be nested, in other words, there can be a template literal inside a template literal. For example:\n\nvar a =", "QUESTION:\nIn the 21st century, Hunters are expected to master programming languages, in order to effectively gather information on the Internet.\n\nGon is currently learning NenScript\u00a0\u2014 the most popular programming language amongst Hunters.\n\nToday, Gon is learning variables. In NenScript, a variable always stores a string of zero or more characters, each character is any of the following: lowercase and uppercase English letters, digits, space and special characters: [email\u00a0protected]#$%^&*()-_=+. In this problem, we call these characters good characters. The name of every variable only consists of lowercase English letters, and underscore (_). The length of a variable name is between $1$ and $10$, inclusive.\n\nIn order to use a variable, first we need to declare it. The syntax of the declaration is as below:\n\nvar <name> = <value>;\n\nHere <name> is the name of the variable you want to declare, and <value> is an expression which denotes the string assigned to this variable. There are $3$ types of expression in NenScript:\n - Variable name, which means that the value equals to some previously declared variable.\n - String literal, which explicitly states the value by putting its sequence of characters in quotes.\n - Template literal, which allows you to create a string based on values of other variables by embedding expressions.\n\nIn a template literal, embedded expressions are calculated, then concatented with other parts to create a string. Template literals are enclosed by back-tick (`) and contain several (possibly zero) string expressions. String expressions are put inside curly braces following a dollar sign (${expression}). In other words, a template literal is an expression of the form `$S_1\\$ \\{ E_1\\} S_2\\$ \\{ E_2\\} \\ldots S_ n\\$ \\{ E_ n\\} S_{n+1}$`, where $n \\ge 0$. For every valid $i$, $S_ i$ is a string consisting of zero or more good characters, and $E_ i$ is an expression.\n\nLet\u2019s take an example:\n\nvar a = \"Gon\";\nvar b = a;\nvar c = `My name is ${a}`;\n\nHere, the values of a, b and c are \u201cGon\u201d, \u201cGon\u201d and \u201cMy name is Gon\u201d, respectively. Note that quotes are for clarity only, no vairable\u2019s value contains any quotes.\n\nTemplate literals can be nested, in other words, there can be a template literal inside a template literal. For example:\n\nvar a =", "QUESTION:\nIn the 21st century, Hunters are expected to master programming languages, in order to effectively gather information on the Internet.\n\nGon is currently learning NenScript\u00a0\u2014 the most popular programming language amongst Hunters.\n\nToday, Gon is learning variables. In NenScript, a variable always stores a string of zero or more characters, each character is any of the following: lowercase and uppercase English letters, digits, space and special characters: [email\u00a0protected]#$%^&*()-_=+. In this problem, we call these characters good characters. The name of every variable only consists of lowercase English letters, and underscore (_). The length of a variable name is between $1$ and $10$, inclusive.\n\nIn order to use a variable, first we need to declare it. The syntax of the declaration is as below:\n\nvar <name> = <value>;\n\nHere <name> is the name of the variable you want to declare, and <value> is an expression which denotes the string assigned to this variable. There are $3$ types of expression in NenScript:\n - Variable name, which means that the value equals to some previously declared variable.\n - String literal, which explicitly states the value by putting its sequence of characters in quotes.\n - Template literal, which allows you to create a string based on values of other variables by embedding expressions.\n\nIn a template literal, embedded expressions are calculated, then concatented with other parts to create a string. Template literals are enclosed by back-tick (`) and contain several (possibly zero) string expressions. String expressions are put inside curly braces following a dollar sign (${expression}). In other words, a template literal is an expression of the form `$S_1\\$ \\{ E_1\\} S_2\\$ \\{ E_2\\} \\ldots S_ n\\$ \\{ E_ n\\} S_{n+1}$`, where $n \\ge 0$. For every valid $i$, $S_ i$ is a string consisting of zero or more good characters, and $E_ i$ is an expression.\n\nLet\u2019s take an example:\n\nvar a = \"Gon\";\nvar b = a;\nvar c = `My name is ${a}`;\n\nHere, the values of a, b and c are \u201cGon\u201d, \u201cGon\u201d and \u201cMy name is Gon\u201d, respectively. Note that quotes are for clarity only, no vairable\u2019s value contains any quotes.\n\nTemplate literals can be nested, in other words, there can be a template literal inside a template literal. For example:\n\nvar a =", "QUESTION:\nIn the 21st century, Hunters are expected to master programming languages, in order to effectively gather information on the Internet.\n\nGon is currently learning NenScript\u00a0\u2014 the most popular programming language amongst Hunters.\n\nToday, Gon is learning variables. In NenScript, a variable always stores a string of zero or more characters, each character is any of the following: lowercase and uppercase English letters, digits, space and special characters: [email\u00a0protected]#$%^&*()-_=+. In this problem, we call these characters good characters. The name of every variable only consists of lowercase English letters, and underscore (_). The length of a variable name is between $1$ and $10$, inclusive.\n\nIn order to use a variable, first we need to declare it. The syntax of the declaration is as below:\n\nvar <name> = <value>;\n\nHere <name> is the name of the variable you want to declare, and <value> is an expression which denotes the string assigned to this variable. There are $3$ types of expression in NenScript:\n - Variable name, which means that the value equals to some previously declared variable.\n - String literal, which explicitly states the value by putting its sequence of characters in quotes.\n - Template literal, which allows you to create a string based on values of other variables by embedding expressions.\n\nIn a template literal, embedded expressions are calculated, then concatented with other parts to create a string. Template literals are enclosed by back-tick (`) and contain several (possibly zero) string expressions. String expressions are put inside curly braces following a dollar sign (${expression}). In other words, a template literal is an expression of the form `$S_1\\$ \\{ E_1\\} S_2\\$ \\{ E_2\\} \\ldots S_ n\\$ \\{ E_ n\\} S_{n+1}$`, where $n \\ge 0$. For every valid $i$, $S_ i$ is a string consisting of zero or more good characters, and $E_ i$ is an expression.\n\nLet\u2019s take an example:\n\nvar a = \"Gon\";\nvar b = a;\nvar c = `My name is ${a}`;\n\nHere, the values of a, b and c are \u201cGon\u201d, \u201cGon\u201d and \u201cMy name is Gon\u201d, respectively. Note that quotes are for clarity only, no vairable\u2019s value contains any quotes.\n\nTemplate literals can be nested, in other words, there can be a template literal inside a template literal. For example:\n\nvar a =", "QUESTION:\nIn the 21st century, Hunters are expected to master programming languages, in order to effectively gather information on the Internet.\n\nGon is currently learning NenScript\u00a0\u2014 the most popular programming language amongst Hunters.\n\nToday, Gon is learning variables. In NenScript, a variable always stores a string of zero or more characters, each character is any of the following: lowercase and uppercase English letters, digits, space and special characters: [email\u00a0protected]#$%^&*()-_=+. In this problem, we call these characters good characters. The name of every variable only consists of lowercase English letters, and underscore (_). The length of a variable name is between $1$ and $10$, inclusive.\n\nIn order to use a variable, first we need to declare it. The syntax of the declaration is as below:\n\nvar <name> = <value>;\n\nHere <name> is the name of the variable you want to declare, and <value> is an expression which denotes the string assigned to this variable. There are $3$ types of expression in NenScript:\n - Variable name, which means that the value equals to some previously declared variable.\n - String literal, which explicitly states the value by putting its sequence of characters in quotes.\n - Template literal, which allows you to create a string based on values of other variables by embedding expressions.\n\nIn a template literal, embedded expressions are calculated, then concatented with other parts to create a string. Template literals are enclosed by back-tick (`) and contain several (possibly zero) string expressions. String expressions are put inside curly braces following a dollar sign (${expression}). In other words, a template literal is an expression of the form `$S_1\\$ \\{ E_1\\} S_2\\$ \\{ E_2\\} \\ldots S_ n\\$ \\{ E_ n\\} S_{n+1}$`, where $n \\ge 0$. For every valid $i$, $S_ i$ is a string consisting of zero or more good characters, and $E_ i$ is an expression.\n\nLet\u2019s take an example:\n\nvar a = \"Gon\";\nvar b = a;\nvar c = `My name is ${a}`;\n\nHere, the values of a, b and c are \u201cGon\u201d, \u201cGon\u201d and \u201cMy name is Gon\u201d, respectively. Note that quotes are for clarity only, no vairable\u2019s value contains any quotes.\n\nTemplate literals can be nested, in other words, there can be a template literal inside a template literal. For example:\n\nvar a ="], "prompt": "\nQUESTION:\nIn the 21st century, Hunters are expected to master programming languages, in order to effectively gather information on the Internet.\n\nGon is currently learning NenScript\u00a0\u2014 the most popular programming language amongst Hunters.\n\nToday, Gon is learning variables. In NenScript, a variable always stores a string of zero or more characters, each character is any of the following: lowercase and uppercase English letters, digits, space and special characters: [email\u00a0protected]#$%^&*()-_=+. In this problem, we call these characters good characters. The name of every variable only consists of lowercase English letters, and underscore (_). The length of a variable name is between $1$ and $10$, inclusive.\n\nIn order to use a variable, first we need to declare it. The syntax of the declaration is as below:\n\nvar <name> = <value>;\n\nHere <name> is the name of the variable you want to declare, and <value> is an expression which denotes the string assigned to this variable. There are $3$ types of expression in NenScript:\n - Variable name, which means that the value equals to some previously declared variable.\n - String literal, which explicitly states the value by putting its sequence of characters in quotes.\n - Template literal, which allows you to create a string based on values of other variables by embedding expressions.\n\nIn a template literal, embedded expressions are calculated, then concatented with other parts to create a string. Template literals are enclosed by back-tick (`) and contain several (possibly zero) string expressions. String expressions are put inside curly braces following a dollar sign (${expression}). In other words, a template literal is an expression of the form `$S_1\\$ \\{ E_1\\} S_2\\$ \\{ E_2\\} \\ldots S_ n\\$ \\{ E_ n\\} S_{n+1}$`, where $n \\ge 0$. For every valid $i$, $S_ i$ is a string consisting of zero or more good characters, and $E_ i$ is an expression.\n\nLet\u2019s take an example:\n\nvar a = \"Gon\";\nvar b = a;\nvar c = `My name is ${a}`;\n\nHere, the values of a, b and c are \u201cGon\u201d, \u201cGon\u201d and \u201cMy name is Gon\u201d, respectively. Note that quotes are for clarity only, no vairable\u2019s value contains any quotes.\n\nTemplate literals can be nested, in other words, there can be a template literal inside a template literal. For example:\n\nvar a = \"Gon\";\nvar b = `My name ${`is ${a}`}`;\n\nIn this example, \u201c \u2018is ${a}\u2018 \u201d, whose value is \u201cis Gon\u201d, acts as an embedded expression of the template literal assigned to variable b. The value of b is \u201cMy name is Gon\u201d.\n\nYour task is to read a sequence of commands in NenScript, each of them is either a variable declaration, as explained above; or a print request, which is in the following form, where <expr> is an expression:\n\nprint <expr>;\n\nFor each print request, print the value of the given expression.\n\n-----Input-----\nThe input consists of several lines, each is either a variable declaration or a print request, as explained above. It is guaranteed all variables are neither declared twice, nor used before being declared. The input is terminated by a line with exactly one word \u201cend.\u201d. The total length of all lines does not exceed $10^4$.\n\n-----Output-----\nFor each print request, print on a separate line the value of the corresponding expression. It is guaranteed that you have to print at least $1$ and at most $10^4$ characters. Please be aware that we use the case sensitive and space change sensitive checker.\n\n-----Examples-----\nSample Input:\nvar a = \"Gon\";\nvar b = a;\nvar c = `My name is ${a}`;\nprint c;\nprint `My name is ${b}`;\nend.\nSample Output:\nMy name is Gon\nMy name is Gon\nPlease provide the solution as pure code only, without explanations or comments.\n\nANSWER:\n```python\n"}}