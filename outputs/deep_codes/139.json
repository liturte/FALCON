{"139": {"code": ["from collections import defaultdict\n\ndef solve():\n    n, m = map(int, input().split())\n    graph = defaultdict(list)\n    for _ in range(m):\n        u, v = map(int, input().", "from collections import defaultdict\n\ndef solve():\n    n, m = map(int, input().split())\n    edges = defaultdict(list)\n    for _ in range(m):\n        u, v = map(int, input().", "import sys\nfrom collections import defaultdict\n\ndef read_data():\n    n, m = map(int, sys.stdin.readline().split())\n    graph = defaultdict(list)\n    for _ in range(m):", "import sys\nfrom collections import defaultdict\n\ndef read_data():\n    n, m = map(int, sys.stdin.readline().split())\n    graph = defaultdict(list)\n    for _ in range(m):", "from collections import defaultdict\n\ndef is_cyclic_util(v, visited, stack, graph):\n    visited[v] = True\n    stack[v] = True\n    if v in graph:\n        for neighbour in graph["], "prompt": "\nQUESTION:\nYou are given a directed graph consisting of n vertices and m edges (each edge is directed, so it can be traversed in only one direction). You are allowed to remove at most one edge from it.\n\nCan you make this graph acyclic by removing at most one edge from it? A directed graph is called acyclic iff it doesn't contain any cycle (a non-empty path that starts and ends in the same vertex).\n\n\n-----Input-----\n\nThe first line contains two integers n and m (2 \u2264 n \u2264 500, 1 \u2264 m \u2264 min(n(n - 1), 100000)) \u2014 the number of vertices and the number of edges, respectively.\n\nThen m lines follow. Each line contains two integers u and v denoting a directed edge going from vertex u to vertex v (1 \u2264 u, v \u2264 n, u \u2260 v). Each ordered pair (u, v) is listed at most once (there is at most one directed edge from u to v).\n\n\n-----Output-----\n\nIf it is possible to make this graph acyclic by removing at most one edge, print YES. Otherwise, print NO.\n\n\n-----Examples-----\nInput\n3 4\n1 2\n2 3\n3 2\n3 1\n\nOutput\nYES\n\nInput\n5 6\n1 2\n2 3\n3 2\n3 1\n2 1\n4 5\n\nOutput\nNO\n\n\n\n-----Note-----\n\nIn the first example you can remove edge $2 \\rightarrow 3$, and the graph becomes acyclic.\n\nIn the second example you have to remove at least two edges (for example, $2 \\rightarrow 1$ and $2 \\rightarrow 3$) in order to make the graph acyclic.\nPlease provide the solution as pure code only, without explanations or comments.\n\nANSWER:\n```python\n"}}