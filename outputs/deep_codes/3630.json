{"3630": {"code": ["def min_moves(s1, s2):\n    s1, s2 = '#'+s1, '#'+s2\n    n, res = len(s1), 0\n    for i in range(1, n):", "def min_moves(s1, s2):\n    n = len(s1)\n    s1 = list(s1)\n    s2 = list(s2)\n    moves = 0\n\n    for i in range(n):", "def min_moves(s1, s2):\n    s1, s2 = '#' + s1, '#' + s2\n    moves = 0\n    for i in range(1, len(s1)):\n        diff = ord(", "def min_moves(s1, s2):\n    n = len(s1)\n    s1 = list(s1)\n    s2 = list(s2)\n    forward = [0] * 26\n    backward = [", "def min_moves(s1, s2):\n    n = len(s1)\n    s1 = list(s1)\n    s2 = list(s2)\n    forward = [0]*n\n    backward = [0]"], "prompt": "\nQUESTION:\n\u017dofka invented a new word puzzle. She gives you two strings $s_1$ and $s_2$ of the same length. You need to modify $s_1$ into $s_2$ as quickly as possible. The trick is that you are allowed to modify the strings only using the following types of moves: (1) shift forward where you choose a substring of one of the strings and shift each of its letters by 1 forward in the alphabet, or (2) shift backward where you shift each letter in a substring backward in the alphabet. The first move is not allowed if the substring contains the letter z while the second move is not allowed if the subtring contains a. What is the smallest number of moves you need to modify $s_1$ into $s_2$?\n\n-----Input-----\nEach word puzzle is described on a single line that contains the strings $s_1$ and $s_2$ separated by space. The strings contain only lower case letters. You may also assume that the length of each string is at most $10000000$.\n\n-----Output-----\nOutput one line with the smallest number of moves needed to modify $s_1$ into $s_2$.\n\n-----Note-----\nThe first sample input can be modified in the following way. First shift lo forward, getting helmp. Then shift h forward 12 times, getting telmp. Then shift l 11 times backward to get teamp and then shift p forward three times to get teams. Total number of moves is $1+12+11+3=27$.\n\nThe second sample input can be modified as follows. First shift the entire string forward, getting bbdddbbbb. Then shift ddd backward twice to get bbbbbbbbb. This requires 1+2=3 moves.\n\n-----Examples-----\nSample Input:\nhello teams\nSample Output:\n27\nPlease provide the solution as pure code only, without explanations or comments.\n\nANSWER:\n```python\n"}}