{"1573": {"code": ["n, d = map", "def max_friendship", "n, d = map", "from operator import itemget", "import sys\ninput ="], "prompt": "\nQUESTION:\nKefa wants to celebrate his first big salary by going to restaurant. However, he needs company. \n\nKefa has n friends, each friend will agree to go to the restaurant if Kefa asks. Each friend is characterized by the amount of money he has and the friendship factor in respect to Kefa. The parrot doesn't want any friend to feel poor compared to somebody else in the company (Kefa doesn't count). A friend feels poor if in the company there is someone who has at least d units of money more than he does. Also, Kefa wants the total friendship factor of the members of the company to be maximum. Help him invite an optimal company!\n\n\n-----Input-----\n\nThe first line of the input contains two space-separated integers, n and d (1 \u2264 n \u2264 10^5, $1 \\leq d \\leq 10^{9}$) \u2014 the number of Kefa's friends and the minimum difference between the amount of money in order to feel poor, respectively.\n\nNext n lines contain the descriptions of Kefa's friends, the (i + 1)-th line contains the description of the i-th friend of type m_{i}, s_{i} (0 \u2264 m_{i}, s_{i} \u2264 10^9) \u2014 the amount of money and the friendship factor, respectively. \n\n\n-----Output-----\n\nPrint the maximum total friendship factir that can be reached.\n\n\n-----Examples-----\nInput\n4 5\n75 5\n0 100\n150 20\n75 1\n\nOutput\n100\n\nInput\n5 100\n0 7\n11 32\n99 10\n46 8\n87 54\n\nOutput\n111\n\n\n\n-----Note-----\n\nIn the first sample test the most profitable strategy is to form a company from only the second friend. At all other variants the total degree of friendship will be worse.\n\nIn the second sample test we can take all the friends.\nPlease provide the solution as pure code only, without explanations or comments.\n\nANSWER:\n```python\n"}}