{"2492": {"code": ["import sys\n\nN, K = map(int, sys.stdin.readline().split())\nA = sorted(list(map(int, sys.stdin.readline().split())))\n\ndef kth_number(N, K, A):\n    left, right = -10**9 - 1, 10**9 + 1\n    while left + 1 < right:\n        mid = (left + right) // 2\n        if count(mid, A) >= K:\n            right = mid\n        else:\n            left = mid\n    return right\n\ndef count(x, A):\n    cnt = 0\n    j = len(A) - 1\n    for i in range(len(A)):\n        while j >= 0 and A", "from heapq import nsmallest\n\nN, K, *A = map(int, open(0).read().split())\nprint(nsmallest(K, (a*b for a in A for b in A if a != b), n=K)[-1])\n\n\nThis Python code uses the heapq module's nsmallest function to find the Kth smallest number in a list of products of all pairs of distinct numbers in A. It uses list comprehension to generate all possible products and the if condition to exclude pairs of the same number. The result is printed to the standard output.\n\nThis solution assumes that the input is provided in the same format as described in the problem statement. It reads the input from the standard input, splits it into separate values, and stores them in variables N, K", "import sys\n\nN, K = map(int, sys.stdin.readline().split())\nA = sorted(list(map(int, sys.stdin.readline().split())))\n\nlo, hi = -10**18, 10**18\nwhile hi - lo > 1:\n    mid = (lo + hi) // 2\n    cnt = 0\n    j = N - 1\n    for i in range(N):\n        while j >= 0 and A[i] * A[j] > mid: j -= 1\n        cnt += N - 1 - max(i, j)\n    if cnt >= K: hi = mid\n    else: lo = mid\n\nprint(hi)\n\n\nThis code uses binary", "import sys\n\nN, K = map(int, sys.stdin.readline().split())\nA = sorted(list(map(int, sys.stdin.readline().split())))\n\ndef check(mid):\n    cnt = 0\n    for i in range(N):\n        l = i + 1\n        r = N - 1\n        while l <= r:\n            md = (l + r) // 2\n            if A[md] * A[i] <= mid:\n                cnt += md - i\n                l = md + 1\n            else:\n                r = md - 1\n    return cnt\n\nleft = -10**18\nright = 10**18\nwhile left <= right:\n    mid = (left", "from sys import stdin\nfrom bisect import bisect_left, bisect_right\n\nN, K = map(int, stdin.readline().split())\nA = sorted(map(int, stdin.readline().split()))\n\nlo, hi = -10**9-1, 10**9+1\n\ndef count(x):\n    cnt = 0\n    for i in range(N):\n        if A[i] > 0:\n            cnt += bisect_right(A, x // A[i]) - i - 1\n        else:\n            cnt += bisect_left(A, x // A[i]) - i\n    return cnt\n\nwhile hi - lo > 1:\n    mid = (lo + hi)"], "prompt": "\nQUESTION:\nWe have N integers A_1, A_2, ..., A_N.\nThere are \\frac{N(N-1)}{2} ways to choose two of them and form a pair. If we compute the product of each of those pairs and sort the results in ascending order, what will be the K-th number in that list?\n\n-----Constraints-----\n - All values in input are integers.\n - 2 \\leq N \\leq 2 \\times 10^5\n - 1 \\leq K \\leq \\frac{N(N-1)}{2}\n - -10^9 \\leq A_i \\leq 10^9\\ (1 \\leq i \\leq N)\n\n-----Input-----\nInput is given from Standard Input in the following format:\nN K\nA_1 A_2 \\dots A_N\n\n-----Output-----\nPrint the answer.\n\n-----Sample Input-----\n4 3\n3 3 -4 -2\n\n-----Sample Output-----\n-6\n\nThere are six ways to form a pair. The products of those pairs are 9, -12, -6, -12, -6, 8.\nSorting those numbers in ascending order, we have -12, -12, -6, -6, 8, 9. The third number in this list is -6.\nPlease provide the solution as pure code only, without explanations or comments.\n\nANSWER:\n```python\n"}}