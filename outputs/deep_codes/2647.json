{"2647": {"code": ["from collections import deque\n\ndef max_score(grid):\n    H, W = len(grid), len(grid[0])\n    visited = [[0]*W for _ in range(H)]\n    score = [[0]*W for _ in range(H)]\n    moves = [(0, 1), (1, 0), (-1, 0), (0, -1)]\n    q = deque()\n\n    # Initialize the queue with the start position and set visited and score to 0\n    q.append((0, 0))\n    visited[0][0] = 1\n\n    # BFS\n    while q:\n        x, y", "from heapq import heappop, heappush\n\ndef solve(h, w, s):\n    INF = 10 ** 18\n    dp = [[INF] * w for _ in range(h)]\n    dp[h - 1][w - 1] = 0\n    que = [(0, h - 1, w - 1)]\n    dx = [0, 1, 0, -1]\n    dy = [1, 0, -1, 0]\n\n    while que:\n        cost, x, y = heappop(que)\n        if (x, y) == (0, 0): return cost", "from heapq import heappop, heappush\ndef solve(H, W, s):\n    d = [(0, 0, 0), (1, 0, 1), (0, 1, 1), (-1, 0, 2), (0, -1, 2)]\n    q, v, ans = [(0, 0, 0)], [[0]*W for _ in range(H)], 0\n    for h, r in enumerate(s):\n        for w, c in enumerate(r):\n            if c == '#': v[h][w] = 1\n    while q:\n        c, h", "from heapq import heappop, heappush\n\ndef solve(H, W, s):\n    INF = float('inf')\n    dp = [[INF]*W for _ in range(H)]\n    dp[H-1][W-1] = 0\n    heap = [(0, H-1, W-1)]\n    while heap:\n        cost, x, y = heappop(heap)\n        if (x, y) == (0, 0):\n            return cost\n        if dp[x][y] < cost:\n            continue\n        for dx, dy in [(-1, 0), (1, 0),", "from collections import deque\n\ndef bfs(grid, start, end):\n    queue = deque([[start]])\n    seen = set([start])\n    while queue:\n        path = queue.popleft()\n        x, y = path[-1]\n        if (x, y) == end:\n            return path\n        for x2, y2 in ((x+1,y), (x-1,y), (x,y+1), (x,y-1)):\n            if 0 <= x2 < len(grid) and 0 <= y2 < len(grid[0]) and grid[x2][y2] != '#' and ("], "prompt": "\nQUESTION:\nWe have an H \\times W grid whose squares are painted black or white. The square at the i-th row from the top and the j-th column from the left is denoted as (i, j).\nSnuke would like to play the following game on this grid. At the beginning of the game, there is a character called Kenus at square (1, 1). The player repeatedly moves Kenus up, down, left or right by one square. The game is completed when Kenus reaches square (H, W) passing only white squares.\nBefore Snuke starts the game, he can change the color of some of the white squares to black. However, he cannot change the color of square (1, 1) and (H, W). Also, changes of color must all be carried out before the beginning of the game.\nWhen the game is completed, Snuke's score will be the number of times he changed the color of a square before the beginning of the game. Find the maximum possible score that Snuke can achieve, or print -1 if the game cannot be completed, that is, Kenus can never reach square (H, W) regardless of how Snuke changes the color of the squares.  \nThe color of the squares are given to you as characters s_{i, j}. If square (i, j) is initially painted by white, s_{i, j} is .; if square (i, j) is initially painted by black, s_{i, j} is #.\n\n\nPlease provide the solution as pure code only, without explanations or comments.\n\nANSWER:\n```python\n"}}