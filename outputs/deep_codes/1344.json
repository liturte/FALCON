{"1344": {"code": ["n = int(input())\narr = list(map(int, input().split()))\n\nmax_len = 1\ncur_len = 1\n\nfor i in range(1, n):\n    if arr[i] > arr[i-1]:\n        cur_len += 1\n        max_len = max(max_len, cur_len)\n    else:\n        cur_len = 1\n\nprint(max_len)\n\n\nThis code works by iterating through the input array, and for each element, it checks if the current element is greater than the previous one. If it is, it increments the current length of the increasing subarray, and updates the maximum length if necessary. If the current element is not greater than the previous one, it resets the current length to 1. At the end, it prints the maximum length of an increasing subarray.\n\nThis code runs in O(n) time complexity, where n is the size of the input array.\n\nThis code is written in Python and is provided as pure code only.\n\nNote: This code assumes", "def max_increasing_subarray(arr):\n    n = len(arr)\n    max_length = 1\n    current_length = 1\n\n    for i in range(1, n):\n        if arr[i] > arr[i-1]:\n            current_length += 1\n            max_length = max(max_length, current_length)\n        else:\n            current_length = 1\n\n    return max_length\n\nn = int(input())\narr = list(map(int, input().split()))\nprint(max_increasing_subarray(arr))\n\n\nThe function `max_increasing_subarray` calculates the maximum length of an increasing subarray in a given list. It uses a sliding window approach to keep track of the current length of an increasing subarray and updates it whenever it encounters a number greater than the previous one. The maximum length of the subarray is updated at each step. The function returns the maximum length of an increasing subarray. The input is read from the standard input and the result is printed to the standard output", "def max_increasing_subarray(arr):\n    n = len(arr)\n    max_len = 1\n    curr_len = 1\n    for i in range(1, n):\n        if arr[i] > arr[i-1]:\n            curr_len += 1\n            max_len = max(max_len, curr_len)\n        else:\n            curr_len = 1\n    return max_len\n\nn = int(input().strip())\narr = list(map(int, input().strip().split()))\nprint(max_increasing_subarray(arr))\n\n\nThis code works by iterating over the array and checking if the current element is greater than the previous one. If it is, it increments the current length of the subarray. If not, it resets the current length to 1. The maximum length of the subarray is updated with the current length at each step. Finally, it returns the maximum length of the subarray.", "n = int(input())\narr = list(map(int, input().split()))\n\nmax_len = 1\ncur_len = 1\nfor i in range(1, n):\n    if arr[i] > arr[i-1]:\n        cur_len += 1\n        max_len = max(max_len, cur_len)\n    else:\n        cur_len = 1\n\nprint(max_len)\n\n\nThis solution works by iterating through the array. If the current element is greater than the previous one, we increment the current length and update the maximum length if necessary. If the current element is not greater than the previous one, we reset the current length to 1.\n\nThe time complexity of this solution is O(n), where n is the size of the array, and the space complexity is O(1), since we only use a constant amount of extra space.\n\nThe provided solution is in Python.", "n = int(input())\narr = list(map(int, input().split()))\n\nmax_len = 1\ncur_len = 1\nfor i in range(1, n):\n    if arr[i] > arr[i-1]:\n        cur_len += 1\n        max_len = max(max_len, cur_len)\n    else:\n        cur_len = 1\n\nprint(max_len)\n\n\nThis python code reads the number of elements and the elements themselves. It then iterates over the elements, checking if each one is greater than the previous one. If it is, it increments the current length and updates the maximum length if necessary. If it's not, it resets the current length to 1. Finally, it prints the maximum length."], "prompt": "\nQUESTION:\nYou are given array consisting of n integers. Your task is to find the maximum length of an increasing subarray of the given array.\n\nA subarray is the sequence of consecutive elements of the array. Subarray is called increasing if each element of this subarray strictly greater than previous.\n\n\n-----Input-----\n\nThe first line contains single positive integer n (1 \u2264 n \u2264 10^5) \u2014 the number of integers.\n\nThe second line contains n positive integers a_1, a_2, ..., a_{n} (1 \u2264 a_{i} \u2264 10^9).\n\n\n-----Output-----\n\nPrint the maximum length of an increasing subarray of the given array.\n\n\n-----Examples-----\nInput\n5\n1 7 2 11 15\n\nOutput\n3\n\nInput\n6\n100 100 100 100 100 100\n\nOutput\n1\n\nInput\n3\n1 2 3\n\nOutput\n3\nPlease provide the solution as pure code only, without explanations or comments.\n\nANSWER:\n```python\n"}}