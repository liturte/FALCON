{"787": {"code": ["def solve(k, q):\n    if len(set(q[:k])) != k:\n        return \"NO\"\n    return \"YES\\n\" + \"\\n\".join(q[i:i+k] for i in range(0, len(q), k))\n\nk = int(input())\nq = input()\nprint(solve(k, q))\n\n\nThis program works by first checking if the first k characters of the string q are distinct. If they are not, it returns \"NO\". Otherwise, it returns \"YES\" and then prints the string q split", "def beautiful_sequence(k, q):\n    if k > len(set(q)):\n        return \"NO\"\n    else:\n        return \"YES\\n\" + \"\\n\".join(q[i] for i in range(k))\n\nprint(beautiful_sequence(int(input()), input()))\n\nThis Python code works by first checking if the number of distinct characters in the string q is less than or equal to k. If it is, then a beautiful sequence can be formed, and the function returns \"YES\" followed by the k strings from q. If the number of distinct characters in", "def solve(k, q):\n    if k > len(set(q)):\n        return 'NO'\n    else:\n        return 'YES'\n\nk = int(input())\nq = input()\nprint(solve(k, q))\n\n\n\ndef solve(k, q):\n    if k > len(set(q)):\n        return 'NO'\n    else:\n        return 'YES'\n\nk = int(input())\nq = input()\nprint(solve(k, q))\n\n\n\ndef solve", "def beautiful_strings(k, q):\n    if k > len(set(q)):\n        return \"NO\"\n    return \"YES\\n\" + \"\\n\".join([chr(97+i) + q[i:i+1] for i in range(k)])\n\nprint(beautiful_strings(int(input()), input()))\n\n\nThis Python solution starts by checking if the number of distinct characters in the string q is greater than k. If it is, it means there is no way to form a beautiful sequence, so it returns \"NO\". If the number of distinct characters", "def beautiful_sequence(k, q):\n    if k > len(set(q)):\n        return 'NO'\n    else:\n        return 'YES'\n\nk = int(input())\nq = input()\nprint(beautiful_sequence(k, q))\n\n\n\n\ndef beautiful_sequence(k, q):\n    if k > len(set(q)):\n        return 'NO'\n    else:\n        return 'YES', [ch for ch in q]\n\nk = int(input())\nq = input()\nresult = beautiful_sequence"], "prompt": "\nQUESTION:\nYou are given a string q. A sequence of k strings s_1, s_2, ..., s_{k} is called beautiful, if the concatenation of these strings is string q (formally, s_1 + s_2 + ... + s_{k} = q) and the first characters of these strings are distinct.\n\nFind any beautiful sequence of strings or determine that the beautiful sequence doesn't exist.\n\n\n-----Input-----\n\nThe first line contains a positive integer k (1 \u2264 k \u2264 26) \u2014 the number of strings that should be in a beautiful sequence. \n\nThe second line contains string q, consisting of lowercase Latin letters. The length of the string is within range from 1 to 100, inclusive.\n\n\n-----Output-----\n\nIf such sequence doesn't exist, then print in a single line \"NO\" (without the quotes). Otherwise, print in the first line \"YES\" (without the quotes) and in the next k lines print the beautiful sequence of strings s_1, s_2, ..., s_{k}.\n\nIf there are multiple possible answers, print any of them.\n\n\n-----Examples-----\nInput\n1\nabca\n\nOutput\nYES\nabca\n\nInput\n2\naaacas\n\nOutput\nYES\naaa\ncas\n\nInput\n4\nabc\n\nOutput\nNO\n\n\n\n-----Note-----\n\nIn the second sample there are two possible answers: {\"aaaca\", \"s\"} and {\"aaa\", \"cas\"}.\nPlease provide the solution as pure code only, without explanations or comments.\n\nANSWER:\n```python\n"}}