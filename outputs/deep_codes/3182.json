{"3182": {"code": ["from collections import defaultdict\nfrom math import sqrt\n\ndef distance_square(x1, y1, x2, y2):\n    return (x1 - x2)**2 + (y1 - y2)**2\n\ndef solve(n, points):\n    distances = defaultdict(int)\n    for i in range(n):\n        for j in range(i+1, n):\n            d = distance_square(*points[i], *points[j])\n            distances[d] += 1\n    return sum(distances[d] * (distances[d] - 1) // 2 for d in distances if d > 0)\n\nn = int(input())\npoints = [tuple(map(int, input().split())) for _ in range(n)]\nprint(solve(n, points))\n\n\nThis code uses a brute force approach to calculate the square of the distance between all pairs of points. It then counts the number of pairs of points that have the same distance, and uses the formula for the number of ways to choose 2 points from n (n choose 2)", "from collections import defaultdict\n\ndef right_triangles(points):\n    distances = defaultdict(set)\n    count = 0\n    for i in range(len(points)):\n        for j in range(i+1, len(points)):\n            distance = (points[i][0]-points[j][0])**2 + (points[i][1]-points[j][1])**2\n            distances[distance].add((points[i], points[j]))\n    for key in sorted(distances.keys()):\n        for pair in distances[key]:\n            for other in distances[key]:\n                if pair[0] == other[1] or pair[1] == other[0]:\n                    count += 1\n    return count//2\n\nN = int(input())\npoints = [tuple(map(int, input().split())) for _ in range(N)]\nprint(right_triangles(points))\n\n\nThis program works by calculating the distance between each pair of points and storing them in a dictionary. Then, for each distance, it checks if there are any pairs of points that can", "import sys\nfrom collections import defaultdict\n\ndef distance_squared(x1, y1, x2, y2):\n    return (x1 - x2) ** 2 + (y1 - y2) ** 2\n\ndef solve(points):\n    distances = defaultdict(int)\n    for i in range(len(points)):\n        for j in range(i + 1, len(points)):\n            distances[distance_squared(*points[i], *points[j])] += 1\n    return sum(v * (v - 1) * (v - 2) // 6 for v in distances.values())\n\nN = int(sys.stdin.readline())\npoints = [tuple(map(int, sys.stdin.readline().split())) for _ in range(N)]\nprint(solve(points))\n\nThe solution uses the properties of a Pythagorean triple to calculate the distance between each pair of points. If the distance between two points is equal to the square of the distance between the other two points, then they form a right triangle. The number", "from collections import defaultdict\n\ndef solve(n, points):\n    distances = defaultdict(int)\n    for i in range(n):\n        for j in range(i + 1, n):\n            distance = (points[i][0] - points[j][0])**2 + (points[i][1] - points[j][1])**2\n            distances[(i, j)] = distance\n            distances[(j, i)] = distance\n\n    right_triangles = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                sides = sorted([distances[(i, j)], distances[(j, k)], distances[(i, k)]])\n                if sides[0] + sides[1] == sides[2]:\n                    right_triangles += 1\n    return right_triangles\n\nn = int(input())\npoints = [tuple(map(int, input().split())) for _ in range(n)]\nprint(solve(n, points))\n\n\nThis code", "import sys\nfrom collections import defaultdict\n\ndef solve():\n    N = int(input().strip())\n    points = [list(map(int, input().strip().split())) for _ in range(N)]\n    dist2 = lambda x1, y1, x2, y2: (x1 - x2) ** 2 + (y1 - y2) ** 2\n    d2 = defaultdict(set)\n    for i in range(N):\n        for j in range(i + 1, N):\n            d2[(i, j)] = dist2(*points[i], *points[j])\n    d2 = sorted(d2.items(), key=lambda x: x[1])\n    cnt = defaultdict(int)\n    for (i, j), d2_ in d2:\n        for k in range(N):\n            if k != i and k != j:\n                if dist2(*points[i], *points[k]) in d2_ * 2:\n                    cnt[i, j, k] = 1\n    ans = 0"], "prompt": "\nQUESTION:\n$N$ points are placed in the coordinate plane.\n\nWrite a program which calculates in how many ways a right triangle can be formed by three of the given points. A right triangle is one in which one of the angles is $90$ degrees.\n\n-----Input-----\nThe first line of input contains an integer $N$ ($3 \\le N \\le 1500$), the number of points.\n\nEach of the following $N$ lines contains the coordinates of one point, two integers separated by a space. The coordinates will be between $-10^9$ and $10^9$.\n\nNo two points will be located at the same coordinates.\n\n-----Output-----\nOutput the number of right triangles.\n\n-----Examples-----\nSample Input 1:\n3\n4 2\n2 1\n1 3\nSample Output 1:\n1\n\nSample Input 2:\n4\n5 0\n2 6\n8 6\n5 7\nSample Output 2:\n0\nPlease provide the solution as pure code only, without explanations or comments.\n\nANSWER:\n```python\n"}}