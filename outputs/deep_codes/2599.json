{"2599": {"code": ["def sum_of_digits(n):\n    return sum(map(int, str(n)))\n\ndef smallest_number(n, k):\n    if n > 9 * k:\n        return -1\n    x = n\n    while True:\n        if sum(sum_of_digits(i) for i in range(x, x+k+1)) == n:\n            return x\n        x += 1\n\nt = int(input().strip())\nfor _ in range(t):\n    n, k = map(int, input().strip().split())\n    print(smallest_number(n, k))\n\n\nThis code works by first defining a helper function `sum_of_digits` that returns the sum of the digits of a number. It then defines a function `", "from itertools import count\n\ndef sum_of_digits(x):\n    return sum(int(digit) for digit in str(x))\n\ndef find_x(n, k):\n    for x in count():\n        if sum(sum_of_digits(i) for i in range(x, x + k)) == n:\n            return x\n    return -1\n\nt = int(input())\nfor _ in range(t):\n    n, k = map(int, input().split())\n    print(find_x(n, k))\n\nThis code works by iterating over all positive integers starting from 0 and checking if the sum of the sum of digits of all numbers from $x$ to $x + k$ is equal to $n$. If it is,", "def f(x):\n    return sum(map(int, str(x)))\n\ndef solve(n, k):\n    x = 0\n    while True:\n        if sum(f(x + i) for i in range(k + 1)) == n:\n            return x\n        x += 1\n        if x > 10**18:\n            return -1\n\nt = int(input())\nfor _ in range(t):\n    n, k = map(int, input().split())\n    print(solve(n, k))\n\n\nThis Python script defines a function `f(x)` to calculate the sum of digits of a number `x` and a function `solve(n, k)` to find the smallest non-negative integer `x` such that `f(", "from itertools import count\n\ndef f(x):\n    return sum(map(int, str(x)))\n\ndef solve(n, k):\n    for x in count():\n        if sum(f(x + i) for i in range(k + 1)) == n:\n            return x\n\nt = int(input())\nfor _ in range(t):\n    n, k = map(int, input().split())\n    print(solve(n, k))\n\n\nThis program works by iterating over all non-negative integers starting from 0 and checking if the sum of the digits of each number in the range from $x$ to $x + k$ is equal to $n$. If it is, the program returns the current number. If it doesn't find a match, it continues", "from collections import deque\n\ndef digit_sum(n):\n    return sum(map(int, str(n)))\n\ndef solve(n, k):\n    if n > 9 * k:\n        return -1\n    q = deque([(0, 0)])\n    while q:\n        cur, i = q.popleft()\n        if i == k and sum(map(digit_sum, range(cur, cur + k))) == n:\n            return cur\n        if i < k:\n            q.append((cur + 1, i + 1))\n            if cur > 0:\n                q.append((cur * 10, i + 1))\n    return -1\n\nt = int(input())\nfor _ in range(t):\n    n, k ="], "prompt": "\nQUESTION:\nLet $f(x)$ be the sum of digits of a decimal number $x$.\n\nFind the smallest non-negative integer $x$ such that $f(x) + f(x + 1) + \\dots + f(x + k) = n$.\n\n\n-----Input-----\n\nThe first line contains one integer $t$ ($1 \\le t \\le 150$) \u2014 the number of test cases.\n\nEach test case consists of one line containing two integers $n$ and $k$ ($1 \\le n \\le 150$, $0 \\le k \\le 9$). \n\n\n-----Output-----\n\nFor each test case, print one integer without leading zeroes. If there is no such $x$ that $f(x) + f(x + 1) + \\dots + f(x + k) = n$, print $-1$; otherwise, print the minimum $x$ meeting that constraint.\n\n\n-----Example-----\nInput\n7\n1 0\n1 1\n42 7\n13 7\n99 1\n99 0\n99 2\n\nOutput\n1\n0\n4\n-1\n599998\n99999999999\n7997\nPlease provide the solution as pure code only, without explanations or comments.\n\nANSWER:\n```python\n"}}