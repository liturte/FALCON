{"2830": {"code": ["from queue import Queue\n\ndef bfs(grid, n, m):\n    dx = [0, 1, 0, -1]\n    dy = [1, 0, -1, 0]\n    visited = [[False for _ in range(m)] for _ in range(n)]\n    q = Queue()\n    q.put((0, 0, grid[0][", "from collections import deque\n\ndef bfs(grid, n, m):\n    moves = [(0, 1), (0, -1), (1, 0), (-1, 0)]\n    visited = [[0]*m for _ in range(n)]\n    q = deque([(0, 0, int(grid[0][0]), 0)])\n    visited", "from heapq import heappop, heappush\n\ndef min_moves(grid):\n    n, m = len(grid), len(grid[0])\n    moves = [[float('inf')] * m for _ in range(n)]\n    moves[0][0] = 0\n    heap = [(0, 0, 0)]\n    while heap:\n        cost, x,", "from queue import Queue\n\ndef min_moves(grid, n, m):\n    dx = [-1, 0, 1, 0]\n    dy = [0, 1, 0, -1]\n    visited = [[False]*m for _ in range(n)]\n    q = Queue()\n    q.put((0, 0, int(grid[0][", "from queue import Queue\n\ndef min_moves(grid, n, m):\n    moves = [(0,1), (0,-1), (1,0), (-1,0)]\n    visited = [[0]*m for _ in range(n)]\n    q = Queue()\n    q.put((0,0,grid[0][0],0))\n    visited[0]["], "prompt": "\nQUESTION:\nYou are on an $n \\times m$ grid where each square on the grid has a digit on it. From a given square that has digit $k$ on it, a Move consists of jumping exactly $k$ squares in one of the four cardinal directions. A move cannot go beyond the edges of the grid; it does not wrap. What is the minimum number of moves required to get from the top-left corner to the bottom-right corner?\n\n-----Input-----\nEach input will consist of a single test case. Note that your program may be run multiple times on different inputs. The first line of input contains two space-separated integers $n$ and $m$ ($1 \\le n, m \\le 500$), indicating the size of the grid. It is guaranteed that at least one of $n$ and $m$ is greater than $1$.\n\nThe next $n$ lines will each consist of $m$ digits, with no spaces, indicating the $n \\times m$ grid. Each digit is between 0 and 9, inclusive.\n\nThe top-left corner of the grid will be the square corresponding to the first character in the first line of the test case. The bottom-right corner of the grid will be the square corresponding to the last character in the last line of the test case.\n\n-----Output-----\nOutput a single integer on a line by itself representing the minimum number of moves required to get from the top-left corner of the grid to the bottom-right. If it isn\u2019t possible, output -1.\n\n-----Examples-----\nSample Input 1:\n2 2\n11\n11\nSample Output 1:\n2\n\nSample Input 2:\n2 2\n22\n22\nSample Output 2:\n-1\nPlease provide the solution as pure code only, without explanations or comments.\n\nANSWER:\n```python\n"}}