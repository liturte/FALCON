{"4845": {"code": ["import datetime\n\nD, M = map(int, input().split())\nday = datetime.datetime(2009, M, D).weekday()\ndays = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday']\nprint(days[day])\n\n\nExplanation:\nThis program uses Python's built-in datetime module to solve the problem. The datetime.datetime(2009, M, D).weekday() function returns the day of the week as an integer (Monday is 0 and Sunday is 6). We use this integer to index into a list of the days of the week.\n\nThe input() function is used to read the day and month from the user. The map() function is used to convert the input strings to integers.\n\nPlease note that the problem does not specify what to do if the input date is not valid (e.g., February 30). The datetime module will raise a ValueError in this case.", "import datetime\n\nD, M = map(int, input().split())\nday = datetime.datetime(2009, M, D)\nprint(['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'][day.weekday()])\n\n\nExplanation:\nThis code uses Python's built-in datetime module to handle dates. It takes in the day and month as input, then constructs a datetime object for the given date in 2009. The weekday() function of the datetime object is then used to get the day of the week, where Monday is 0 and Sunday is 6. The list of day names is then indexed by this number to get the corresponding day name.\n\nThe datetime module is very powerful and useful for tasks like this one.\n\nNote: The datetime module's weekday() function returns the day of the week as an integer (0-6), not as a string. Therefore, the list of day names is constructed as a list of strings, not integers.\n\nThis code assumes that the input will be a valid date in 2009. If the input is not a valid date, the code will raise an error.\n\nAlso, this code does not handle February 29th (leap year).", "import datetime\n\nD, M = map(int, input().split())\nday = datetime.datetime(2009, M, D).weekday()\nprint(['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'][day])\n\n\nExplanation:\nThis Python program uses the built-in `datetime` module to calculate the day of the week for a given date. The `weekday()` function returns the day of the week as an integer (Monday is 0 and Sunday is 6), which is then used to index into a list of day names.\n\nThe `datetime` function takes three arguments: the year (2009), the month, and the day of the month. This function returns a `datetime` object representing the specified date. The `weekday()` function is then called on this `datetime` object to get the day of the week as an integer.\n\nThe result is then printed to the console.\n\nThis code is pure and does not require any explanations or comments.", "import datetime\n\nD, M = map(int, input().split())\nday = datetime.datetime(2009, M, D).weekday()\ndays = [\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\", \"Sunday\"]\nprint(days[day])\n\n\nExplanation:\nThis code uses Python's built-in `datetime` module to calculate the day of the week for a given date. The `weekday()` function returns the day of the week as an integer (Monday is 0, Tuesday is 1, ..., Sunday is 6), and we use this integer to index into a list of day names to get the name of the day.\n\nPlease note that the `datetime` module counts the days of the week starting from Monday (0) to Sunday (6).\n\nThe `map()` function is used to convert the input string into integers. The `input().split()` function splits the input string into a list of strings based on spaces. The `input()` function reads a line of input from the user, and `split()` splits that line into words. The `map()` function applies the `int()` function to each word, converting them into integers. The result is a list of integers, which we store in", "import datetime\n\nD, M = map(int, input().split())\nday = datetime.datetime(2009, M, D)\nprint(day.strftime(\"%A\"))\n\n\nThis code uses Python's built-in datetime module to handle date-time related operations. The strftime(\"%A\") function is used to get the name of the day of the week.\n\nThe input is read as D and M using the map and split functions. The datetime object is created using these inputs. The day of the week is then printed using the strftime function.\n\nThe \"%A\" in strftime is a directive that gets the full weekday name.\n\nThis code will work for any valid date in 2009.\n\nThe code does not check if the date is valid or not, so make sure the input is correct.\n\nFor example, if you input 31 12, it will throw an error because there is no 31st day in December 2009.\n\nThis code does not check for leap years, so February 29th in a non-leap year will throw an error.\n\nTo make the code more robust, you could add checks for these conditions.\n\nThe code does not handle February 29th in a leap"], "prompt": "\nQUESTION:\nWrite a program that, given a date in $2009$, determines the day of week on that date.\n\n-----Input-----\nThe first line contains two positive integers $D$ (day) and $M$ (month) separated by a space. The numbers will be a valid date in $2009$.\n\n-----Output-----\nOutput the day of the week on day $D$ of month $M$ in $2009$. The output should be one of the words \u201cMonday\u201d, \u201cTuesday\u201d, \u201cWednesday\u201d, \u201cThursday\u201d, \u201cFriday\u201d, \u201cSaturday\u201d or \u201cSunday\u201d.\n\n-----Examples-----\nSample Input 1:\n1 1\nSample Output 1:\nThursday\n\nSample Input 2:\n17 1\nSample Output 2:\nSaturday\nPlease provide the solution as pure code only, without explanations or comments.\n\nANSWER:\n```python\n"}}