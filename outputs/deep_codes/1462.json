{"1462": {"code": ["from collections import Counter\n\nn, k = map(int, input().split())\ncards = input()\n\ncount = Counter(cards)\nletters = sorted(count.keys())\n\ncoins = 0\nfor letter in letters:\n    if k == 0:\n        break\n    c = min(k, count[letter])\n    coins += c * ord(letter) - c\n    k -= c\n\nprint(coins)\n\n\nThis python code uses the Counter class from the collections module to count the number of occurrences of each letter in the input string. It then sorts the letters alphabetically. The coins are calculated by iterating over the sorted list of letters, and for each letter,", "from collections import Counter\n\nn, k = map(int, input().split())\ncards = input()\n\ncounter = Counter(cards[:k])\nmax_count = max(counter.values())\n\nprint(sum(map(lambda x: x * (x + 1) // 2, counter.values())) - max_count * max_count)\n\n\nEXPLANATION:\nThis solution uses the Counter class from the collections module to count the frequency of each character in the first k cards. Then it calculates the maximum number of coins that can be obtained by choosing a card with the same letter as the most frequent one. This is done by summing the frequencies of all cards and subtracting the square of the maximum frequency", "from collections import Counter\n\ndef max_coins(n, k, cards):\n    counter = Counter(cards[:k])\n    max_coins = sum(min(counter[card], k) for card in counter)\n    for i in range(k, n):\n        if counter[cards[i-k]] == 1:\n            del counter[cards[i-k]]\n        else:\n            counter[cards[i-k]] -= 1\n        counter[cards[i]] += 1\n        max_coins = max(max_coins, sum(min(counter[card], k) for card in counter))\n    return max_coins\n\nn, k = map(", "from collections import Counter\n\nn, k = map(int, input().split())\ncards = input()\n\ncounts = Counter(cards)\nletters = sorted(counts.keys())\n\ncoins = 0\nfor letter in letters:\n    if k >= counts[letter]:\n        coins += counts[letter]\n        k -= counts[letter]\n    else:\n        coins += k\n        k = 0\n    if k == 0:\n        break\n\nprint(coins)\n\n\nThis solution works by first counting the occurrences of each letter using a Counter. Then it sorts these counts in ascending order. It iterates over these counts, adding the count to the total coins and subt", "n, k = map(int, input().split())\ncards = input()\n\nfreq = [0]*26\nfor card in cards:\n    freq[ord(card) - ord('A')] += 1\n\nfreq.sort(reverse=True)\n\nprint(sum(freq[:k]))\n\n\nEXPLANATION:\nThe problem can be solved by using a frequency array to count the frequency of each uppercase letter in the cards. Then, the problem can be solved by greedily choosing the k cards with the highest frequencies. The frequency array is sorted in descending order and the k highest frequencies are added together.\n\nThe code uses the ord function to convert a character to its ASCII value,"], "prompt": "\nQUESTION:\nAppleman has n cards. Each card has an uppercase letter written on it. Toastman must choose k cards from Appleman's cards. Then Appleman should give Toastman some coins depending on the chosen cards. Formally, for each Toastman's card i you should calculate how much Toastman's cards have the letter equal to letter on ith, then sum up all these quantities, such a number of coins Appleman should give to Toastman.\n\nGiven the description of Appleman's cards. What is the maximum number of coins Toastman can get?\n\n\n-----Input-----\n\nThe first line contains two integers n and k (1 \u2264 k \u2264 n \u2264 10^5). The next line contains n uppercase letters without spaces \u2014 the i-th letter describes the i-th card of the Appleman.\n\n\n-----Output-----\n\nPrint a single integer \u2013 the answer to the problem.\n\n\n-----Examples-----\nInput\n15 10\nDZFDFZDFDDDDDDF\n\nOutput\n82\n\nInput\n6 4\nYJSNPI\n\nOutput\n4\n\n\n\n-----Note-----\n\nIn the first test example Toastman can choose nine cards with letter D and one additional card with any letter. For each card with D he will get 9 coins and for the additional card he will get 1 coin.\nPlease provide the solution as pure code only, without explanations or comments.\n\nANSWER:\n```python\n"}}