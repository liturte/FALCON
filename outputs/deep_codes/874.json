{"874": {"code": ["n = int(input())\nif n == 1:\n    print(-1)\nelse:\n    print(*[i for i in range(2, n+1)] + [1])\n\n\nThis Python code works by first checking if the input number `n` is 1. If `n` is 1, it prints -1 because a permutation of size 1 does not exist. If `n` is greater than 1, it prints a list of integers from 2 to `n` (exclusive) followed by 1. This results in a perfect permutation of size `n`.\n\nThe `*` operator is", "def perfect_permutation(n):\n    if n == 1:\n        return -1\n    else:\n        return [2, 1] + [i for i in range(3, n+1)]\n\nn = int(input())\nprint(*perfect_permutation(n))\n\n\nThis code will generate a perfect permutation of size n if it exists, otherwise it will return -1. The perfect permutation is generated by starting with [2, 1] and then appending the remaining numbers in the range from 3 to n+1.\n\nFor example, for n = 4, the output will be", "n = int(input())\nif n == 1:\n    print(-1)\nelse:\n    print(\" \".join(str(i) for i in list(range(2, n+1)) + [1]))\n\nThis code works by first checking if n is 1. If it is, it prints -1 and returns. If n is not 1, it creates a list of numbers from 2 to n (inclusive) and then appends 1 to the end of the list. It then joins the list into a string with spaces between each number and prints the string.\n\nThe list(range(2, n+1))", "n = int(input())\nif n == 1:\n    print(-1)\nelse:\n    print(*[i for i in range(2, n+1)] + [1])\n\n\nThis code first checks if the input is 1. If it is, it prints -1 because a permutation of size 1 doesn't exist. If the input is not 1, it prints a permutation of size n that is perfect by creating a list of numbers from 2 to n and appending 1 to the end. The * operator is used to unpack the list of numbers.", "n = int(input())\nif n == 1:\n    print(-1)\nelse:\n    print(*[i for i in range(2, n+1)] + [1])\n\n\nThis solution works by first checking if n is 1. If it is, it prints -1 as a single permutation does not exist. If n is not 1, it creates a list of numbers from 2 to n (inclusive) and then appends 1 to the end. It then prints out all the numbers in the list, separated by spaces. This results in a perfect permutation of size n.\n\nFor example, for n="], "prompt": "\nQUESTION:\nA permutation is a sequence of integers p_1, p_2, ..., p_{n}, consisting of n distinct positive integers, each of them doesn't exceed n. Let's denote the i-th element of permutation p as p_{i}. We'll call number n the size of permutation p_1, p_2, ..., p_{n}.\n\nNickolas adores permutations. He likes some permutations more than the others. He calls such permutations perfect. A perfect permutation is such permutation p that for any i (1 \u2264 i \u2264 n) (n is the permutation size) the following equations hold p_{p}_{i} = i and p_{i} \u2260 i. Nickolas asks you to print any perfect permutation of size n for the given n.\n\n\n-----Input-----\n\nA single line contains a single integer n (1 \u2264 n \u2264 100) \u2014 the permutation size.\n\n\n-----Output-----\n\nIf a perfect permutation of size n doesn't exist, print a single integer -1. Otherwise print n distinct integers from 1 to n, p_1, p_2, ..., p_{n} \u2014 permutation p, that is perfect. Separate printed numbers by whitespaces.\n\n\n-----Examples-----\nInput\n1\n\nOutput\n-1\n\nInput\n2\n\nOutput\n2 1 \n\nInput\n4\n\nOutput\n2 1 4 3\nPlease provide the solution as pure code only, without explanations or comments.\n\nANSWER:\n```python\n"}}