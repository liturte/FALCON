{"985": {"code": ["def bishop_pairs(bishops):\n    diagonals = [0] * 200", "def bishop_pairs(bishops):\n    diagonals = [0] * 200", "def bishop_pairs(n, bishop_positions):\n    diagonals = [0] * 2", "n = int(input())\nbishops = [tuple(map(int, input().split())) for", "import collections\nn = int(input())\nx = [0]*1001\ny = ["], "prompt": "\nQUESTION:\nToday, Wet Shark is given n bishops on a 1000 by 1000 grid. Both rows and columns of the grid are numbered from 1 to 1000. Rows are numbered from top to bottom, while columns are numbered from left to right.\n\nWet Shark thinks that two bishops attack each other if they share the same diagonal. Note, that this is the only criteria, so two bishops may attack each other (according to Wet Shark) even if there is another bishop located between them. Now Wet Shark wants to count the number of pairs of bishops that attack each other.\n\n\n-----Input-----\n\nThe first line of the input contains n (1 \u2264 n \u2264 200 000)\u00a0\u2014 the number of bishops.\n\nEach of next n lines contains two space separated integers x_{i} and y_{i} (1 \u2264 x_{i}, y_{i} \u2264 1000)\u00a0\u2014 the number of row and the number of column where i-th bishop is positioned. It's guaranteed that no two bishops share the same position.\n\n\n-----Output-----\n\nOutput one integer\u00a0\u2014 the number of pairs of bishops which attack each other. \n\n\n-----Examples-----\nInput\n5\n1 1\n1 5\n3 3\n5 1\n5 5\n\nOutput\n6\n\nInput\n3\n1 1\n2 3\n3 5\n\nOutput\n0\n\n\n\n-----Note-----\n\nIn the first sample following pairs of bishops attack each other: (1, 3), (1, 5), (2, 3), (2, 4), (3, 4) and (3, 5). Pairs (1, 2), (1, 4), (2, 5) and (4, 5) do not attack each other because they do not share the same diagonal.\nPlease provide the solution as pure code only, without explanations or comments.\n\nANSWER:\n```python\n"}}