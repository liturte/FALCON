{"1223": {"code": ["N = int(input())\nP = list(map(int, input().split()))\n\n# Initialize the array to store the prefix maximum values\nprefix_max = [0] * (N+1)\nprefix_max[0] = -1\n\n# Initialize the array to store the suffix maximum values\nsuffix_max = [0] * (N+1)\nsuffix_max[N] = -1\n\n# Calculate the prefix maximum values\nfor i in range(1, N+1):\n    prefix_max[i] = max(prefix_max[i-1], P[i-1])\n\n# Calculate the suffix maximum values\nfor i in range(N-1, -1, -1):\n    suffix_max[i] =", "import sys\n\nN = int(sys.stdin.readline().strip())\nP = list(map(int, sys.stdin.readline().strip().split()))\n\nmax_val = max(P)\nP.remove(max_val)\nsecond_max_val = max(P)\n\nprefix_sum = [0] * (N + 1)\nfor i in range(1, N + 1):\n    if P[i - 1] == second_max_val:\n        prefix_sum[i] = prefix_sum[i - 1] + 1\n    else:\n        prefix_sum[i] = prefix_sum[i - 1]\n\nresult = 0\nfor i in range(1, N):\n    if P[", "N = int(input())\nP = list(map(int, input().split()))\n\n# Create a list to store the maximum values for each index up to the right\nmax_values = [0] * N\nmax_values[0] = P[0]\nfor i in range(1, N):\n    max_values[i] = max(max_values[i-1], P[i])\n\n# Create a list to store the second maximum values for each index up to the right\nsecond_max_values = [0] * N\nsecond_max_values[0] = P[0]\nfor i in range(1, N):\n    second_max_values[i] = max(second_max_values[i-1], P[i] if", "def solve():\n    N = int(input())\n    P = list(map(int, input().split()))\n    ans = 0\n    max_val = [0] * (N + 1)\n    second_max_val = [0] * (N + 1)\n\n    for i in range(N - 1, -1, -1):\n        max_val[i] = max(P[i], max_val[i + 1])\n\n    for i in range(N - 1, -1, -1):\n        if P[i] != max_val[i + 1]:\n            second_max_val[i] = max_val[i + 1]\n        else:\n            second_max_val[i] =", "def solve():\n    N = int(input())\n    P = list(map(int, input().split()))\n    max_val = max(P)\n    P.remove(max_val)\n    second_max_val = max(P)\n    return (max_val - second_max_val) * (N - 1) * 2 + (max_val * (max_val - 1) // 2 - second_max_val * (second_max_val - 1) // 2)\n\nprint(solve())\n\n\nThis solution works by first removing the maximum value from the permutation P and finding the new maximum and second maximum values. The sum is then calculated as follows:\n\n- The contribution of the pairs where the second largest value"], "prompt": "\nQUESTION:\nGiven is a permutation P of \\{1, 2, \\ldots, N\\}.\nFor a pair (L, R) (1 \\le L \\lt R \\le N), let X_{L, R} be the second largest value among P_L, P_{L+1}, \\ldots, P_R.\nFind \\displaystyle \\sum_{L=1}^{N-1} \\sum_{R=L+1}^{N} X_{L,R}.\n\n-----Constraints-----\n -  2 \\le N \\le 10^5 \n -  1 \\le P_i \\le N \n -  P_i \\neq P_j  (i \\neq j)\n - All values in input are integers.\n\n-----Input-----\nInput is given from Standard Input in the following format:\nN\nP_1 P_2 \\ldots P_N\n\n-----Output-----\nPrint \\displaystyle \\sum_{L=1}^{N-1} \\sum_{R=L+1}^{N} X_{L,R}.\n\n-----Sample Input-----\n3\n2 3 1\n\n-----Sample Output-----\n5\n\nX_{1, 2} = 2, X_{1, 3} = 2, and X_{2, 3} = 1, so the sum is 2 + 2 + 1 = 5.\nPlease provide the solution as pure code only, without explanations or comments.\n\nANSWER:\n```python\n"}}