{"1651": {"code": ["S, P = map(int, input().split())\nif S == P:\n    if S == 1:\n        print('Yes')\n    else:\n        print('No')\nelse:\n    if (S-P)**2 <= 4*P:\n        print('Yes')\n    else:\n        print('No')\n\n\nEXPLANATION:\nThe condition for the pair (N,M) to satisfy both equations is that N = (S+P)/2 and M = (S-P)/2.\nIf S = P, we can choose N = M = 1.\nIf S != P, we need to check if (S-P)^2 <= 4P. If it is, we can choose N = (S+P)/2 and M = (S-P)/2.\nOtherwise, no such pair exists.\n\nThis solution is based on the fact that the two equations can be written as (N-M)^2 = 2*S*P and N*M = P respectively.\nBy comparing these two equations, we can find the pair (N,M) if they exist.\n'''\n\nS, P = map(int, input().split())\nif S == P:\n    if S == 1:\n        print('Yes')\n    else:\n        print('No')\nelse:\n    if (", "import sys\n\nS, P = map(int, sys.stdin.readline().split())\n\nif S < P:\n    print('No')\n    sys.exit()\n\ndiff = S - P\n\nif diff % 2 == 0:\n    print('Yes')\nelse:\n    print('No')\n\n\nThis solution works by first checking if S is less than P. If it is, it immediately prints \"No\" and exits the program. If S is not less than P, it calculates the difference between S and P. If the difference is an even number, it prints \"Yes\". Otherwise, it prints \"No\".\n\nThis solution is efficient because it only takes a constant amount of time to read the input and calculate the difference, regardless of the size of S and P. It also correctly handles all possible input values.\n\nIt's also worth noting that this solution works because the sum of two positive integers N and M is always greater than or equal to the product of the two integers. If we can find two positive integers N and M such that N + M = S and N * M = P, then it must be the case that N <= M. If N > M, then N + M = S and N * M = P would mean that N > M, which is a contradiction. Therefore, we can safely assume that N <= M.\n\nIf N + M", "import sys\n\nS, P = map(int, sys.stdin.readline().split())\n\ndef is_valid(S, P):\n    for N in range(1, S):\n        M = S - N\n        if N * M == P:\n            return True\n    return False\n\nprint(\"Yes\" if is_valid(S, P) else \"No\")\n\nThis solution works by iterating over all possible values of N from 1 to S-1 and calculating M as S - N. It then checks if N * M equals P. If it does, it returns True, indicating that there is a valid pair (N, M). If it doesn't find a valid pair after checking all possible N values, it returns False.\n\nNote that this solution assumes that S and P are integers and that 1 <= S, P <= 10^12. It may not work correctly if these assumptions are not met.", "import sys\n\nS, P = map(int, sys.stdin.readline().split())\n\nif S < P:\n    print(\"No\")\nelif S == P:\n    print(\"Yes\" if S == 1 else \"No\")\nelse:\n    N = (S + P) // 2\n    M = S - N\n    if N * M == P:\n        print(\"Yes\")\n    else:\n        print(\"No\")\n\n\nThis Python program reads two integers S and P from the standard input, and checks if there is a pair of positive integers (N,M) such that N + M = S and N \\times M = P. If such a pair exists, it prints \"Yes\"; otherwise, it prints \"No\". The program uses the mathematical formula N + M = S and N \\times M = P to solve the problem.\n\nThe program first checks if S < P. If S < P, it prints \"No\" because there is no pair of positive integers (N,M) such that N + M = S and N \\times M = P.\n\nIf S = P, the program checks if S = 1. If S = 1, it prints \"Yes\" because the pair (N,M) = (1,0) is a solution. If S \\neq 1, it prints \"No\" because there is no pair of positive", "S, P = map(int, input().split())\n\nif S == P == 1:\n    print(\"Yes\")\nelif S < P:\n    print(\"No\")\nelse:\n    N = (S + P) // 2\n    M = S - N\n    if N * M == P:\n        print(\"Yes\")\n    else:\n        print(\"No\")\n\n\nEXPLANATION:\nThe solution is based on the fact that N + M = S and N * M = P can be rewritten as (N - M) * (N + M) = P.\nIf N > M, then (N - M) > 0, so (N - M) * (N + M) = P is always greater than P.\nIf N = M, then (N - M) * (N + M) = 0 * P = 0, but P > 0.\nIf N < M, then (N - M) < 0, so (N - M) * (N + M) = P is always less than P.\nTherefore, if S >= P, there must exist N and M such that N + M = S and N * M = P. Otherwise, there is no such N and M.\n\nThe code first checks if S and P are both 1. If so, it prints \"Yes\". If P is greater than S,"], "prompt": "\nQUESTION:\nGiven are integers S and P.\nIs there a pair of positive integers (N,M) such that N + M = S and N \\times M = P?\n\n-----Constraints-----\n - All values in input are integers.\n - 1 \\leq S,P \\leq 10^{12}\n\n-----Input-----\nInput is given from Standard Input in the following format:\nS P\n\n-----Output-----\nIf there is a pair of positive integers (N,M) such that N + M = S and N \\times M = P, print Yes; otherwise, print No.\n\n-----Sample Input-----\n3 2\n\n-----Sample Output-----\nYes\n\n - For example, we have N+M=3 and N \\times M =2 for N=1,M=2.\nPlease provide the solution as pure code only, without explanations or comments.\n\nANSWER:\n```python\n"}}