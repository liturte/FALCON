{"1079": {"code": ["def min_beautiful_numbers(s):\n    return bin(int(s, 2) - 1).count('1') + 1\n\nprint(min_beautiful_numbers(input()))\n\n\nEXPLANATION:\nThis problem is about binary representation of numbers. We need to convert the binary string to integer and subtract 1 from it, because the binary number of n - 1 is the binary representation of n - 1. Then we count the number of 1s in the binary representation of the result, which is the minimum number of beautiful", "def min_beautiful_numbers(s):\n    return bin(int(s, 2) - 1).count('1') + 1\n\nprint(min_beautiful_numbers(input()))\n\n\nEXPLANATION:\nThe function min_beautiful_numbers takes a binary string s as input and returns the minimum number of beautiful numbers that sum to the binary representation of s.\n\nThe function works by first converting the binary string to an integer with base 2. Then, it subtracts 1 from this integer, effectively converting it to the binary", "def min_beautiful_numbers(s):\n    return bin(int(s, 2) - 1).count('1') + 1\n\nprint(min_beautiful_numbers(input()))\n\n\nThis solution works by converting the binary string to an integer, subtracting 1, and then converting the result back to binary. This effectively removes the least significant 1 bit from the binary representation of the number, which corresponds to the largest power of 2 that is a summand of the number. The count of 1s in this binary string is the number of", "def min_beautiful_numbers(s):\n    return bin(int(s, 2) - 1).count('1') + 1\n\ns = input()\nprint(min_beautiful_numbers(s))\n\n\nExplanation:\n\nThe function `min_beautiful_numbers` calculates the minimum amount of beautiful numbers that sum up to the binary representation of a given number. It does this by converting the binary representation to an integer, subtracting 1, and then converting that result back to binary. The number of '1's in", "def min_beautiful_numbers(s):\n    return bin(int(s, 2) - 1).count('1') + 1\n\nprint(min_beautiful_numbers(input()))\n\n\nExplanation:\nThis solution uses the built-in Python functions int() and bin(). The int() function converts a binary string into an integer. The bin() function converts an integer into a binary string. \n\nThe binary string s is converted into an integer using int(s, 2). The second argument to int() specifies the base of"], "prompt": "\nQUESTION:\nValera considers a number beautiful, if it equals 2^{k} or -2^{k} for some integer k (k \u2265 0). Recently, the math teacher asked Valera to represent number n as the sum of beautiful numbers. As Valera is really greedy, he wants to complete the task using as few beautiful numbers as possible. \n\nHelp Valera and find, how many numbers he is going to need. In other words, if you look at all decompositions of the number n into beautiful summands, you need to find the size of the decomposition which has the fewest summands.\n\n\n-----Input-----\n\nThe first line contains string s (1 \u2264 |s| \u2264 10^6), that is the binary representation of number n without leading zeroes (n > 0).\n\n\n-----Output-----\n\nPrint a single integer \u2014 the minimum amount of beautiful numbers that give a total of n.\n\n\n-----Examples-----\nInput\n10\n\nOutput\n1\n\nInput\n111\n\nOutput\n2\n\nInput\n1101101\n\nOutput\n4\n\n\n\n-----Note-----\n\nIn the first sample n = 2 is a beautiful number.\n\nIn the second sample n = 7 and Valera can decompose it into sum 2^3 + ( - 2^0).\n\nIn the third sample n = 109 can be decomposed into the sum of four summands as follows: 2^7 + ( - 2^4) + ( - 2^2) + 2^0.\nPlease provide the solution as pure code only, without explanations or comments.\n\nANSWER:\n```python\n"}}