{"4422": {"code": ["N, K = map(int, input().split())\nS = input()\n\nprint(S[:K-1] + S[K-1].lower() + S[K:])\n\n\nThis solution first reads the length of the string, the position of the character to be lowercased, and the string itself. It then constructs a new string by concatenating the characters before the K-th one, the K-th character converted to lowercase, and the characters after the K-th one. The built-in `lower` function is used to convert the K-th character to lowercase. The `[:K-1]` and `[K:]` slices are used to extract the characters before and after the K-th one, respectively.\n\nNote that the index in Python is 0-based, so we use `K-1` as the index for the K-th character.\n\nThis solution assumes that the input is in the correct format. It does not handle any potential errors or exceptions.", "N, K = map(int, input().split())\nS = input()\n\nprint(S[:K-1] + S[K-1].lower() + S[K:])\n\n\nThis Python program reads the length of the string, the position of the character to be lowercased, and the string itself from the standard input. It then lowercases the K-th character in the string and prints the resulting string.\n\nIt does this by slicing the string into three parts: the characters before the K-th one, the K-th character itself (which is lowercased), and the characters after the K-th one. The lowercasing is done using the lower() method of the string.\n\nNote that Python uses 0-based indexing, so the K-th character is at position K-1.\n\nAlso note that the input() function in Python reads a line from the standard input (which is typically the terminal or the command line), so it includes the newline character at the end. The split() method splits a string into words, and map() applies a function to each word, in this case, it converts each word to an integer.\n\nThis program assumes that the input is always in the correct format. If the input might not be in the correct format, you should add error checking code to handle this.", "N, K = map(int, input().split())\nS = input()\nK -= 1  # Adjusting for zero-based index\nS = S[:K] + S[K].lower() + S[K+1:]\nprint(S)\n\n\nThis program first reads the length of the string and the position of the character to be lowercased, then reads the string itself. It then converts the K-th character to lowercase and prints the result.\n\nThe `map()` function is used to read the two integers from the input line, and the `input()` function is used to read the string itself. The `lower()` method is used to convert the K-th character to lowercase. The string is sliced and concatenated with the lowercased character and the rest of the string.\n\nThe index K is adjusted by subtracting 1 to convert it to a zero-based index because Python uses zero-based indexing.\n\nFinally, the result is printed to the standard output.", "N, K = map(int, input().split())\nS = input()\n\nS = S[:K-1] + S[K-1].lower() + S[K:]\n\nprint(S)\n\n\nEXPLANATION:\nThis code first reads the length of the string N, the position K, and the string S itself. It then converts the K-th character to lowercase by indexing the string at K-1 and applying the lower() function, and concatenates the parts of the string before and after this position. The result is printed to the standard output.\n\nThe indexing in Python starts at 0, so we subtract 1 from K to get the correct index.\n\nThe lowercasing of the character at position K is done by calling the lower() method on the character at that index. This method returns a new string where all uppercase characters have been lowercased.\n\nFinally, we concatenate the three parts of the string: the part before K, the lowercased character at K, and the part after K, and print the result.\n\nThis solution assumes that the input will be in the correct format as specified in the problem statement.\n\nIt is also assumed that the input string S will not contain any non-alphabetic characters, as the problem statement does not specify how to handle them.\n\nThe time complexity of this solution is O(N), as we need to create a new", "N, K = map(int, input().split())\nS = input()\nS = S[:K-1] + S[K-1].lower() + S[K:]\nprint(S)\n\n\nExplanation:\nThe program first takes input for the length of the string `N` and the position of the character to be lowercased `K`. Then it takes the string `S` as input.\nThe string `S` is then sliced into three parts: the part before the `K`-th character, the `K`-th character itself, and the part after the `K`-th character.\nThe `K`-th character is then converted to lowercase using the `lower()` function.\nFinally, the three parts are concatenated together and printed out.\n'''\n\n# Code:\n\nN, K = map(int, input().split())\nS = input()\nS = S[:K-1] + S[K-1].lower() + S[K:]\nprint(S)\n\n'''\n\nExplanation:\nThe program first takes input for the length of the string `N` and the position of the character to be lowercased `K`. Then it takes the string `S` as input.\nThe string `S` is then sliced into three parts: the part before the `K`-th character, the `"], "prompt": "\nQUESTION:\nYou are given a string S of length N consisting of A, B and C, and an integer K which is between 1 and N (inclusive).\nPrint the string S after lowercasing the K-th character in it.\n\n-----Constraints-----\n - 1 \u2264 N \u2264 50\n - 1 \u2264 K \u2264 N\n - S is a string of length N consisting of A, B and C.\n\n-----Input-----\nInput is given from Standard Input in the following format:\nN K\nS\n\n-----Output-----\nPrint the string S after lowercasing the K-th character in it.\n\n-----Sample Input-----\n3 1\nABC\n\n-----Sample Output-----\naBC\n\nPlease provide the solution as pure code only, without explanations or comments.\n\nANSWER:\n```python\n"}}