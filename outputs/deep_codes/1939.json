{"1939": {"code": ["n, k = map(int, input().split())\na = [[0]*n for _ in range(n)]\nfor i in range(n):\n    for j in range(n):\n        a[i][j] = k//n\n        if i<j:\n            a[i][j] +=1\n        if i>j:\n            a[i][j] -=1\nfor row in a:\n    print(' '.join(map(str,row)))\n\nThis Python program generates a beautiful table with given", "n, k = map(int, input().split())\na = [[0]*n for _ in range(n)]\nfor i in range(n):\n    for j in range(n):\n        a[i][j] = k//n\n    k -= a[i][i]\n    a[i][i] += min(k, n)\n    k -= a[i][i]\nfor row in a:\n    print(' '.join(map(str, row)))\n\n\nEXPLANATION:", "n, k = map(int, input().split())\ntable = [[0]*n for _ in range(n)]\nfor i in range(n):\n    for j in range(n):\n        table[i][j] = k//n\n\nrem = k % n\nfor i in range(rem):\n    table[i][i] += 1\n\nfor row in table:\n    print(*row)\n\n\nThis Python code creates a n x n matrix filled with zeros. Then it fills the diagonal of the matrix with k", "n, k = map(int, input().split())\ntable = [[0]*n for _ in range(n)]\n\nfor i in range(n):\n    for j in range(n):\n        if i == j:\n            table[i][j] = 0\n        else:\n            table[i][j] = k // n\n            if i < j:\n                table[i][j] += 1\nprint('\\n'.join([' '.join(map(str, row)) for row in table]))\n\n\nThe", "def beautiful_table(n, k):\n    table = [[0]*n for _ in range(n)]\n    for i in range(n):\n        for j in range(n):\n            table[i][j] = k//n\n    for i in range(n):\n        table[i][i] = k - sum(table[i])\n    return table\n\nn, k = map(int, input().split())\ntable = beautiful_table(n, k)\nfor row in table:\n    print(' '.join"], "prompt": "\nQUESTION:\nLevko loves tables that consist of n rows and n columns very much. He especially loves beautiful tables. A table is beautiful to Levko if the sum of elements in each row and column of the table equals k.\n\nUnfortunately, he doesn't know any such table. Your task is to help him to find at least one of them. \n\n\n-----Input-----\n\nThe single line contains two integers, n and k (1 \u2264 n \u2264 100, 1 \u2264 k \u2264 1000).\n\n\n-----Output-----\n\nPrint any beautiful table. Levko doesn't like too big numbers, so all elements of the table mustn't exceed 1000 in their absolute value.\n\nIf there are multiple suitable tables, you are allowed to print any of them.\n\n\n-----Examples-----\nInput\n2 4\n\nOutput\n1 3\n3 1\n\nInput\n4 7\n\nOutput\n2 1 0 4\n4 0 2 1\n1 3 3 0\n0 3 2 2\n\n\n\n-----Note-----\n\nIn the first sample the sum in the first row is 1 + 3 = 4, in the second row \u2014 3 + 1 = 4, in the first column \u2014 1 + 3 = 4 and in the second column \u2014 3 + 1 = 4. There are other beautiful tables for this sample.\n\nIn the second sample the sum of elements in each row and each column equals 7. Besides, there are other tables that meet the statement requirements.\nPlease provide the solution as pure code only, without explanations or comments.\n\nANSWER:\n```python\n"}}