{"724": {"code": ["n, d = map(int, input().", "n, d = map(int, input().", "def min_points_to_remove(n", "n, d = map(int, input().", "def min_points_to_remove(n"], "prompt": "\nQUESTION:\nWe've got no test cases. A big olympiad is coming up. But the problemsetters' number one priority should be adding another problem to the round. \n\nThe diameter of a multiset of points on the line is the largest distance between two points from this set. For example, the diameter of the multiset {1, 3, 2, 1} is 2.\n\nDiameter of multiset consisting of one point is 0.\n\nYou are given n points on the line. What is the minimum number of points you have to remove, so that the diameter of the multiset of the remaining points will not exceed d?\n\n\n-----Input-----\n\nThe first line contains two integers n and d (1 \u2264 n \u2264 100, 0 \u2264 d \u2264 100)\u00a0\u2014 the amount of points and the maximum allowed diameter respectively.\n\nThe second line contains n space separated integers (1 \u2264 x_{i} \u2264 100)\u00a0\u2014 the coordinates of the points.\n\n\n-----Output-----\n\nOutput a single integer\u00a0\u2014 the minimum number of points you have to remove.\n\n\n-----Examples-----\nInput\n3 1\n2 1 4\n\nOutput\n1\n\nInput\n3 0\n7 7 7\n\nOutput\n0\n\nInput\n6 3\n1 3 4 6 9 10\n\nOutput\n3\n\n\n\n-----Note-----\n\nIn the first test case the optimal strategy is to remove the point with coordinate 4. The remaining points will have coordinates 1 and 2, so the diameter will be equal to 2 - 1 = 1.\n\nIn the second test case the diameter is equal to 0, so its is unnecessary to remove any points. \n\nIn the third test case the optimal strategy is to remove points with coordinates 1, 9 and 10. The remaining points will have coordinates 3, 4 and 6, so the diameter will be equal to 6 - 3 = 3.\nPlease provide the solution as pure code only, without explanations or comments.\n\nANSWER:\n```python\n"}}