{"4744": {"code": ["import math\n\ndef minimum_cost(v):\n    l = math.ceil(math.pow(v, (1/3)))\n    while l*(l+1)*(l+2)//2 < v:\n        l += 1\n    return 3*l*l + 3*l + 1\n\nv = int(input())\nprint(minimum_cost(v))\n\n\nEXPLANATION:\nThe problem is about packing cubes into a cubical", "import math\n\nV = int(input().strip())\nn = int(math.pow(V, 1/3))\nwhile n * (n + 1) * (n + 2) // 6 < V:\n    n += 1\nprint(4 * n * n)\n\n\nExplanation:\nThis program calculates the minimum surface area of a box that can hold V fidget cubes. It first calculates the cube root of V and rounds it down to", "import math\n\nV = int(input())\nn = math.ceil(V ** (1 / 3))\nprint(2 * (n ** 2) + n)\n\n\nEXPLANATION:\nThe volume of the fidget cubes is given by `V`. To minimize the surface area of the box, we want to maximize the size of the box in each dimension (`n`). This is because the surface area of a box is given by `2lw +", "import math\n\nV = int(input())\n\ndef min_cost(V):\n    root = int(math.sqrt(V))\n    while root > 0:\n        if V % root == 0:\n            return root**2 + (V // root)**2\n        root -= 1\n\nprint(min_cost(V))\n\n\nExplanation:\nThe solution uses the concept of number theory. It iteratively checks for the smallest possible square root of the", "import math\n\nV = int(input())\n\nL = math.ceil(V**(1/3))\n\nwhile L*(L+1)*(L+2)//2 < V:\n    L += 1\n\nprint(L*L*2 + L*2 + 6)\n\n\nThis solution works by first calculating the cube root of the number of fidget cubes, rounding up to the nearest integer. This gives us an initial guess for the side length of"], "prompt": "\nQUESTION:\nFidget spinners are so 2017; this year\u2019s rage are fidget cubes. A fidget cube is a cube with unit side lengths, which you hold in your hand and fidget with. Kids these days, right? \n\nYou work in the planning department for a company that creates and ships fidget cubes. Having done some market analysis, you found that your customers want to receive shipments of exactly $V$ fidget cubes.\n\nThis means you have to design a container that will hold exactly $V$ fidget cubes. Since fidget cubes are very fragile, you cannot have any empty space in your container. If there is empty space, they might move around, bump into each other and get damaged. Because of this, you decide to ship the fidget cubes in a rectangular cardboard box.\n\nThe cost of a cardboard box is proportional to its surface area, costing exactly one unit of money per square unit of surface area. Of course you want to spend as little money as possible. Subject to the above constraints, how much money do you have to spend on a box for $V$ fidget cubes?\n\n-----Input-----\nThe input contains a single integer, $1 \\leq V \\leq 10^6$, the number of fidget cubes for which you need to build a box.\n\n-----Output-----\nPrint the cost of the cheapest rectangular box as specified in the statement.\n\n-----Examples-----\nSample Input 1:\n1\nSample Output 1:\n6\n\nSample Input 2:\n4\nSample Output 2:\n16\n\nSample Input 3:\n3\nSample Output 3:\n14\nPlease provide the solution as pure code only, without explanations or comments.\n\nANSWER:\n```python\n"}}