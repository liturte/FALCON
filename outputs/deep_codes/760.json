{"760": {"code": ["def solve():\n    s = input()\n    k = int(input())\n    l = 2*len(s)\n    while l > len(s)+k:\n        l -= 1\n    return l\n\nprint(solve())\n\n\nThis Python program calculates the maximum length of the tandem repeat that could have occurred in the new string. It first reads the input string and the number of added characters. Then it calculates the maximum possible length of the tandem repeat by decrementing it until it is less than or equal to the length of the string plus the number of added characters. The result is then printed.\n\nPlease note that the condition `l", "s = input()\nk = int(input())\n\ndef tandem_length(s):\n    length = len(s)\n    for i in range(1, length):\n        if s[:i] == s[length-i+1:2*length-i]:\n            return 2*i\n    return 0\n\ns += s[:k]\nprint(tandem_length(s))\n\n\nThis code first reads the input string and the number of added characters. Then it calculates the maximum length of a tandem repeat in the string. The function tandem_length iterates over all possible lengths of the tandem repeat and checks", "def max_tandem_repeat_length(s, k):\n    max_len = min(len(s), k*2 + 1)\n    for i in range(1, max_len//2 + 1):\n        if len(s) % i == 0 and s[:i]*(len(s)//i) == s:\n            return len(s)\n    return 0\n\ns = input().strip()\nk = int(input().strip())\nprint(max_tandem_repeat_length(s+' '*k, k))\n\n\nThis code works by trying all possible lengths of the tandem repeat. It first calcul", "def max_tandem_repeat(s, k):\n    n = len(s)\n    s = s + s[:k]\n    lcp = [0] * (2*n + 1)\n    for i in range(1, 2*n):\n        j = lcp[i-1]\n        while j > 0 and s[i] != s[j]:\n            j = lcp[j-1]\n        if s[i] == s[j]:\n            j += 1\n        lcp[i] = j\n    return 2*max(lcp[:n]) if max(lcp[:n]) <= n else", "def max_tandem_length(s, k):\n    max_len = 0\n    for i in range(len(s)):\n        for j in range(i+max_len+1, len(s)+1):\n            sub_str = s[i:j]\n            if sub_str == (s[i:j]*2)[:len(sub_str)]:\n                max_len = max(max_len, len(sub_str))\n    return max_len + 2*k\n\ns = input()\nk = int(input())\nprint(max_tandem_length(s, k))"], "prompt": "\nQUESTION:\nKolya got string s for his birthday, the string consists of small English letters. He immediately added k more characters to the right of the string.\n\nThen Borya came and said that the new string contained a tandem repeat of length l as a substring. How large could l be?\n\nSee notes for definition of a tandem repeat.\n\n\n-----Input-----\n\nThe first line contains s (1 \u2264 |s| \u2264 200). This string contains only small English letters. The second line contains number k (1 \u2264 k \u2264 200) \u2014 the number of the added characters.\n\n\n-----Output-----\n\nPrint a single number \u2014 the maximum length of the tandem repeat that could have occurred in the new string.\n\n\n-----Examples-----\nInput\naaba\n2\n\nOutput\n6\n\nInput\naaabbbb\n2\n\nOutput\n6\n\nInput\nabracadabra\n10\n\nOutput\n20\n\n\n\n-----Note-----\n\nA tandem repeat of length 2n is string s, where for any position i (1 \u2264 i \u2264 n) the following condition fulfills: s_{i} = s_{i} + n.\n\nIn the first sample Kolya could obtain a string aabaab, in the second \u2014 aaabbbbbb, in the third \u2014 abracadabrabracadabra.\nPlease provide the solution as pure code only, without explanations or comments.\n\nANSWER:\n```python\n"}}