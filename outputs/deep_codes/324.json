{"324": {"code": ["import math\n\ndef is_prime(n):\n    if n <= 1:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    sqr = int(math.sqrt(n)) + 1\n    for divisor in range(3, sqr, 2):\n        if n % divisor == 0:\n            return False\n    return True\n\nn = int(input())\n\nfor i in range(2, n):\n    if is_prime(i) and is_prime(n+i):\n        print(n+i, i)\n        break\n\n\nThis Python script first defines a helper function `is_prime` that checks if a given number `n` is a prime number. It then takes an input `n`, and loops over the numbers from 2 to `n`. If the current number `i` is a prime number and `n", "def is_composite(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return True\n    return False\n\ndef find_numbers(n):\n    a = 2*n\n    while not is_composite(a):\n        a += 1\n    b = a - n\n    return a, b\n\nn = int(input().strip())\na, b = find_numbers(n)\nprint(a, b)\n\nThis code first defines a function `is_composite(n)` that checks if a number `n` is composite. It does this by trying to find a divisor of `n` other than 1 and `n` itself. If it finds one, it returns `True`, meaning `n` is composite. If it doesn't find any, it returns `", "def solve(n):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def next_prime(num):\n        while True:\n            num += 1\n            if is_prime(num):\n                return num\n\n    def prev_prime(num):\n        while True:\n            num -= 1\n            if is_prime(num):\n                return num\n\n    a = 2 * n + 1\n    b = n\n    if is_prime(a):\n        a = next_prime(a)\n    if is_prime(b):\n        b = prev_prime(b)\n    return a, b\n\nn = int(input())\na, b = solve(n)\nprint(a, b)", "def solve(n):\n    def is_prime(n):\n        if n < 2: return False\n        if n == 2 or n == 3: return True\n        if n % 2 == 0 or n % 3 == 0: return False\n        i = 5\n        w = 2\n        while i * i <= n:\n            if n % i == 0: return False\n            i += w\n            w = 6 - w\n        return True\n\n    def next_prime(n):\n        if n % 2 == 0: n += 1\n        else: n += 2\n        while not is_prime(n): n += 2\n        return n\n\n    a = 4\n    b = 2\n    while a - b != n:\n        if is_prime(a) and is_prime(b):\n            a = next_prime(a)\n            b = next_prime(b)\n        elif is_prime(a", "def solve(n):\n    if n % 2 == 0:\n        return [n//2, n//2+1]\n    else:\n        return [n+1, n+1]\n\nn = int(input())\na, b = solve(n)\nprint(a, b)\n\nIn this code, the function `solve(n)` takes an integer `n` as input and returns two composite numbers `a` and `b` such that `a - b = n`. If `n` is even, it simply divides `n` by 2 to get `a` and `b`, and adds 1 to `b` to ensure that `a` and `b` are both composite. If `n` is odd, it returns `n + 1` for both `a` and `b`, which are both composite. The input is taken from the user, and the resulting `a` and `b` are printed"], "prompt": "\nQUESTION:\nLet's call a positive integer composite if it has at least one divisor other than $1$ and itself. For example:\n\n  the following numbers are composite: $1024$, $4$, $6$, $9$;  the following numbers are not composite: $13$, $1$, $2$, $3$, $37$. \n\nYou are given a positive integer $n$. Find two composite integers $a,b$ such that $a-b=n$.\n\nIt can be proven that solution always exists.\n\n\n-----Input-----\n\nThe input contains one integer $n$ ($1 \\leq n \\leq 10^7$): the given integer.\n\n\n-----Output-----\n\nPrint two composite integers $a,b$ ($2 \\leq a, b \\leq 10^9, a-b=n$).\n\nIt can be proven, that solution always exists.\n\nIf there are several possible solutions, you can print any. \n\n\n-----Examples-----\nInput\n1\n\nOutput\n9 8\n\nInput\n512\n\nOutput\n4608 4096\nPlease provide the solution as pure code only, without explanations or comments.\n\nANSWER:\n```python\n"}}