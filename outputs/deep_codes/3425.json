{"3425": {"code": ["from itertools import combinations, product\nfrom collections import defaultdict\nfrom math import factorial\n\ndef solve(n, m, board):", "from sys import argv\nfrom math import factorial as fact\n\ndef solve(board):\n    n, m = len(board), len(", "from sys import stdin\nfrom collections import defaultdict\n\ndef solve(board):\n    n, m = len(board), len(board[", "def n_queens(n, m, board):\n    def can_attack(r1, c1, r2, c2):", "def solve(n, m, board):\n    rows = [0] * n\n    cols = [0] * m\n    diags"], "prompt": "\nQUESTION:\nThe $n$-queens problem is popular among computer science students. Its task is to place a maximum number of queens on an $n\\times n$ chessboard so that no two queens attack each other. Two queens attack each other if they share a row, column, or diagonal.\n\nOne day Zapray gets bored and extends the problem by loosening its constraint: It is allowed to have two queens attack each other, but no three queens can attack each other at the same time. In other words, there should not exist three queens $i$, $j$, and $k$ so that $i$ attacks $j$, $j$ attacks $k$, and $k$ attacks $i$.\n\nWith the new constraint, Zapray would like to know at most how many queens he can place on an $n \\times m$ chessboard, and in how many ways he can place a maximum number of queens. Additionally, some of the cells on the chessboard are broken, and queens cannot be placed on these broken cells. A broken cell between two queens does not prevent them from attacking each other.\n\n-----Input-----\nThe first line has two integers $n$ and $m$ ($1 \\leq n, m \\leq 50, n \\cdot m \\leq 50$), describing the size of the chessboard. Each of the next $n$ lines has $m$ characters describing the cells on one row of the chess board. A dot (\u2018.\u2019) denotes an empty cell, while a hash (\u2018#\u2019) denotes a broken cell. There is at least one usable cell on the chessboard.\n\n-----Output-----\nOutput two integers. The first is the maximum number of queens Zapray can place on the chessboard, and the second is the number of ways in which he can place that many queens.\n\n-----Examples-----\nSample Input:\n3 4\n....\n.#.#\n....\nSample Output:\n5 13\nPlease provide the solution as pure code only, without explanations or comments.\n\nANSWER:\n```python\n"}}