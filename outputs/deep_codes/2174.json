{"2174": {"code": ["import sys\ninput = sys.stdin.readline\n\nn = int(input())\na = list(map(int, input().split()))\n\nmid = sorted((x + i) // 2 for i, x in enumerate(a))[n // 2]\nprint(sum(abs(x - mid) - abs(x", "n = int(input())\na = list(map(int, input().split()))\n\nprint(sum(abs(x) for x in a))\n\n\nExplanation:\nThe minimum number of moves needed to build a permutation from a given sequence of integers is the sum of the absolute values of the integers in the sequence. This is because", "n = int(input())\na = list(map(int, input().split()))\n\nprint(sum(abs(x - y) for x, y in zip(a, sorted(a))) // 2)\n\n\n\nThis code reads an integer n and a list of n integers from the input. It then calculates the sum of", "def min_moves(n, a):\n    return sum(abs(x) for x in a)\n\nn = int(input().strip())\na = list(map(int, input().strip().split()))\nprint(min_moves(n, a))\n\n\nThis code first reads the input n and the list a.", "n = int(input())\na = list(map(int, input().split()))\n\nprint(sum(abs(i - x) for i, x in enumerate(sorted(a), 1)))\n\n\nThis solution works by first sorting the input list 'a'. Then it calculates the absolute difference between the sorted list and the"], "prompt": "\nQUESTION:\nPermutation p is an ordered set of integers p_1,  p_2,  ...,  p_{n}, consisting of n distinct positive integers, each of them doesn't exceed n. We'll denote the i-th element of permutation p as p_{i}. We'll call number n the size or the length of permutation p_1,  p_2,  ...,  p_{n}.\n\nYou have a sequence of integers a_1, a_2, ..., a_{n}. In one move, you are allowed to decrease or increase any number by one. Count the minimum number of moves, needed to build a permutation from this sequence.\n\n\n-----Input-----\n\nThe first line contains integer n (1 \u2264 n \u2264 3\u00b710^5) \u2014 the size of the sought permutation. The second line contains n integers a_1, a_2, ..., a_{n} ( - 10^9 \u2264 a_{i} \u2264 10^9).\n\n\n-----Output-----\n\nPrint a single number \u2014 the minimum number of moves.\n\nPlease, do not use the %lld specifier to read or write 64-bit integers in C++. It is preferred to use the cin, cout streams or the %I64d specifier.\n\n\n-----Examples-----\nInput\n2\n3 0\n\nOutput\n2\n\nInput\n3\n-1 -1 2\n\nOutput\n6\n\n\n\n-----Note-----\n\nIn the first sample you should decrease the first number by one and then increase the second number by one. The resulting permutation is (2, 1).\n\nIn the second sample you need 6 moves to build permutation (1, 3, 2).\nPlease provide the solution as pure code only, without explanations or comments.\n\nANSWER:\n```python\n"}}