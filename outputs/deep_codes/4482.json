{"4482": {"code": ["n = int(input())\nnums = list(map(int, input().split()))\nprint(sum((x - nums[0]) ** 2 for x in nums))\n\n\nThis solution works by first reading in the number of integers `n` and the list of integers `nums`. It then calculates the total cost by summing the square of the difference between each number and the first number in the list. This is the cost to transform each number into the first number. The result is the minimum total cost to achieve Evi's objective.\n\nThis solution assumes that Evi wants to transform all numbers into the same number, which is the first number in the list. If Evi wants to transform the numbers into any other numbers, the solution would need to be modified accordingly.\n\nThis solution also assumes that the input is well-formed and does not need any error checking. In a real-world scenario, you would want to add error checking to handle invalid input.", "import sys\ndef min_cost():\n    n = int(sys.stdin.readline().strip())\n    a = list(map(int, sys.stdin.readline().strip().split()))\n    a.sort()\n    mid = a[n//2]\n    return sum((x-mid)**2 for x in a)\nprint(min_cost())\n\n\nExplanation:\nThe minimum total cost to achieve Evi's objective can be achieved by transforming all numbers to the median of the array. This is because the median minimizes the sum of squared deviations from all other numbers. The median minimizes the sum of absolute deviations (which is the sum of squared deviations when the numbers are squared) from all other numbers. The median of a sorted array is the middle element if the array has an even length, or the average of the two middle elements if the array has an odd length. In this case, N is even, so there is one unique median.\n\nThe time complexity of the", "N = int(input())\nA = list(map(int, input().split()))\n\nA.sort()\n\ntotal_cost = 0\nfor i in range(N):\n    total_cost += (A[i] - A[0]) ** 2\n\nprint(total_cost)\n\n\nExplanation:\nThe solution is based on the observation that the minimum total cost is achieved when all numbers are transformed into the median of the current list of numbers. This is because each transformation reduces the sum of squared differences by the squared difference between the transformed number and the original number.\n\nThe list of numbers is sorted and the median is the middle number if the list has an even length. If the list has an odd length, the median is the number in the middle.\n\nThe total cost is then calculated by summing the squared differences between each number and the median.\n\nThis solution assumes that the input is valid and does not include error checking or handling for invalid inputs.\n\nThis solution has a time complexity of O(n", "def min_cost(n, a):\n    return sum((x - a[n // 2]) ** 2 for x in a)\n\nn = int(input())\na = sorted(map(int, input().split()))\nprint(min_cost(n, a))\n\n\nThis solution works by first sorting the list of integers. Then, it calculates the cost of transforming each integer into the median of the list. The median is chosen because it minimizes the total cost, as the median is the middle value in a sorted list. The function `min_cost` sums up the costs for each integer, and the result is the minimum total cost.\n\nThe time complexity of this solution is O(n log n) because it sorts the list of integers, and the space complexity is O(n) because it stores the list of integers.\n\nNote that this solution assumes that the input integers are distinct. If there are duplicate integers in the input, the solution would still work, but the result would not be optimal because it would not be", "def min_cost(n, arr):\n    arr.sort()\n    mid = arr[n//2]\n    return sum((x-mid)**2 for x in arr)\n\nn = int(input())\narr = list(map(int, input().split()))\nprint(min_cost(n, arr))\n\n\nThis Python program works by first sorting the array of numbers. It then calculates the median of the array (the number at the middle index after sorting), and for each number in the array, it calculates the square of the difference between that number and the median and sums these squares. This is the total cost to transform all numbers into the median. Since the median minimizes the sum of the squared differences, this is the minimum total cost.\n\nIt's important to note that the median is calculated in a way that works for both even and odd lengths of the array. For an even length, the median is the average of the two middle numbers, and for an odd length, it's the middle number."], "prompt": "\nQUESTION:\nEvi has N integers a_1,a_2,..,a_N. His objective is to have N equal integers by transforming some of them.\nHe may transform each integer at most once. Transforming an integer x into another integer y costs him (x-y)^2 dollars. Even if a_i=a_j (i\u2260j), he has to pay the cost separately for transforming each of them (See Sample 2).\nFind the minimum total cost to achieve his objective.\n\n-----Constraints-----\n - 1\u2266N\u2266100\n - -100\u2266a_i\u2266100\n\n-----Input-----\nThe input is given from Standard Input in the following format:\nN\na_1 a_2 ... a_N\n\n-----Output-----\nPrint the minimum total cost to achieve Evi's objective.\n\n-----Sample Input-----\n2\n4 8\n\n-----Sample Output-----\n8\n\nTransforming the both into 6s will cost (4-6)^2+(8-6)^2=8 dollars, which is the minimum.\nPlease provide the solution as pure code only, without explanations or comments.\n\nANSWER:\n```python\n"}}