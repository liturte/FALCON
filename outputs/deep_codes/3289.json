{"3289": {"code": ["QUESTION:\nAs an employee of the world\u2019s most respected political polling corporation, you must take complex, real-world issues and simplify them down to a few numbers. It isn\u2019t always easy. A big election is coming up and, at the request of Candidate\u00a0X, you have just finished polling $n$\u00a0people. You have gathered three pieces of information from each person, with the values for the $i^\\text {th}$ person recorded as:\n - $a_ i$ \u2013 the number of digits of $\\pi $ they have memorized\n - $b_ i$ \u2013 the number of hairs on their head\n - $c_ i$ \u2013 whether they will vote for Candidate\u00a0X\n\nUnfortunately, you are beginning to wonder if these are really the most relevant questions to ask. In fact, you cannot see any correlation between $a$, $b$, and $c$ in the data. Of course, you cannot just contradict your customer \u2013 that is a good way to lose your job!\n\nPerhaps the answer is to find some weighting formula to make the results look meaningful. You will pick two real values $S$ and $T$, and sort the poll results $(a_ i, b_ i, c_ i)$ by the measure $a_ i \\cdot S + b_ i \\cdot T$. The sort will look best if the results having $c_ i$ true are clustered as close to each other as possible. More precisely, if $j$ and $k$ are the indices of the first and last results with $c_ i$ true, you want to minimize the cluster size which is $k-j+1$. Note that some choices of $S$ and $T$ will result in ties among the $(a_ i,b_ i,c_ i)$ triples. When this happens, you should assume the worst possible ordering occurs (that which maximizes the cluster size for this $(S, T)$ pair).\n\n-----Input-----\nThe input starts with a line containing $n$ ($1 \\leq n \\leq 250000$), which is the number of people polled. This is followed by one line for each person polled. Each of those lines contains integers $a_ i$ ($0 \\leq a_ i \\leq 2000000$), $b_ i$ ($0 \\leq b_ i \\leq 2000000$), and $c_ i$, where $c_ i$ is $1$ if the person will vote for Candidate\u00a0X and $0$ otherwise. The input is guaranteed to contain at least one person who will vote for Candidate\u00a0X.", "QUESTION:\nAs an employee of the world\u2019s most respected political polling corporation, you must take complex, real-world issues and simplify them down to a few numbers. It isn\u2019t always easy. A big election is coming up and, at the request of Candidate\u00a0X, you have just finished polling $n$\u00a0people. You have gathered three pieces of information from each person, with the values for the $i^\\text {th}$ person recorded as:\n - $a_ i$ \u2013 the number of digits of $\\pi $ they have memorized\n - $b_ i$ \u2013 the number of hairs on their head\n - $c_ i$ \u2013 whether they will vote for Candidate\u00a0X\n\nUnfortunately, you are beginning to wonder if these are really the most relevant questions to ask. In fact, you cannot see any correlation between $a$, $b$, and $c$ in the data. Of course, you cannot just contradict your customer \u2013 that is a good way to lose your job!\n\nPerhaps the answer is to find some weighting formula to make the results look meaningful. You will pick two real values $S$ and $T$, and sort the poll results $(a_ i, b_ i, c_ i)$ by the measure $a_ i \\cdot S + b_ i \\cdot T$. The sort will look best if the results having $c_ i$ true are clustered as close to each other as possible. More precisely, if $j$ and $k$ are the indices of the first and last results with $c_ i$ true, you want to minimize the cluster size which is $k-j+1$. Note that some choices of $S$ and $T$ will result in ties among the $(a_ i,b_ i,c_ i)$ triples. When this happens, you should assume the worst possible ordering occurs (that which maximizes the cluster size for this $(S, T)$ pair).\n\n-----Input-----\nThe input starts with a line containing $n$ ($1 \\leq n \\leq 250000$), which is the number of people polled. This is followed by one line for each person polled. Each of those lines contains integers $a_ i$ ($0 \\leq a_ i \\leq 2000000$), $b_ i$ ($0 \\leq b_ i \\leq 2000000$), and $c_ i$, where $c_ i$ is $1$ if the person will vote for Candidate\u00a0X and $0$ otherwise. The input is guaranteed to contain at least one person who will vote for Candidate\u00a0X.", "QUESTION:\nAs an employee of the world\u2019s most respected political polling corporation, you must take complex, real-world issues and simplify them down to a few numbers. It isn\u2019t always easy. A big election is coming up and, at the request of Candidate\u00a0X, you have just finished polling $n$\u00a0people. You have gathered three pieces of information from each person, with the values for the $i^\\text {th}$ person recorded as:\n - $a_ i$ \u2013 the number of digits of $\\pi $ they have memorized\n - $b_ i$ \u2013 the number of hairs on their head\n - $c_ i$ \u2013 whether they will vote for Candidate\u00a0X\n\nUnfortunately, you are beginning to wonder if these are really the most relevant questions to ask. In fact, you cannot see any correlation between $a$, $b$, and $c$ in the data. Of course, you cannot just contradict your customer \u2013 that is a good way to lose your job!\n\nPerhaps the answer is to find some weighting formula to make the results look meaningful. You will pick two real values $S$ and $T$, and sort the poll results $(a_ i, b_ i, c_ i)$ by the measure $a_ i \\cdot S + b_ i \\cdot T$. The sort will look best if the results having $c_ i$ true are clustered as close to each other as possible. More precisely, if $j$ and $k$ are the indices of the first and last results with $c_ i$ true, you want to minimize the cluster size which is $k-j+1$. Note that some choices of $S$ and $T$ will result in ties among the $(a_ i,b_ i,c_ i)$ triples. When this happens, you should assume the worst possible ordering occurs (that which maximizes the cluster size for this $(S, T)$ pair).\n\n-----Input-----\nThe input starts with a line containing $n$ ($1 \\leq n \\leq 250000$), which is the number of people polled. This is followed by one line for each person polled. Each of those lines contains integers $a_ i$ ($0 \\leq a_ i \\leq 2000000$), $b_ i$ ($0 \\leq b_ i \\leq 2000000$), and $c_ i$, where $c_ i$ is $1$ if the person will vote for Candidate\u00a0X and $0$ otherwise. The input is guaranteed to contain at least one person who will vote for Candidate\u00a0X.", "QUESTION:\nAs an employee of the world\u2019s most respected political polling corporation, you must take complex, real-world issues and simplify them down to a few numbers. It isn\u2019t always easy. A big election is coming up and, at the request of Candidate\u00a0X, you have just finished polling $n$\u00a0people. You have gathered three pieces of information from each person, with the values for the $i^\\text {th}$ person recorded as:\n - $a_ i$ \u2013 the number of digits of $\\pi $ they have memorized\n - $b_ i$ \u2013 the number of hairs on their head\n - $c_ i$ \u2013 whether they will vote for Candidate\u00a0X\n\nUnfortunately, you are beginning to wonder if these are really the most relevant questions to ask. In fact, you cannot see any correlation between $a$, $b$, and $c$ in the data. Of course, you cannot just contradict your customer \u2013 that is a good way to lose your job!\n\nPerhaps the answer is to find some weighting formula to make the results look meaningful. You will pick two real values $S$ and $T$, and sort the poll results $(a_ i, b_ i, c_ i)$ by the measure $a_ i \\cdot S + b_ i \\cdot T$. The sort will look best if the results having $c_ i$ true are clustered as close to each other as possible. More precisely, if $j$ and $k$ are the indices of the first and last results with $c_ i$ true, you want to minimize the cluster size which is $k-j+1$. Note that some choices of $S$ and $T$ will result in ties among the $(a_ i,b_ i,c_ i)$ triples. When this happens, you should assume the worst possible ordering occurs (that which maximizes the cluster size for this $(S, T)$ pair).\n\n-----Input-----\nThe input starts with a line containing $n$ ($1 \\leq n \\leq 250000$), which is the number of people polled. This is followed by one line for each person polled. Each of those lines contains integers $a_ i$ ($0 \\leq a_ i \\leq 2000000$), $b_ i$ ($0 \\leq b_ i \\leq 2000000$), and $c_ i$, where $c_ i$ is $1$ if the person will vote for Candidate\u00a0X and $0$ otherwise. The input is guaranteed to contain at least one person who will vote for Candidate\u00a0X.", "QUESTION:\nAs an employee of the world\u2019s most respected political polling corporation, you must take complex, real-world issues and simplify them down to a few numbers. It isn\u2019t always easy. A big election is coming up and, at the request of Candidate\u00a0X, you have just finished polling $n$\u00a0people. You have gathered three pieces of information from each person, with the values for the $i^\\text {th}$ person recorded as:\n - $a_ i$ \u2013 the number of digits of $\\pi $ they have memorized\n - $b_ i$ \u2013 the number of hairs on their head\n - $c_ i$ \u2013 whether they will vote for Candidate\u00a0X\n\nUnfortunately, you are beginning to wonder if these are really the most relevant questions to ask. In fact, you cannot see any correlation between $a$, $b$, and $c$ in the data. Of course, you cannot just contradict your customer \u2013 that is a good way to lose your job!\n\nPerhaps the answer is to find some weighting formula to make the results look meaningful. You will pick two real values $S$ and $T$, and sort the poll results $(a_ i, b_ i, c_ i)$ by the measure $a_ i \\cdot S + b_ i \\cdot T$. The sort will look best if the results having $c_ i$ true are clustered as close to each other as possible. More precisely, if $j$ and $k$ are the indices of the first and last results with $c_ i$ true, you want to minimize the cluster size which is $k-j+1$. Note that some choices of $S$ and $T$ will result in ties among the $(a_ i,b_ i,c_ i)$ triples. When this happens, you should assume the worst possible ordering occurs (that which maximizes the cluster size for this $(S, T)$ pair).\n\n-----Input-----\nThe input starts with a line containing $n$ ($1 \\leq n \\leq 250000$), which is the number of people polled. This is followed by one line for each person polled. Each of those lines contains integers $a_ i$ ($0 \\leq a_ i \\leq 2000000$), $b_ i$ ($0 \\leq b_ i \\leq 2000000$), and $c_ i$, where $c_ i$ is $1$ if the person will vote for Candidate\u00a0X and $0$ otherwise. The input is guaranteed to contain at least one person who will vote for Candidate\u00a0X."], "prompt": "\nQUESTION:\nAs an employee of the world\u2019s most respected political polling corporation, you must take complex, real-world issues and simplify them down to a few numbers. It isn\u2019t always easy. A big election is coming up and, at the request of Candidate\u00a0X, you have just finished polling $n$\u00a0people. You have gathered three pieces of information from each person, with the values for the $i^\\text {th}$ person recorded as:\n - $a_ i$ \u2013 the number of digits of $\\pi $ they have memorized\n - $b_ i$ \u2013 the number of hairs on their head\n - $c_ i$ \u2013 whether they will vote for Candidate\u00a0X\n\nUnfortunately, you are beginning to wonder if these are really the most relevant questions to ask. In fact, you cannot see any correlation between $a$, $b$, and $c$ in the data. Of course, you cannot just contradict your customer \u2013 that is a good way to lose your job!\n\nPerhaps the answer is to find some weighting formula to make the results look meaningful. You will pick two real values $S$ and $T$, and sort the poll results $(a_ i, b_ i, c_ i)$ by the measure $a_ i \\cdot S + b_ i \\cdot T$. The sort will look best if the results having $c_ i$ true are clustered as close to each other as possible. More precisely, if $j$ and $k$ are the indices of the first and last results with $c_ i$ true, you want to minimize the cluster size which is $k-j+1$. Note that some choices of $S$ and $T$ will result in ties among the $(a_ i,b_ i,c_ i)$ triples. When this happens, you should assume the worst possible ordering occurs (that which maximizes the cluster size for this $(S, T)$ pair).\n\n-----Input-----\nThe input starts with a line containing $n$ ($1 \\leq n \\leq 250000$), which is the number of people polled. This is followed by one line for each person polled. Each of those lines contains integers $a_ i$ ($0 \\leq a_ i \\leq 2000000$), $b_ i$ ($0 \\leq b_ i \\leq 2000000$), and $c_ i$, where $c_ i$ is $1$ if the person will vote for Candidate\u00a0X and $0$ otherwise. The input is guaranteed to contain at least one person who will vote for Candidate\u00a0X.\n\n-----Output-----\nDisplay the smallest possible cluster size over all possible $(S, T)$ pairs.\n\n-----Examples-----\nSample Input 1:\n6\n0 10 0\n10 0 1\n12 8 1\n5 5 0\n11 2 1\n11 3 0\nSample Output 1:\n4\n\nSample Input 2:\n10\n6 1 1\n0 2 0\n2 1 1\n6 1 1\n8 2 0\n4 4 0\n4 0 0\n2 3 1\n6 1 0\n6 3 1\nSample Output 2:\n8\nPlease provide the solution as pure code only, without explanations or comments.\n\nANSWER:\n```python\n"}}