{"4880": {"code": ["n, m = map(int, input().split())\nlast_n", "def solve(n, m, last_letters, ciphertext):", "def autokey_decrypt(n, m, last_n_let", "def autokey_cipher(n, m, last_n, c", "n, m = map(int, input().split())\nlast_n"], "prompt": "\nQUESTION:\nJohn likes simple ciphers. He had been using the \u201cCaesar\u201d cipher to encrypt his diary until recently, when he learned a hard lesson about its strength by catching his sister Mary browsing through the diary without any problems.\n\nRapidly searching for an alternative, John found a solution: the famous \u201cAutokey\u201d cipher. He uses a version that takes the $26$ lower-case letters \u2018a\u2019\u2013\u2018z\u2019 and internally translates them in alphabetical order to the numbers $0$ to $25$.\n\nThe encryption key $k$ begins with a secret prefix of $n$ letters. Each of the remaining letters of the key is copied from the letters of the plaintext $a$, so that $k_{n+i} = a_{i}$ for $i \\geq 1$. Encryption of the plaintext $a$ to the ciphertext $b$ follows the formula $b_ i = a_ i + k_ i \\bmod 26$.\n\nMary is not easily discouraged. She was able to get a peek at the last $n$ letters John typed into his diary on the family computer before he noticed her, quickly encrypted the text document with a click, and left. This could be her chance.\n\n-----Input-----\nThe input consists of:\n - One line with two integers $n$ and $m$ ($1 \\le n \\le 30$, $n + 1 \\le m \\le 100$), where $n$ is the length of the keyword as well as the number of letters Mary saw, and $m$ is the length of the text.\n - One line with $n$ lower-case letters, the last $n$ letters of the plaintext.\n - One line with $m$ lower-case letters, the whole ciphertext.\n\n-----Output-----\nOutput the plaintext of John\u2019s diary.\n\n-----Examples-----\nSample Input:\n5 16\nagain\npirpumsemoystoal\nSample Output:\nmarywasnosyagain\nPlease provide the solution as pure code only, without explanations or comments.\n\nANSWER:\n```python\n"}}