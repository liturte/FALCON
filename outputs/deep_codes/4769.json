{"4769": {"code": ["from collections import Counter\n\ndef is_multigram(word):\n    word_counts = Counter(word)\n    counts = list(word_counts.values())\n    return min(counts) > 1\n\ndef find_root(word):\n    if not is_multigram(word):\n        return \"-1\"\n    else:\n        word_counts = Counter(word)\n        counts = list(word_counts.values())\n        min_count = min(counts)\n        root_candidates = [letter * min_count for letter, count in word_counts.items() if count == min_count]\n        return min(root_candidates)\n\nword = input()\nprint(find_root(word))\n\nThis code first checks if the word is", "from collections import Counter\n\ndef is_anagram(s1, s2):\n    return Counter(s1) == Counter(s2)\n\ndef shortest_root(word):\n    n = len(word)\n    for i in range(1, n//2+1):\n        if n % i == 0:\n            m = n // i\n            temp = [word[j:j+i] for j in range(0, len(word), i)]\n            if all(is_anagram(temp[0], temp[j]) for j in range(1, m)):\n                return temp[0]\n    return -1\n\nword = input()\nprint(shortest_root(word))\n\nThis code first checks if the word is a multigram. If it is, it finds", "from collections import Counter\n\ndef shortest_root(word):\n    length = len(word)\n    if length < 2:\n        return '-1'\n    for i in range(1, length):\n        if Counter(word[:i]) == Counter(word[i:2*i]):\n            return word[:i]\n    return '-1'\n\nword = input().strip()\nprint(shortest_root(word))\n\nThis Python code uses the `Counter` from the `collections` module to count the frequency of each character in the substring of the word. It then checks if the two substrings are anagrams by comparing the `Counter` objects. If they are, it returns the shortest root of the word. If no root is found, it returns -1.", "from collections import Counter\n\ndef solve(word):\n    n = len(word)\n    for i in range(1, n // 2 + 1):\n        if n % i == 0:\n            chunks = [word[j:j+i] for j in range(0, len(word), i)]\n            if all(Counter(chunk) == Counter(word[:i]) for chunk in chunks):\n                return word[:i]\n    return -1\n\nword = input().strip()\nprint(solve(word))\n\n\nExplanation:\nThe solution works by iterating over all possible lengths of the root of the multigram (from 1 to n // 2 + 1). For each length, it checks if the word can be divided into chunks of that length and if all these chunks are", "from collections import Counter\n\ndef smallest_multigram(word):\n    length = len(word)\n    for size in range(1, length // 2 + 1):\n        if length % size != 0:\n            continue\n        pieces = [word[i:i+size] for i in range(0, len(word), size)]\n        if all(Counter(piece) == Counter(word) for piece in pieces):\n            return word[:size]\n    return -1\n\nprint(smallest_multigram(input().strip()))\n\n\nThis code works by trying to divide the word into pieces of equal size (i.e., the size of the root), and checking if all the pieces are anagrams of the original word. If they are, it returns the root (i.e., the first piece). If"], "prompt": "\nQUESTION:\nPero is a passionate lover of riddles. The newest type of riddles he has come across requires the solver to check whether the given word is a multigram.\n\nA multigram is a word that consists of concatenating two or more words that are all mutually anagrams. The first of these words is called the root of the multigram. For instance, the word bbabab is a multigram with the root bba because it consists of anagrams bba and bab.\n\nHelp Pero solve the riddle by determining whether his word is a multigram and determining its root in case it is. If there are multiple possible roots of the multigram, output the shortest.\n\nNote: Two words are mutually anagrams if one of them can be obtained from the other by changing the letter order.\n\n-----Input-----\nThe first and only line of input contains a word of length at most $100000$ lowercase English characters.\n\n-----Output-----\nIf the given word is not a multigram, output -1. Otherwise, output the shortest root of the given word in one line.\n\n-----Examples-----\nSample Input 1:\naaaa\nSample Output 1:\na\n\nSample Input 2:\nab\nSample Output 2:\n-1\nPlease provide the solution as pure code only, without explanations or comments.\n\nANSWER:\n```python\n"}}