{"1725": {"code": ["n, m, d = map(int, input().split())\nmatrix = [list(map(int, input().split())) for _ in range(n)]\nmin_el = min(min(row) for row in matrix)\ncount = 0\nfor i in range(n):\n    for j in range(m):\n        if (matrix[i][j] - min_el) % d != 0:\n            print(-1)\n            exit(0)\n        count += (matrix[i][j] - min_el) // d\nprint(count)\n\nThis solution works by first finding the smallest element in the matrix. Then it iterates over all elements in the matrix, checking", "import sys\n\nn, m, d = map(int, sys.stdin.readline().split())\na = []\nfor _ in range(n):\n    a.append(list(map(int, sys.stdin.readline().split())))\n\nmin_elem = min([min(row) for row in a])\nmax_elem = max([max(row) for row in a])\n\nif max_elem - min_elem > 2*d:\n    print(-1)\nelse:\n    moves = 0\n    for i in range(n):\n        for j in range(m):\n            if a[i][j] < min_elem + d:", "n, m, d = map(int, input().split())\na = [list(map(int, input().split())) for _ in range(n)]\nmn, mx = min(min(row) for row in a), max(max(row) for row in a)\nif any((mx - mn) % d for _ in range(n * m)):\n    print(-1)\nelse:\n    print((mx - mn) // d)\n\n\nThis Python solution first reads the input and converts it into a 2D list `a`. It then finds the smallest and largest values in the matrix `a`. It checks if it's possible to make all elements", "n, m, d = map(int, input().split())\na = [list(map(int, input().split())) for _ in range(n)]\na = sorted([item for sublist in a for item in sublist])\n\nif a[0] == a[-1]:\n    print(0)\nelif (a[-1] - a[0]) % (n * m - 1) == 0:\n    print((a[-1] - a[0]) // (n * m - 1))\nelse:\n    print(-1)\n\n\nThis solution works by first flattening the 2D array into a 1D array and sorting it. Then it", "def solve():\n    n, m, d = map(int, input().split())\n    matrix = [list(map(int, input().split())) for _ in range(n)]\n    min_el = min(min(row) for row in matrix)\n    min_ops = sum(sum((el - min_el) // d for el in row) for row in matrix)\n    if all((el - min_el) % d == 0 for row in matrix for el in row):\n        print(min_ops)\n    else:\n        print(-1)\n\nsolve()\n\n\nThis program works by first finding the minimum element in the matrix. It then calculates the minimum"], "prompt": "\nQUESTION:\nLittle penguin Polo has an n \u00d7 m matrix, consisting of integers. Let's index the matrix rows from 1 to n from top to bottom and let's index the columns from 1 to m from left to right. Let's represent the matrix element on the intersection of row i and column j as a_{ij}.\n\nIn one move the penguin can add or subtract number d from some matrix element. Find the minimum number of moves needed to make all matrix elements equal. If the described plan is impossible to carry out, say so.\n\n\n-----Input-----\n\nThe first line contains three integers n, m and d (1 \u2264 n, m \u2264 100, 1 \u2264 d \u2264 10^4) \u2014 the matrix sizes and the d parameter. Next n lines contain the matrix: the j-th integer in the i-th row is the matrix element a_{ij} (1 \u2264 a_{ij} \u2264 10^4).\n\n\n-----Output-----\n\nIn a single line print a single integer \u2014 the minimum number of moves the penguin needs to make all matrix elements equal. If that is impossible, print \"-1\" (without the quotes).\n\n\n-----Examples-----\nInput\n2 2 2\n2 4\n6 8\n\nOutput\n4\n\nInput\n1 2 7\n6 7\n\nOutput\n-1\nPlease provide the solution as pure code only, without explanations or comments.\n\nANSWER:\n```python\n"}}