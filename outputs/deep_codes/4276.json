{"4276": {"code": ["N, T = map(int, input().split())\nroutes = [list(map(int, input().split())) for _ in range(N)]\nroutes.sort()\nfor c, t in routes:\n    if t <= T:\n        print(c)\n        break\nelse:\n    print('TLE')\n\n\nExplanation:\nThe code first reads the number of routes N and the maximum time T. Then it reads the cost c and time t for each route and stores them in a list. The list is sorted in ascending order of", "N, T = map(int, input().split())\nroutes = [list(map(int, input().split())) for _ in range(N)]\nroutes.sort()\n\nans = 'TLE'\nfor c, t in routes:\n    if t <= T:\n        ans = c\n        break\n\nprint(ans)\n\n\nEXPLANATION:\nThe problem is about finding the minimum cost of a route that takes not longer than a given time. The input consists of N number of routes and a time T. The routes are given as", "N, T = map(int, input().split())\nroutes = [list(map(int, input().split())) for _ in range(N)]\nroutes.sort()\nfor c, t in routes:\n    if t <= T:\n        print(c)\n        break\nelse:\n    print(\"TLE\")\n\n\nThis solution sorts the routes in ascending order of cost. It then iterates over the sorted routes, checking if each one takes less than or equal to the given time T. If a route does, it prints the cost of that route", "def solve():\n    N, T = map(int, input().split())\n    routes = [list(map(int, input().split())) for _ in range(N)]\n\n    routes.sort()\n\n    dp = [float('inf')] * (T + 1)\n    dp[0] = 0\n\n    for i in range(N):\n        for j in range(T, routes[i][1] - 1, -1):\n            dp[j] = min(dp[j], dp[j - routes[", "N, T = map(int, input().split())\nroutes = [list(map(int, input().split())) for _ in range(N)]\nroutes.sort()\n\nans = T + 1\nfor c, t in routes:\n    if t <= T:\n        ans = min(ans, c)\n    else:\n        break\n\nif ans <= T:\n    print(ans)\nelse:\n    print('TLE')\n\n\nEXPLANATION:\nThe problem can be solved by sorting the routes based on"], "prompt": "\nQUESTION:\nWhen Mr. X is away from home, he has decided to use his smartwatch to search the best route to go back home, to participate in ABC.\nYou, the smartwatch, has found N routes to his home.\nIf Mr. X uses the i-th of these routes, he will get home in time t_i at cost c_i.\nFind the smallest cost of a route that takes not longer than time T.\n\n-----Constraints-----\n - All values in input are integers.\n - 1 \\leq N \\leq 100\n - 1 \\leq T \\leq 1000\n - 1 \\leq c_i \\leq 1000\n - 1 \\leq t_i \\leq 1000\n - The pairs (c_i, t_i) are distinct.\n\n-----Input-----\nInput is given from Standard Input in the following format:\nN T\nc_1 t_1\nc_2 t_2\n:\nc_N t_N\n\n-----Output-----\nPrint the smallest cost of a route that takes not longer than time T.\nIf there is no route that takes not longer than time T, print TLE instead.\n\n-----Sample Input-----\n3 70\n7 60\n1 80\n4 50\n\n-----Sample Output-----\n4\n\n - The first route gets him home at cost 7.\n - The second route takes longer than time T = 70.\n - The third route gets him home at cost 4.\nThus, the cost 4 of the third route is the minimum.\nPlease provide the solution as pure code only, without explanations or comments.\n\nANSWER:\n```python\n"}}