{"2631": {"code": ["class Solution:\n    def canFinish(self, numCourses: int, prerequisites: List[List[int]]) -> bool:\n        graph = [[] for _ in range(numCourses)]\n        visited = [0 for _ in range(numCourses)]\n        \n        for pair in prerequisites:\n            x, y = pair\n            graph[x].append(y)\n        \n        def is_cyclic(v, visited, stack):\n            visited[v] = 1\n            stack[v] = 1\n            \n            for neighbor in graph[", "class Solution:\n    def canFinish(self, numCourses: int, prerequisites: List[List[int]]) -> bool:\n        graph = [[] for _ in range(numCourses)]\n        degrees = [0] * numCourses\n        for j, i in prerequisites:\n            graph[i].append(j)\n            degrees[j] += 1\n        queue = [i for i in range(numCourses) if degrees[i] == 0]\n        while queue:\n            node = queue.pop(0)\n            for i in graph", "class Solution:\n    def canFinish(self, numCourses: int, prerequisites: List[List[int]]) -> bool:\n        graph = [[] for _ in range(numCourses)]\n        visited = [0 for _ in range(numCourses)]\n        \n        for pair in prerequisites:\n            x, y = pair\n            graph[x].append(y)\n        \n        def is_cyclic(v, visited, stack):\n            visited[v] = 1\n            stack[v] = 1\n            \n            for neighbor in graph[", "class Solution:\n    def canFinish(self, numCourses: int, prerequisites: List[List[int]]) -> bool:\n        graph = [[] for _ in range(numCourses)]\n        visited = [0 for _ in range(numCourses)]\n        \n        for pair in prerequisites:\n            x, y = pair\n            graph[x].append(y)\n        \n        def isCyclic(v: int, visited: List[int], stack: List[int]) -> bool:\n            visited[v] = 1\n            stack[", "class Solution:\n    def canFinish(self, numCourses: int, prerequisites: List[List[int]]) -> bool:\n        graph = [[] for _ in range(numCourses)]\n        visited = [0 for _ in range(numCourses)]\n        for pair in prerequisites:\n            x, y = pair\n            graph[x].append(y)\n        def is_cyclic(v, visited, stack):\n            visited[v] = 1\n            stack[v] = 1\n            for neighbor in graph[v]:\n                if visited"], "prompt": "\nQUESTION:\nThere are a total of n courses you have to take, labeled from 0 to n-1.\n\nSome courses may have prerequisites, for example to take course 0 you have to first take course 1, which is expressed as a pair: [0,1]\n\nGiven the total number of courses and a list of prerequisite pairs, is it possible for you to finish all courses?\n\nExample 1:\n\n\nInput: 2, [[1,0]] \nOutput: true\nExplanation:\u00a0There are a total of 2 courses to take. \n\u00a0            To take course 1 you should have finished course 0. So it is possible.\n\nExample 2:\n\n\nInput: 2, [[1,0],[0,1]]\nOutput: false\nExplanation:\u00a0There are a total of 2 courses to take. \n\u00a0            To take course 1 you should have finished course 0, and to take course 0 you should\n\u00a0            also have finished course 1. So it is impossible.\n\n\nNote:\n\n\n       The input prerequisites is a graph represented by a list of edges, not adjacency matrices. Read more about how a graph is represented.\n       You may assume that there are no duplicate edges in the input prerequisites.\nSTARTER CODE:\nclass Solution:\n    def canFinish(self, numCourses: int, prerequisites: List[List[int]]) -> bool:\n        \n\nPlease provide the solution as pure code only, without explanations or comments.\n\nANSWER:\n```python\n"}}