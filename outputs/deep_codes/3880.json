{"3880": {"code": ["n = int(input())\narr = list(map(int, input().split()))\narr.sort()\nprint(sum(arr[n-1:])*2)\n\n\nEXPLANATION:\nThe problem is asking to maximize the sum of the array. If we sort the array, the maximum sum will be obtained when we change the sign of the smallest absolute values, which is what we do in our code. We sort the array, then select the n smallest elements (from index n-1 to end), and multiply them by -1 to maximize the sum. The sum of the remaining elements (from 0 to n-1) is added to the total sum to get the final maximum sum.\n\nThis solution has a time complexity of O(n", "n = int(input())\narr = sorted(list(map(int, input().split())))\nprint(sum(arr[n-1:])*2)\n\n\nEXPLANATION:\nThe problem is asking to maximize the sum of the array after performing the operations. If we sort the array in ascending order and choose the n smallest elements, we can maximize the sum. Since we can change the sign of n elements, we need to multiply the sum of the n smallest elements by -1 to minimize the sum. So we print the sum of the n smallest elements multiplied by 2.\n\nThis solution works because it always makes the n smallest elements negative and the largest elements positive. This way, the sum of the n smallest elements is maximized,", "n = int(input())\narr = list(map(int, input().split()))\narr.sort()\nprint(sum(arr[n-1:])*2)\n\n\nThis solution works by first sorting the array in ascending order. Then, it takes the sum of the last n elements in the array (since the smallest n elements are the ones that would be changed to negative), multiplies this sum by 2 (since in each operation we are changing the sign of n elements, so we are effectively doubling the sum of the positive elements), and prints the result.\n\nThis solution assumes that the array elements are integers. If the array elements are not integers, or if the array elements are not integers between -1000 and 100", "n = int(input())\narr = list(map(int, input().split()))\narr.sort()\nfor i in range(n):\n    arr[i] = -arr[i]\nprint(sum(arr))\n\n\nExplanation:\nThis code sorts the array in ascending order and then flips the sign of the first n elements (the smallest elements). The sum of the array elements is then computed and printed.\n\nThe reason why this works is because changing the sign of the smallest n elements will maximize the sum of the array elements. This is because the smallest n elements will become the largest n elements when their signs are flipped.\n\nFor example, consider the array [-3, -2, 1, 2, 3", "n = int(input())\narr = sorted(list(map(int, input().split())))\nprint(sum(arr[:-n]) - sum(arr[-n:]))\n\n\nEXPLANATION:\nThis solution first sorts the array in ascending order. Then, it calculates the sum of the smallest n elements and the largest n elements in the array separately. The difference between these two sums is the maximum sum that Yaroslav can get.\n\nIn the end, we print the difference.\n\nThis solution works because changing the sign of the smallest n elements makes them larger, and changing the sign of the largest n elements makes them smaller. Therefore, the total sum is increased by the sum of the smallest n elements and decreased by the sum of the"], "prompt": "\nQUESTION:\nYaroslav has an array, consisting of (2\u00b7n - 1) integers. In a single operation Yaroslav can change the sign of exactly n elements in the array. In other words, in one operation Yaroslav can select exactly n array elements, and multiply each of them by -1.\n\nYaroslav is now wondering: what maximum sum of array elements can be obtained if it is allowed to perform any number of described operations?\n\nHelp Yaroslav.\n\n\n-----Input-----\n\nThe first line contains an integer n (2 \u2264 n \u2264 100). The second line contains (2\u00b7n - 1) integers \u2014 the array elements. The array elements do not exceed 1000 in their absolute value.\n\n\n-----Output-----\n\nIn a single line print the answer to the problem \u2014 the maximum sum that Yaroslav can get.\n\n\n-----Examples-----\nInput\n2\n50 50 50\n\nOutput\n150\n\nInput\n2\n-1 -100 -1\n\nOutput\n100\n\n\n\n-----Note-----\n\nIn the first sample you do not need to change anything. The sum of elements equals 150.\n\nIn the second sample you need to change the sign of the first two elements. Then we get the sum of the elements equal to 100.\nPlease provide the solution as pure code only, without explanations or comments.\n\nANSWER:\n```python\n"}}