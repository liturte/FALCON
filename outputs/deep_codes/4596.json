{"4596": {"code": ["import sys\nfrom collections import deque\n\ndef solve():\n    input = sys.stdin.readline\n    n = int(input())\n    q = deque(sorted((int(i) for i in input().split())))\n    res = 0\n    while len(q) > 1:\n        q[1] += q[0]\n        res += q[0]\n        q.popleft()\n        q.append(q[0] // 2)\n        q.sort()\n    print(res)\n\nsolve()\n\nThis code reads the input and stores the numbers in a deque. It then enters a loop where it continuously halves the smallest number", "N = int(input())\nA = list(map(int, input().split()))\ncount = 0\n\nwhile all(a % 2 == 0 for a in A):\n    A = [a // 2 for a in A]\n    count += 1\n\nprint(count)\n\n\nThis Python code works by first reading in the number of integers `N` and the integers themselves. It then enters a while loop that continues until all numbers in `A` are no longer even. Inside the loop, it divides each number by 2 and increments the count for each operation. Finally, it prints out the count of operations.\n\nThis solution has a time complexity of O(N) since in the worst case", "N = int(input())\nA = list(map(int, input().split()))\n\ncount = 0\nwhile all(x % 2 == 0 for x in A):\n    A = [x // 2 for x in A]\n    count += 1\n\nprint(count)\n\n\nThis Python script reads the input and checks if all numbers are even. If they are, it divides all numbers by 2 and increments the count by 1. The loop continues until there is at least one odd number in the list. Finally, it prints the count.\n\nPlease note that this code assumes that the input is always valid and does not handle any potential errors or exceptions.", "N = int(input())\nA = list(map(int, input().split()))\n\ndef max_operations(N, A):\n    count = 0\n    while all(a % 2 == 0 for a in A):\n        A = [a / 2 for a in A]\n        count += 1\n    return count\n\nprint(max_operations(N, A))\n\n\nExplanation:\nThe function `max_operations` takes two arguments, `N` and `A`. `N` is the number of integers and `A` is the list of integers. The function returns the maximum number of operations that Snuke can perform.\n\nThe function runs a while", "N = int(input())\nA = list(map(int, input().split()))\n\ndef solve(n, a):\n    count = 0\n    while all(x % 2 == 0 for x in a):\n        a = [x // 2 for x in a]\n        count += 1\n    return count\n\nprint(solve(N, A))\n\n\nThis python code takes the number of integers and the list of integers as inputs. The function `solve` checks if all the integers in the list are even. If they are, it divides each integer by 2 and increments the count by 1. It continues to do this until there are no more even integers in the list."], "prompt": "\nQUESTION:\nThere are N positive integers written on a blackboard: A_1, ..., A_N.\nSnuke can perform the following operation when all integers on the blackboard are even:\n - Replace each integer X on the blackboard by X divided by 2.\nFind the maximum possible number of operations that Snuke can perform.\n\n-----Constraints-----\n - 1 \\leq N \\leq 200\n - 1 \\leq A_i \\leq 10^9\n\n-----Input-----\nInput is given from Standard Input in the following format:\nN\nA_1 A_2 ... A_N\n\n-----Output-----\nPrint the maximum possible number of operations that Snuke can perform.\n\n-----Sample Input-----\n3\n8 12 40\n\n-----Sample Output-----\n2\n\nInitially, [8, 12, 40] are written on the blackboard.\nSince all those integers are even, Snuke can perform the operation.\nAfter the operation is performed once, [4, 6, 20] are written on the blackboard.\nSince all those integers are again even, he can perform the operation.\nAfter the operation is performed twice, [2, 3, 10] are written on the blackboard.\nNow, there is an odd number 3 on the blackboard, so he cannot perform the operation any more.\nThus, Snuke can perform the operation at most twice.\nPlease provide the solution as pure code only, without explanations or comments.\n\nANSWER:\n```python\n"}}