{"1047": {"code": ["def quasibinary(n):\n    if n == 0:\n        return []\n    elif n <= 2:\n        return [n]\n    elif n == 3:\n        return [1, 2]\n    else:\n        return quasibinary(n - 3) + [1, 1, 1]\n\nn = int(input())\nprint(len(quasibinary(n)))\nprint(' '.join(map(str, quasibinary(n))))\n\n\nThis code works by recursively subtracting 3 from the input number until it becomes less than or equal to 3. For each step, it adds [1, 1, 1] to the list of numbers. If the result is 3, it adds [1, 2] to the list. If the result is 0 or 1 or", "def quasibinary_representation(n):\n    if n == 0:\n        return []\n    elif n == 1:\n        return [1]\n    else:\n        return [1] + quasibinary_representation(n - 2)\n\nn = int(input())\nprint(n)\nprint(' '.join(map(str, quasibinary_representation(n))))\n\n\nEXPLANATION:\nThe solution uses a recursive function to generate the quasibinary representation of a given number. If the number is 0 or 1, the function returns an empty list or a list containing 1 respectively. For other numbers, the function returns a list that starts with 1 and continues with the quasibinary representation of the number minus 2. This is done recursively until the number becomes 0 or 1. The generated list", "def quasibinary(n):\n    if n == 0:\n        return []\n    if n <= 2:\n        return [n]\n    if n == 3:\n        return [1, 2]\n    if n % 2 == 0:\n        return [2] + quasibinary(n // 2)\n    else:\n        return [1] + quasibinary(n // 2)\n\nn = int(input())\nprint(len(quasibinary(n)))\nprint(*quasibinary(n))\n\n\nThis program works by recursively breaking down the number into its quasibinary components. If the number is even, it is divided by 2 and the result is prepended with a 2. If the number is odd, it is divided by 2 and the result is prepended with a", "def quasibinary_representation(n):\n    if n == 0:\n        return []\n    elif n <= 2:\n        return [n]\n    elif n == 3:\n        return [1, 2]\n    else:\n        return quasibinary_representation(n - 3) + [3]\n\nn = int(input())\nprint(len(quasibinary_representation(n)))\nprint(*quasibinary_representation(n))\n\n\nThis solution uses a recursive approach to break down the problem into smaller sub-problems. It first checks if the number is 0, in which case it returns an empty list. If the number is 1 or 2, it returns a list containing the number itself. If the number is 3, it returns a list containing 1 and 2. For any", "def quasibinary_representation(n):\n    result = []\n    i = 1\n    while n > 0:\n        if n >= 2**i:\n            result.append(2**i)\n            n -= 2**i\n        else:\n            i += 1\n    return result\n\nn = int(input())\nprint(len(quasibinary_representation(n)))\nprint(' '.join(map(str, quasibinary_representation(n))))\n\n\nThis code works by first defining a function `quasibinary_representation` that calculates the minimum number of quasibinary numbers that sum up to `n`. It does this by iteratively subtracting the largest possible quasibinary number from `n` and adding it to the result list until `n` becomes zero. It then prints the length of the"], "prompt": "\nQUESTION:\nA number is called quasibinary if its decimal representation contains only digits 0 or 1. For example, numbers 0, 1, 101, 110011\u00a0\u2014 are quasibinary and numbers 2, 12, 900 are not.\n\nYou are given a positive integer n. Represent it as a sum of minimum number of quasibinary numbers.\n\n\n-----Input-----\n\nThe first line contains a single integer n (1 \u2264 n \u2264 10^6).\n\n\n-----Output-----\n\nIn the first line print a single integer k\u00a0\u2014 the minimum number of numbers in the representation of number n as a sum of quasibinary numbers.\n\nIn the second line print k numbers \u2014 the elements of the sum. All these numbers should be quasibinary according to the definition above, their sum should equal n. Do not have to print the leading zeroes in the numbers. The order of numbers doesn't matter. If there are multiple possible representations, you are allowed to print any of them.\n\n\n-----Examples-----\nInput\n9\n\nOutput\n9\n1 1 1 1 1 1 1 1 1 \n\nInput\n32\n\nOutput\n3\n10 11 11\nPlease provide the solution as pure code only, without explanations or comments.\n\nANSWER:\n```python\n"}}