{"2925": {"code": ["QUESTION:\nYour slightly pointy-bearded boss has assigned you to write software to find the best songs from different music albums. And the software should be finished in an hour. But don\u2019t panic, you don\u2019t have to solve the problem of writing an AI with good taste. At your disposal is the impeccable taste of a vast horde of long-tailed monkeys. Well, at least almost. The monkeys are not very communicative (or rather, you\u2019re not sure which song \u201cOok!\u201d is supposed to refer to) so you can\u2019t ask them which songs are the best. What you can do however is to look at which songs the monkeys have listened to and use this information to deduce which songs are the best. \n\nAt first, you figure that the most listened to songs must be the best songs. However, you quickly realize that this approach is flawed. Even if all songs of the album are equally good, the early songs are more likely to be listened to more often than the later ones, because monkeys will tend to start listening to the first song, listen for a few songs and then, when their fickle ears start craving something else, stop listening. Instead, if all songs are equal, you expect that their play frequencies should follow Zipf\u2019s Law.\n\nZipf\u2019s Law is an empirical law originally formulated about word frequencies in natural languages, but it has been observed that many natural phenomena, such as population sizes and incomes, approximately follow the same law. It predicts that the relative frequency of the $i$\u2019th most common object (in this case, a song) should be proportional to $1/i$.\n\nTo illustrate this in our setting, suppose we have an album where all songs are equally good. Then by Zipf\u2019s Law, you expect that the first song is listened to twice as often as the second song, and more generally that the first song is listened to $i$ times as often as the $i$\u2019th song. When some songs are better than others, those will be listened to more often than predicted by Zipf\u2019s Law, and those are the songs your program should select as the good songs. Specifically, suppose that song $i$ has been played $f_ i$ times but that Zipf\u2019s Law predicts that it would have been played $z_ i$ times. Then you define the quality of song $i$ to be $q_ i = f_ i/z_ i$. Your software should select the songs with the highest values of $q_ i$.\n\n-----Input-----\nThe first line of input contains two integers $n$ and $m$ ($1 \\le n \\le 50000$, $1 \\le", "QUESTION:\nYour slightly pointy-bearded boss has assigned you to write software to find the best songs from different music albums. And the software should be finished in an hour. But don\u2019t panic, you don\u2019t have to solve the problem of writing an AI with good taste. At your disposal is the impeccable taste of a vast horde of long-tailed monkeys. Well, at least almost. The monkeys are not very communicative (or rather, you\u2019re not sure which song \u201cOok!\u201d is supposed to refer to) so you can\u2019t ask them which songs are the best. What you can do however is to look at which songs the monkeys have listened to and use this information to deduce which songs are the best. \n\nAt first, you figure that the most listened to songs must be the best songs. However, you quickly realize that this approach is flawed. Even if all songs of the album are equally good, the early songs are more likely to be listened to more often than the later ones, because monkeys will tend to start listening to the first song, listen for a few songs and then, when their fickle ears start craving something else, stop listening. Instead, if all songs are equal, you expect that their play frequencies should follow Zipf\u2019s Law.\n\nZipf\u2019s Law is an empirical law originally formulated about word frequencies in natural languages, but it has been observed that many natural phenomena, such as population sizes and incomes, approximately follow the same law. It predicts that the relative frequency of the $i$\u2019th most common object (in this case, a song) should be proportional to $1/i$.\n\nTo illustrate this in our setting, suppose we have an album where all songs are equally good. Then by Zipf\u2019s Law, you expect that the first song is listened to twice as often as the second song, and more generally that the first song is listened to $i$ times as often as the $i$\u2019th song. When some songs are better than others, those will be listened to more often than predicted by Zipf\u2019s Law, and those are the songs your program should select as the good songs. Specifically, suppose that song $i$ has been played $f_ i$ times but that Zipf\u2019s Law predicts that it would have been played $z_ i$ times. Then you define the quality of song $i$ to be $q_ i = f_ i/z_ i$. Your software should select the songs with the highest values of $q_ i$.\n\n-----Input-----\nThe first line of input contains two integers $n$ and $m$ ($1 \\le n \\le 50000$, $1 \\le", "QUESTION:\nYour slightly pointy-bearded boss has assigned you to write software to find the best songs from different music albums. And the software should be finished in an hour. But don\u2019t panic, you don\u2019t have to solve the problem of writing an AI with good taste. At your disposal is the impeccable taste of a vast horde of long-tailed monkeys. Well, at least almost. The monkeys are not very communicative (or rather, you\u2019re not sure which song \u201cOok!\u201d is supposed to refer to) so you can\u2019t ask them which songs are the best. What you can do however is to look at which songs the monkeys have listened to and use this information to deduce which songs are the best. \n\nAt first, you figure that the most listened to songs must be the best songs. However, you quickly realize that this approach is flawed. Even if all songs of the album are equally good, the early songs are more likely to be listened to more often than the later ones, because monkeys will tend to start listening to the first song, listen for a few songs and then, when their fickle ears start craving something else, stop listening. Instead, if all songs are equal, you expect that their play frequencies should follow Zipf\u2019s Law.\n\nZipf\u2019s Law is an empirical law originally formulated about word frequencies in natural languages, but it has been observed that many natural phenomena, such as population sizes and incomes, approximately follow the same law. It predicts that the relative frequency of the $i$\u2019th most common object (in this case, a song) should be proportional to $1/i$.\n\nTo illustrate this in our setting, suppose we have an album where all songs are equally good. Then by Zipf\u2019s Law, you expect that the first song is listened to twice as often as the second song, and more generally that the first song is listened to $i$ times as often as the $i$\u2019th song. When some songs are better than others, those will be listened to more often than predicted by Zipf\u2019s Law, and those are the songs your program should select as the good songs. Specifically, suppose that song $i$ has been played $f_ i$ times but that Zipf\u2019s Law predicts that it would have been played $z_ i$ times. Then you define the quality of song $i$ to be $q_ i = f_ i/z_ i$. Your software should select the songs with the highest values of $q_ i$.\n\n-----Input-----\nThe first line of input contains two integers $n$ and $m$ ($1 \\le n \\le 50000$, $1 \\le", "QUESTION:\nYour slightly pointy-bearded boss has assigned you to write software to find the best songs from different music albums. And the software should be finished in an hour. But don\u2019t panic, you don\u2019t have to solve the problem of writing an AI with good taste. At your disposal is the impeccable taste of a vast horde of long-tailed monkeys. Well, at least almost. The monkeys are not very communicative (or rather, you\u2019re not sure which song \u201cOok!\u201d is supposed to refer to) so you can\u2019t ask them which songs are the best. What you can do however is to look at which songs the monkeys have listened to and use this information to deduce which songs are the best. \n\nAt first, you figure that the most listened to songs must be the best songs. However, you quickly realize that this approach is flawed. Even if all songs of the album are equally good, the early songs are more likely to be listened to more often than the later ones, because monkeys will tend to start listening to the first song, listen for a few songs and then, when their fickle ears start craving something else, stop listening. Instead, if all songs are equal, you expect that their play frequencies should follow Zipf\u2019s Law.\n\nZipf\u2019s Law is an empirical law originally formulated about word frequencies in natural languages, but it has been observed that many natural phenomena, such as population sizes and incomes, approximately follow the same law. It predicts that the relative frequency of the $i$\u2019th most common object (in this case, a song) should be proportional to $1/i$.\n\nTo illustrate this in our setting, suppose we have an album where all songs are equally good. Then by Zipf\u2019s Law, you expect that the first song is listened to twice as often as the second song, and more generally that the first song is listened to $i$ times as often as the $i$\u2019th song. When some songs are better than others, those will be listened to more often than predicted by Zipf\u2019s Law, and those are the songs your program should select as the good songs. Specifically, suppose that song $i$ has been played $f_ i$ times but that Zipf\u2019s Law predicts that it would have been played $z_ i$ times. Then you define the quality of song $i$ to be $q_ i = f_ i/z_ i$. Your software should select the songs with the highest values of $q_ i$.\n\n-----Input-----\nThe first line of input contains two integers $n$ and $m$ ($1 \\le n \\le 50000$, $1 \\le", "QUESTION:\nYour slightly pointy-bearded boss has assigned you to write software to find the best songs from different music albums. And the software should be finished in an hour. But don\u2019t panic, you don\u2019t have to solve the problem of writing an AI with good taste. At your disposal is the impeccable taste of a vast horde of long-tailed monkeys. Well, at least almost. The monkeys are not very communicative (or rather, you\u2019re not sure which song \u201cOok!\u201d is supposed to refer to) so you can\u2019t ask them which songs are the best. What you can do however is to look at which songs the monkeys have listened to and use this information to deduce which songs are the best. \n\nAt first, you figure that the most listened to songs must be the best songs. However, you quickly realize that this approach is flawed. Even if all songs of the album are equally good, the early songs are more likely to be listened to more often than the later ones, because monkeys will tend to start listening to the first song, listen for a few songs and then, when their fickle ears start craving something else, stop listening. Instead, if all songs are equal, you expect that their play frequencies should follow Zipf\u2019s Law.\n\nZipf\u2019s Law is an empirical law originally formulated about word frequencies in natural languages, but it has been observed that many natural phenomena, such as population sizes and incomes, approximately follow the same law. It predicts that the relative frequency of the $i$\u2019th most common object (in this case, a song) should be proportional to $1/i$.\n\nTo illustrate this in our setting, suppose we have an album where all songs are equally good. Then by Zipf\u2019s Law, you expect that the first song is listened to twice as often as the second song, and more generally that the first song is listened to $i$ times as often as the $i$\u2019th song. When some songs are better than others, those will be listened to more often than predicted by Zipf\u2019s Law, and those are the songs your program should select as the good songs. Specifically, suppose that song $i$ has been played $f_ i$ times but that Zipf\u2019s Law predicts that it would have been played $z_ i$ times. Then you define the quality of song $i$ to be $q_ i = f_ i/z_ i$. Your software should select the songs with the highest values of $q_ i$.\n\n-----Input-----\nThe first line of input contains two integers $n$ and $m$ ($1 \\le n \\le 50000$, $1 \\le"], "prompt": "\nQUESTION:\nYour slightly pointy-bearded boss has assigned you to write software to find the best songs from different music albums. And the software should be finished in an hour. But don\u2019t panic, you don\u2019t have to solve the problem of writing an AI with good taste. At your disposal is the impeccable taste of a vast horde of long-tailed monkeys. Well, at least almost. The monkeys are not very communicative (or rather, you\u2019re not sure which song \u201cOok!\u201d is supposed to refer to) so you can\u2019t ask them which songs are the best. What you can do however is to look at which songs the monkeys have listened to and use this information to deduce which songs are the best. \n\nAt first, you figure that the most listened to songs must be the best songs. However, you quickly realize that this approach is flawed. Even if all songs of the album are equally good, the early songs are more likely to be listened to more often than the later ones, because monkeys will tend to start listening to the first song, listen for a few songs and then, when their fickle ears start craving something else, stop listening. Instead, if all songs are equal, you expect that their play frequencies should follow Zipf\u2019s Law.\n\nZipf\u2019s Law is an empirical law originally formulated about word frequencies in natural languages, but it has been observed that many natural phenomena, such as population sizes and incomes, approximately follow the same law. It predicts that the relative frequency of the $i$\u2019th most common object (in this case, a song) should be proportional to $1/i$.\n\nTo illustrate this in our setting, suppose we have an album where all songs are equally good. Then by Zipf\u2019s Law, you expect that the first song is listened to twice as often as the second song, and more generally that the first song is listened to $i$ times as often as the $i$\u2019th song. When some songs are better than others, those will be listened to more often than predicted by Zipf\u2019s Law, and those are the songs your program should select as the good songs. Specifically, suppose that song $i$ has been played $f_ i$ times but that Zipf\u2019s Law predicts that it would have been played $z_ i$ times. Then you define the quality of song $i$ to be $q_ i = f_ i/z_ i$. Your software should select the songs with the highest values of $q_ i$.\n\n-----Input-----\nThe first line of input contains two integers $n$ and $m$ ($1 \\le n \\le 50000$, $1 \\le m \\le n$), the number of songs on the album, and the number of songs to select. Then follow $n$ lines. The $i$\u2019th of these lines contains an integer $f_ i$ and string $s_ i$, where $0 \\le f_ i \\le 10^{12}$ is the number of times the $i$\u2019th song was listened to, and $s_ i$ is the name of the song. Each song name is at most $30$ characters long and consists only of the characters \u2018a\u2019-\u2018z\u2019, \u20180\u2019-\u20189\u2019, and underscore (\u2018_\u2019).\n\n-----Output-----\nOutput a list of the $m$ songs with the highest quality $q_ i$, in decreasing order of quality. If two songs have the same quality, give precedence to the one appearing first on the album (presumably there was a reason for the producers to put that song before the other).\n\n-----Examples-----\nSample Input:\n4 2\n30 one\n30 two\n15 three\n25 four\nSample Output:\nfour\ntwo\nPlease provide the solution as pure code only, without explanations or comments.\n\nANSWER:\n```python\n"}}