{"2652": {"code": ["from sys import stdin\nfrom itertools import combinations\n\ndef main():\n    N = int(stdin.readline())\n    towns = [list(map(int, stdin.readline().split())) for _ in range(N)]\n    min_cost = float('inf')\n    for a, b in combinations(range(N), 2):\n        cost = abs(towns[a][0] - towns[b][0]) + abs(towns[a][1] - towns[b][1])\n        min_cost = min(min_cost, cost)\n    print(min_cost)\n\nif __name__", "import sys\nfrom heapq import *\n\ndef solve():\n    n = int(sys.stdin.readline().strip())\n    towns = [list(map(int, sys.stdin.readline().strip().split())) for _ in range(n)]\n    towns.sort()\n    hq = []\n    for x, y in towns:\n        if hq and hq[0] < y:\n            heappop(hq)\n        heappush(hq, y)\n    return len(hq)\n\nprint(solve())\n\n\nEXPLANATION:\nThis problem can be solved by", "import sys\nimport math\n\ndef solve():\n    n = int(sys.stdin.readline())\n    towns = [list(map(int, sys.stdin.readline().split())) for _ in range(n)]\n    towns.sort()\n    ans = 0\n    x_min = towns[0][0]\n    for x, y in towns:\n        ans += abs(x - x_min)\n        x_min = min(x_min, x)\n    print(ans)\n\nsolve()\n\nThis code first reads the number of towns and their coordinates from the input. It then sorts the", "import sys\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    towns = [list(map(int, sys.stdin.readline().strip().split())) for _ in range(n)]\n    towns.sort()\n    total = 0\n    for i in range(1, n):\n        total += abs(towns[i][0] - towns[i-1][0])\n    towns.sort(key=lambda x: x[1])\n    for i in range(1, n):\n        total += abs(towns[i][1] - towns[i-1][1])", "def solve():\n    N = int(input())\n    towns = [list(map(int, input().split())) for _ in range(N)]\n    towns.sort()\n    x_min = towns[0][0]\n    y_min = min(towns[i][1] for i in range(N))\n    ans = 0\n    for x, y in towns:\n        ans += max(x - x_min, y - y_min)\n        x_min = x\n    return ans\n\nprint(solve())\n\n\nEXPLANATION:\nThe problem can be solved by sorting the"], "prompt": "\nQUESTION:\nThere are N towns on a plane. The i-th town is located at the coordinates (x_i,y_i). There may be more than one town at the same coordinates.\nYou can build a road between two towns at coordinates (a,b) and (c,d) for a cost of min(|a-c|,|b-d|) yen (the currency of Japan). It is not possible to build other types of roads.\nYour objective is to build roads so that it will be possible to travel between every pair of towns by traversing roads. At least how much money is necessary to achieve this?\n\n-----Constraints-----\n - 2 \u2264 N \u2264 10^5\n - 0 \u2264 x_i,y_i \u2264 10^9\n - All input values are integers.\n\n-----Input-----\nInput is given from Standard Input in the following format:\nN\nx_1 y_1\nx_2 y_2\n:\nx_N y_N\n\n-----Output-----\nPrint the minimum necessary amount of money in order to build roads so that it will be possible to travel between every pair of towns by traversing roads.\n\n-----Sample Input-----\n3\n1 5\n3 9\n7 8\n\n-----Sample Output-----\n3\n\nBuild a road between Towns 1 and 2, and another between Towns 2 and 3. The total cost is 2+1=3 yen.\nPlease provide the solution as pure code only, without explanations or comments.\n\nANSWER:\n```python\n"}}