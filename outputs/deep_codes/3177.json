{"3177": {"code": ["from collections import deque\n\ndef min_swaps(N, M, arr, swaps):\n    queue = deque(range(1, N + 1))\n    swaps_count = 0\n    for i in range(N):\n        if arr[i] != queue[0]:\n            j = queue.index(arr[i])\n            queue[j], queue", "from collections import deque\n\ndef min_swaps(n, m, arr, swaps):\n    # Create a graph\n    graph = [[] for _ in range(n+1)]\n    for u, v in swaps:\n        graph[u].append(v)\n        graph[v].append(u)\n\n    # BFS from each node\n    min_", "from collections import deque\n\ndef min_swaps(N, M, sequence, swaps):\n    graph = {i: [] for i in range(1, N+1)}\n    for a, b in swaps:\n        graph[a].append(b)\n        graph[b].append(a)\n\n    visited = [False] * (N+1)", "from collections import deque\n\ndef min_swaps(n, m, initial, swaps):\n    graph = [[] for _ in range(n+1)]\n    for a, b in swaps:\n        graph[a].append(b)\n        graph[b].append(a)\n    visited = [0] * (n+1)\n    queue = deque", "from collections import deque\n\ndef min_swaps(n, m, perm, swaps):\n    graph = [[] for _ in range(n+1)]\n    for u, v in swaps:\n        graph[u].append(v)\n        graph[v].append(u)\n    visited = [False] * (n+1)\n    dist = [0"], "prompt": "\nQUESTION:\n\u201cArrange\u201d is a planetary popular Flash game. In \u201cArrange\u201d the player is given a permutation of numbers $1$ to $N$ and a list of allowed swaps. He then has to perform a sequence of swaps that transforms the initial permutation back to the ordered sequence $1,2,3,4,5, \\ldots , N$.\n\nIn order to break the high score list, you need to perform the minimum amount of swaps possible. You can\u2019t do that, but you can write a program that does it for you!\n\n-----Input-----\nThe first line of input contains two integers, $N$ ($2 \\le N \\le 11$), the length of the initial sequence and $M$ ($1 \\le M \\le N(N \u2013 1) / 2$), the number of allowed swaps.\n\nThe second line of input contains a permutation of the numbers $1$ to $N$.\n\nThe next $M$ lines contain descriptions of allowed swaps. Each such line contains two distinct numbers $1 \\le A < B \\le N$, indicating that you are allowed to swap the $A$-th number in the sequence with the $B$-th number. The input never contains two identical swaps.\n\nYou may assume that the input is such that a solution exists.\n\n-----Output-----\nOutput the minimum possible number of swaps to transform the permutation to $1, 2, \\ldots , N$.\n\n-----Examples-----\nSample Input 1:\n2 1\n2 1\n1 2\nSample Output 1:\n1\n\nSample Input 2:\n3 2\n2 1 3\n1 3\n2 3\nSample Output 2:\n3\nPlease provide the solution as pure code only, without explanations or comments.\n\nANSWER:\n```python\n"}}