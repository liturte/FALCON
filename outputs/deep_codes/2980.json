{"2980": {"code": ["QUESTION:\nArthur and his sister Carol have been playing a game called Nim for some time now. Nim is played as follows:\n - The starting position has a number of heaps, all containing some, not necessarily equal, number of beads.\n - The players take turns chosing a heap and removing a positive number of beads from it.\n - The first player not able to make a move, loses.\n\nArthur and Carol really enjoyed playing this simple game until they recently learned an easy way to always be able to find the best move:\n - Xor the number of beads in the heaps in the current position (i.e., if we have $2$, $4$ and $7$ the xor-sum will be $1$ since $2\\ \\mathbf{xor}\\ 4\\ \\mathbf{xor}\\ 7 = 1$).\n - If the xor-sum is $0$, too bad, you will lose.\n - Otherwise, move such that the xor-sum becomes $0$. This is always possible.\n\nIt is quite easy to convince oneself that this works. Consider these facts:\n - The player that takes the last bead wins.\n - After the winning player\u2019s last move the xor-sum will be $0$.\n - The xor-sum will change after every move.\n\nWhich means that if you make sure that the xor-sum always is $0$ when you have made your move, your opponent will never be able to win, and, thus, you will win.\n\nUnderstandably it is no fun to play a game when both players know how to play perfectly (ignorance is bliss). Fortunately, Arthur and Carol soon came up with a similar game, $S$-Nim, that seemed to solve this problem. Each player is now only allowed to remove a number of beads in some predefined set $S$, e.g. if we have $S = \\{ 2, 5\\} $ each player is only allowed to remove $2$ or $5$ beads. Now it is not always possible to make the xor-sum $0$ and, thus, the strategy above is useless. Or is it?\n\nYour job is to write a program that determines if a position of $S$-Nim is a losing or a winning position. A position is a winning position if there is at least one move to a losing position. A position is a losing position if there are no moves to a losing position. This means, as expected, that a position with no legal moves is a losing position.\n\n-----Input-----\nThe first line of input contains a number $k$ ($1 \\le k \\le 100$) indicating", "QUESTION:\nArthur and his sister Carol have been playing a game called Nim for some time now. Nim is played as follows:\n - The starting position has a number of heaps, all containing some, not necessarily equal, number of beads.\n - The players take turns chosing a heap and removing a positive number of beads from it.\n - The first player not able to make a move, loses.\n\nArthur and Carol really enjoyed playing this simple game until they recently learned an easy way to always be able to find the best move:\n - Xor the number of beads in the heaps in the current position (i.e., if we have $2$, $4$ and $7$ the xor-sum will be $1$ since $2\\ \\mathbf{xor}\\ 4\\ \\mathbf{xor}\\ 7 = 1$).\n - If the xor-sum is $0$, too bad, you will lose.\n - Otherwise, move such that the xor-sum becomes $0$. This is always possible.\n\nIt is quite easy to convince oneself that this works. Consider these facts:\n - The player that takes the last bead wins.\n - After the winning player\u2019s last move the xor-sum will be $0$.\n - The xor-sum will change after every move.\n\nWhich means that if you make sure that the xor-sum always is $0$ when you have made your move, your opponent will never be able to win, and, thus, you will win.\n\nUnderstandably it is no fun to play a game when both players know how to play perfectly (ignorance is bliss). Fortunately, Arthur and Carol soon came up with a similar game, $S$-Nim, that seemed to solve this problem. Each player is now only allowed to remove a number of beads in some predefined set $S$, e.g. if we have $S = \\{ 2, 5\\} $ each player is only allowed to remove $2$ or $5$ beads. Now it is not always possible to make the xor-sum $0$ and, thus, the strategy above is useless. Or is it?\n\nYour job is to write a program that determines if a position of $S$-Nim is a losing or a winning position. A position is a winning position if there is at least one move to a losing position. A position is a losing position if there are no moves to a losing position. This means, as expected, that a position with no legal moves is a losing position.\n\n-----Input-----\nThe first line of input contains a number $k$ ($1 \\le k \\le 100$) indicating", "QUESTION:\nArthur and his sister Carol have been playing a game called Nim for some time now. Nim is played as follows:\n - The starting position has a number of heaps, all containing some, not necessarily equal, number of beads.\n - The players take turns chosing a heap and removing a positive number of beads from it.\n - The first player not able to make a move, loses.\n\nArthur and Carol really enjoyed playing this simple game until they recently learned an easy way to always be able to find the best move:\n - Xor the number of beads in the heaps in the current position (i.e., if we have $2$, $4$ and $7$ the xor-sum will be $1$ since $2\\ \\mathbf{xor}\\ 4\\ \\mathbf{xor}\\ 7 = 1$).\n - If the xor-sum is $0$, too bad, you will lose.\n - Otherwise, move such that the xor-sum becomes $0$. This is always possible.\n\nIt is quite easy to convince oneself that this works. Consider these facts:\n - The player that takes the last bead wins.\n - After the winning player\u2019s last move the xor-sum will be $0$.\n - The xor-sum will change after every move.\n\nWhich means that if you make sure that the xor-sum always is $0$ when you have made your move, your opponent will never be able to win, and, thus, you will win.\n\nUnderstandably it is no fun to play a game when both players know how to play perfectly (ignorance is bliss). Fortunately, Arthur and Carol soon came up with a similar game, $S$-Nim, that seemed to solve this problem. Each player is now only allowed to remove a number of beads in some predefined set $S$, e.g. if we have $S = \\{ 2, 5\\} $ each player is only allowed to remove $2$ or $5$ beads. Now it is not always possible to make the xor-sum $0$ and, thus, the strategy above is useless. Or is it?\n\nYour job is to write a program that determines if a position of $S$-Nim is a losing or a winning position. A position is a winning position if there is at least one move to a losing position. A position is a losing position if there are no moves to a losing position. This means, as expected, that a position with no legal moves is a losing position.\n\n-----Input-----\nThe first line of input contains a number $k$ ($1 \\le k \\le 100$) which", "QUESTION:\nArthur and his sister Carol have been playing a game called Nim for some time now. Nim is played as follows:\n - The starting position has a number of heaps, all containing some, not necessarily equal, number of beads.\n - The players take turns chosing a heap and removing a positive number of beads from it.\n - The first player not able to make a move, loses.\n\nArthur and Carol really enjoyed playing this simple game until they recently learned an easy way to always be able to find the best move:\n - Xor the number of beads in the heaps in the current position (i.e., if we have $2$, $4$ and $7$ the xor-sum will be $1$ since $2\\ \\mathbf{xor}\\ 4\\ \\mathbf{xor}\\ 7 = 1$).\n - If the xor-sum is $0$, too bad, you will lose.\n - Otherwise, move such that the xor-sum becomes $0$. This is always possible.\n\nIt is quite easy to convince oneself that this works. Consider these facts:\n - The player that takes the last bead wins.\n - After the winning player\u2019s last move the xor-sum will be $0$.\n - The xor-sum will change after every move.\n\nWhich means that if you make sure that the xor-sum always is $0$ when you have made your move, your opponent will never be able to win, and, thus, you will win.\n\nUnderstandably it is no fun to play a game when both players know how to play perfectly (ignorance is bliss). Fortunately, Arthur and Carol soon came up with a similar game, $S$-Nim, that seemed to solve this problem. Each player is now only allowed to remove a number of beads in some predefined set $S$, e.g. if we have $S = \\{ 2, 5\\} $ each player is only allowed to remove $2$ or $5$ beads. Now it is not always possible to make the xor-sum $0$ and, thus, the strategy above is useless. Or is it?\n\nYour job is to write a program that determines if a position of $S$-Nim is a losing or a winning position. A position is a winning position if there is at least one move to a losing position. A position is a losing position if there are no moves to a losing position. This means, as expected, that a position with no legal moves is a losing position.\n\n-----Input-----\nThe first line of input contains a number $k$ ($1 \\le k \\le 100$) spec", "QUESTION:\nArthur and his sister Carol have been playing a game called Nim for some time now. Nim is played as follows:\n - The starting position has a number of heaps, all containing some, not necessarily equal, number of beads.\n - The players take turns chosing a heap and removing a positive number of beads from it.\n - The first player not able to make a move, loses.\n\nArthur and Carol really enjoyed playing this simple game until they recently learned an easy way to always be able to find the best move:\n - Xor the number of beads in the heaps in the current position (i.e., if we have $2$, $4$ and $7$ the xor-sum will be $1$ since $2\\ \\mathbf{xor}\\ 4\\ \\mathbf{xor}\\ 7 = 1$).\n - If the xor-sum is $0$, too bad, you will lose.\n - Otherwise, move such that the xor-sum becomes $0$. This is always possible.\n\nIt is quite easy to convince oneself that this works. Consider these facts:\n - The player that takes the last bead wins.\n - After the winning player\u2019s last move the xor-sum will be $0$.\n - The xor-sum will change after every move.\n\nWhich means that if you make sure that the xor-sum always is $0$ when you have made your move, your opponent will never be able to win, and, thus, you will win.\n\nUnderstandably it is no fun to play a game when both players know how to play perfectly (ignorance is bliss). Fortunately, Arthur and Carol soon came up with a similar game, $S$-Nim, that seemed to solve this problem. Each player is now only allowed to remove a number of beads in some predefined set $S$, e.g. if we have $S = \\{ 2, 5\\} $ each player is only allowed to remove $2$ or $5$ beads. Now it is not always possible to make the xor-sum $0$ and, thus, the strategy above is useless. Or is it?\n\nYour job is to write a program that determines if a position of $S$-Nim is a losing or a winning position. A position is a winning position if there is at least one move to a losing position. A position is a losing position if there are no moves to a losing position. This means, as expected, that a position with no legal moves is a losing position.\n\n-----Input-----\nThe first line of input contains a number $k$ ($1 \\le k \\le 100$) which"], "prompt": "\nQUESTION:\nArthur and his sister Carol have been playing a game called Nim for some time now. Nim is played as follows:\n - The starting position has a number of heaps, all containing some, not necessarily equal, number of beads.\n - The players take turns chosing a heap and removing a positive number of beads from it.\n - The first player not able to make a move, loses.\n\nArthur and Carol really enjoyed playing this simple game until they recently learned an easy way to always be able to find the best move:\n - Xor the number of beads in the heaps in the current position (i.e., if we have $2$, $4$ and $7$ the xor-sum will be $1$ since $2\\ \\mathbf{xor}\\ 4\\ \\mathbf{xor}\\ 7 = 1$).\n - If the xor-sum is $0$, too bad, you will lose.\n - Otherwise, move such that the xor-sum becomes $0$. This is always possible.\n\nIt is quite easy to convince oneself that this works. Consider these facts:\n - The player that takes the last bead wins.\n - After the winning player\u2019s last move the xor-sum will be $0$.\n - The xor-sum will change after every move.\n\nWhich means that if you make sure that the xor-sum always is $0$ when you have made your move, your opponent will never be able to win, and, thus, you will win.\n\nUnderstandably it is no fun to play a game when both players know how to play perfectly (ignorance is bliss). Fortunately, Arthur and Carol soon came up with a similar game, $S$-Nim, that seemed to solve this problem. Each player is now only allowed to remove a number of beads in some predefined set $S$, e.g. if we have $S = \\{ 2, 5\\} $ each player is only allowed to remove $2$ or $5$ beads. Now it is not always possible to make the xor-sum $0$ and, thus, the strategy above is useless. Or is it?\n\nYour job is to write a program that determines if a position of $S$-Nim is a losing or a winning position. A position is a winning position if there is at least one move to a losing position. A position is a losing position if there are no moves to a losing position. This means, as expected, that a position with no legal moves is a losing position.\n\n-----Input-----\nThe first line of input contains a number $k$ ($1 \\le k \\le 100$) describing the size of $S$, followed by $k$ numbers $s_ i$ ($1 \\le s_ i \\le 10000$) describing $S$. The second line contains a number $m$ ($1 \\le m \\le 100$) describing the number of positions to evaluate. The next $m$ lines each contain a number $l$ ($1 \\le l \\le 100$) describing the number of heaps and $l$ numbers $h_ i$ ($0 \\le h_ i \\le 10000$) describing the number of beads in the heaps.\n\n-----Output-----\nFor each position:\n - If the described position is a winning position print a \u2018W\u2019.\n - If the described position is a losing position print an \u2018L\u2019.\n\n-----Examples-----\nSample Input:\n2 2 5\n3\n2 5 12\n3 2 4 7\n4 2 3 7 12\nSample Output:\nLWW\nPlease provide the solution as pure code only, without explanations or comments.\n\nANSWER:\n```python\n"}}