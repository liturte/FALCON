{"108": {"code": ["def solve(s):\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    last = {c: i for i, c in enumerate(alphabet)}\n    res = []\n    for i, c in enumerate(s):\n        if c not in res:\n            for j in range(len(res)):\n                if last[res[j]] < last[c]:\n                    res[j] = c\n                    break\n            else:\n                if len(res) < len(alphabet):\n                    res.append(c)\n    return ''.join(res) if len(res) == len(alphabet) else '-1'\n\nprint(solve(input()))", "def solve():\n    s = input()\n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    last = {c: i for i, c in enumerate(alphabet)}\n    res = []\n    for c in s:\n        if c < alphabet[len(res)]: continue\n        if c > alphabet[len(res)]:\n            if not res or last[res[-1]] < last[c]: return \"-1\"\n            else: res.pop()\n        res.append(c)\n    return \"\".join(res) if len(res) == len(alphabet) else \"-1\"\n\nprint(solve())\n\n\nIn this solution, we create a dictionary `", "def solve():\n    s = input()\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    j = 0\n    res = []\n    for i in range(len(alphabet)):\n        while j < len(s) and s[j] < alphabet[i]:\n            j += 1\n        if j == len(s) or s[j] > alphabet[i]:\n            return '-1'\n        res.append(s[j])\n        j += 1\n    return ''.join(res)\n\nprint(solve())\n\n\nThis python code takes the input string and iterates over the alphabet. For each character in the alphabet, it tries to find this character in", "def solve(s):\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    last = {c: i for i, c in enumerate('abcdefghijklmnopqrstuvwxyz')}\n    result = ['a'] * 26\n    for i in range(1, 26):\n        for j in range(i-1, -1, -1):\n            if s[j] in result[i]:\n                result[i] = s[j]\n                break\n            else:\n                result[i] = min(s[j], result[i])\n    result = ''.join(result)\n    if result == alphabet:\n        return result", "def solve(s):\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    j = 0\n    result = []\n    for i in range(26):\n        while j < len(s) and s[j] != alphabet[i]:\n            j += 1\n        if j == len(s):\n            return '-1'\n        result.append(alphabet[i])\n        j += 1\n    return ''.join(result)\n\ns = input()\nprint(solve(s))\n\n\nEXPLANATION:\nThe solution works by iterating over the alphabet and for each letter, it tries to find it in the given string. If it finds it, it appends"], "prompt": "\nQUESTION:\nYou are given a string s consisting of |s| small english letters.\n\nIn one move you can replace any character of this string to the next character in alphabetical order (a will be replaced with b, s will be replaced with t, etc.). You cannot replace letter z with any other letter.\n\nYour target is to make some number of moves (not necessary minimal) to get string abcdefghijklmnopqrstuvwxyz (english alphabet) as a subsequence. Subsequence of the string is the string that is obtained by deleting characters at some positions. You need to print the string that will be obtained from the given string and will be contain english alphabet as a subsequence or say that it is impossible.\n\n\n-----Input-----\n\nThe only one line of the input consisting of the string s consisting of |s| (1 \u2264 |s| \u2264 10^5) small english letters.\n\n\n-----Output-----\n\nIf you can get a string that can be obtained from the given string and will contain english alphabet as a subsequence, print it. Otherwise print \u00ab-1\u00bb (without quotes).\n\n\n-----Examples-----\nInput\naacceeggiikkmmooqqssuuwwyy\n\nOutput\nabcdefghijklmnopqrstuvwxyz\n\nInput\nthereisnoanswer\n\nOutput\n-1\nPlease provide the solution as pure code only, without explanations or comments.\n\nANSWER:\n```python\n"}}