{"1319": {"code": ["from collections import Counter\nMOD = 10**9 + 7\n\ndef solve(arr):\n    cnt = Counter(arr)\n    primes = list(cnt.keys())\n    ans = 1\n    for p in primes:\n        cur = 1\n        for _ in range(cnt[p] + 1):\n            cur = (cur * p) % MOD\n            ans = (ans * cur) % MOD\n    return ans\n\nm = int", "from collections import Counter\n\ndef divisors_product(n):\n    mod = 10**9 + 7\n    c = Counter()\n    for i in range(2, int(n**0.5) + 1):\n        while n % i == 0:\n            c[i] += 1\n            n //= i\n        if n == 1:\n            break\n    if n != 1:\n        c[n] += 1\n    res = 1\n    for k,", "from collections import Counter\n\nMOD = 10**9 + 7\n\ndef solve(m, primes):\n    c = Counter(primes)\n    divs = [1]\n    for prime, count in c.items():\n        new_divs = []\n        for _ in range(count):\n            for d in divs:\n                new_divs.append((d * prime) % MOD)\n                divs.append(d)\n        divs = new_", "MOD = 10**9 + 7\nn = int(input())\nprimes = list(map(int, input().split()))\nresult = 1\nfor p in primes:\n    result = (result * p) % MOD\nprint(result)\n\n\nExplanation:\nThis solution works by first defining a constant MOD for the modulo operation. Then it reads the number of primes and the primes themselves from the input. The variable result is initialized to 1, which will be used", "from collections import Counter\nfrom functools import reduce\n\nMOD = 10**9 + 7\n\ndef prime_factors(n):\n    i = 2\n    factors = []\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            factors.append(i)\n    if n > 1:\n        factors.append(n)\n    return factors\n\ndef mul(x, y):"], "prompt": "\nQUESTION:\nAyrat has number n, represented as it's prime factorization p_{i} of size m, i.e. n = p_1\u00b7p_2\u00b7...\u00b7p_{m}. Ayrat got secret information that that the product of all divisors of n taken modulo 10^9 + 7 is the password to the secret data base. Now he wants to calculate this value.\n\n\n-----Input-----\n\nThe first line of the input contains a single integer m (1 \u2264 m \u2264 200 000)\u00a0\u2014 the number of primes in factorization of n. \n\nThe second line contains m primes numbers p_{i} (2 \u2264 p_{i} \u2264 200 000).\n\n\n-----Output-----\n\nPrint one integer\u00a0\u2014 the product of all divisors of n modulo 10^9 + 7.\n\n\n-----Examples-----\nInput\n2\n2 3\n\nOutput\n36\n\nInput\n3\n2 3 2\n\nOutput\n1728\n\n\n\n-----Note-----\n\nIn the first sample n = 2\u00b73 = 6. The divisors of 6 are 1, 2, 3 and 6, their product is equal to 1\u00b72\u00b73\u00b76 = 36.\n\nIn the second sample 2\u00b73\u00b72 = 12. The divisors of 12 are 1, 2, 3, 4, 6 and 12. 1\u00b72\u00b73\u00b74\u00b76\u00b712 = 1728.\nPlease provide the solution as pure code only, without explanations or comments.\n\nANSWER:\n```python\n"}}