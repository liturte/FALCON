{"1607": {"code": ["MOD = 998244353\n\ndef solve(n, k):\n    fact = [0]*(2*n+1)\n    inv = [0]*(2*n+1)\n    fact[0] = inv[0] = 1\n    for i in range(1, 2*n+1):\n        fact[i] = (fact[i-1]*i)%MOD\n        inv[i] = inv[i-1]*pow(i, MOD-2, MOD)\n    C = [0]*(2*n+1)\n    C[0] = 1\n    for i in range(1, 2*n+1):\n        for j", "MOD = 998244353\nn, k = map(int, input().split())\n\n# dp[i][j] is the number of ways to color the first i cells with j components\ndp = [[0]*(k+1) for _ in range(n+1)]\ndp[0][0] = 1\n\nfor i in range(1, n+1):\n    # if we extend the current colorings by a white cell\n    dp[i][:] = [(dp[i-1][j]*2)%MOD for j in range(k+1)]\n    \n    # if we extend the current colorings by a black cell\n    for j in range(1, k+", "MOD = 998244353\nn, k = map(int, input().split())\ndp = [[0]*(n+1) for _ in range(n+1)]\ndp[0][0] = 1\nfor i in range(1, n+1):\n    dp[i][0] = dp[i-1][0]*2%MOD\n    for j in range(1, i+1):\n        dp[i][j] = (dp[i-1][j-1] + dp[i-1][j]*2)%MOD\nans = 0\nfor i in range(k):\n    ans = (ans + dp[n][i])", "MOD = 998244353\n\ndef solve(n, k):\n    fact = [1] * (n + 1)\n    inv = [1] * (n + 1)\n    for i in range(1, n + 1):\n        fact[i] = fact[i - 1] * i % MOD\n        inv[i] = inv[i - 1] * pow(i, MOD - 2, MOD)\n    comb = lambda n, k: fact[n] * inv[k] % MOD * inv[n - k] % MOD if n >= k >= 0 else 0\n\n    dp = [0] * (k + 1)", "MOD = 998244353\nn, k = map(int, input().split())\n\nfact = [1] * (n + k + 1)\nfor i in range(1, n + k + 1):\n    fact[i] = (fact[i - 1] * i) % MOD\n\ninvfact = [1] * (n + k + 1)\ninvfact[n + k] = pow(fact[n + k], MOD - 2, MOD)\nfor i in range(n + k - 1, -1, -1):\n    invfact[i] = ((i + 1) * invfact[i + 1]) % MOD\n\ndef choose("], "prompt": "\nQUESTION:\nYou are given a grid, consisting of $2$ rows and $n$ columns. Each cell of this grid should be colored either black or white.\n\nTwo cells are considered neighbours if they have a common border and share the same color. Two cells $A$ and $B$ belong to the same component if they are neighbours, or if there is a neighbour of $A$ that belongs to the same component with $B$.\n\nLet's call some bicoloring beautiful if it has exactly $k$ components.\n\nCount the number of beautiful bicolorings. The number can be big enough, so print the answer modulo $998244353$.\n\n\n-----Input-----\n\nThe only line contains two integers $n$ and $k$ ($1 \\le n \\le 1000$, $1 \\le k \\le 2n$) \u2014 the number of columns in a grid and the number of components required.\n\n\n-----Output-----\n\nPrint a single integer \u2014 the number of beautiful bicolorings modulo $998244353$.\n\n\n-----Examples-----\nInput\n3 4\n\nOutput\n12\n\nInput\n4 1\n\nOutput\n2\n\nInput\n1 2\n\nOutput\n2\n\n\n\n-----Note-----\n\nOne of possible bicolorings in sample $1$: [Image]\nPlease provide the solution as pure code only, without explanations or comments.\n\nANSWER:\n```python\n"}}