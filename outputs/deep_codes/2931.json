{"2931": {"code": ["from bisect import bisect_left, bisect_right\n\ndef solve():", "n = int(input())\nA = [0]*n\nfor i in range", "def main():\n    N = int(input())\n    for _ in range(N", "def rank_calc():\n    n = int(input())\n    scores = [", "from sortedcontainers import SortedList\n\nN = int(input())\nP ="], "prompt": "\nQUESTION:\nThe 3rd round of COCI is already here! In order to bet on predict the scores, we have assumed the following:\n - If contestant $A$ scored strictly more points than contestant $B$ in each of the first two rounds, then in the third round $A$ will score at least an equal amount of points as $B$.\n\nOf course, in each round (including this one, the 3rd one) it is possible to score from 0 to 650 points. On the total ranking list, contestants are sorted descending according to the sum of points from all three rounds. The contestants with an equal sum share the same place and the next contestant gets the realistic following place. For example, contestants with sums equal to 1000, 1000, 900, 900 and 800 points win places 1, 1, 3, 3 and 5, respectively.\n\nFor each of the $N$ contestants, we know the number of points scored in the first and second round. Given the aforementioned assumption, determine the highest and lowest place each contestant can get on the total ranking list after three rounds of COCI.\n\n-----Input-----\nThe first line of input contains an integer $N$ ($1 \\leq N \\leq 500000$), the number of contestants.\n\nEach of the following $N$ lines contains two integers from the interval $[0, 650]$: the number of points each contestant won in the first and second round.\n\n-----Output-----\nFor each contestant, in the order given in the input, output two integers per line: the required highest and lowest place they can get on the total ranking list.\n\n-----Examples-----\nSample Input:\n5\n250 180\n250 132\n220 123\n132 194\n220 105\nSample Output:\n1 3\n1 3\n3 5\n1 5\n3 5\nPlease provide the solution as pure code only, without explanations or comments.\n\nANSWER:\n```python\n"}}