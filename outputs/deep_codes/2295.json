{"2295": {"code": ["from collections import defaultdict\nfrom math import comb\n\nn = int(input())\narr = list(map(int, input().split()))\nfreq = defaultdict(int)\n\nfor num in arr:\n    freq[num] += 1\n\ntotal_unique = len(freq)\ntotal_elements = sum(freq.values())\n\nexpected = 0\n\nfor num in freq.keys():\n    expected += (total_elements - freq[num]) * comb(total_elements, freq[num])\n\nprint(expected / (n * (n - 1) // 2))\n\nThis code first counts the frequency of each number in the array. Then it calculates", "from collections import Counter\n\ndef solve():\n    n = int(input().strip())\n    a = list(map(int, input().strip().split()))\n\n    counter = Counter(a)\n    total = sum(counter.values())\n    unique = len(counter)\n\n    res = 0\n    for k, v in counter.items():\n        res += (total - v) * v * k\n\n    print(res / ((n * (n - 1)) // 2))\n\nsolve()\n\n\nThis solution works by first counting the frequency of each number in the array. It then calculates the expected value of the number of unique elements in a segment by summing the product", "n = int(input())\na = list(map(int, input().split()))\n\nunique_elements = len(set(a))\ntotal_elements = len(a)\n\nexpected_value = total_elements - unique_elements + 1\nprint(expected_value)\n\n\nThis code works by first taking the input and storing it in the variables `n` and `a`. It then counts the number of unique elements in the array `a` using the `set()` function, which removes duplicate elements. The total number of elements in the array is then calculated using the `len()` function. The expected value is then calculated as the total number of elements minus the number of unique elements plus 1 (since we are", "from collections import Counter\nn = int(input())\na = list(map(int, input().split()))\nc = Counter(a)\nkeys = list(c.keys())\ndp = [0] * (n + 1)\nfor i in range(1, n + 1):\n    dp[i] = dp[i - 1] + (keys[i - 1] * c[keys[i - 1]])\ntotal = sum(a)\nres = 0\nfor i in range(1, n + 1):\n    res += (dp[i] - dp[i - 1]) * i\nres /= total\nprint(res)", "from collections import Counter\n\nn = int(input().strip())\na = list(map(int, input().strip().split()))\n\nc = Counter(a)\n\ntotal = sum(c.values())\n\nresult = 0\nfor i in c:\n    result += c[i] * (total - c[i])\n\nprint(result / ((n * (n - 1)) // 2))\n\n\nThis Python solution first reads the input and counts the occurrences of each element in the array. It then calculates the expected number of unique elements in the segment by summing over each element the product of its count and the sum of the counts of the other elements. Finally, it divides"], "prompt": "\nQUESTION:\nYou are given an array a consisting of n positive integers. You pick two integer numbers l and r from 1 to n, inclusive (numbers are picked randomly, equiprobably and independently). If l > r, then you swap values of l and r. You have to calculate the expected value of the number of unique elements in segment of the array from index l to index r, inclusive (1-indexed).\n\n\n-----Input-----\n\nThe first line contains one integer number n (1 \u2264 n \u2264 10^6). The second line contains n integer numbers a_1, a_2, ... a_{n} (1 \u2264 a_{i} \u2264 10^6) \u2014 elements of the array.\n\n\n-----Output-----\n\nPrint one number \u2014 the expected number of unique elements in chosen segment. \n\nYour answer will be considered correct if its absolute or relative error doesn't exceed 10^{ - 4} \u2014 formally, the answer is correct if $\\operatorname{min}(|x - y|, \\frac{|x - y|}{x}) \\leq 10^{-4}$, where x is jury's answer, and y is your answer.\n\n\n-----Examples-----\nInput\n2\n1 2\n\nOutput\n1.500000\n\nInput\n2\n2 2\n\nOutput\n1.000000\nPlease provide the solution as pure code only, without explanations or comments.\n\nANSWER:\n```python\n"}}