{"3901": {"code": ["import math\n\ndef min_operations(arr):\n    n = len(arr)\n    dp = [[0]*n for _ in range(n)]\n    for length in range(2, n+1):", "import math\n\nn = int(input())\na = list(map(int, input().split()))\n\ng = [0] * (n + 1)\ng[1] = 1\nfor i in range(2, n", "import math\n\ndef min_operations(arr):\n    n = len(arr)\n    dp = [[0]*n for _ in range(n)]\n    for l in range(2, n+1):", "from math import gcd\n\nn = int(input())\na = list(map(int, input().split()))\n\nf = [0] * (max(a) + 1)\nfor i in a:\n    f[", "import math\n\ndef min_operations(n, arr):\n    g = arr[0]\n    for i in range(1, n):\n        g = math.gcd(g, arr[i])\n    if g"], "prompt": "\nQUESTION:\nYou have an array a with length n, you can perform operations. Each operation is like this: choose two adjacent elements from a, say x and y, and replace one of them with gcd(x, y), where gcd denotes the greatest common divisor.\n\nWhat is the minimum number of operations you need to make all of the elements equal to 1?\n\n\n-----Input-----\n\nThe first line of the input contains one integer n (1 \u2264 n \u2264 2000) \u2014 the number of elements in the array.\n\nThe second line contains n space separated integers a_1, a_2, ..., a_{n} (1 \u2264 a_{i} \u2264 10^9)\u00a0\u2014 the elements of the array.\n\n\n-----Output-----\n\nPrint -1, if it is impossible to turn all numbers to 1. Otherwise, print the minimum number of operations needed to make all numbers equal to 1.\n\n\n-----Examples-----\nInput\n5\n2 2 3 4 6\n\nOutput\n5\n\nInput\n4\n2 4 6 8\n\nOutput\n-1\n\nInput\n3\n2 6 9\n\nOutput\n4\n\n\n\n-----Note-----\n\nIn the first sample you can turn all numbers to 1 using the following 5 moves:\n\n  [2, 2, 3, 4, 6].  [2, 1, 3, 4, 6]  [2, 1, 3, 1, 6]  [2, 1, 1, 1, 6]  [1, 1, 1, 1, 6]  [1, 1, 1, 1, 1] \n\nWe can prove that in this case it is not possible to make all numbers one using less than 5 moves.\nPlease provide the solution as pure code only, without explanations or comments.\n\nANSWER:\n```python\n"}}