{"202": {"code": ["x1, y1 = map(int, input().split())\nx2, y2 = map(int, input().split())\n\ndx = abs(x1 - x2)\ndy = abs(y1 - y2)\n\nsteps = max(dx, dy)\n\nprint(steps)\n\n\nThis solution works by calculating the differences in the x and y coordinates of the start and end positions. Then it takes the maximum of these differences as the minimum number of steps needed to reach the end position. This is because in each step, the robot can change either its x or y coordinate by one, and it needs", "print(max(abs(x2 - x1), abs(y2 - y1)))\n\n\nExplanation:\nThe robot can move in one of the 8 directions. It means that the difference between x coordinates or y coordinates can be increased or decreased by one in a single step. So the minimal number of steps is the maximum of absolute differences between x coordinates and y coordinates.\n\nThis solution is based on the fact that it's enough to move in one of the axes by the difference divided by 2 (rounded up), and then move in the other axis by the remaining difference.\n\nFor example, if x", "x1, y1 = map(int, input().split())\nx2, y2 = map(int, input().split())\n\nprint(max(abs(x1 - x2), abs(y1 - y2)))\n\n\nEXPLANATION:\nThe solution is straightforward. We calculate the absolute difference between the current coordinates and the target coordinates. The maximum of these differences is the minimal number of steps required to reach the target position. This is because we can only move in one of the 8 possible directions (up, down, left, right, and the diagonals) by at most one unit per step.", "x1, y1 = map(int, input().split())\nx2, y2 = map(int, input().split())\n\ndx = abs(x2 - x1)\ndy = abs(y2 - y1)\n\nprint(max(dx, dy))\n\n\nEXPLANATION:\nThe solution is based on the concept of Manhattan distance. In a grid-based system, the minimum number of steps to reach from one point to another point is the sum of the differences in x and y coordinates. If the robot can move in any direction, it's enough to take the maximum of the differences", "x1, y1 = map(int, input().split())\nx2, y2 = map(int, input().split())\nprint(max(abs(x1-x2), abs(y1-y2)))\n\n\nThis solution works by finding the maximum difference between the x coordinates and the y coordinates of the start and end points. This is because the robot can move in any of the 8 directions and moving in one direction by one step is equivalent to moving in that direction by the difference of the coordinates in that direction by one. So the maximum of these differences is the minimum number of steps required to reach the end point"], "prompt": "\nQUESTION:\nProfessor GukiZ makes a new robot. The robot are in the point with coordinates (x_1, y_1) and should go to the point (x_2, y_2). In a single step the robot can change any of its coordinates (maybe both of them) by one (decrease or increase). So the robot can move in one of the 8 directions. Find the minimal number of steps the robot should make to get the finish position.\n\n\n-----Input-----\n\nThe first line contains two integers x_1, y_1 ( - 10^9 \u2264 x_1, y_1 \u2264 10^9) \u2014 the start position of the robot.\n\nThe second line contains two integers x_2, y_2 ( - 10^9 \u2264 x_2, y_2 \u2264 10^9) \u2014 the finish position of the robot.\n\n\n-----Output-----\n\nPrint the only integer d \u2014 the minimal number of steps to get the finish position.\n\n\n-----Examples-----\nInput\n0 0\n4 5\n\nOutput\n5\n\nInput\n3 4\n6 1\n\nOutput\n3\n\n\n\n-----Note-----\n\nIn the first example robot should increase both of its coordinates by one four times, so it will be in position (4, 4). After that robot should simply increase its y coordinate and get the finish position.\n\nIn the second example robot should simultaneously increase x coordinate and decrease y coordinate by one three times.\nPlease provide the solution as pure code only, without explanations or comments.\n\nANSWER:\n```python\n"}}