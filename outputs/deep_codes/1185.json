{"1185": {"code": ["def max_sum(n, m, k, p):\n    prefix_sum = [0] * (n + 1)\n    dp = [[0] * (k + 1) for _ in range(n + 1)]\n\n    for i in range(1, n + 1):\n        prefix_sum[i] = prefix_sum", "def max_sum(n, m, k, p):\n    dp = [[0]*(n+1) for _ in range(k+1)]\n    prefix = [0]*(n+1)\n    for i in range(1, n+1):\n        prefix[i] = prefix[i-1] + p[i", "import sys\n\ndef max_sum(n, m, k, p):\n    dp = [[0]*(n+1) for _ in range(k+1)]\n    prefix_sum = [0]*(n+1)\n\n    for i in range(1, n+1):\n        prefix_sum[i] = prefix", "n, m, k = map(int, input().split())\np = list(map(int, input().split()))\ndp = [[0] * (n + 1) for _ in range(k + 1)]\ns = [0] * (n + 1)\nfor i in range(1, n + 1):\n    s[i", "def solve(n, m, k, p):\n    prefix_sum = [0] * (n + 1)\n    for i in range(1, n + 1):\n        prefix_sum[i] = prefix_sum[i - 1] + p[i - 1]\n    dp = [0] * (n +"], "prompt": "\nQUESTION:\nThe new ITone 6 has been released recently and George got really keen to buy it. Unfortunately, he didn't have enough money, so George was going to work as a programmer. Now he faced the following problem at the work.\n\nGiven a sequence of n integers p_1, p_2, ..., p_{n}. You are to choose k pairs of integers:\n\n [l_1, r_1], [l_2, r_2], ..., [l_{k}, r_{k}]\u00a0(1 \u2264 l_1 \u2264 r_1 < l_2 \u2264 r_2 < ... < l_{k} \u2264 r_{k} \u2264 n;\u00a0r_{i} - l_{i} + 1 = m), \n\nin such a way that the value of sum $\\sum_{i = 1}^{k} \\sum_{j = l_{i}}^{r_{i}} p_{j}$ is maximal possible. Help George to cope with the task.\n\n\n-----Input-----\n\nThe first line contains three integers n, m and k (1 \u2264 (m \u00d7 k) \u2264 n \u2264 5000). The second line contains n integers p_1, p_2, ..., p_{n} (0 \u2264 p_{i} \u2264 10^9).\n\n\n-----Output-----\n\nPrint an integer in a single line \u2014 the maximum possible value of sum.\n\n\n-----Examples-----\nInput\n5 2 1\n1 2 3 4 5\n\nOutput\n9\n\nInput\n7 1 3\n2 10 7 18 5 33 0\n\nOutput\n61\nPlease provide the solution as pure code only, without explanations or comments.\n\nANSWER:\n```python\n"}}