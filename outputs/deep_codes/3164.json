{"3164": {"code": ["from collections import defaultdict\n\ndef longest_subarray(nums):\n    left = 0\n    counter = defaultdict(int)\n    max_len = 0\n    for right in range(len(nums)):\n        counter[nums[right]] += 1\n        while len(counter) > right - left + 1:\n            counter[nums[left]] -= 1\n            if counter[nums[left]] == 0:\n                del counter[nums[left]]\n            left += 1\n        max_len = max(max_len, right - left + 1)\n    return max_len\n\nN = int(input())\nnums = list(map(int, input().split()))\nprint(longest_subarray(nums))\n\n\nThis solution uses a sliding window approach with a left and right pointer. The counter dictionary keeps", "from collections import Counter\n\ndef longest_subarray(arr):\n    count = Counter()\n    left = 0\n    max_length = 0\n    for right in range(len(arr)):\n        count[arr[right]] += 1\n        while len(count) > 2 or (len(count) == 2 and max(count.values()) > (right-left+1)//2):\n            count[arr[left]] -= 1\n            if count[arr[left]] == 0:\n                del count[arr[left]]\n            left += 1\n        max_length = max(max_length, right-left+1)\n    return max_length\n\nN = int(input())\narr = list(map(int, input().split()))\nprint(longest_subarray(arr))\n\n\nThis code uses a two-pointer", "from collections import Counter\n\ndef longest_subarray(arr):\n    count = Counter()\n    left = 0\n    max_len = 0\n    for right in range(len(arr)):\n        count[arr[right]] += 1\n        while len(count) > 2:\n            count[arr[left]] -= 1\n            if count[arr[left]] == 0:\n                del count[arr[left]]\n            left += 1\n        max_len = max(max_len, right - left + 1)\n    return max_len\n\nN = int(input())\narr = list(map(int, input().split()))\nprint(longest_subarray(arr))\n\n\nThis solution uses a sliding window approach with two pointers `left` and `right`. The `Counter` object `count` keeps track of the", "from collections import Counter\n\ndef longest_consecutive_subarray(nums):\n    count = Counter()\n    max_length = 0\n    left = 0\n    for right, num in enumerate(nums):\n        count[num] += 1\n        while len(count) > (right - left + 1) // 2:\n            count[nums[left]] -= 1\n            if count[nums[left]] == 0:\n                del count[nums[left]]\n            left += 1\n        max_length = max(max_length, right - left + 1)\n    return max_length\n\nN = int(input())\nnums = list(map(int, input().split()))\nprint(longest_consecutive_subarray(nums))\n\n\nThis code uses a sliding window approach with a hash", "from collections import Counter\n\ndef longest_subarray(arr):\n    count = Counter()\n    left = 0\n    ans = 0\n    for right in range(len(arr)):\n        count[arr[right]] += 1\n        while len(count) > 2:\n            count[arr[left]] -= 1\n            if count[arr[left]] == 0:\n                del count[arr[left]]\n            left += 1\n        ans = max(ans, right - left + 1)\n    return ans\n\nN = int(input())\narr = list(map(int, input().split()))\nprint(longest_subarray(arr))\n\n\nThis code uses a sliding window approach to solve the problem. It uses a Counter to keep track of the frequency of each element in the current window. If the number of unique elements"], "prompt": "\nQUESTION:\nZapray recently did not have much time to finish his homework due to his addiction to Pokemon. What is even worse, this week\u2019s algorithm class has assigned a very challenging homework problem: \u201cGiven an array of integers, find the longest consecutive sub-array so that each element in the sub-array appears exactly twice.\u201d\n\nZapray remembers how to find the longest consecutive sub-array so that each element in the sub-array appears exactly once using sliding window. But he could not figure out how to extend it for this problem. Could you help Zapray?\n\n-----Input-----\nThe first line of the input has an integer $N$ ($1 \\leq N \\leq 10^5$), the length of the array. The second line contains $N$ positive integers giving the elements of the array. Each integer is no larger than $10^5$.\n\n-----Output-----\nOutput the length of the longest sub-array so that each element in the sub-array appears exactly twice.\n\n-----Examples-----\nSample Input 1:\n6\n1 2 3 3 4 2\nSample Output 1:\n2\n\nSample Input 2:\n8\n1 2 1 3 1 3 1 2\nSample Output 2:\n4\nPlease provide the solution as pure code only, without explanations or comments.\n\nANSWER:\n```python\n"}}