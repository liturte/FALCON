{"1028": {"code": ["n, m = map(int, input().split())\nprint(max(1, n - m), n - m)\n\n\nEXPLANATION:\nThe minimum number of newly formed friendships can be achieved when all participants are in different teams, so the maximum number of teams will be 1 and the number of new friendships will be n - m.\n\nThe maximum number of newly formed friendships can be achieved when the participants are split into teams of 1, 1 and m - 1 people, so the number of new friendships will be m - 1.\n\nNote", "n, m = map(int, input().split())\nprint(max(1, n - m), n - m)\n\n\nExplanation:\nThe minimum possible number of pairs of friends can be achieved if participants were split on teams consisting of 2 people. So, it's maximum(1, n - m).\nThe maximum possible number of pairs of friends can be achieved if participants were split on teams of 1, 1 and n - 2 people. So, it's n - m.\nThis is because when we have m teams, each team can form n - m", "n, m = map(int, input().split())\nk_min = (n * (n - 1)) // 2 - (n - m) * (n - m - 1) // 2\nk_max = (n - m) * (n - m - 1) // 2\nprint(k_min, k_max)\n\n\nEXPLANATION:\n\nThe minimum number of pairs of friends can be achieved by each team having two participants and the last team having only one participant. This can be achieved by having n teams of size 2 and", "def min_max_friends(n, m):\n    min_friends = n - m\n    max_friends = (n * (n - 1)) // 2 - (n - m) * (n - m - 1)\n    return min_friends, max_friends\n\nn, m = map(int, input().split())\nmin_friends, max_friends = min_max_friends(n, m)\nprint(min_friends, max_friends)\n\n\nExplanation:\n\nFor the minimum number of friends, each team must have at", "n, m = map(int, input().split())\nprint(max(n - m, 0), m * (m - 1) // 2 + max(0, n - m * 2) * m)\n\n\nEXPLANATION:\n\nFor the minimum number of pairs of friends, the number of participants that were not in any team (n-m) is the minimum number of pairs that can be formed. If there are more teams than participants, this will result in negative pairs, so we take the maximum of (n-m, 0) to ensure we have"], "prompt": "\nQUESTION:\nn participants of the competition were split into m teams in some manner so that each team has at least one participant. After the competition each pair of participants from the same team became friends.\n\nYour task is to write a program that will find the minimum and the maximum number of pairs of friends that could have formed by the end of the competition.\n\n\n-----Input-----\n\nThe only line of input contains two integers n and m, separated by a single space (1 \u2264 m \u2264 n \u2264 10^9) \u2014 the number of participants and the number of teams respectively. \n\n\n-----Output-----\n\nThe only line of the output should contain two integers k_{min} and k_{max} \u2014 the minimum possible number of pairs of friends and the maximum possible number of pairs of friends respectively.\n\n\n-----Examples-----\nInput\n5 1\n\nOutput\n10 10\n\nInput\n3 2\n\nOutput\n1 1\n\nInput\n6 3\n\nOutput\n3 6\n\n\n\n-----Note-----\n\nIn the first sample all the participants get into one team, so there will be exactly ten pairs of friends.\n\nIn the second sample at any possible arrangement one team will always have two participants and the other team will always have one participant. Thus, the number of pairs of friends will always be equal to one.\n\nIn the third sample minimum number of newly formed friendships can be achieved if participants were split on teams consisting of 2 people, maximum number can be achieved if participants were split on teams of 1, 1 and 4 people.\nPlease provide the solution as pure code only, without explanations or comments.\n\nANSWER:\n```python\n"}}