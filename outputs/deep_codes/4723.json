{"4723": {"code": ["import sys\n\ndef solve(s, t):\n    s = s.replace('?', 'z')  # Replace '?' with 'z' to make it lexicographically smallest\n    t = 'z' + t + 'z'  # Add 'z' to the head and tail of string t to match the pattern of string s\n    n = len(s)\n    res = []\n    for i in range(n-1):\n        if s[i:i+len(t)] == t:\n            res.append(s[i:i+len(t)].replace", "import sys\n\nS = sys.stdin.readline().strip()\nT = sys.stdin.readline().strip()\n\nS = S.replace('?', 'z')\nT = T.replace('?', 'a')\n\nlen_t = len(T)\nlen_s = len(S)\n\nans = 'UNRESTORABLE'\n\nfor i in range(len_s - len_t + 1):\n    flag = True\n    for j in range(len_t):\n        if S[i+j] < T[j] or S[", "import sys\n\nS = sys.stdin.readline().strip()\nT = sys.stdin.readline().strip()\n\n# replace '?' with 'a-z'\nS = S.translate(str.maketrans('?', 'abcdefghijklmnopqrstuvwxyz'))\n\n# find T in S\nstart = S.find(T)\nif start == -1:\n    print('UNRESTORABLE')\nelse:\n    # replace '?' with 'a'\n    S = S.replace('?', 'a')", "def solve():\n    s = input()\n    t = input()\n    t = t[::-1]\n    s = s[::-1]\n    t_len = len(t)\n    s_len = len(s)\n    pos = []\n    for i in range(s_len - t_len + 1):\n        if s[i:i+t_len] < t:\n            pos.append(i)\n    if not pos:\n        return 'UNRESTORABLE'\n    res = s[:pos[0]] + t + s[pos[-", "import sys\n\ndef solve(s, t):\n    s = s.replace('?', 'z')\n    t_len = len(t)\n    ans = 'z' * len(s)\n    for start in range(len(s) - t_len + 1):\n        ok = True\n        for i in range(t_len):\n            if s[start + i] != '?' and s[start + i] != t[i]:\n                ok = False\n                break\n        if ok:\n            temp = s[:start] + t + s[start"], "prompt": "\nQUESTION:\nE869120 found a chest which is likely to contain treasure.\n\nHowever, the chest is locked. In order to open it, he needs to enter a string S consisting of lowercase English letters.\n\nHe also found a string S', which turns out to be the string S with some of its letters (possibly all or none) replaced with ?.  \nOne more thing he found is a sheet of paper with the following facts written on it:  \n - Condition 1: The string S contains a string T as a contiguous substring.\n - Condition 2: S is the lexicographically smallest string among the ones that satisfy Condition 1.\nPrint the string S.\n\nIf such a string does not exist, print UNRESTORABLE.  \n\n-----Constraints-----\n - 1 \\leq |S'|, |T| \\leq 50\n - S' consists of lowercase English letters and ?.\n - T consists of lowercase English letters.\n\n-----Input-----\nInput is given from Standard Input in the following format:\nS\nT'\n\n-----Output-----\nPrint the string S.\n\nIf such a string does not exist, print UNRESTORABLE instead.  \n\n-----Sample Input-----\n?tc????\ncoder\n\n-----Sample Output-----\natcoder\n\nThere are 26 strings that satisfy Condition 1: atcoder, btcoder, ctcoder,..., ztcoder.\nAmong them, the lexicographically smallest is atcoder, so we can say S = atcoder.\nPlease provide the solution as pure code only, without explanations or comments.\n\nANSWER:\n```python\n"}}