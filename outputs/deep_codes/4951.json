{"4951": {"code": ["def validate_proof(proof):\n    n = int(proof[0])\n    lines = proof[1:]\n    valid_lines = []\n    for i in range(1, n+1):\n        line = lines[i-1].split()\n        assumptions = line[:-2]\n        conclusion = line[-1", "def proof_checker():\n    n = int(input().strip())\n    lines = [input().strip().split() for _ in range(n)]\n    conclusions = set()\n    for i, line in enumerate(lines):\n        if '->' in line:\n            if any(ass not in conclusions for ass in", "def check_proof(proof):\n    lines = proof.split('\\n')[1:]\n    conclusions = set()\n    for i, line in enumerate(lines, start=1):\n        assumptions, _, conclusion = line.split(' -> ')\n        if any(assumption not in conclusions for assumption in assumptions.", "def check_proof(proof):\n    lines = proof.split('\\n')\n    conclusions = set()\n    for line in lines:\n        parts = line.split(' -> ')\n        assumptions = parts[0].split()\n        conclusion = parts[1]\n        if conclusion in conclusions:\n            return lines.", "def proof_check(proof):\n    lines = proof.split('\\n')[1:]\n    conclusions = set()\n    for i, line in enumerate(lines, start=1):\n        assumptions, _, conclusion = line.split(' -> ')\n        if assumptions == '':\n            if conclusion in conclusions:"], "prompt": "\nQUESTION:\nYou are teaching discrete math. You have done your best to teach your students about axioms and inference rules, proofs and theorems. Sometimes the students write beautiful proofs that Fermat would be proud of but sometimes, also like Fermat, their proofs are not quite right. You are getting a little tired of hunting through some of these so-called \u201cproofs\u201d for the magic tricks that let them prove $1 = 2$ and had the great idea to write a computer program to speed things up!\n\nBecause this is the first class in proof-based mathematics, you have started your students off with a simple proof system. All proof lines consist of a list of assumptions, an arrow, and a conclusion. If there are no assumptions, the conclusion is an axiom. A line of the proof is valid if and only if all assumptions were conclusions of previous lines. Sometimes the students derive a conclusion more than once just to be extra sure it is true, and that is perfectly all right!\n\n-----Input-----\nThe first line of input consists of an integer $1 \\le n \\le 400000$, the number of lines in the \u201cproof\u201d. Then follow the $n$ lines of the \u201cproof\u201d. Each line has $0 \\le a \\le 5$ assumptions, followed by an arrow (the string \u201c->\u201d), followed by one conclusion. All assumptions and conclusions consist of $1 \\le c \\le 5$ uppercase alphabetic characters. The assumptions, arrow, and conclusion are all separated by single spaces.\n\n-----Output-----\nIf every line is correct output \u201ccorrect\u201d. Otherwise, output the number of the first line with an error (line numbers start at $1$).\n\n-----Examples-----\nSample Input:\n3\n-> ALICE\n-> BOB\nALICE BOB -> CARL\nSample Output:\ncorrect\nPlease provide the solution as pure code only, without explanations or comments.\n\nANSWER:\n```python\n"}}