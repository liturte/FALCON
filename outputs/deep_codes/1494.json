{"1494": {"code": ["from collections import defaultdict\ndef solve(s, p):\n    n, m = len(s), len(", "import sys\nfrom collections import deque\n\ndef solve(s, p):\n    m, n = len(", "import sys\nfrom collections import deque\n\ndef solve(s, p):\n    m, n = len(", "s = input().strip()\np = input().strip()\nn = len(s)\nm = len(", "s = input()\np = input()\n\nn = len(s)\nm = len(p)"], "prompt": "\nQUESTION:\nDreamoon has a string s and a pattern string p. He first removes exactly x characters from s obtaining string s' as a result. Then he calculates $\\operatorname{occ}(s^{\\prime}, p)$ that is defined as the maximal number of non-overlapping substrings equal to p that can be found in s'. He wants to make this number as big as possible.\n\nMore formally, let's define $\\operatorname{ans}(x)$ as maximum value of $\\operatorname{occ}(s^{\\prime}, p)$ over all s' that can be obtained by removing exactly x characters from s. Dreamoon wants to know $\\operatorname{ans}(x)$ for all x from 0 to |s| where |s| denotes the length of string s.\n\n\n-----Input-----\n\nThe first line of the input contains the string s (1 \u2264 |s| \u2264 2 000).\n\nThe second line of the input contains the string p (1 \u2264 |p| \u2264 500).\n\nBoth strings will only consist of lower case English letters.\n\n\n-----Output-----\n\nPrint |s| + 1 space-separated integers in a single line representing the $\\operatorname{ans}(x)$ for all x from 0 to |s|.\n\n\n-----Examples-----\nInput\naaaaa\naa\n\nOutput\n2 2 1 1 0 0\n\nInput\naxbaxxb\nab\n\nOutput\n0 1 1 2 1 1 0 0\n\n\n\n-----Note-----\n\nFor the first sample, the corresponding optimal values of s' after removal 0 through |s| = 5 characters from s are {\"aaaaa\", \"aaaa\", \"aaa\", \"aa\", \"a\", \"\"}. \n\nFor the second sample, possible corresponding optimal values of s' are {\"axbaxxb\", \"abaxxb\", \"axbab\", \"abab\", \"aba\", \"ab\", \"a\", \"\"}.\nPlease provide the solution as pure code only, without explanations or comments.\n\nANSWER:\n```python\n"}}