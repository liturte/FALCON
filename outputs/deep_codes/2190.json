{"2190": {"code": ["from collections import defaultdict\n\nn, k = map(int, input().split())\na = list(map(int, input().split()))\n\npowers = defaultdict(list)\nfor i, ai in enumerate(a):\n    powers[ai**k].append(i)\n\ncount = 0\nfor key in powers:\n    if len(powers[key]) >= 2:\n        count += len(powers[key])*(len(powers[key])-1)//2\n\nprint(count)\n\n\nExplanation:\nWe first create a dictionary `powers` where the key is a number raised to the power `k` and the value is", "from collections import defaultdict\n\ndef count_pairs(n, k, a):\n    counter = defaultdict(int)\n    for num in a:\n        counter[num] += 1\n    pairs = 0\n    for num in counter:\n        if counter[num] > 1:\n            pairs += counter[num] * (counter[num] - 1) // 2\n        for i in range(2, k+1):\n            if num**i in counter:\n                pairs += counter[num] * counter[num**i]\n    return pairs\n\nn, k = map(int, input().split())\na = list(map(int, input().split()))", "from collections import Counter\ndef solve(n, k, a):\n    c = Counter(a[i]**k for i in range(n))\n    return sum(c[a[i]*a[j]] for i in range(n) for j in range(i+1, n))\nn = int(input().split()[0])\nk = int(input().split()[0])\na = list(map(int, input().split()))\nprint(solve(n, k, a))\n\n\n\n\nEXPLANATION:\nThe solution uses the principle of combinatorics and the power of Counter from the Python collections library. We count the number", "from collections import defaultdict\n\nn, k = map(int, input().split())\na = list(map(int, input().split()))\n\ncounts = defaultdict(int)\nfor num in a:\n    root = round(num ** (1 / k))\n    counts[root] += 1\n\ntotal = 0\nfor key in counts:\n    total += counts[key] * (counts[key] - 1) // 2\n\nprint(total)\n\n\nEXPLANATION:\nThis problem can be solved using a frequency count of the $k$th root of the numbers. We use a dictionary to count the number of occurrences of each possible $k", "from collections import defaultdict\n\nn, k = map(int, input().split())\na = list(map(int, input().split()))\n\ncnt = defaultdict(int)\nfor i in a:\n    cnt[i] += 1\n\nans = 0\nfor i in cnt:\n    if i ** k in cnt:\n        if i ** k != i:\n            ans += cnt[i] * cnt[i ** k]\n        else:\n            ans += cnt[i] * (cnt[i] - 1)\n\nprint(ans // 2)\n\n\nThis code works by first creating a dictionary `c"], "prompt": "\nQUESTION:\nYou are given $n$ positive integers $a_1, \\ldots, a_n$, and an integer $k \\geq 2$. Count the number of pairs $i, j$ such that $1 \\leq i < j \\leq n$, and there exists an integer $x$ such that $a_i \\cdot a_j = x^k$.\n\n\n-----Input-----\n\nThe first line contains two integers $n$ and $k$ ($2 \\leq n \\leq 10^5$, $2 \\leq k \\leq 100$).\n\nThe second line contains $n$ integers $a_1, \\ldots, a_n$ ($1 \\leq a_i \\leq 10^5$).\n\n\n-----Output-----\n\nPrint a single integer\u00a0\u2014 the number of suitable pairs.\n\n\n-----Example-----\nInput\n6 3\n1 3 9 8 24 1\n\nOutput\n5\n\n\n\n-----Note-----\n\nIn the sample case, the suitable pairs are: $a_1 \\cdot a_4 = 8 = 2^3$; $a_1 \\cdot a_6 = 1 = 1^3$; $a_2 \\cdot a_3 = 27 = 3^3$; $a_3 \\cdot a_5 = 216 = 6^3$; $a_4 \\cdot a_6 = 8 = 2^3$.\nPlease provide the solution as pure code only, without explanations or comments.\n\nANSWER:\n```python\n"}}