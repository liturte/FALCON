{"4946": {"code": ["from collections import defaultdict\n\ndef min_awkwardness(n, languages):\n    language_positions = defaultdict(list)\n    for i, language in enumerate(languages):\n        language_positions[language].append(i)\n\n    min_awkwardness = n\n    for positions in language_positions.values():\n        if", "def solve():\n    n = int(input())\n    languages = list(map(int, input().split()))\n    max_languages = max(languages)\n    counts = [0] * (max_languages + 1)\n    for lang in languages:\n        counts[lang] += 1\n    max_count = max(counts", "from collections import defaultdict\n\ndef solve(n, languages):\n    lang_to_positions = defaultdict(list)\n    for i, lang in enumerate(languages):\n        lang_to_positions[lang].append(i)\n    \n    min_dist = n\n    for positions in lang_to_positions.values():", "from collections import defaultdict\n\nn = int(input().strip())\nlanguages = list(map(int, input().split()))\n\nmin_separation = defaultdict(lambda: n)\nmax_separation = defaultdict(lambda: -1)\n\nfor i in range(n):\n    min_separation[languages[i]]", "from collections import defaultdict\nn = int(input())\nlanguages = list(map(int, input().split()))\n\nlang_to_seats = defaultdict(list)\nfor i, lang in enumerate(languages):\n    lang_to_seats[lang].append(i)\n\nmin_awkwardness = n\nfor"], "prompt": "\nQUESTION:\nMartin has invited everyone he knows to celebrate his 535th birthday, and a whopping $n$ people from all over the world have accepted the invitation.\n\nWhen deciding the seating arrangement, Martin\u2019s mother Margarethe have decided that all the guests should be seated with maximum awkwardness; this is to ensure that nobody has anything meaningful to discuss during dinner, and everyone would instead silently enjoy her rather tasty coriander soup (as the saying goes; \u201cwhen the food is good, conversation dies\u201d).\n\nMargarethe knows that awkwardness is maximized if the guests are seated in a long row along a single table, in such a way that nobody sits next to someone speaking the same language as themselves. Better yet, she has defined the awkwardness level of a seating arrangement to be the minimum number of seats separating any two guests speaking the same language. If no two people speak the same language, the awkwardness level is defined to be $n$ (the number of guests). Two seats next to each other are said to be separated by $1$.\n\nGiven the languages spoken in a proposed seating arrangement, can you help Margarethe determine the awkwardness level?\n\n-----Input-----\nThe first line contains an integer $n$ ($1 \\leq n \\leq 100000$) denoting the number of guests. On the second line follows $n$ integers, the $i$\u2019th of which $x_ i$ ($0 \\leq x_ i \\leq 10^9$) indicating the language spoken by the guest seated at position $i$ in the proposed arrangement (each guest speaks exactly one language).\n\n-----Output-----\nA single integer, the awkwardness level of the proposed seating arrangement.\n\n-----Examples-----\nSample Input:\n4\n1 2 3 1\nSample Output:\n3\nPlease provide the solution as pure code only, without explanations or comments.\n\nANSWER:\n```python\n"}}