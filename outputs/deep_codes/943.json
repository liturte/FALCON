{"943": {"code": ["def max_even_sum(n, numbers):\n    odd_numbers = sorted([num for num in numbers if num % 2 != 0])\n    even_numbers = sorted([num for num in numbers if num % 2 == 0])\n    \n    odd_sum = sum(odd_numbers[-2::-2])\n    even_sum = sum(even_numbers[-2::-2])\n    \n    return max(odd_sum, even_sum)\n\nn = int(input().strip())\nnumbers = list(map(int, input().strip().split()))\nprint(max_even_sum(n, numbers))", "n = int(input())\narr = sorted(list(map(int, input().split())))\n\nneg_evens = [i for i in arr if i < 0 and i % 2 == 0]\npos_evens = [i for i in arr if i >= 0 and i % 2 == 0]\n\nneg_odds = [i for i in arr if i < 0 and i % 2 != 0]\npos_odds = [i for i in arr if i >= 0 and i % 2 != 0]\n\nneg_sum = sum(neg_evens[:-1]) + sum(neg_odds[-2:]) if len", "n = int(input())\nnumbers = list(map(int, input().split()))\n\neven_numbers = [num for num in numbers if num % 2 == 0]\nodd_numbers = [num for num in numbers if num % 2 != 0]\n\neven_numbers.sort()\nodd_numbers.sort()\n\neven_sum = 0\nodd_sum = 0\n\nwhile len(even_numbers) > 1:\n    num1 = even_numbers.pop()\n    num2 = even_numbers.pop()\n    even_sum += num1 + num2\n\nif even_numbers:\n    even", "n = int(input())\nnumbers = list(map(int, input().split()))\n\npositive_numbers = [num for num in numbers if num > 0]\nnegative_numbers = [-num for num in numbers if num < 0]\n\npositive_numbers.sort()\nnegative_numbers.sort()\n\ntotal_sum = 0\n\nwhile len(positive_numbers) >= 2:\n    num1 = positive_numbers.pop()\n    num2 = positive_numbers.pop()\n    total_sum += num1 + num2\n\n    if len(positive_numbers) == 0:\n        total_sum += sum(negative_", "n = int(input())\nnums = list(map(int, input().split()))\nnums.sort()\nprint(sum(nums[::-2]))\n\n\nEXPLANATION:\nThe solution is based on the fact that the maximum possible even sum can be obtained by pairing the largest odd numbers. We first sort the numbers in ascending order, and then sum up every second number starting from the end (`nums[::-2]`). This gives us the sum of the largest even numbers.\n\nThis works because, if there are two numbers, we can always pair them to get the maximum possible sum, which is the sum of the two numbers. If there are"], "prompt": "\nQUESTION:\nToday, Wet Shark is given n integers. Using any of these integers no more than once, Wet Shark wants to get maximum possible even (divisible by 2) sum. Please, calculate this value for Wet Shark. \n\nNote, that if Wet Shark uses no integers from the n integers, the sum is an even integer 0.\n\n\n-----Input-----\n\nThe first line of the input contains one integer, n (1 \u2264 n \u2264 100 000). The next line contains n space separated integers given to Wet Shark. Each of these integers is in range from 1 to 10^9, inclusive. \n\n\n-----Output-----\n\nPrint the maximum possible even sum that can be obtained if we use some of the given integers. \n\n\n-----Examples-----\nInput\n3\n1 2 3\n\nOutput\n6\nInput\n5\n999999999 999999999 999999999 999999999 999999999\n\nOutput\n3999999996\n\n\n-----Note-----\n\nIn the first sample, we can simply take all three integers for a total sum of 6.\n\nIn the second sample Wet Shark should take any four out of five integers 999 999 999.\nPlease provide the solution as pure code only, without explanations or comments.\n\nANSWER:\n```python\n"}}