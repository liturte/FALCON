{"4480": {"code": ["class Solution:\n    def canThreePartsEqualSum(self, A: List[int]) -> bool:\n        total = sum(A)\n        if total % 3 != 0:\n            return False\n        count, cumsum, target = 0, 0, total // 3\n        for num in A:\n            cumsum += num\n            if cumsum == target:\n                cumsum = 0\n                count += 1\n        return count >= 3\n\n\nThis solution works by first checking if the total sum of the array is divisible", "class Solution:\n    def canThreePartsEqualSum(self, A: List[int]) -> bool:\n        total = sum(A)\n        if total % 3 != 0:\n            return False\n        count, cumulative, target = 0, 0, total // 3\n        for num in A:\n            cumulative += num\n            if cumulative == target:\n                cumulative = 0\n                count += 1\n        return count >= 3\n\n\nThis solution first calculates the total sum of the array. If the total sum", "class Solution:\n    def canThreePartsEqualSum(self, A: List[int]) -> bool:\n        total = sum(A)\n        if total % 3 != 0:\n            return False\n        count, cumulative, target = 0, 0, total // 3\n        for num in A:\n            cumulative += num\n            if cumulative == target:\n                cumulative = 0\n                count += 1\n        return count >= 3\n\n\nThis solution works by firstly calculating the total sum of the array and checking if", "class Solution:\n    def canThreePartsEqualSum(self, A: List[int]) -> bool:\n        total_sum = sum(A)\n        if total_sum % 3 != 0:\n            return False\n        count, cumulative_sum, target = 0, 0, total_sum // 3\n        for num in A:\n            cumulative_sum += num\n            if cumulative_sum == target:\n                cumulative_sum = 0\n                count += 1\n        return count >= 3\n\n\nEXPL", "class Solution:\n    def canThreePartsEqualSum(self, A: List[int]) -> bool:\n        total = sum(A)\n        if total % 3 != 0:\n            return False\n        count, cumulative, target = 0, 0, total // 3\n        for num in A:\n            cumulative += num\n            if cumulative == target:\n                cumulative = 0\n                count += 1\n        return count >= 3\n\n\nEXPLANATION:\nThis solution works by first calculating the total sum of"], "prompt": "\nQUESTION:\nGiven an array A of integers, return true if and only if we can partition the array into three non-empty parts with equal sums.\nFormally, we can partition the array if we can find indexes i+1 < j with (A[0] + A[1] + ... + A[i] == A[i+1] + A[i+2] + ... + A[j-1] == A[j] + A[j-1] + ... + A[A.length - 1])\n\u00a0\nExample 1:\nInput: A = [0,2,1,-6,6,-7,9,1,2,0,1]\nOutput: true\nExplanation: 0 + 2 + 1 = -6 + 6 - 7 + 9 + 1 = 2 + 0 + 1\n\nExample 2:\nInput: A = [0,2,1,-6,6,7,9,-1,2,0,1]\nOutput: false\n\nExample 3:\nInput: A = [3,3,6,5,-2,2,5,1,-9,4]\nOutput: true\nExplanation: 3 + 3 = 6 = 5 - 2 + 2 + 5 + 1 - 9 + 4\n\n\u00a0\nConstraints:\n\n3 <= A.length <= 50000\n-10^4\u00a0<= A[i] <= 10^4\nSTARTER CODE:\nclass Solution:\n    def canThreePartsEqualSum(self, A: List[int]) -> bool:\n        \n\nPlease provide the solution as pure code only, without explanations or comments.\n\nANSWER:\n```python\n"}}