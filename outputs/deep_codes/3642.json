{"3642": {"code": ["from fractions import gcd\nfrom collections import deque\n\ndef bfs(graph, start):\n    visited = [False] * len(graph)\n    queue = deque([(start, 1, 1)])\n    visited[start] = True\n    min_magic = float('inf')\n    while queue:\n        node, parent, path_magic = queue.popleft()\n        min_magic = min(min_magic, path_magic)\n        for child in graph[node]:\n            if not visited[", "import sys\nfrom math import gcd\nfrom collections import defaultdict\nsys.setrecursionlimit(10**6)\n\ndef dfs(u, p):\n    global min_magic\n    size[u] = 1\n    max_child = [0, 0]\n    for v in adj[u]:\n        if v != p:\n            dfs(v, u)\n            size[u] += size[v]\n            if size[v] > max_child[0]:\n                max_child[1] = max", "from fractions import Fraction\nfrom collections import defaultdict\n\ndef dfs(node, parent):\n    global magic\n    path_magic = [X[node]]\n    for child in tree[node]:\n        if child != parent:\n            child_magic = dfs(child, node)\n            path_magic.append(child_magic)\n    path_magic.sort(reverse=True)\n    path_length = len(path_magic)\n    for i in range(path_length):\n        for j in", "from fractions import Fraction\nfrom collections import defaultdict\nfrom heapq import heappop, heappush\n\ndef solve(n, edges, x):\n    graph = defaultdict(list)\n    for u, v in edges:\n        graph[u].append(v)\n        graph[v].append(u)\n\n    _, min_node = min((x[i], i) for i in range(1, n+1))\n    dist = [-1] * (n+1)\n    dist[min_node] = 0\n    queue", "import sys\nfrom fractions import gcd\n\ndef dfs(u, p):\n    min_path = float('inf')\n    total = 0\n    for v, w in adj[u]:\n        if v == p: continue\n        path, subtotal = dfs(v, u)\n        min_path = min(min_path, path)\n        total += subtotal\n    if u > 1:\n        min_path = min(min_path, arr[u] * total)\n    return (min_path, total + 1)"], "prompt": "\nQUESTION:\nYou are given an undirected tree1 with each of its node assigned a magic $X_ i$. The magic of a path2 is defined as the product of the magic of the nodes on that path divided by the number of the nodes on the path. For example, the magic of a path that consists of nodes with magic $3$ and $5$ is $7.5$ ($3\\cdot 5 / 2$). In the given tree, find the path with the minimal magic and output the magic of that path.\n\n-----Input-----\nThe first line of input contains the integer $N$ ($1 \\leq N \\leq 10^6$), the number of nodes in the tree. Each of the following $N - 1$ lines contains two integers, $A_ i$ and $B_ i$ ($1 \\leq A_ i, B_ i \\leq N$), the labels of nodes connected with an edge. The $i$-th of the following $N$ lines contains the integer $X_ i$ ($1 \\leq X_ i \\leq 10^9$), magic of the $i$-th node.\n\n-----Output-----\nOutput the magic of the path with minimal magic in the form of a completely reduced fraction $P/Q$ ($P$ and $Q$ are relatively prime integers).\n\nIn all test cases, it will hold that the required $P$ and $Q$ are smaller than $10^{18}$.\n\n-----Examples-----\nSample Input:\n2\n1 2\n3\n4\nSample Output:\n3/1\nPlease provide the solution as pure code only, without explanations or comments.\n\nANSWER:\n```python\n"}}