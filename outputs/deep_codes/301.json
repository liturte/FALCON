{"301": {"code": ["u, v = map(int, input().split())\nif u & v & 1:\n    print(-1)\nelse:\n    print(2)\n    print(u | 1, v | 1)\n\nIn this code, we first read the inputs. Then, we check if both u and v are even or odd. If they are both odd, then the bitwise XOR of the elements in the array will be odd, and the sum of the elements will be odd. Hence, we can conclude that such an array does not exist. Therefore, we print \"-1\". \n\nIf u and v are both even, we print 2 as the length of the array. We then print u or v or both as the elements of the array. We use the bitwise OR operator to ensure that at least one of the elements is odd. This way, the bitwise XOR of the elements will be even, and the sum of the elements will be even.", "def solve(u, v):\n    if u == 0 and v == 0:\n        return 0, []\n    if u % 2 == 0 and v % 2 == 1 or u > v:\n        return -1, []\n    n = bin(u).count('1')\n    if n > v:\n        return -1, []\n    a = [1] * (n - 1) + [v - n + 2]\n    return n, a\n\nu, v = map(int, input().split())\nn, a = solve(u, v)\nprint(n)\nif n != -1:\n    print(' '.join(map(str, a)))\n\n\nThis code works by first checking if the XOR and sum are both 0 (in which case the answer is a zero-length array). If not, it checks if the XOR is even and the sum is odd, or if", "u, v = map(int, input().split())\nif u & v & 1:\n    print(-1)\nelse:\n    print(2)\n    print(u ^ (v - u), v - u)\n\nThe solution is based on the fact that the XOR operation and subtraction are even functions, which means they can be applied to any pair of numbers. This allows us to find a solution for the problem by applying the XOR operation to `u` and `v - u`, which results in `u`.\n\nThe second part of the solution is checking if `u` and `v` are both even. If they are, it means that `u ^ v` is also even, which is necessary for the XOR operation to give the right result.\n\nIf `u` and `v` are both odd, the XOR operation will give a result that is odd, which is not the same as `u`. Therefore, the", "u, v = map(int, input().split())\nif u & v & 1:\n    print(-1)\nelse:\n    a = [u]\n    v -= u\n    while v > 0:\n        a.append(1)\n        v -= 1\n    print(len(a))\n    print(' '.join(map(str, a)))\n\n\nThis Python solution works by first checking if the XOR and sum of the array are both even. If not, it prints \"-1\" and terminates. If they are both even, it starts by adding the XOR value to the array, then subtracts the XOR value from the sum. It continues to do this until the sum is 0. The result is the desired array.\n\nThe XOR of an even number and an odd number is always even, and the sum of an even number and an odd number is always odd. Therefore, the XOR and sum of", "u, v = map(int, input().split())\nif u & v & 1:\n    print(-1)\nelse:\n    print(2)\n    print(u, v)\n\n\nThis code works by first checking if the bitwise-and of `u` and `v` and `1` is nonzero. This is true if either `u` or `v` is odd. If this is the case, there's no way to satisfy the conditions, so the program prints \"-1\".\n\nIf `u` and `v` are both even, the program prints \"2\" and the two numbers `u` and `v`, which is the shortest array possible.\n\nThis is because the bitwise-xor of any two even numbers is always even, and the sum of two even numbers is always even. This means that the array can be as small as 2 elements long, and the sum and xor of the elements will"], "prompt": "\nQUESTION:\nGiven 2 integers $u$ and $v$, find the shortest array such that bitwise-xor of its elements is $u$, and the sum of its elements is $v$.\n\n\n-----Input-----\n\nThe only line contains 2 integers $u$ and $v$ $(0 \\le u,v \\le 10^{18})$.\n\n\n-----Output-----\n\nIf there's no array that satisfies the condition, print \"-1\". Otherwise:\n\nThe first line should contain one integer, $n$, representing the length of the desired array. The next line should contain $n$ positive integers, the array itself. If there are multiple possible answers, print any.\n\n\n-----Examples-----\nInput\n2 4\n\nOutput\n2\n3 1\nInput\n1 3\n\nOutput\n3\n1 1 1\nInput\n8 5\n\nOutput\n-1\nInput\n0 0\n\nOutput\n0\n\n\n-----Note-----\n\nIn the first sample, $3\\oplus 1 = 2$ and $3 + 1 = 4$. There is no valid array of smaller length.\n\nNotice that in the fourth sample the array is empty.\nPlease provide the solution as pure code only, without explanations or comments.\n\nANSWER:\n```python\n"}}