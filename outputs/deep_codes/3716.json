{"3716": {"code": ["n = int(input().strip())\nprint(n*(n-1)*(n-2))\n\n\nExplanation:\n\nThe LCM of three numbers a, b, and c is given by LCM(a, b, c) = LCM(a, LCM(b, c)).\n\nGiven that a, b, and c are not greater than n, we can choose a = n, b = n-1, and c = n-2.\n\nThe LCM of a, b, and c is then (n*(n-1)*(n-2)).\n\nThis solution works because the LCM is maximized when the numbers are as close together as possible. In this case, the numbers are n, n-1, and n-2, which are as close together as", "n = int(input().strip())\nprint(n*(n-1)*(n-2))\n\n\nExplanation:\nSince we need the maximum LCM, we should use the largest possible numbers.\n\nThe three numbers we choose should be the largest possible numbers which are not greater than n, so we choose n, n-1 and n-2. The reason is that (n-2)*(n-1)*n is the maximum possible product of three numbers, which is the LCM of n, n-1 and n-2.\n\nThis code reads the input number n, then calculates and prints the LCM of n, n-1 and n-2.\n\nThe time complexity of this code is O(1), which is the best we can get for this problem.\n\nThis code", "def max_lcm(n):\n    if n % 2 == 0 and n % 3 == 0:\n        return n * (n-1) * (n-3) // 6\n    elif n % 2 == 0:\n        return n * (n-1) // 2 * (n-2)\n    elif n % 3 == 0:\n        return n * (n-1) // 2 * (n-3)\n    else:\n        return n * (n-1) * (n-2)\n\nn = int(input())\nprint(max_lcm(n))\n\n\nThis code works by checking the modulo of the input number with 2 and 3. If the input number is divisible by 2 and 3,", "n = int(input().strip())\nprint(n * (n-1) * (n-2))\n\n\nEXPLANATION:\nThe maximum possible LCM of three not necessarily distinct positive integers that are not greater than n is achieved when these three numbers are as close as possible to n.\n\nConsider three numbers a, b, c where a >= b >= c and a, b, c are not greater than n. The LCM of these three numbers is a*b*c. The maximum value of a*b*c is achieved when a, b, c are as large as possible. \n\na is maximum, so we have a = n. b and c are the two smallest numbers that are not greater than n. We choose b = n-1 and c = n-2.\n\nSo", "n = int(input().strip())\nprint((n // 2 * 3) * (n // 2 * 5) * (n // 2 + 1))\n\n\nEXPLANATION:\nThis solution is based on the fact that the least common multiple of three numbers a, b, c is always a*b*c / LCM(a, b), where LCM(a, b) is the least common multiple of a and b.\n\nSince a*b*c is the maximum possible product of three numbers, we have to choose a, b, c such that they are the maximum possible.\n\nSince a*b*c = (n // 2 * 3) * (n // 2 * 5) * (n // 2 + 1) is the maximum possible product"], "prompt": "\nQUESTION:\nSome days ago, I learned the concept of LCM (least common multiple). I've played with it for several times and I want to make a big number with it.\n\nBut I also don't want to use many numbers, so I'll choose three positive integers (they don't have to be distinct) which are not greater than n. Can you help me to find the maximum possible least common multiple of these three integers?\n\n\n-----Input-----\n\nThe first line contains an integer n (1 \u2264 n \u2264 10^6) \u2014 the n mentioned in the statement.\n\n\n-----Output-----\n\nPrint a single integer \u2014 the maximum possible LCM of three not necessarily distinct positive integers that are not greater than n.\n\n\n-----Examples-----\nInput\n9\n\nOutput\n504\n\nInput\n7\n\nOutput\n210\n\n\n\n-----Note-----\n\nThe least common multiple of some positive integers is the least positive integer which is multiple for each of them.\n\nThe result may become very large, 32-bit integer won't be enough. So using 64-bit integers is recommended.\n\nFor the last example, we can chose numbers 7, 6, 5 and the LCM of them is 7\u00b76\u00b75 = 210. It is the maximum value we can get.\nPlease provide the solution as pure code only, without explanations or comments.\n\nANSWER:\n```python\n"}}