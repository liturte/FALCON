{"4269": {"code": ["S = input()\nif any(S[i] == S[i+1] for i in range(3)):\n    print('Bad')\nelse:\n    print('Good')\n\nThis code takes a 4-digit number as input, checks if any two consecutive digits are the same, and prints 'Bad' if they are, or 'Good' if they aren't.\n\nNote: This code assumes that the input will always be a 4-digit number, as per the problem constraints. If this is not the case, additional error checking should be added.\n\nThis code uses a feature of Python called list comprehension, which is a concise way to create lists. The code `any(S[i] == S[i+1] for i in range(3))` checks if any two consecutive characters in the string S are the same. If it finds two consecutive digits that are the same, it returns True, and the code prints 'Bad'. If it doesn't find any such pairs, it returns False, and the code prints 'Good'.\n\nThis code is simple and efficient, with a time complexity of O(1), because it only checks a fixed number of characters in the string.\n\nRemember to run this code in an environment that supports input/output, like a Python interpreter or a Jupyter notebook.\n\nLastly, this code", "S = input()\nprint('Bad' if S[0]==S[1] or S[1]==S[2] or S[2]==S[3] else 'Good')\n\n\nThis Python program reads a 4-digit number as input and checks if any two consecutive digits are the same. If so, it prints 'Bad', otherwise it prints 'Good'.\n\nThis solution works by using Python's slicing feature to compare each pair of consecutive digits in the input string. If any pair of digits are the same, the condition in the if statement will be true and 'Bad' will be printed. If no such pair of digits are found, the else clause will be executed and 'Good' will be printed.\n\nThis solution assumes that the input is always a valid 4-digit number, as the problem statement does not specify how to handle invalid inputs.\n\nThis solution also assumes that the input is a string of digits, as the problem statement does not specify how to handle non-numeric characters. In Python, the comparison operators can be used to compare digits as if they were numbers. For example, '1' is less than '2' because 1 is less than 2.\n\nThis solution also assumes that the problem statement's constraints are correct. For example, the problem statement does not specify that the input should be a 4-character string", "S = input()\nif any(S[i] == S[i+1] for i in range(3)):\n    print('Bad')\nelse:\n    print('Good')\n\n\nThis code works by taking the input string S, and checking if any of the characters in S are the same as the next character in the string. If it finds a pair of consecutive characters that are the same, it prints 'Bad'. Otherwise, it prints 'Good'.\n\nThe condition `any(S[i] == S[i+1] for i in range(3))` checks each pair of consecutive characters in S. The function `range(3)` generates indices 0, 1, 2, which correspond to the first three pairs of consecutive characters in S.\n\nIf any pair of consecutive characters in S are the same, the condition is True, and the `any()` function returns True, so 'Bad' is printed. Otherwise, the `any()` function returns False, and 'Good' is printed.\n\nThis solution assumes that the input string S will always have exactly four characters. If the input string might have a different length, you would need to modify the solution to handle that case.", "S = input()\nif any(S[i] == S[i+1] for i in range(3)):\n    print(\"Bad\")\nelse:\n print(\"Good\")\n\n\nThis code takes an input string `S` and", "S = input()\nif any(S[i] == S[i+1] for i in range(3)):\n    print('Bad')\nelse:\n    print('Good')\n\n\nThis program works by taking the input string S and checking if any two consecutive characters in S are the same. If they are, it prints \"Bad\". If they aren't, it prints \"Good\".\n\nThis code uses a feature of Python called a generator expression. This is a compact way to create a list or other iterable. In this case, it's creating a list of booleans where the i-th boolean is True if the i-th and (i+1)-th characters of S are the same and False otherwise.\n\nThe `any` function then checks if any of the booleans in the list are True. If any are, it returns True and the program prints \"Bad\". If not, it returns False and the program prints \"Good\".\n\nThis solution has a time complexity of O(n) because it goes through the string S once.\n\"\"\"\n\n# Solution:\nS = input()\nif any(S[i] == S[i+1] for i in range(3)):\n    print('Bad')\nelse:\n    print('Good')\n\n\nThis program works by taking the input string S and checking if any two consecutive characters in"], "prompt": "\nQUESTION:\nThe door of Snuke's laboratory is locked with a security code.\nThe security code is a 4-digit number. We say the security code is hard to enter when it contains two consecutive digits that are the same.\nYou are given the current security code S. If S is hard to enter, print Bad; otherwise, print Good.\n\n-----Constraints-----\n - S is a 4-character string consisting of digits.\n\n-----Input-----\nInput is given from Standard Input in the following format:\nS\n\n-----Output-----\nIf S is hard to enter, print Bad; otherwise, print Good.\n\n-----Sample Input-----\n3776\n\n-----Sample Output-----\nBad\n\nThe second and third digits are the same, so 3776 is hard to enter.\nPlease provide the solution as pure code only, without explanations or comments.\n\nANSWER:\n```python\n"}}