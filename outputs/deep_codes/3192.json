{"3192": {"code": ["QUESTION:\nYou just graduated from programming school and nailed a Python programming job. The first day at work you realize that you have inherited a mess. The spaghetti design pattern was chosen by the previous maintainer, who recently fled the country. You try to make sense of the code, but immediately discover that different files depend cyclically on each other. Testing the code, in fact running the code, has not yet been attempted. \n\nAs you sit down and think, you decide that the first thing to do is to eliminate the cycles in the dependency graph. So you start by finding a shortest dependency cycle.\n\n-----Input-----\nThe first line of input contains a number $n$, $1 \\le n \\le 500$, the number of files. Then follows one line with\u00a0$n$ distinct names of files. Each name is a string with at least $1$ and at most $8$ lower case letters \u2018a\u2019 to \u2018z\u2019. Then follow\u00a0$n$ sections, one section per file name, in the order they were given on the second line. Each section starts with one line containing the name of the file and an integer\u00a0$k$, followed by\u00a0$k$ lines, each starting with \u201cimport\u201d.\n\nEach \u201cimport\u201d line is a comma-space separated line of dependencies. No file imports the same file more than once, and every file imported is listed in the second line of the input. Comma-space separated means that every line will start with \u201cimport\u201d, then have a list of file names separated by \u201c, \u201d (see sample inputs for examples). Each import statement is followed by at least one file name.\n\n-----Output-----\nIf the code base has no cyclic dependencies, output \u201cSHIP IT\u201d. Otherwise, output a line containing the names of files in a shortest cycle, in the order of the cycle (i.e., the $i$th file listed must import the $(i+1)$st file listed, and the last file listed must import the first). If there are many shortest cycles, any one will be accepted.\n\n-----Examples-----\nSample Input 1:\n4\na b c d\na 1\nimport d, b, c\nb 2\nimport d\nimport c\nc 1\nimport c\nd 0\nSample Output 1:\nc\n\nSample Input 2:\n5\nclassa classb myfilec execd libe\nclassa 2\nimport classb\nimport myfilec, libe\nclassb 1\nimport execd\nmyfilec 1\nimport libe\nexecd 1\nimport libe\nlibe 0\nSample Output 2:\nSHIP IT", "QUESTION:\nYou just graduated from programming school and nailed a Python programming job. The first day at work you realize that you have inherited a mess. The spaghetti design pattern was chosen by the previous maintainer, who recently fled the country. You try to make sense of the code, but immediately discover that different files depend cyclically on each other. Testing the code, in fact running the code, has not yet been attempted. \n\nAs you sit down and think, you decide that the first thing to do is to eliminate the cycles in the dependency graph. So you start by finding a shortest dependency cycle.\n\n-----Input-----\nThe first line of input contains a number $n$, $1 \\le n \\le 500$, the number of files. Then follows one line with\u00a0$n$ distinct names of files. Each name is a string with at least $1$ and at most $8$ lower case letters \u2018a\u2019 to \u2018z\u2019. Then follow\u00a0$n$ sections, one section per file name, in the order they were given on the second line. Each section starts with one line containing the name of the file and an integer\u00a0$k$, followed by\u00a0$k$ lines, each starting with \u201cimport\u201d.\n\nEach \u201cimport\u201d line is a comma-space separated line of dependencies. No file imports the same file more than once, and every file imported is listed in the second line of the input. Comma-space separated means that every line will start with \u201cimport\u201d, then have a list of file names separated by \u201c, \u201d (see sample inputs for examples). Each import statement is followed by at least one file name.\n\n-----Output-----\nIf the code base has no cyclic dependencies, output \u201cSHIP IT\u201d. Otherwise, output a line containing the names of files in a shortest cycle, in the order of the cycle (i.e., the $i$th file listed must import the $(i+1)$st file listed, and the last file listed must import the first). If there are many shortest cycles, any one will be accepted.\n\n-----Examples-----\nSample Input 1:\n4\na b c d\na 1\nimport d, b, c\nb 2\nimport d\nimport c\nc 1\nimport c\nd 0\nSample Output 1:\nc\n\nSample Input 2:\n5\nclassa classb myfilec execd libe\nclassa 2\nimport classb\nimport myfilec, libe\nclassb 1\nimport execd\nmyfilec 1\nimport libe\nexecd 1\nimport libe\nlibe 0\nSample Output 2:\nSHIP IT", "QUESTION:\nYou just graduated from programming school and nailed a Python programming job. The first day at work you realize that you have inherited a mess. The spaghetti design pattern was chosen by the previous maintainer, who recently fled the country. You try to make sense of the code, but immediately discover that different files depend cyclically on each other. Testing the code, in fact running the code, has not yet been attempted. \n\nAs you sit down and think, you decide that the first thing to do is to eliminate the cycles in the dependency graph. So you start by finding a shortest dependency cycle.\n\n-----Input-----\nThe first line of input contains a number $n$, $1 \\le n \\le 500$, the number of files. Then follows one line with\u00a0$n$ distinct names of files. Each name is a string with at least $1$ and at most $8$ lower case letters \u2018a\u2019 to \u2018z\u2019. Then follow\u00a0$n$ sections, one section per file name, in the order they were given on the second line. Each section starts with one line containing the name of the file and an integer\u00a0$k$, followed by\u00a0$k$ lines, each starting with \u201cimport\u201d.\n\nEach \u201cimport\u201d line is a comma-space separated line of dependencies. No file imports the same file more than once, and every file imported is listed in the second line of the input. Comma-space separated means that every line will start with \u201cimport\u201d, then have a list of file names separated by \u201c, \u201d (see sample inputs for examples). Each import statement is followed by at least one file name.\n\n-----Output-----\nIf the code base has no cyclic dependencies, output \u201cSHIP IT\u201d. Otherwise, output a line containing the names of files in a shortest cycle, in the order of the cycle (i.e., the $i$th file listed must import the $(i+1)$st file listed, and the last file listed must import the first). If there are many shortest cycles, any one will be accepted.\n\n-----Examples-----\nSample Input 1:\n4\na b c d\na 1\nimport d, b, c\nb 2\nimport d\nimport c\nc 1\nimport c\nd 0\nSample Output 1:\nc\n\nSample Input 2:\n5\nclassa classb myfilec execd libe\nclassa 2\nimport classb\nimport myfilec, libe\nclassb 1\nimport execd\nmyfilec 1\nimport libe\nexecd 1\nimport libe\nlibe 0\nSample Output 2:\nSHIP IT", "QUESTION:\nYou just graduated from programming school and nailed a Python programming job. The first day at work you realize that you have inherited a mess. The spaghetti design pattern was chosen by the previous maintainer, who recently fled the country. You try to make sense of the code, but immediately discover that different files depend cyclically on each other. Testing the code, in fact running the code, has not yet been attempted. \n\nAs you sit down and think, you decide that the first thing to do is to eliminate the cycles in the dependency graph. So you start by finding a shortest dependency cycle.\n\n-----Input-----\nThe first line of input contains a number $n$, $1 \\le n \\le 500$, the number of files. Then follows one line with\u00a0$n$ distinct names of files. Each name is a string with at least $1$ and at most $8$ lower case letters \u2018a\u2019 to \u2018z\u2019. Then follow\u00a0$n$ sections, one section per file name, in the order they were given on the second line. Each section starts with one line containing the name of the file and an integer\u00a0$k$, followed by\u00a0$k$ lines, each starting with \u201cimport\u201d.\n\nEach \u201cimport\u201d line is a comma-space separated line of dependencies. No file imports the same file more than once, and every file imported is listed in the second line of the input. Comma-space separated means that every line will start with \u201cimport\u201d, then have a list of file names separated by \u201c, \u201d (see sample inputs for examples). Each import statement is followed by at least one file name.\n\n-----Output-----\nIf the code base has no cyclic dependencies, output \u201cSHIP IT\u201d. Otherwise, output a line containing the names of files in a shortest cycle, in the order of the cycle (i.e., the $i$th file listed must import the $(i+1)$st file listed, and the last file listed must import the first). If there are many shortest cycles, any one will be accepted.\n\n-----Examples-----\nSample Input 1:\n4\na b c d\na 1\nimport d, b, c\nb 2\nimport d\nimport c\nc 1\nimport c\nd 0\nSample Output 1:\nc\n\nSample Input 2:\n5\nclassa classb myfilec execd libe\nclassa 2\nimport classb\nimport myfilec, libe\nclassb 1\nimport execd\nmyfilec 1\nimport libe\nexecd 1\nimport libe\nlibe 0\nSample Output 2:\nSHIP IT", "QUESTION:\nYou just graduated from programming school and nailed a Python programming job. The first day at work you realize that you have inherited a mess. The spaghetti design pattern was chosen by the previous maintainer, who recently fled the country. You try to make sense of the code, but immediately discover that different files depend cyclically on each other. Testing the code, in fact running the code, has not yet been attempted. \n\nAs you sit down and think, you decide that the first thing to do is to eliminate the cycles in the dependency graph. So you start by finding a shortest dependency cycle.\n\n-----Input-----\nThe first line of input contains a number $n$, $1 \\le n \\le 500$, the number of files. Then follows one line with\u00a0$n$ distinct names of files. Each name is a string with at least $1$ and at most $8$ lower case letters \u2018a\u2019 to \u2018z\u2019. Then follow\u00a0$n$ sections, one section per file name, in the order they were given on the second line. Each section starts with one line containing the name of the file and an integer\u00a0$k$, followed by\u00a0$k$ lines, each starting with \u201cimport\u201d.\n\nEach \u201cimport\u201d line is a comma-space separated line of dependencies. No file imports the same file more than once, and every file imported is listed in the second line of the input. Comma-space separated means that every line will start with \u201cimport\u201d, then have a list of file names separated by \u201c, \u201d (see sample inputs for examples). Each import statement is followed by at least one file name.\n\n-----Output-----\nIf the code base has no cyclic dependencies, output \u201cSHIP IT\u201d. Otherwise, output a line containing the names of files in a shortest cycle, in the order of the cycle (i.e., the $i$th file listed must import the $(i+1)$st file listed, and the last file listed must import the first). If there are many shortest cycles, any one will be accepted.\n\n-----Examples-----\nSample Input 1:\n4\na b c d\na 1\nimport d, b, c\nb 2\nimport d\nimport c\nc 1\nimport c\nd 0\nSample Output 1:\nc\n\nSample Input 2:\n5\nclassa classb myfilec execd libe\nclassa 2\nimport classb\nimport myfilec, libe\nclassb 1\nimport execd\nmyfilec 1\nimport libe\nexecd 1\nimport libe\nlibe 0\nSample Output 2:\nSHIP IT"], "prompt": "\nQUESTION:\nYou just graduated from programming school and nailed a Python programming job. The first day at work you realize that you have inherited a mess. The spaghetti design pattern was chosen by the previous maintainer, who recently fled the country. You try to make sense of the code, but immediately discover that different files depend cyclically on each other. Testing the code, in fact running the code, has not yet been attempted. \n\nAs you sit down and think, you decide that the first thing to do is to eliminate the cycles in the dependency graph. So you start by finding a shortest dependency cycle.\n\n-----Input-----\nThe first line of input contains a number $n$, $1 \\le n \\le 500$, the number of files. Then follows one line with\u00a0$n$ distinct names of files. Each name is a string with at least $1$ and at most $8$ lower case letters \u2018a\u2019 to \u2018z\u2019. Then follow\u00a0$n$ sections, one section per file name, in the order they were given on the second line. Each section starts with one line containing the name of the file and an integer\u00a0$k$, followed by\u00a0$k$ lines, each starting with \u201cimport\u201d.\n\nEach \u201cimport\u201d line is a comma-space separated line of dependencies. No file imports the same file more than once, and every file imported is listed in the second line of the input. Comma-space separated means that every line will start with \u201cimport\u201d, then have a list of file names separated by \u201c, \u201d (see sample inputs for examples). Each import statement is followed by at least one file name.\n\n-----Output-----\nIf the code base has no cyclic dependencies, output \u201cSHIP IT\u201d. Otherwise, output a line containing the names of files in a shortest cycle, in the order of the cycle (i.e., the $i$th file listed must import the $(i+1)$st file listed, and the last file listed must import the first). If there are many shortest cycles, any one will be accepted.\n\n-----Examples-----\nSample Input 1:\n4\na b c d\na 1\nimport d, b, c\nb 2\nimport d\nimport c\nc 1\nimport c\nd 0\nSample Output 1:\nc\n\nSample Input 2:\n5\nclassa classb myfilec execd libe\nclassa 2\nimport classb\nimport myfilec, libe\nclassb 1\nimport execd\nmyfilec 1\nimport libe\nexecd 1\nimport libe\nlibe 0\nSample Output 2:\nSHIP IT\nPlease provide the solution as pure code only, without explanations or comments.\n\nANSWER:\n```python\n"}}