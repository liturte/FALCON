{"391": {"code": ["def paint_cube(k):\n    if k == 1:\n        print(\"-1\")\n        return\n    for i in range(k):\n        for j in range(k):\n            if i % 2 == 0:\n                print(\"bb\" * k)\n            else:\n                print(\"ww\" * k)\n        print()\n\npaint_cube(2)\n\n\n\ndef paint_cube(k):\n    if k % 2 == 0:\n        for i in range(k):\n            for j in range(k):\n                if i % 2 == 0:\n                    print(\"bb\" * k)\n                else:", "def paint_cube(k):\n    if k == 1:\n        print(\"-1\")\n    else:\n        for i in range(k):\n            for j in range(k):\n                if i % 2 == 0:\n                    print(\"b\" * k)\n                else:\n                    print(\"w\" * k)\n            print()\n        for i in range(k):\n            for j in range(k):\n                if i % 2 == 0:\n                    print(\"w\" * k)\n                else:\n                    print(\"b\" * k)\n            print()\n\nk = int(input())\npaint_cube(k)\n\nThis Python", "def paint_cube(k):\n    if k % 2 != 0:\n        return -1\n    else:\n        for i in range(k):\n            for j in range(k):\n                if i % 2 == 0:\n                    print(\"b\" * k)\n                else:\n                    print(\"w\" * k)\n            print()\n        return 1\n\nk = int(input())\nprint(paint_cube(k))\n\nThis solution works by checking if the size of the cube (k) is even. If it's not, there's no way to satisfy the conditions and the function returns -1. If k is even, it prints", "def print_matrix(mat):\n    for i in range(len(mat)):\n        print(\"\".join(mat[i]))\n\ndef solve(k):\n    if k == 1:\n        print(\"-1\")\n        return\n    mat = [['b' for _ in range(k)] for _ in range(k)]\n    for i in range(k):\n        print_matrix(mat)\n        if i < k - 1:\n            mat[i+1][0] = 'w'\n            mat[i+1][k-1] = 'w'\n    print_matrix(mat)\n\nsolve(2)\n\nThis code will print the", "def solve(k):\n    if k == 1:\n        return -1\n    elif k == 2:\n        return \"bb\\nww\"\n    else:\n        layer = \"bb\\nww\"\n        for i in range(2, k):\n            layer = layer + \"\\n\" + \"\\n\".join([\"b\" * k for _ in range(k)]) + \"\\n\" + \"\\n\".join([\"w\" * k for _ in range(k)])\n        return layer\n\nk = int(input())\nprint(solve(k))\n\n\nThis code works by creating a string representation of the cube in the desired format. It first checks if k is"], "prompt": "\nQUESTION:\nYou are given a cube of size k \u00d7 k \u00d7 k, which consists of unit cubes. Two unit cubes are considered neighbouring, if they have common face.\n\nYour task is to paint each of k^3 unit cubes one of two colours (black or white), so that the following conditions must be satisfied:  each white cube has exactly 2 neighbouring cubes of white color;  each black cube has exactly 2 neighbouring cubes of black color. \n\n\n-----Input-----\n\nThe first line contains integer k (1 \u2264 k \u2264 100), which is size of the cube.\n\n\n-----Output-----\n\nPrint -1 if there is no solution. Otherwise, print the required painting of the cube consequently by layers. Print a k \u00d7 k matrix in the first k lines, showing how the first layer of the cube should be painted. In the following k lines print a k \u00d7 k matrix \u2014 the way the second layer should be painted. And so on to the last k-th layer. Note that orientation of the cube in the space does not matter.\n\nMark a white unit cube with symbol \"w\" and a black one with \"b\". Use the format of output data, given in the test samples. You may print extra empty lines, they will be ignored.\n\n\n-----Examples-----\nInput\n1\n\nOutput\n-1\n\nInput\n2\n\nOutput\nbb\nww\n\nbb\nww\nPlease provide the solution as pure code only, without explanations or comments.\n\nANSWER:\n```python\n"}}