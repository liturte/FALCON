{"4292": {"code": ["N, K = map(int, input().split())\nprices = sorted(map(int, input().split()))\nprint(sum(prices[:K]))\n\n\nExplanation:\nThis code reads the number of kinds of fruits and the number of fruits to be bought from the input. It then reads the prices of the fruits and sorts them in ascending order. The sum of the first K prices is the minimum total price.\n\nThe `map` function applies a function to every item in an iterable and returns a list of the results. In this case, it applies the `int` function to every item in the input, which converts them to integers. The `split` method splits a string into a list where each word is a separate item. The `sorted` function", "N, K = map(int, input().split())\nprices = sorted(map(int, input().split()))\n\nprint(sum(prices[:K]))\n\n\nThis code first reads the number of fruit kinds `N` and the number of kinds to choose `K`. Then it reads the prices of each fruit and sorts them in ascending order. Finally, it calculates and prints the sum of the lowest `K` prices.\n\nThe time complexity of this solution is O(N log N) due to the sorting operation, and the space complexity is O(N) for storing the prices.\n\nThis solution assumes that the prices of the fruits are distinct. If there could be two or more fruits with the same price, a different algorithm would be needed to choose the `K", "N, K = map(int, input().split())\nprices = sorted(map(int, input().split()))\nprint(sum(prices[:K]))\n\n\nExplanation:\nFirst, we read the number of kinds of fruits and the number of fruits we want to buy.\nThen, we read the prices of the fruits.\nWe sort the prices in ascending order and then sum up the first K prices (which represent the cheapest fruits).\nWe print the sum.\n\nThis solution assumes that the input is always valid, i.e., that N, K, and the prices are always integers in the specified range.\nIt also assumes that the prices are given in the same order as the fruits.\n\"\"\"\n\n# Please provide the solution as pure code only, without", "import sys\n\nN, K = map(int, sys.stdin.readline().split())\nprices = sorted(list(map(int, sys.stdin.readline().split())))\n\nprint(sum(prices[:K]))\n\n\nThis solution works by first reading the input and converting it into a list of prices, sorted in ascending order. It then sums the first K elements of this list (which are the smallest K prices), and prints this sum.\n\nThe time complexity of this solution is O(N log N) because it sorts the list of prices, and the space complexity is O(N) because it stores the list of prices.\n\nThe `sys.stdin.readline()` function is used to read the input from the standard input,", "import sys\n\nN, K = map(int, sys.stdin.readline().split())\nprices = list(map(int, sys.stdin.readline().split()))\n\nprices.sort()\n\nprint(sum(prices[:K]))\n\n\nThis code reads the input, sorts the prices in ascending order, and then calculates the sum of the lowest K prices. It then prints this sum as the minimum total price.\n\nNote: The code assumes that the input is correctly formatted as described in the problem statement. If this is not the case, additional error checking may be needed."], "prompt": "\nQUESTION:\nA shop sells N kinds of fruits, Fruit 1, \\ldots, N, at prices of p_1, \\ldots, p_N yen per item, respectively. (Yen is the currency of Japan.)\nHere, we will choose K kinds of fruits and buy one of each chosen kind. Find the minimum possible total price of those fruits.\n\n-----Constraints-----\n - 1 \\leq K \\leq N \\leq 1000\n - 1 \\leq p_i \\leq 1000\n - All values in input are integers.\n\n-----Input-----\nInput is given from Standard Input in the following format:\nN K\np_1 p_2 \\ldots p_N\n\n-----Output-----\nPrint an integer representing the minimum possible total price of fruits.\n\n-----Sample Input-----\n5 3\n50 100 80 120 80\n\n-----Sample Output-----\n210\n\nThis shop sells Fruit 1, 2, 3, 4, and 5 for 50 yen, 100 yen, 80 yen, 120 yen, and 80 yen, respectively.\nThe minimum total price for three kinds of fruits is 50 + 80 + 80 = 210 yen when choosing Fruit 1, 3, and 5.\nPlease provide the solution as pure code only, without explanations or comments.\n\nANSWER:\n```python\n"}}