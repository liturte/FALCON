{"3947": {"code": ["def max_points(n, arr):\n    if n == 1:\n        return arr[0]\n    dp = [0]*n\n    dp[0] = arr[0]\n    dp[1] = max(arr[0], arr[1])\n    for i in range(2, n):\n        dp[i] = max(dp[i-1], dp[i-2] + arr[i])\n    return dp[-1]\n\nn = int(input().strip())\narr = list(map(int, input().strip().split()))\nprint(max_points(n, arr))", "def max_points(n, a):\n    dp = [0] * n\n    dp[0] = a[0]\n    dp[1] = max(a[0], a[1])\n    for i in range(2, n):\n        dp[i] = max(dp[i-1], dp[i-2] + a[i])\n    return dp[-1]\n\nn = int(input())\na = list(map(int, input().split()))\nprint(max_points(n, a))\n\n\nThis solution uses dynamic programming to keep track of the maximum points Artem can get at", "def max_points(n, arr):\n    dp = [0]*n\n    dp[0] = arr[0]\n    dp[1] = max(arr[0], arr[1])\n    for i in range(2, n):\n        dp[i] = max(dp[i-1], dp[i-2]+arr[i])\n    return dp[-1]\n\nn = int(input())\narr = list(map(int, input().split()))\nprint(max_points(n, arr))\n\n\nEXPLANATION:\nThis solution uses dynamic programming. The idea is to keep", "def solve(n, a):\n    dp = [0] * (n+2)\n    a = [0] + a + [0]\n    for i in range(1, n+1):\n        dp[i] = max(dp[i-1], dp[i-2] + a[i])\n    return dp[n]\n\nn = int(input())\na = list(map(int, input().split()))\nprint(solve(n, a))\n\nThis python code solves the problem by using dynamic programming. The dp array stores the maximum points that Artem can get for the first i elements of the", "def max_points(n, arr):\n    dp = [0]*n\n    dp[0] = 0\n    dp[1] = max(arr[0], arr[1])\n    for i in range(2, n):\n        dp[i] = max(dp[i-1], dp[i-2]+arr[i])\n    return dp[-1]\n\nn = int(input())\narr = list(map(int, input().split()))\nprint(max_points(n, arr))\n\n\nThis code uses dynamic programming to solve the problem. It first initializes an array `dp` of"], "prompt": "\nQUESTION:\nArtem has an array of n positive integers. Artem decided to play with it. The game consists of n moves. Each move goes like this. Artem chooses some element of the array and removes it. For that, he gets min(a, b) points, where a and b are numbers that were adjacent with the removed number. If the number doesn't have an adjacent number to the left or right, Artem doesn't get any points. \n\nAfter the element is removed, the two parts of the array glue together resulting in the new array that Artem continues playing with. Borya wondered what maximum total number of points Artem can get as he plays this game.\n\n\n-----Input-----\n\nThe first line contains a single integer n (1 \u2264 n \u2264 5\u00b710^5) \u2014 the number of elements in the array. The next line contains n integers a_{i} (1 \u2264 a_{i} \u2264 10^6) \u2014 the values of the array elements.\n\n\n-----Output-----\n\nIn a single line print a single integer \u2014 the maximum number of points Artem can get.\n\n\n-----Examples-----\nInput\n5\n3 1 5 2 6\n\nOutput\n11\n\nInput\n5\n1 2 3 4 5\n\nOutput\n6\n\nInput\n5\n1 100 101 100 1\n\nOutput\n102\nPlease provide the solution as pure code only, without explanations or comments.\n\nANSWER:\n```python\n"}}