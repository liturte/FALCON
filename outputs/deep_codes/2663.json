{"2663": {"code": ["from sys import stdin, stdout\nfrom heapq import *\n\ndef solve():\n    n, k = map(", "def max_sums(n, k, arr):\n    sums = []\n    for i in range(n):", "def max_sums(n, k, arr):\n    sums = []\n    for i in range(n):", "import heapq\n\ndef solve(N, K, A):\n    L = []\n    for i in range(N", "def solve(N, K, A):\n    L = []\n    for i in range(N):\n        for j"], "prompt": "\nQUESTION:\nChef likes arrays a lot. Today, he found an array A consisting of N positive integers.\nLet L denote the sorted (in non-increasing order) list of size N*(N+1)/2 containing the sums of all possible contiguous subarrays of A. Chef is interested in finding the first K elements from the list L. Can you help him in accomplishing this task?\n\n-----Input-----\nThere is only a single test case per input file.\nThe first line of input contains two space separated integer numbers N and K denoting the size of the array and the number of the maximal sums you need to find.\nThe following line contains N space separated integer numbers denoting the array A.\n\n-----Output-----\nOutput K space separated integers where the ith integer denotes the ith element of L.\n\n-----Constraints-----\n- 1 \u2264 N \u2264 105\n- 1 \u2264 K \u2264 min(N*(N+1)/2, 105)\n- 1 \u2264 Ai \u2264 109\n\n-----Subtasks-----\n- Subtask 1 (47 pts) : 1 \u2264 N \u2264 1000, 1 \u2264 K \u2264 min{N*(N+1)/2, 105}\n- Subtask 2 (53 pts) : 1 \u2264 N \u2264 105, 1 \u2264 K \u2264 min{N*(N+1)/2, 105}\n\n-----Example-----\nInput 13 4\n1 3 4\n\nOutput 18 7 4 4\n\nInput 23 3\n10 2 7\n\nOutput 219 12 10\n\n-----Explanation-----\nTest 1:\n\nThe first 4 elements of it are [8, 7, 4, 4].\nPlease provide the solution as pure code only, without explanations or comments.\n\nANSWER:\n```python\n"}}