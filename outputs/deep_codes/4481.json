{"4481": {"code": ["from collections import Counter\n\nN = int(input())\nS = [input() for _ in range(N)]\n\nc = Counter(S)\nmax_count = max(c.values())\n\nmax_strings = [k for k, v in c.items() if v == max_count]\nmax_strings.sort()\n\nprint(\"\\n\".join(max_strings))\n\n\nThis Python solution uses the Counter class from the collections module to count the number of occurrences of each string in the list S. It then finds the maximum count and creates a list of all strings with that count. This list is sorted in lexicographical order before being printed.\n\nThe time complexity of this solution is O(N log N), where N is the number of voting papers. This is because the sort function is used, which has a time complexity of O(N log N). The space complexity is O(N), which is the space required to store the Counter object and the list of strings.\n\nThe solution assumes that the input is given in the", "from collections import Counter\n\nN = int(input())\nS = [input() for _ in range(N)]\n\nc = Counter(S)\nmax_count = max(c.values())\n\nmost_common_strings = [k for k, v in c.items() if v == max_count]\nmost_common_strings.sort()\n\nprint(\"\\n\".join(most_most_common_strings))\n\n\nThis code uses the Counter class from the collections module to count the number of occurrences of each string. Then it finds the maximum count. Finally, it creates a list of the strings that have the maximum count and sorts it in lexicographical order. The sorted list is then printed, each string on a new line.\n\nThis solution has a time complexity of O(N log N) due to the sorting operation. The space complexity is O(N), because we are storing the counts of all strings.\n\nPlease note that this code assumes that the strings are case-sensitive, i.e., 'beet'", "from collections import Counter\n\nN = int(input())\nS = [input() for _ in range(N)]\n\ncounts = Counter(S)\nmax_count = max(counts.values())\n\nmax_strings = [s for s, count in counts.items() if count == max_count]\n\nfor s in sorted(max_strings):\n    print(s)\n\n\nThis code first reads in the number of votes and the vote strings. It then counts the number of times each string appears using a Counter, finds the maximum count, and creates a list of all strings that appear this maximum number of times. Finally, it sorts the list of strings and prints each one.\n\nThis solution assumes that the input is given correctly. In a real-world situation, you would need to add error checking to handle incorrect inputs.", "from collections import Counter\n\nN = int(input())\nS = [input() for _ in range(N)]\ncounter = Counter(S)\nmax_count = max(counter.values())\nmost_common_strings = sorted(k for k, v in counter.items() if v == max_count)\nprint('\\n'.join(most_common_strings))\n\n\nThis Python code uses the `collections.Counter` class to count the occurrences of each string in the list `S`. It then finds the maximum count and uses a list comprehension to get the keys (the strings) with this maximum count. These strings are then joined with newline characters and printed.\n\nThis code assumes that the input is given in the correct format as described in the question. It doesn't handle potential errors or edge cases.\n\nThis code has a time complexity of O(N log N) due to the sorting operation. The space complexity is O(N) because of the storage of the list `S` and the counter.\n\nThe code", "from collections import Counter\nN = int(input())\nS = [input() for _ in range(N)]\nc = Counter(S)\nmax_count = max(c.values())\nmax_strings = [s for s, count in c.items() if count == max_count]\nfor s in sorted(max_strings):\n    print(s)\n\n\nEXPLANATION:\nThe given problem is to find the most frequent strings in a list of strings. The 'Counter' class from the 'collections' module in Python is used to count the frequency of each string. Then, we find the maximum count and print all strings that have this count. The 'sorted' function is used to sort the strings in lexicographical order.\n\"\"\"\n\n# Solution 2\n\"\"\"\nQUESTION:\nWe have N voting papers. The i-th vote (1 \\leq i \\leq N) has the string S_i written on it.\nPrint all strings that are written on the most number of votes, in lexicographical order."], "prompt": "\nQUESTION:\nWe have N voting papers. The i-th vote (1 \\leq i \\leq N) has the string S_i written on it.\nPrint all strings that are written on the most number of votes, in lexicographical order.\n\n-----Constraints-----\n - 1 \\leq N \\leq 2 \\times 10^5\n - S_i (1 \\leq i \\leq N) are strings consisting of lowercase English letters.\n - The length of S_i (1 \\leq i \\leq N) is between 1 and 10 (inclusive).\n\n-----Input-----\nInput is given from Standard Input in the following format:\nN\nS_1\n:\nS_N\n\n-----Output-----\nPrint all strings in question in lexicographical order.\n\n-----Sample Input-----\n7\nbeat\nvet\nbeet\nbed\nvet\nbet\nbeet\n\n-----Sample Output-----\nbeet\nvet\n\nbeet and vet are written on two sheets each, while beat, bed, and bet are written on one vote each. Thus, we should print the strings beet and vet.\nPlease provide the solution as pure code only, without explanations or comments.\n\nANSWER:\n```python\n"}}