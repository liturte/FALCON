{"3986": {"code": ["def lexicographically_smallest_string(n, k):\n    if k > 26 or n < k:\n        return \"-1\"\n    res", "n, k = map(int, input().split())\nif n * k < 26 or k > 26:\n    print(-1)\nelse:", "def get_string(n, k):\n    if k > 26 or k * 2 > n + 1:\n        return \"-1\"\n\n    result", "n, k = map(int, input().split())\n\nif k > 26 or k * 2 > n:\n    print(-1)\nelse:", "n, k = map(int, input().split())\n\nif k > 26 or k * 2 > n + 1:\n    print(-1)"], "prompt": "\nQUESTION:\nLittle penguin Polo adores strings. But most of all he adores strings of length n.\n\nOne day he wanted to find a string that meets the following conditions:  The string consists of n lowercase English letters (that is, the string's length equals n), exactly k of these letters are distinct.  No two neighbouring letters of a string coincide; that is, if we represent a string as s = s_1s_2... s_{n}, then the following inequality holds, s_{i} \u2260 s_{i} + 1(1 \u2264 i < n).  Among all strings that meet points 1 and 2, the required string is lexicographically smallest. \n\nHelp him find such string or state that such string doesn't exist.\n\nString x = x_1x_2... x_{p} is lexicographically less than string y = y_1y_2... y_{q}, if either p < q and x_1 = y_1, x_2 = y_2, ... , x_{p} = y_{p}, or there is such number r (r < p, r < q), that x_1 = y_1, x_2 = y_2, ... , x_{r} = y_{r} and x_{r} + 1 < y_{r} + 1. The characters of the strings are compared by their ASCII codes.\n\n\n-----Input-----\n\nA single line contains two positive integers n and k (1 \u2264 n \u2264 10^6, 1 \u2264 k \u2264 26) \u2014 the string's length and the number of distinct letters.\n\n\n-----Output-----\n\nIn a single line print the required string. If there isn't such string, print \"-1\" (without the quotes).\n\n\n-----Examples-----\nInput\n7 4\n\nOutput\nababacd\n\nInput\n4 7\n\nOutput\n-1\nPlease provide the solution as pure code only, without explanations or comments.\n\nANSWER:\n```python\n"}}