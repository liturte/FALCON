{"1896": {"code": ["def hexagons(n):\n    if n == 0:\n        return 1\n    else:\n        return 3 * n * (n - 1) + 1\n\nn = int(input())\nprint(hexagons(n))\n\n\nThis program works by using the formula for the number of hexagons in a ring of radius n. The formula is 3n(n-1) + 1. The base case is n = 0, where there is only one hexagon (the center cell).\n\nThe program reads the input, calls the hexagons function with the input as the argument, and prints the result.\n\nThis program assumes that the input", "def hexagons_in_circle(n):\n    return 6 * n * (n - 1) + 1\n\nn = int(input())\nprint(hexagons_in_circle(n))\n\nThis solution uses the fact that the number of hexagons in a circle of radius n is 6n(n-1) + 1. This is because each hexagon has 6 sides, and each side is shared by 2 hexagons. The number of hexagons in a circle of radius n is therefore 6n(n-1) + 1.\n\nThe time complexity of this solution is O(1), which means it runs in constant time", "def hexagons_in_n(n):\n    return 7 * n * (n - 1) // 2 + 1\n\nn = int(input())\nprint(hexagons_in_n(n))\n\n\nEXPLANATION:\nThis is a simple mathematical problem. The number of cells affected by a magic effect grows as n^2. However, we need to consider the fact that we start from the center cell, so we need to add 1 to the result. The formula to calculate the number of cells affected by a magic effect is 7 * n * (n - 1) / 2 + 1.\n\nThe number of cells in the", "def hexagons_in_range(n):\n    if n == 0:\n        return 1\n    else:\n        return 3 * n * (n - 1) + 1\n\nn = int(input())\nprint(hexagons_in_range(n))\n\n\nThis solution uses the formula for the number of hexagons in a ring of a hexagonal grid. The formula is 3n^2 - 3n + 1. This formula counts the number of hexagons in a ring with radius n, which is what we want in this case. The center of the hexagon grid is at the origin (0, 0). The distance from", "def hexagons_in_range(n):\n    return 3 * n * (n - 1) + 1\n\nn = int(input().strip())\nprint(hexagons_in_range(n))\n\n\nThis solution uses the formula for the number of hexagons in a ring of radius r, which is 3*r^2 - 3*r + 1. In this case, r is n. The formula returns the total number of hexagons in all rings of radius 0 to n.\n\nThe formula for the number of hexagons in a ring of radius r is derived from the fact that each ring contains 6*r hexag"], "prompt": "\nQUESTION:\nAfter a probationary period in the game development company of IT City Petya was included in a group of the programmers that develops a new turn-based strategy game resembling the well known \"Heroes of Might & Magic\". A part of the game is turn-based fights of big squadrons of enemies on infinite fields where every cell is in form of a hexagon.\n\nSome of magic effects are able to affect several field cells at once, cells that are situated not farther than n cells away from the cell in which the effect was applied. The distance between cells is the minimum number of cell border crosses on a path from one cell to another.\n\nIt is easy to see that the number of cells affected by a magic effect grows rapidly when n increases, so it can adversely affect the game performance. That's why Petya decided to write a program that can, given n, determine the number of cells that should be repainted after effect application, so that game designers can balance scale of the effects and the game performance. Help him to do it. Find the number of hexagons situated not farther than n cells away from a given cell. [Image] \n\n\n-----Input-----\n\nThe only line of the input contains one integer n (0 \u2264 n \u2264 10^9).\n\n\n-----Output-----\n\nOutput one integer \u2014 the number of hexagons situated not farther than n cells away from a given cell.\n\n\n-----Examples-----\nInput\n2\n\nOutput\n19\nPlease provide the solution as pure code only, without explanations or comments.\n\nANSWER:\n```python\n"}}