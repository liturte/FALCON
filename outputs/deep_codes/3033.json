{"3033": {"code": ["def f(b, n):\n    return int(''.join(sorted([str(int(x) * b) for x in str(n)])))\n\ndef solve(b, n):\n    x = 1\n    while f(b, x) != n:\n        if f(b, x) > n:\n            return 'impossible'\n        x += 1\n    return x\n\nprint(solve(*map(int, input().split())))\n\n\nThis Python script solves the problem by first defining a helper function `f` which computes the value of the function `f_b` for a given base `b` and", "def f(base, num):\n    return int(''.join(sorted([digit for digit in str(num)])))\n\ndef rev_f(base, num):\n    num_str = str(num)\n    digits = [int(digit) for digit in num_str]\n    digits.sort(reverse=True)\n    return int(''.join(map(str, digits))) * (base ** (len(num_str) - 1))\n\ndef smallest_x(base, num):\n    low = 1\n    high = num\n    while low < high:\n        mid = (low + high) //", "def f(B, N):\n    if N == 0:\n        return 1\n    digits = []\n    while N > 0:\n        digits.append(N % B)\n        N //= B\n    digits.sort()\n    result = 0\n    for d in digits:\n        result = result * B + d\n    return result\n\ndef solve(B, N):\n    if N == 0:\n        return 0\n    if B == 10:\n        return N\n    for X in range(1, N+1):\n        if f(B, X) == N:\n            return X\n    return", "def f(b, n):\n    def base_to_dec(n, b):\n        return sum(int(n[i]) * b ** i for i in range(len(n)))\n    def dec_to_base(n, b):\n        return ''.join(str(n // b ** i % b) for i in range(len(str(n)), -1, -1))\n    if n == 0: return '0'\n    l, r = 0, 10 ** 18\n    while l < r:\n        mid = (l + r) // 2\n        if int(dec_to_base(", "from sys import argv, stdin, stdout\n\ndef f(b, n):\n    r = 0\n    while n:\n        r *= b\n        r += n % b\n        n //= b\n    return r\n\ndef solve(b, n):\n    if n == 0:\n        return 0\n    l, r = 1, 2 ** 63\n    while l < r:\n        m = (l + r) // 2\n        if f(b, m) < n:\n            l = m + 1\n        else:\n            r = m\n    return l if f(b, l) =="], "prompt": "\nQUESTION:\nFor every positive integer we may obtain a non-negative integer by multiplying its digits. This defines a function $f$, e.g.\u00a0$f(38) = 24$.\n\nThis function gets more interesting if we allow for other bases. In base $3$, the number $80$ is written as $2222$, so: $f_3(80) = 16$.\n\nWe want you to solve the reverse problem: given a base $B$ and a number $N$, what is the smallest positive integer $X$ such that $f_ B(X) = N$?\n\n-----Input-----\nThe input consists of a single line containing two integers $B$ and $N$, satisfying $2 < B \\leq 10000$ and $0 < N < 2^{63}$.\n\n-----Output-----\nOutput the smallest positive integer solution $X$ of the equation $f_ B(X) = N$. If no such $X$ exists, output the word \u201cimpossible\u201d. The input is carefully chosen such that $X < 2^{63}$ holds (if $X$ exists).\n\n-----Examples-----\nSample Input 1:\n10 24\nSample Output 1:\n38\n\nSample Input 2:\n10 11\nSample Output 2:\nimpossible\n\nSample Input 3:\n9 216\nSample Output 3:\n546\nPlease provide the solution as pure code only, without explanations or comments.\n\nANSWER:\n```python\n"}}