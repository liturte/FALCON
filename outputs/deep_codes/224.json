{"224": {"code": ["def min_jump_ability(s):\n    vowels = set('AEIOUY')\n    max_distance = [0] * len(s)\n    for i in range(len(s) - 1, -1, -1):\n        if i == len(s) - 1 or s[i] in vowels:\n            max_distance[i] = 1\n            for j in range(i + 1, min(i + max_distance[i] + 1, len(s))):\n                if s[j] in vowels:\n                    max_distance[i] = max(max_distance[i], max_distance[j] + 1)\n    return max_distance[0]\n\nprint(min_jump_", "def min_jump_ability(s):\n    vowels = 'AEIOUY'\n    jumps = [0] * len(s)\n    for i in range(len(s) - 2, -1, -1):\n        if s[i] in vowels:\n            jumps[i] = jumps[i + 1]\n        else:\n            jumps[i] = jumps[i + 1] + 1\n    return max(jumps)\n\nprint(min_jump_ability(input()))\n\nThis program works by iterating over the string in reverse order (from right to left), and for each character, it determines if it is a vowel or not. If it is a vowel, the jump ability at that", "def min_jump_ability(s):\n    vowels = 'AEIOUY'\n    max_jump = 0\n    for i in range(len(s)):\n        if s[i] in vowels:\n            max_jump = max(max_jump, i+1)\n    return max_jump\n\nprint(min_jump_ability(input()))\n\n\nThis code works by iterating over the string, and for each character, if it's a vowel, it updates the maximum jump ability. The maximum jump ability is the maximum of the current maximum jump ability and the index of the current character plus one (since the index is 0-based). The function then returns the maximum jump ability.\n\nThe input string is read", "def min_jump(s):\n    vowels = set('AEIOUY')\n    max_dist = 0\n    cur_dist = 0\n    for c in s:\n        if c in vowels:\n            cur_dist += 1\n            max_dist = max(max_dist, cur_dist)\n        else:\n            cur_dist = 0\n    return max_dist\n\nprint(min_jump(input()))\n\nThis solution works by iterating over the string, and for each character, it checks if it's a vowel. If it is, it increments the current distance by 1, and updates the maximum distance if necessary. If the character is not a vowel, it resets the current distance to 0. Finally, it", "def min_jump(s):\n    vowels = set('AEIOUY')\n    max_jump = 0\n    for i in range(len(s) - 1, -1, -1):\n        if s[i] in vowels:\n            max_jump = max(max_jump, i + 1)\n        if i > 0 and s[i] == s[i - 1] and s[i] in vowels:\n            max_jump = max(max_jump, i)\n    return max_jump\n\nprint(min_jump(input()))\n\n\nThis solution works by iterating over the string in reverse order. It keeps track of the maximum jump ability by updating `max_jump"], "prompt": "\nQUESTION:\nOne day, the Grasshopper was jumping on the lawn and found a piece of paper with a string. Grasshopper became interested what is the minimum jump ability he should have in order to be able to reach the far end of the string, jumping only on vowels of the English alphabet. Jump ability is the maximum possible length of his jump. \n\nFormally, consider that at the begginning the Grasshopper is located directly in front of the leftmost character of the string. His goal is to reach the position right after the rightmost character of the string. In one jump the Grasshopper could jump to the right any distance from 1 to the value of his jump ability. [Image] The picture corresponds to the first example. \n\nThe following letters are vowels: 'A', 'E', 'I', 'O', 'U' and 'Y'.\n\n\n-----Input-----\n\nThe first line contains non-empty string consisting of capital English letters. It is guaranteed that the length of the string does not exceed 100. \n\n\n-----Output-----\n\nPrint single integer a\u00a0\u2014 the minimum jump ability of the Grasshopper (in the number of symbols) that is needed to overcome the given string, jumping only on vowels.\n\n\n-----Examples-----\nInput\nABABBBACFEYUKOTT\n\nOutput\n4\nInput\nAAA\n\nOutput\n1\nPlease provide the solution as pure code only, without explanations or comments.\n\nANSWER:\n```python\n"}}