{"754": {"code": ["n = int(input())\ns = input()\n\ncount = 0\nfor i in range(n-1):\n    if s[i] == s[i+1]:\n        count += 1\n\nprint(count)\n\n\nThis solution works by iterating over the string of stones, and for each stone, it checks if it is the same color as the next stone. If it is, it increments a counter. The final result is the number of stones that were the same color as the next one, which is the minimum number of stones we need to remove to ensure that no two neighboring stones are the same color.\n\nThis solution has a time complexity of O(n), because it makes a single pass over the string of stones.\n\nThe space complexity is O(1), because it only uses a constant amount of space to store the input and the counter.\n\nThis solution assumes that the input is always valid, i.e., the number of stones is between 1 and 50, and the colors are either 'R', 'G', or 'B'. If the input can have other", "n = int(input())\ns = input()\n\ncount = 0\nfor i in range(n-1):\n    if s[i] == s[i+1]:\n        count += 1\n\nprint(count)\n\n\nThis code works by iterating over the string of stones. For each pair of stones, if they have the same color, it increments a counter. The final count is the minimum number of stones to remove to ensure that no two neighboring stones have the same color.\n\nThe time complexity of this solution is O(n), where n is the number of stones. This is because we are making a single pass through the string of stones. The space complexity is O(1), as we are only using a constant amount of space to store the input and the counter.", "def min_stones_to_remove(n, s):\n    return sum(s[i] == s[i+1] for i in range(n-1))\n\nn = int(input())\ns = input()\nprint(min_stones_to_remove(n, s))\n\n\nThis code defines a function `min_stones_to_remove` that counts the number of neighboring stones with the same color. The function is then used to solve the problem by reading the input and printing the result.", "def min_stones_to_remove(n, s):\n    return sum(s[i] == s[i+1] for i in range(n-1))\n\nn = int(input())\ns = input()\nprint(min_stones_to_remove(n, s))\n\nThis solution uses a generator expression to count the number of stones that have the same color as the next stone. The sum of these counts is the minimum number of stones to remove to ensure that no two neighboring stones have the same color.", "def min_stones_to_remove(n, s):\n    return sum(s[i] == s[i+1] for i in range(n-1))\n\nn = int(input())\ns = input()\nprint(min_stones_to_remove(n, s))\n\nIn this solution, we are iterating through the string s from left to right and checking if the current character is the same as the next one. If they are the same, it means that they are neighboring stones of the same color and we can remove one of them. We sum up all these removals and return the total count.\n\nPlease note that this solution assumes that the input string s is 1-indexed, which is a common convention in many programming languages. If the input string s is 0-indexed, you would need to adjust the range in the sum function to `range(n-1)` instead of `range(n-2)`.\n\nThis solution also assumes that the input is valid, i.e., the string s contains only 'R', 'G"], "prompt": "\nQUESTION:\nThere are n stones on the table in a row, each of them can be red, green or blue. Count the minimum number of stones to take from the table so that any two neighboring stones had different colors. Stones in a row are considered neighboring if there are no other stones between them.\n\n\n-----Input-----\n\nThe first line contains integer n (1 \u2264 n \u2264 50) \u2014 the number of stones on the table. \n\nThe next line contains string s, which represents the colors of the stones. We'll consider the stones in the row numbered from 1 to n from left to right. Then the i-th character s equals \"R\", if the i-th stone is red, \"G\", if it's green and \"B\", if it's blue.\n\n\n-----Output-----\n\nPrint a single integer \u2014 the answer to the problem.\n\n\n-----Examples-----\nInput\n3\nRRG\n\nOutput\n1\n\nInput\n5\nRRRRR\n\nOutput\n4\n\nInput\n4\nBRBG\n\nOutput\n0\nPlease provide the solution as pure code only, without explanations or comments.\n\nANSWER:\n```python\n"}}