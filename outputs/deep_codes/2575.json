{"2575": {"code": ["def can_build_fence(angle):\n    if angle < 360 and angle % 180 != 0:\n        return \"YES\"\n    else:\n        return \"NO\"\n\nt = int(input())\nfor _ in range(t):\n    a = int(input())\n    print(can_build_fence(a))\n\n\nThis code takes an integer input `a` which represents the angle at which the robot can make corners. It checks if `a` is less than 360 and not divisible by 180. If this is the case, it returns \"YES\", meaning the robot can build the fence. Otherwise, it returns \"NO\". The code is repeated for `t` number of times, where", "t = int(input())\n\nfor _ in range(t):\n    a = int(input())\n    if a < 360 and a % 180 != 0:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n\n\nThis Python program works by first taking the number of test cases as input. For each test case, it takes the angle as input and checks if it is less than 360 and is not a multiple of 180 (which means it is not a right angle). If both conditions are true, it prints \"YES\", otherwise it prints \"NO\". The reason for this is that for a regular polygon, the angle between any two consecutive sides must be equal. So, if the angle is less than 36", "def solve():\n    t = int(input())\n    for _ in range(t):\n        a = int(input())\n        if a < 60 and a % 30 == 0:\n            print('YES')\n        else:\n            print('NO')\n\nsolve()\n\n\nEXPLANATION:\nThe robot can build a fence if and only if the angle it can make corners at is a multiple of 30 degrees. This is because a regular polygon with n sides can be constructed by the robot if and only if the angle it can make corners at is a multiple of 360 degrees divided by the number of sides. For example, a regular triangle (3 sides) can be constructed if the robot can make corners at an angle of 60 degrees", "def solve():\n    t = int(input())\n    for _ in range(t):\n        a = int(input())\n        if a == 30 or a == 60 or a == 90:\n            print(\"YES\")\n        else:\n            print(\"NO\")\nsolve()", "def can_build_fence(a):\n    if a < 1 or a > 179:\n        return \"NO\"\n    else:\n        return \"YES\"\n\nt = int(input())\nfor _ in range(t):\n    a = int(input())\n    print(can_build_fence(a))\n\n\nEXPLANATION:\nThe robot can build a fence if and only if the angle it can make corners at is between 1 and 179 degrees (exclusive), which corresponds to the possible values for the interior angles of a regular polygon. For example, for a triangle, the maximum interior angle is 60 degrees; for a square, the maximum interior angle is 90 degrees. The robot can only build a fence"], "prompt": "\nQUESTION:\nEmuskald needs a fence around his farm, but he is too lazy to build it himself. So he purchased a fence-building robot.\n\nHe wants the fence to be a regular polygon. The robot builds the fence along a single path, but it can only make fence corners at a single angle a.\n\nWill the robot be able to build the fence Emuskald wants? In other words, is there a regular polygon which angles are equal to a?\n\n\n-----Input-----\n\nThe first line of input contains an integer t (0 < t < 180) \u2014 the number of tests. Each of the following t lines contains a single integer a (0 < a < 180) \u2014 the angle the robot can make corners at measured in degrees.\n\n\n-----Output-----\n\nFor each test, output on a single line \"YES\" (without quotes), if the robot can build a fence Emuskald wants, and \"NO\" (without quotes), if it is impossible.\n\n\n-----Examples-----\nInput\n3\n30\n60\n90\n\nOutput\nNO\nYES\nYES\n\n\n\n-----Note-----\n\nIn the first test case, it is impossible to build the fence, since there is no regular polygon with angle $30^{\\circ}$.\n\nIn the second test case, the fence is a regular triangle, and in the last test case \u2014 a square.\nPlease provide the solution as pure code only, without explanations or comments.\n\nANSWER:\n```python\n"}}