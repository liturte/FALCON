{"2380": {"code": ["import heapq\n\nN, M = map(int, input().split())\nA = list(map(int, input().split()))\nBC = [list(map(int, input().split())) for _ in range(M)]\n\nA.sort()\nBC.sort(key=lambda x: -x[1])\n\nans = 0\nB_sum = sum(B for B, C in BC)\nfor A_i, (B, C) in zip(A, BC):\n    if B_sum >= B:\n        ans += B * C\n        B_sum -= B\n    else:\n        ans += A_i * B_sum + B * (B - B_sum", "import heapq\n\nN, M = map(int, input().split())\nA = list(map(int, input().split()))\nB_C = [list(map(int, input().split())) for _ in range(M)]\n\nA = [-a for a in A]\nheapq.heapify(A)\n\nB_C.sort()\n\nj = 0\nans = 0\nfor b, c in B_C:\n    for _ in range(b):\n        if j < N and -A[0] > c:\n            ans += -heapq.heappop(A)\n            heapq.heappush(A, -c)\n            j +=", "import heapq\n\nN, M = map(int, input().split())\nA = list(map(int, input().split()))\nB = [0]*M\nC = [0]*M\n\nfor i in range(M):\n    B[i], C[i] = map(int, input().split())\n\nA = [-a for a in A]\nheapq.heapify(A)\n\nfor i in range(M):\n    for _ in range(B[i]):\n        heapq.heappush(A, -C[i])\n\nprint(-sum(A))\n\n\nThis code uses a heap to keep track of the maximum integers. The minus", "import heapq\n\nN, M = map(int, input().split())\nA = list(map(int, input().split()))\nB, C = [], []\nfor _ in range(M):\n    b, c = map(int, input().split())\n    B.append(b)\n    C.append(c)\n\nA = [-a for a in A]\nheapq.heapify(A)\n\nfor b, c in zip(B, C):\n    for _ in range(b):\n        heapq.heappush(A, -heapq.heappop(A))\n    for _ in range(b):\n        heapq.heappush(A", "import heapq\n\nN, M = map(int, input().split())\nA = list(map(int, input().split()))\nB_C = [list(map(int, input().split())) for _ in range(M)]\n\nA.sort()\nB_C.sort(key=lambda x: -x[1])\n\nans = 0\nhq = []\nj = M - 1\n\nfor i in range(N - 1, -1, -1):\n    ans += A[i]\n    heapq.heappush(hq, A[i])\n    if len(hq) > B_C[j][0]:\n        ans -= heap"], "prompt": "\nQUESTION:\nYou have N cards. On the i-th card, an integer A_i is written.\nFor each j = 1, 2, ..., M in this order, you will perform the following operation once:\nOperation: Choose at most B_j cards (possibly zero). Replace the integer written on each chosen card with C_j.\nFind the maximum possible sum of the integers written on the N cards after the M operations.\n\n-----Constraints-----\n - All values in input are integers.\n - 1 \\leq N \\leq 10^5\n - 1 \\leq M \\leq 10^5\n - 1 \\leq A_i, C_i \\leq 10^9\n - 1 \\leq B_i \\leq N\n\n-----Input-----\nInput is given from Standard Input in the following format:\nN M\nA_1 A_2 ... A_N\nB_1 C_1\nB_2 C_2\n\\vdots\nB_M C_M\n\n-----Output-----\nPrint the maximum possible sum of the integers written on the N cards after the M operations.\n\n-----Sample Input-----\n3 2\n5 1 4\n2 3\n1 5\n\n-----Sample Output-----\n14\n\nBy replacing the integer on the second card with 5, the sum of the integers written on the three cards becomes 5 + 5 + 4 = 14, which is the maximum result.\nPlease provide the solution as pure code only, without explanations or comments.\n\nANSWER:\n```python\n"}}