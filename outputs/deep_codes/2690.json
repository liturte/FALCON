{"2690": {"code": ["def maxDistance(s):\n    n = len(s)\n    max_distance = 0\n    position = [-1] * 3\n    for i in range(n):\n        for j in range(3):\n            if s[i] == 'a' + j:\n                if position[j] != -1:\n                    max_distance = max(max_distance, i - position[j])\n                position[j] = i\n    return max_distance\n\nprint(maxDistance(input()))\n\nThis code uses a sliding window approach to solve the problem. It keeps track of the position of the last occurrence of 'a', 'b' and 'c' in the string s. For each character in the string, it calculates the maximum distance by", "def maxDistance(s):\n    n = len(s)\n    max_distance = 0\n    char_positions = [-1]*3\n    for i in range(n):\n        char = ord(s[i]) - ord('a')\n        if char_positions[char] != -1:\n            max_distance = max(max_distance, i - char_positions[char])\n        char_positions[char] = i\n    return max_distance\n\nprint(maxDistance(input()))\n\n\nEXPLANATION:\nThis solution uses a sliding window approach. It maintains the positions of the last occurrence of the characters 'a', 'b', and 'c' in the string. For each character in the string, it computes the maximum distance", "def maxDistance(s: str) -> int:\n    n = len(s)\n    pos = [-1] * 3\n    ans = 0\n    for i in range(n):\n        c = ord(s[i]) - ord('a')\n        if pos[c] != -1:\n            ans = max(ans, i - pos[c])\n        else:\n            pos[c] = i\n    return ans - 1 if ans != 0 else 0\n\n\nExplanation:\nThe code works by iterating over the string and tracking the last index of each character 'a', 'b', and 'c'. It then calculates the distance between the current character and the last character it encountered, and updates", "def maxDistance(s):\n    n = len(s)\n    min_idx = [0]*3\n    max_distance = 0\n\n    for i in range(n):\n        for j in range(3):\n            if s[i] == chr(j + ord('a')):\n                min_idx[j] = i + 1\n        max_distance = max(max_distance, max(min_idx) - min(min_idx))\n\n    return max_distance - 1\n\nprint(maxDistance(input()))\n\nIn this code, we are using a list `min_idx` to store the minimum index of 'a', 'b' and 'c'. We iterate over the string `s` and for every character", "def maxDistance(s):\n    n = len(s)\n    prev_chars = [-1, -1, -1] # indexes of 'a', 'b', 'c' respectively\n    next_chars = [n]*3 # indexes of 'a', 'b', 'c' respectively\n    max_distance = 0\n\n    for i in range(n):\n        ch = ord(s[i]) - ord('a')\n        if prev_chars[ch] != -1:\n            max_distance = max(max_distance, i - prev_chars[ch])\n        prev_chars[ch] = i\n\n    for i in range(n-1, -1, -1):\n        ch = ord("], "prompt": "\nQUESTION:\nAlisha has a string of length n. Each character is either 'a', 'b' or 'c'. She has to select two characters s[i] and s[j] such that s[i] != s[j] and i,j are valid indexes. She has to find the maximum value of the absolute difference between i and j i.e abs(i-j) .\nSince Alisha is busy with her Semester exams help her find the maximum distance where distance is the maximum value of absolute difference between i and j  i.e abs(i-j) .\n\n-----Input:-----\n- The first and the only line contains the string s with each character either 'a', 'b', or 'c'. \n\n-----Output:-----\nPrint a single integer the maximum absolute difference between i and j. \n\n-----Constraints-----\n- $1 \\leq n \\leq 10^5$\n- s[i] can either be 'a', 'b' or 'c'.\n\n-----Subtasks-----\n- 40 points : $1 \\leq n \\leq 100$\n- 60 points : $1 \\leq n \\leq 10^5$\n\n-----Sample Input1:-----\naabcaaa\n\n-----Sample Output1:-----\n4\n\n-----Sample Input2:-----\naba\n\n-----Sample Output2:-----\n1\nPlease provide the solution as pure code only, without explanations or comments.\n\nANSWER:\n```python\n"}}