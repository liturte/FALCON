{"4063": {"code": ["import sys\nfrom collections import Counter\n\nN = int(sys.stdin.readline())\nd = list(map(int, sys.stdin.readline().split()))\n\nd.sort()\nc = Counter(d)\n\nres = 0\nfor i in range(N//2):\n    if d[i] == d[N-i-1]:\n        res += 1\n    else:\n        break\n\nprint(res)\n\n\nExplanation:\nThe problem is to find the number of distinct values of K such that the number of problems with difficulty K or higher and the number of problems with difficulty less than K are the same.", "from collections import Counter\nN = int(input())\nd = list(map(int, input().split()))\nd.sort()\n\nc = Counter(d)\nkeys = list(c.keys())\n\nans = 0\nfor i in range(len(keys)):\n    if c[keys[i]] >= 2:\n        ans += 1\n\nprint(ans)\n\n\nThis code works by first sorting the difficulties of the problems. Then, it counts the number of times each difficulty appears, which gives us a histogram of the difficulties of the problems. Finally, it iterates over the histogram, and for each difficulty that appears at least twice, it", "def solve():\n    N = int(input())\n    difficulties = list(map(int, input().split()))\n    difficulties.sort()\n    return sum(difficulties[i] != difficulties[N-i-1] for i in range(N//2))\n\nprint(solve())\n\n\nThis solution first reads the input and sorts the difficulties in ascending order. It then calculates the sum of the differences between the difficulties of the problems that will be for ARCs and the problems that will be for ABCs. These difficulties are the middle elements of the sorted list, so the sum is the total number of differences. The differences will be 0 if the number of problems for", "import sys\nfrom collections import Counter\n\nN = int(sys.stdin.readline())\nd = list(map(int, sys.stdin.readline().split()))\nd.sort()\n\ncount = Counter(d)\n\nres = 0\ni = 0\nj = N - 1\n\nwhile i <= j:\n    if d[i] < d[j]:\n        if count[d[i]] <= j - i:\n            res += count[d[i]]\n            j -= count[d[i]]\n        else:\n            res += j - i\n            i += count[d[i]]\n    else:", "import sys\nfrom collections import Counter\n\nN = int(sys.stdin.readline().strip())\nd = list(map(int, sys.stdin.readline().strip().split()))\n\nd.sort()\n\ncounter = Counter(d)\nkeys = list(counter.keys())\n\nl, r = 0, len(keys) - 1\n\nres = 0\n\nwhile l <= r:\n    if keys[l] < keys[r]:\n        if counter[keys[l]] <= r - l:\n            res += counter[keys[l]]\n            r -= counter[keys[l]]\n            l += 1\n        else"], "prompt": "\nQUESTION:\nTakahashi made N problems for competitive programming.\nThe problems are numbered 1 to N, and the difficulty of Problem i is represented as an integer d_i (the higher, the harder).\nHe is dividing the problems into two categories by choosing an integer K, as follows:\n - A problem with difficulty K or higher will be for ARCs.\n - A problem with difficulty lower than K will be for ABCs.\nHow many choices of the integer K make the number of problems for ARCs and the number of problems for ABCs the same?\n\n-----Problem Statement-----\n - 2 \\leq N \\leq 10^5\n - N is an even number.\n - 1 \\leq d_i \\leq 10^5\n - All values in input are integers.\n\n-----Input-----\nInput is given from Standard Input in the following format:\nN\nd_1 d_2 ... d_N\n\n-----Output-----\nPrint the number of choices of the integer K that make the number of problems for ARCs and the number of problems for ABCs the same.\n\n-----Sample Input-----\n6\n9 1 4 4 6 7\n\n-----Sample Output-----\n2\n\nIf we choose K=5 or 6, Problem 1, 5, and 6 will be for ARCs, Problem 2, 3, and 4 will be for ABCs, and the objective is achieved.\nThus, the answer is 2.\nPlease provide the solution as pure code only, without explanations or comments.\n\nANSWER:\n```python\n"}}