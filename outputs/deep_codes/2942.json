{"2942": {"code": ["import math\n\nD = int(input())\n\nn1 = int(math.sqrt(D))\nn2 = n1 + 1\n\nif n2 * n2 - n1 * n1 == D:\n    print(n1, n2)\nelse:\n    print(\"impossible\")\n\n\nThis code works by taking the square root of D and rounding it down to get the starting value for n1. Then it adds 1 to get the starting value for n2. If the square of n2 minus the square of n1 equals D, it prints out n1 and n2. Otherwise, it prints \"impossible\".", "import math\n\nD = int(input().strip())\n\nn1 = math.floor(math.sqrt(D))\nn2 = math.ceil(math.sqrt(D + n1))\n\nif n2**2 - n1**2 == D:\n    print(n1, n2)\nelse:\n    print('impossible')\n\n\nThis python program uses the math library to calculate the square root. It first calculates the square root of the given number, rounds it down to the nearest integer to find the lower bound for the range of possible frame numbers, then calculates the square root of the given number plus the lower bound, rounds it up to the nearest integer to find the upper bound for the range of possible frame numbers. If the square of the upper bound minus the square of the lower bound equals the given number, it prints the lower and upper", "import math\n\nD = int(input().strip())\n\nn1 = 0\nn2 = 0\n\nwhile n2 * n2 - n1 * n1 < D:\n    n2 += 1\n    n1 = math.isqrt(n2 * n2 - D)\n\nif n2 * n2 - n1 * n1 != D:\n    print(\"impossible\")\nelse:\n    print(n1, n2)\n\n\nExplanation:\nThe code uses a while loop to increment `n2` until the difference between the squares of `n2` and `n1` is greater or equal to `D`. In each iteration, `n1` is calculated as the integer square root of `n2 * n2 - D`. If the difference between the squares of `n2` and `", "import math\n\nD = int(input())\n\nn1 = 0\nn2 = 0\n\nwhile n2 * n2 - n1 * n1 < D:\n    n2 += 1\n    n1 = 0\n    while n2 * n2 - n1 * n1 < D:\n        n1 += 1\n    if n2 * n2 - n1 * n1 == D:\n        print(n1, n2)\n        break\nelse:\n    print(\"impossible\")\n\n\nExplanation:\nThe code above uses a while loop to increment `n2` and `n1` from 0 to find the two numbers that satisfy the condition `n2^2 - n1^2 = D`. If no such pair is found, \"impossible\" is printed.\n\nThis solution has a time complexity", "import math\n\ndef solve(D):\n    n1 = 0\n    n2 = 0\n    while n2*n2 - n1*n1 < D:\n        n2 += 1\n        n1 = math.ceil(math.sqrt(n2*n2 - D))\n        if n2*n2 - n1*n1 == D:\n            return (n1, n2)\n    return 'impossible'\n\nD = int(input())\nprint(solve(D))\n\n\nEXPLANATION:\nThis solution uses a while loop to increment n2 until the difference between the square of n2 and the square of n1 is equal to D. n1 is calculated by taking the square root of the difference between the square of n2 and D, rounded up to the nearest integer. If at any point n"], "prompt": "\nQUESTION:\nSusan is making high-speed videos of falling coffee mugs. When analyzing the videos she wants to know how big the mugs are, but unfortunately they all got destroyed during filming. Susan knows some physics though, so she has figured out how far they moved between different video frames. The camera was filming at a speed of $70$ frames per second, which means that at frame $n$, counted from when the mug was released, the number of millimeters it has moved is $d=n^2$. The counting of the frames starts at $0$.\n\nSusan thinks a certain mug is $D$ millimeters high, but to verify this she needs to find two frames between which the mug has moved exactly this distance. Can you help her do this?\n\n-----Input-----\nThe input file contains the single positive integer $D\\leq 200000$, the distance to be measured.\n\n-----Output-----\nOutput two non-negative integers $n_1$ and $n_2$, the numbers of the frames that Susan should compare. They should fulfill $n_2^2-n_1^2=D$. If no two such integers exist, instead output \u201cimpossible\u201d.\n\n-----Examples-----\nSample Input:\n88\nSample Output:\n9 13\nPlease provide the solution as pure code only, without explanations or comments.\n\nANSWER:\n```python\n"}}