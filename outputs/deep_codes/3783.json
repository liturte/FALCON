{"3783": {"code": ["MOD = 10**9 + 7\nN, K = map(int, input().split())\nprint(((N * (N+1) // 2) ** K) % MOD)\n\n\nEXPLANATION:\nWe are asked to calculate the sum of costs over all non-empty subsets of people. The cost of having x people for the task is x^k. \n\nWe can use the formula for the sum of the first n natural numbers, which is n*(n+1)/2, and raise it to the power of k.", "MOD = 10**9 + 7\nN, K = map(int, input().split())\nprint(((N * (N + 1) // 2)**K) % MOD)\n\n\nExplanation:\n\nThe total number of subsets is 2^N. To calculate the sum of costs, we need to find the sum of x^K for all x from 1 to N. We can use the formula for the sum of an arithmetic series ((n*(n+1))//2) to calculate this sum. The sum of x^", "MOD = 10**9 + 7\nN, K = map(int, input().split())\nprint(((N * (N + 1) // 2) ** K) % MOD)\n\n\nEXPLANATION:\n\nThe solution is based on the mathematical property that the sum of the first N numbers is equal to N*(N+1)/2.\n\nIf you have to find the sum of the cost of having each subset of people, you can just calculate this sum for each subset. The number of subsets of a set with N elements is 2", "MOD = 10**9 + 7\nN, K = map(int, input().split())\nprint(pow(N, K, MOD) * (N + 1) // 2 % MOD)\n\n\nEXPLANATION:\nThis solution uses the mathematical formula for the sum of the first N natural numbers (which is (N*(N+1))/2), and applies the modulo operation to prevent overflow. The pow function is used to calculate N^K modulo MOD. This is the most efficient way to calculate large powers modulo a number", "def solve():\n    N, k = map(int, input().split())\n    mod = 10**9 + 7\n    ans = (pow(N, 0, mod) * pow(N-1, k-1, mod)) % mod\n    return ans\n\nprint(solve())\n\nThis problem can be solved by using the concept of modular arithmetic and combinatorics.\n\nWe know that the total sum of costs of all non-empty subsets is equal to the sum of costs of all subsets minus the cost of the empty set"], "prompt": "\nQUESTION:\nYou have a team of N people. For a particular task, you can pick any non-empty subset of people. The cost of having x people for the task is x^{k}. \n\nOutput the sum of costs over all non-empty subsets of people.\n\n\n-----Input-----\n\nOnly line of input contains two integers N (1 \u2264 N \u2264 10^9) representing total number of people and k (1 \u2264 k \u2264 5000).\n\n\n-----Output-----\n\nOutput the sum of costs for all non empty subsets modulo 10^9 + 7.\n\n\n-----Examples-----\nInput\n1 1\n\nOutput\n1\n\nInput\n3 2\n\nOutput\n24\n\n\n\n-----Note-----\n\nIn the first example, there is only one non-empty subset {1} with cost 1^1 = 1.\n\nIn the second example, there are seven non-empty subsets.\n\n- {1} with cost 1^2 = 1\n\n- {2} with cost 1^2 = 1\n\n- {1, 2} with cost 2^2 = 4\n\n- {3} with cost 1^2 = 1\n\n- {1, 3} with cost 2^2 = 4\n\n- {2, 3} with cost 2^2 = 4\n\n- {1, 2, 3} with cost 3^2 = 9\n\nThe total cost is 1 + 1 + 4 + 1 + 4 + 4 + 9 = 24.\nPlease provide the solution as pure code only, without explanations or comments.\n\nANSWER:\n```python\n"}}