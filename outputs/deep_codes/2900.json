{"2900": {"code": ["s = input()\nn = len(s)\ncnt = [0]*n\nres = [0]*(n-1)\nfor i in range(n):\n    if s[i] == 'B':\n        for j in range(i+1, min(i+n, n)):\n            if s[j] == 'A':\n                k = j-i\n                res[k-1] += 1\n    else:\n        cnt[i] = cnt[i-1] + 1 if i > 0 else cnt[i]\nfor r in res:\n    print(r)", "s = input()\nn = len(s)\ncounts = [0]*(n+1)\nBA = 0\nfor i in range(n):\n    if s[i] == 'B':\n        counts[BA] += 1\n    else:\n        BA += 1\nprint('\\n'.join(str(counts[i]-counts[i-1]) for i in range(1, n)))\n\n\nExplanation:\nThis solution uses a prefix sum array to count the number of 'B's and 'A's so far. For each 'A', it subtracts the number of 'B's that have", "s = input()\nn = len(s)\n\n# Initialize count arrays\none_inv = [0]*n\nthree_inv = [0]*n\n\n# Count 1-inversions\nfor i in range(n):\n    if s[i] == 'B':\n        for j in range(i+1, n):\n            if s[j] == 'A':\n                one_inv[j] += 1\n\n# Count 3-inversions\ncount = 0\nfor i in range(n-1, -1, -1):\n    if s[i] == 'A':\n        count = 0", "s = input()\nn = len(s)\nA = [0]*n\nB = [0]*n\n\nfor i in range(n-1, -1, -1):\n    if i == n-1 or s[i] == 'A':\n        A[i] = 1\n    else:\n        A[i] = A[i+1] + 1\n\n    if i == n-1 or s[i] == 'B':\n        B[i] = 1\n    else:\n        B[i] = B[i+1] + 1\n\nfor k in range(1, n):", "s = input()\nn = len(s)\n\n# Initialize count array with zeros\ncount = [0] * n\n\n# Count B's to the left of each A\nfor i in range(n):\n    if s[i] == 'A':\n        for j in range(i):\n            if s[j] == 'B':\n                count[i-j-1] += 1\n\n# Print counts\nfor i in range(n-1):\n    print(count[i])\n\nThis solution works by counting the number of 'B's to the left of each 'A' in the string. For each"], "prompt": "\nQUESTION:\nYou are given a string $s$ consisting only of upper case letters A and B. For an integer $k$, a pair of indices $i$ and $j$ ($1 \\le i<j \\le n$) is called a $k$-inversion if and only if $s[i] = \\textbf{B}$, $s[j] = \\textbf{A}$ and $j-i = k$.\n\nConsider the string BABA. It has two $1$-inversions and one $3$-inversion. It has no $2$-inversions.\n\nFor each $k$ between $1$ and $n-1$ (inclusive), print the number of $k$-inversions in the string $s$.\n\n-----Input-----\nEach input will consist of a single test case. Note that your program may be run multiple times on different inputs. The input will consist of a single line with a string $s$, which consists of only upper case As and Bs. The string $s$ will be between $1$ and $1000000$ characters long. There will be no spaces.\n\n-----Output-----\nOutput $n-1$ lines, each with a single integer. The first line\u2019s integer should be the number of $1$-inversions, the second should be the number of $2$-inversions, and so on.\n\n-----Examples-----\nSample Input:\nBABA\nSample Output:\n2\n0\n1\nPlease provide the solution as pure code only, without explanations or comments.\n\nANSWER:\n```python\n"}}