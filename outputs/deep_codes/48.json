{"48": {"code": ["n, m, k = map(int, input().split())\nprint(sorted([i*j for i in range(1, n+1) for j in range(1, m+1)])[-k])\n\n\nExplanation:\nThis solution uses a list comprehension to generate a list of all numbers in the multiplication table, then sorts the list in non-decreasing order and prints the k-th largest number. The \"-k\" index is used to access the k-th element from the end of the list, which is the k-th largest number.\n\nThe time complexity of this solution is O(n*m*log(n*m", "n, m, k = map(int, input().split())\nprint(sorted([i*j for i in range(1, n+1) for j in range(1, m+1)])[-k])\n\n\nEXPLANATION:\nThis python code firstly takes in three integers n, m, and k as input. It then creates a list of all numbers i*j for i in range(1, n+1) and for j in range(1, m+1) and sorts the list in non-decreasing order. The k-th largest number in the sorted list is then printed as output.\n\nThis is done by using list", "n, m, k = map(int, input().split())\nprint(sorted([i*j for i in range(1, n+1) for j in range(1, m+1)])[-k])\n\n\nEXPLANATION:\nThis solution uses list comprehension to create a list of all numbers in the multiplication table, then sorts this list in non-decreasing order and prints the k-th element.\n\nThis solution works because it generates all numbers in the multiplication table, sorts them, and then prints the k-th largest number. The time complexity of this solution is O(n*m*log(n*m)) due to the sort", "def solve(n, m, k):\n    return sorted([i*j for i in range(1, n+1) for j in range(1, m+1)])[-k]\n\nn, m, k = map(int, input().split())\nprint(solve(n, m, k))\n\n\nThis code first generates a list of all possible products of the form i*j where i ranges from 1 to n and j ranges from 1 to m. It then sorts this list in non-decreasing order and returns the k-th element of this sorted list. This is the k-th largest number in the multiplication table.", "n, m, k = map(int, input().split())\n\ndef kth_largest(n, m, k):\n    l = sorted([i*j for i in range(1, n+1) for j in range(1, m+1)], reverse=True)\n    return l[k-1]\n\nprint(kth_largest(n, m, k))\n\n\nThe code works by first creating a list of all the elements in the multiplication table, sorted in descending order. It then returns the kth element of this list.\n\nThe time complexity of this solution is O(n*m log(n*m"], "prompt": "\nQUESTION:\nBizon the Champion isn't just charming, he also is very smart.\n\nWhile some of us were learning the multiplication table, Bizon the Champion had fun in his own manner. Bizon the Champion painted an n \u00d7 m multiplication table, where the element on the intersection of the i-th row and j-th column equals i\u00b7j (the rows and columns of the table are numbered starting from 1). Then he was asked: what number in the table is the k-th largest number? Bizon the Champion always answered correctly and immediately. Can you repeat his success?\n\nConsider the given multiplication table. If you write out all n\u00b7m numbers from the table in the non-decreasing order, then the k-th number you write out is called the k-th largest number.\n\n\n-----Input-----\n\nThe single line contains integers n, m and k (1 \u2264 n, m \u2264 5\u00b710^5;\u00a01 \u2264 k \u2264 n\u00b7m).\n\n\n-----Output-----\n\nPrint the k-th largest number in a n \u00d7 m multiplication table.\n\n\n-----Examples-----\nInput\n2 2 2\n\nOutput\n2\n\nInput\n2 3 4\n\nOutput\n3\n\nInput\n1 10 5\n\nOutput\n5\n\n\n\n-----Note-----\n\nA 2 \u00d7 3 multiplication table looks like this:\n\n1 2 3\n\n2 4 6\nPlease provide the solution as pure code only, without explanations or comments.\n\nANSWER:\n```python\n"}}