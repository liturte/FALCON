{"4595": {"code": ["def solve():\n    s = input()\n    start = s.find('A')\n    end = s.rfind('Z')\n    return max(end - start - 1, 0)\n\nprint(solve())\n\n\nThis solution works by first finding the index of the 'A' and 'Z' in the string. It then calculates the length of the substring between these two characters (excluding the characters themselves) and returns this as the answer. If there are no characters between 'A' and 'Z', it returns 0.\n\nPlease note that the `find` and `rfind` methods return -1 if the character is not found in the string, so the `max` function is used to handle this case.", "s = input()\nprint(max(s[i:].index('Z') + 1 for i in range(len(s)) if s[i] == 'A'))\n\n\nEXPLANATION:\nThis code reads a string `s` from the standard input. It then finds the maximum length of a substring that starts with 'A' and ends with 'Z'. It does this by iterating over all possible starting indices `i` of the substring, and for each `i`, it finds the index of 'Z' in the substring starting at `i`. The maximum of these indices is the maximum length of the substring that starts with 'A' and ends with 'Z'.\n\nNote: This solution assumes that the string `s` does not contain any other 'A's or 'Z's. If this is not the case, the solution would need to be modified to handle this.\n\"\"\"\n\n# ------------------------------\n# libraries\n# ------------------------------\n\nimport sys\n\n# ------------------------------\n# functions\n# ------------------------------\n\ndef main():\n    s = input()\n    print(max(s[i:].index('Z') + 1 for i", "def solve():\n    s = input()\n    a = s.find('A')\n    z = s.rfind('Z')\n    return max(z-a+1, 0)\n\nprint(solve())\n\n\nEXPLANATION:\nThe `find` method is used to find the index of the first occurrence of 'A'. The `rfind` method is used to find the index of the last occurrence of 'Z'. The difference between these indices (plus 1) gives the length of the substring. The `max` function is used to ensure that the length is at least 0. This is necessary because the `rfind` method returns -1 if 'Z' is not found in the string. In this case, the length of the substring would be negative. The `max` function ensures that this case is handled correctly.\n\nThis solution is written in Python and assumes that the input string `s` is given as the only input.\n\"\"\"\n\n# ----------------------------------\n\n# Code:\n\n\ndef solve():\n    s = input()\n    a = s.find('A')\n    z = s.rfind('Z')\n    return", "s = input()\nstart = s.find('A')\nend = s.rfind('Z')\nprint(max(end-start+1, 0))\n\n\nExplanation:\nThis solution uses Python's built-in `find` and `rfind` functions to find the index of the first 'A' and the last 'Z' in the string. The `find` function returns the first index of the specified value, and `rfind` returns the last index. The `max` function is used to return the maximum length between the substring between the first 'A' and the last 'Z', or 0 if there is no such substring.\n\nThe `max` function is used with 0 as the second argument to handle the case where 'A' and 'Z' are not in the string. In this case, the `find` and `rfind` functions will return -1, and the difference between -1 and 0 is 0, so the maximum length is 0.\n\nThe `+1` is used to include the 'A' and 'Z' in the length calculation, as the indices are 0-based.\n\nThe `input` function is", "def solve():\n    s = input()\n    a = s.find('A')\n    z = s.rfind('Z')\n    return max(z-a+1, 0)\n\nprint(solve())\n\n\nExplanation:\nThis problem is about finding the longest substring starting with 'A' and ending with 'Z' in a given string. The find() function is used to find the index of the first occurrence of 'A', and rfind() function is used to find the index of the last occurrence of 'Z'. The difference between these two indices plus 1 gives the length of the longest substring. If the string does not contain 'A' or 'Z', max() function returns 0.\n\nPlease note that this code assumes that the input string is valid and does not contain any special characters or numbers. If there can be such cases, additional error checking code should be added."], "prompt": "\nQUESTION:\nSnuke has decided to construct a string that starts with A and ends with Z, by taking out a substring of a string s (that is, a consecutive part of s).\nFind the greatest length of the string Snuke can construct. Here, the test set guarantees that there always exists a substring of s that starts with A and ends with Z.\n\n-----Constraints-----\n - 1 \u2266 |s| \u2266 200{,}000\n - s consists of uppercase English letters.\n - There exists a substring of s that starts with A and ends with Z.\n\n-----Input-----\nThe input is given from Standard Input in the following format:\ns\n\n-----Output-----\nPrint the answer.\n\n-----Sample Input-----\nQWERTYASDFZXCV\n\n-----Sample Output-----\n5\n\nBy taking out the seventh through eleventh characters, it is possible to construct ASDFZ, which starts with A and ends with Z.\nPlease provide the solution as pure code only, without explanations or comments.\n\nANSWER:\n```python\n"}}