{"1527": {"code": ["from collections import deque\n\nH, W = map(int, input().split())\nS = [list(input()) for _ in range(H)]\n\ndx = [-1, 0, 1, 0]\ndy = [0, 1, 0, -1]\n\ndef bfs(sx, sy, gx, gy):\n    dist = [[-1]*W for _ in range(H)]", "from collections import deque\n\ndef bfs(start, goal, maze):\n    h, w = len(maze), len(maze[0])\n    dh = [-1, 0, 1, 0]\n    dw = [0, 1, 0, -1]\n    dist = [[-1]*w for _ in range(h)]\n    dist[start[0]][start[1]] = 0", "from collections import deque\n\nH, W = map(int, input().split())\nS = [list(input()) for _ in range(H)]\n\n# Direction vectors\ndx = [-1, 0, 1, 0]\ndy = [0, 1, 0, -1]\n\n# Find all road squares\nroad_squares = [(i, j) for i in range(H) for j in range", "from collections import deque\n\nH, W = map(int, input().split())\nS = [input() for _ in range(H)]\n\ndef bfs(start, goal):\n    d = [(0, 1), (1, 0), (-1, 0), (0, -1)]\n    q = deque([(start, 0)])\n    visited = set()\n    while q:\n        (x", "from collections import deque\n\nH, W = map(int, input().split())\nS = [list(input()) for _ in range(H)]\n\ndx = [1, 0, -1, 0]\ndy = [0, 1, 0, -1]\n\ndef bfs(sx, sy, gx, gy):\n    dist = [[-1]*W for _ in range(H)]"], "prompt": "\nQUESTION:\nTakahashi has a maze, which is a grid of H \\times W squares with H horizontal rows and W vertical columns.\nThe square at the i-th row from the top and the j-th column is a \"wall\" square if S_{ij} is #, and a \"road\" square if S_{ij} is ..\nFrom a road square, you can move to a horizontally or vertically adjacent road square.\nYou cannot move out of the maze, move to a wall square, or move diagonally.\nTakahashi will choose a starting square and a goal square, which can be any road squares, and give the maze to Aoki.\nAoki will then travel from the starting square to the goal square, in the minimum number of moves required.\nIn this situation, find the maximum possible number of moves Aoki has to make.\n\n-----Constraints-----\n - 1 \\leq H,W \\leq 20\n - S_{ij} is . or #.\n - S contains at least two occurrences of ..\n - Any road square can be reached from any road square in zero or more moves.\n\n-----Input-----\nInput is given from Standard Input in the following format:\nH W\nS_{11}...S_{1W}\n:\nS_{H1}...S_{HW}\n\n-----Output-----\nPrint the maximum possible number of moves Aoki has to make.\n\n-----Sample Input-----\n3 3\n...\n...\n...\n\n-----Sample Output-----\n4\n\nIf Takahashi chooses the top-left square as the starting square and the bottom-right square as the goal square, Aoki has to make four moves.\nPlease provide the solution as pure code only, without explanations or comments.\n\nANSWER:\n```python\n"}}