{"2477": {"code": ["import sys\ninput = sys.stdin.readline\n\nN, K = map(int, input().split())\nA = list(map(int, input().split()))\n\ndef check(x):\n    return sum((a - 1) // x for a in A) <= K\n\ndef solve():\n    ok, ng = 10**9", "import sys\n\ndef main():\n    N, K = map(int, sys.stdin.readline().split())\n    logs = list(map(int, sys.stdin.readline().split()))\n\n    left, right = 0, max(logs)\n    while right - left > 1e-6:\n        mid = (left +", "import sys\n\ndef max_log_length(N, K, logs):\n    left, right = 0, max(logs)\n    while right - left > 1e-6:\n        mid = (left + right) / 2.0\n        if sum(int(log/mid) - 1 for log in logs) <= K:", "import sys\n\ndef binary_search(l, r, check):\n    while r - l > 1:\n        m = (l + r) // 2\n        if check(m):\n            r = m\n        else:\n            l = m\n    return r\n\ndef solve():\n    N, K = map(int, sys.stdin", "import sys\n\ndef main():\n    N, K = map(int, sys.stdin.readline().split())\n    logs = sorted(list(map(int, sys.stdin.readline().split())))\n\n    def check(x):\n        cnt = 0\n        for log in logs:\n            cnt += (log -"], "prompt": "\nQUESTION:\nWe have N logs of lengths A_1,A_2,\\cdots A_N.\nWe can cut these logs at most K times in total. When a log of length L is cut at a point whose distance from an end of the log is t (0<t<L), it becomes two logs of lengths t and L-t.\nFind the shortest possible length of the longest log after at most K cuts, and print it after rounding up to an integer.\n\n-----Constraints-----\n - 1 \\leq N \\leq 2 \\times 10^5\n - 0 \\leq K \\leq 10^9\n - 1 \\leq A_i \\leq 10^9\n - All values in input are integers.\n\n-----Input-----\nInput is given from Standard Input in the following format:\nN K\nA_1 A_2 \\cdots A_N\n\n-----Output-----\nPrint an integer representing the answer.\n\n-----Sample Input-----\n2 3\n7 9\n\n-----Sample Output-----\n4\n\n - First, we will cut the log of length 7 at a point whose distance from an end of the log is 3.5, resulting in two logs of length 3.5 each.\n - Next, we will cut the log of length 9 at a point whose distance from an end of the log is 3, resulting in two logs of length 3 and 6.\n - Lastly, we will cut the log of length 6 at a point whose distance from an end of the log is 3.3, resulting in two logs of length 3.3 and 2.7.\nIn this case, the longest length of a log will be 3.5, which is the shortest possible result. After rounding up to an integer, the output should be 4.\nPlease provide the solution as pure code only, without explanations or comments.\n\nANSWER:\n```python\n"}}