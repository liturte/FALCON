{"3335": {"code": ["def count_pythagorean_triples(n):\n    count = 0\n    for a in range(1, n):\n        for b in range(a, n):\n            c_square = a*a + b*b\n            c = int(c_square**0.5)\n            if c*c == c_square and c < n and a*a + b*b == c*c % n:\n                count += 1\n    return", "def solve(n):\n    res = 0\n    for a in range(1, n):\n        for b in range(a+1, n):\n            c = int((a**2 + b**2)**0.5)\n            if c >= n:\n                break\n            if c**2 == a**2 + b**2:\n                res += 1\n    return res\n\nn = int(input())\nprint(solve(n))", "def count_pythagorean_triples(n):\n    count = 0\n    for a in range(1, n):\n        for b in range(a, n):\n            c_square = a*a + b*b\n            c = int(c_square**0.5)\n            if c*c == c_square and c < n and c*c % n == c_square % n:\n                count += 1\n    return count", "def count_pythagorean_triples(n):\n    phi = [0]*(n+1)\n    phi[0] = 0\n    phi[1] = 1\n    for i in range(2, n+1):\n        if phi[i] == 0:\n            for j in range(i, n+1, i):\n                phi[j] = j\n        for j in range(i//2,", "def count_pythagorean_triples(n):\n    res = 0\n    for i in range(1, n):\n        for j in range(i + 1, n):\n            c = i * i + j * j\n            if c >= n * n:\n                break\n            c = int(c ** 0.5)\n            if c * c == i * i + j * j and c < n:\n                res += 2 if i"], "prompt": "\nQUESTION:\nSimon Haples is a somewhat peculiar person. Not quite hip, not quite square, he is more of a triangular nature: ever since childhood, he has had an almost unhealthy obsession with triangles. Because of his discrete nature, Simon\u2019s favorite kind of triangles are the Pythagorean ones, in which the side lengths are three positive integers $a$, $b$, and $c$ such that $a \\le b$ and $a^2 + b^2 = c^2$. \n\nRecently, Simon has discovered the fantastic world of counting modulo some integer $n$. As you may imagine, he quickly realizes that there are multitudes of Pythagorean triples to which he has previously been oblivious! Simon therefore sets out to find all Pythagorean triples modulo $n$, i.e., all triples of integers $a$, $b$ and $c$ between $1$ and $n-1$ such that $a \\le b$ and $a^2 + b^2 \\equiv c^2 \\pmod{n}$.\n\nAs Simon\u2019s best friend, you realize that there is not much hope in deterring Simon from his crazy plans, so you decide to help him by computing how many such triples there are, so that Simon will know when his work is done.\n\n-----Input-----\nThe input consists of a single integer $n$, satisfying $2 \\le n \\le 500000$.\n\n-----Output-----\nOutput the number of Pythagorean triples modulo $n$.\n\n-----Examples-----\nSample Input:\n7\nSample Output:\n18\nPlease provide the solution as pure code only, without explanations or comments.\n\nANSWER:\n```python\n"}}