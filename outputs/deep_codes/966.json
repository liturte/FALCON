{"966": {"code": ["def next_distinct_year(year):\n    year += 1\n    while len(set(str(year))) != len(str(year)):\n        year += 1\n    return year\n\nyear = int(input())\nprint(next_distinct_year(year))\n\n\nThis program takes a year as input, increments it by one, and checks if all the digits in the new year are distinct. If they are not, it increments the year again and checks again. This continues until all the digits in the new year are distinct. The new year is then printed as the output.", "def next_distinct_year(year):\n    year += 1\n    while len(set(str(year))) != len(str(year)):\n        year += 1\n    return year\n\nyear = int(input())\nprint(next_distinct_year(year))\n\n\nThis solution works by incrementing the input year by 1 and checking if all digits are distinct. If not, it increments the year by 1 again and repeats the process until all digits are distinct.\n\nIt's worth noting that this solution will not handle years where the digit 9 appears more than once, because those years will never have all distinct digits.\n\nAlso, this solution has a time complexity of O(n), where n is the number of years between the input year and the next year with all distinct digits. This is because in the worst case scenario, it may have to check every year. However, this is unlikely to be a problem unless we're looking for years in the future.\n\nIf you need a solution that handles years with more than one digit 9, you would need to modify the solution to check each digit and count how many times 9 appears. If more than one digit 9 appears, you would need to increment all digits", "def find_next_year(year):\n    year += 1\n    while len(set(str(year))) != len(str(year)):\n        year += 1\n    return year\n\nprint(find_next_year(int(input())))\n\n\nThis solution uses a while loop to increment the year by 1 and checks if all the digits are distinct by converting the year to a string and checking the length of the set of characters (which removes duplicates) against the length of the string. It continues to increment the year until it finds a year with all distinct digits.\n\nThe `set` function is used to remove duplicates from the year string, and the `len` function is used to check the number of characters in the year string. The `int(input())` function is used to get the year from the user input.\n\nThis solution assumes that the input year is in the range 1000 to 9000, as specified in the problem statement.\n\nPlease note that this solution may take a long time for larger inputs due to the nature of the problem. It is a brute-force solution and checks each year one by one until it finds a year with all distinct digits.\n\nAlso, please note that this solution", "def next_distinct_year(year):\n    year += 1\n    while len(set(str(year))) != len(str(year)):\n        year += 1\n    return year\n\nyear = int(input())\nprint(next_distinct_year(year))\n\n\nThis code starts from the next year of the given year and checks if all the digits are distinct by converting the year to a set and comparing its length to the length of the original year. If the lengths are not equal, it means there are duplicate digits, so the code increments the year by 1 and checks again. The code repeats this until it finds a year with all distinct digits.\n\nPlease note that the given year is guaranteed to be between 1000 and 9000.\n\nAlso, the input year is not checked for distinct digits as the problem statement clearly states that the given year will have distinct digits.\n\nThe time complexity of this code is O(n), where n is the number of years between the given year and the next year with all distinct digits. In the worst case scenario, this could be 9000 - 1000 = 8000 years, which is reasonable.\n\nThis code", "def next_distinct_year(y):\n    y += 1\n    while len(set(str(y))) != len(str(y)):\n        y += 1\n    return y\n\nprint(next_distinct_year(int(input())))\n\n\nThis Python code will solve the problem. It starts from the next year of the given year and checks if all the digits are distinct. If not, it increments the year by 1 and checks again. It continues this process until it finds a year with all distinct digits."], "prompt": "\nQUESTION:\nIt seems like the year of 2013 came only yesterday. Do you know a curious fact? The year of 2013 is the first year after the old 1987 with only distinct digits.\n\nNow you are suggested to solve the following problem: given a year number, find the minimum year number which is strictly larger than the given one and has only distinct digits.\n\n\n-----Input-----\n\nThe single line contains integer y (1000 \u2264 y \u2264 9000) \u2014 the year number.\n\n\n-----Output-----\n\nPrint a single integer \u2014 the minimum year number that is strictly larger than y and all it's digits are distinct. It is guaranteed that the answer exists.\n\n\n-----Examples-----\nInput\n1987\n\nOutput\n2013\n\nInput\n2013\n\nOutput\n2014\nPlease provide the solution as pure code only, without explanations or comments.\n\nANSWER:\n```python\n"}}