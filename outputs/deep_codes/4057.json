{"4057": {"code": ["def min_pockets(n, a):\n    return len(set(a))\n\nn = int(input())\na = list(map(int, input().split()))\nprint(min_pockets(n, a))\n\n\nThis solution works by converting the list of coin values to a set. In Python, sets only contain unique elements, so converting the list to a set removes any duplicate coin values. The length of the set is then returned as the minimum number of pockets needed to distribute all the coins.", "def min_pockets(n, a):\n    return len(set(a))\n\nn = int(input())\na = list(map(int, input().split()))\nprint(min_pockets(n, a))\n\n\nThis solution works by converting the list of coin values to a set. A set in Python is a collection of unique elements, so when we convert the list to a set, it automatically removes any duplicate values. The length of the set is the minimum number of pockets needed to distribute all the coins.", "def min_pockets(n, a):\n    return len(set(a))\n\nn = int(input())\na = list(map(int, input().split()))\nprint(min_pockets(n, a))\n\n\nThis solution works by converting the list of coin values to a set, which automatically removes any duplicates because sets only allow unique elements. Then it returns the length of the set, which is the minimum number of pockets needed.", "from collections import Counter\n\ndef min_pockets(n, a):\n    return len(Counter(a))\n\nn = int(input())\na = list(map(int, input().split()))\nprint(min_pockets(n, a))\n\n\nIn this code, we use the Counter class from the collections module to count the frequency of each element in the list. This gives us a dictionary where the keys are the values of the coins and the values are the counts of each value. By getting the length of this dictionary, we get the minimum number of pockets needed to distribute all the coins.\n\nThe Counter class is a dictionary subclass for counting hashable objects.", "def min_pockets(n, a):\n    return len(set(a))\n\nn = int(input())\na = list(map(int, input().split()))\nprint(min_pockets(n, a))\n\n\nExplanation:\nThe function `min_pockets` takes two parameters, the number of coins `n` and the list of coin values `a`. It converts the list to a set, which removes duplicates because sets in Python cannot have duplicate elements. Then it returns the length of the set, which is the minimum number of pockets needed to distribute all the coins. The `map` function is used to convert the input string to integers."], "prompt": "\nQUESTION:\nPolycarp has $n$ coins, the value of the $i$-th coin is $a_i$. Polycarp wants to distribute all the coins between his pockets, but he cannot put two coins with the same value into the same pocket.\n\nFor example, if Polycarp has got six coins represented as an array $a = [1, 2, 4, 3, 3, 2]$, he can distribute the coins into two pockets as follows: $[1, 2, 3], [2, 3, 4]$.\n\nPolycarp wants to distribute all the coins with the minimum number of used pockets. Help him to do that.\n\n\n-----Input-----\n\nThe first line of the input contains one integer $n$ ($1 \\le n \\le 100$) \u2014 the number of coins.\n\nThe second line of the input contains $n$ integers $a_1, a_2, \\dots, a_n$ ($1 \\le a_i \\le 100$) \u2014 values of coins.\n\n\n-----Output-----\n\nPrint only one integer \u2014 the minimum number of pockets Polycarp needs to distribute all the coins so no two coins with the same value are put into the same pocket.\n\n\n-----Examples-----\nInput\n6\n1 2 4 3 3 2\n\nOutput\n2\n\nInput\n1\n100\n\nOutput\n1\nPlease provide the solution as pure code only, without explanations or comments.\n\nANSWER:\n```python\n"}}