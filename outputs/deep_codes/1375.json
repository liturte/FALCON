{"1375": {"code": ["n = int(input())\narr = list(map(int, input().split()))\nprefix_sum = [0] * (n + 1)\nfor i in range(n):\n    prefix_sum[i + 1] = prefix_sum[i] + arr[i]\npostfix_sum = [0] * (n + 2)\nfor i in range(n - 1, -1, -1):\n    postfix_sum[i + 1] = postfix_sum[i + 2] + arr[i]\nans = 0\nfor i in range(1, n - 1):\n    if prefix_sum[i] == postfix_sum[i", "def ways_to_split(n, a):\n    prefix_sum = [0] * (n + 1)\n    for i in range(1, n + 1):\n        prefix_sum[i] = prefix_sum[i - 1] + a[i - 1]\n\n    count = 0\n    j = 1\n    for i in range(2, n - 1):\n        while j < n and prefix_sum[i] > prefix_sum[j] - a[j]:\n            j += 1\n        if j > i + 1 and prefix_sum[i] == prefix_sum[j - 1] - prefix_sum[i - 1", "def solve(n, a):\n    prefix_sum = [0] * (n + 1)\n    for i in range(1, n + 1):\n        prefix_sum[i] = prefix_sum[i - 1] + a[i - 1]\n    count = 0\n    for i in range(1, n - 1):\n        if prefix_sum[i] == prefix_sum[n] - prefix_sum[i + 1]:\n            count += 1\n    return count\n\nn = int(input().strip())\na = list(map(int, input().strip().split()))\nprint(solve(n, a))\n\n\nThis", "n = int(input())\na = list(map(int, input().split()))\n\nprefix = [0] * (n + 1)\nfor i in range(n):\n    prefix[i + 1] = prefix[i] + a[i]\n\ncount = 0\npostfix = [0] * (n + 2)\nfor i in range(n - 1, -1, -1):\n    postfix[i + 1] = postfix[i + 2] + a[i]\n    if prefix[i] == postfix[i + 1]:\n        count += 1\n\nprint(count)\n\n\nThis Python code works by first reading in the", "n = int(input())\narr = list(map(int, input().split()))\ntotal_sum = sum(arr)\n\nif total_sum % 3 != 0:\n    print(0)\nelse:\n    target = total_sum // 3\n    cnt, temp = 0, 0\n    for i in range(n-1):\n        temp += arr[i]\n        if temp == 2 * target:\n            cnt += 1\n    print(cnt)\n\n\nThis code first checks if the total sum of the array is divisible by 3. If not, it prints 0 and ends. If it is divisible by 3, it"], "prompt": "\nQUESTION:\nYou've got array a[1], a[2], ..., a[n], consisting of n integers. Count the number of ways to split all the elements of the array into three contiguous parts so that the sum of elements in each part is the same. \n\nMore formally, you need to find the number of such pairs of indices i, j (2 \u2264 i \u2264 j \u2264 n - 1), that $\\sum_{k = 1}^{i - 1} a_{k} = \\sum_{k = i}^{j} a_{k} = \\sum_{k = j + 1}^{n} a_{k}$.\n\n\n-----Input-----\n\nThe first line contains integer n (1 \u2264 n \u2264 5\u00b710^5), showing how many numbers are in the array. The second line contains n integers a[1], a[2], ..., a[n] (|a[i]| \u2264  10^9) \u2014 the elements of array a.\n\n\n-----Output-----\n\nPrint a single integer \u2014 the number of ways to split the array into three parts with the same sum.\n\n\n-----Examples-----\nInput\n5\n1 2 3 0 3\n\nOutput\n2\n\nInput\n4\n0 1 -1 0\n\nOutput\n1\n\nInput\n2\n4 1\n\nOutput\n0\nPlease provide the solution as pure code only, without explanations or comments.\n\nANSWER:\n```python\n"}}