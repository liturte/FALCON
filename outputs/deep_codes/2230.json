{"2230": {"code": ["n = int(input())\ncandies = [i for i in range(1, n ** 2 + 1)]\nfor i in range(n):\n    print(' '.join(map(str, candies[i::n])))\n\n\nEXPLANATION:\nThis problem can be solved by using the concept of list slicing in Python. We first create a list of candies from 1 to n^2. Then we print n elements from the list starting from the i-th element in each iteration. The ' '.join(map(str, candies[i::n])) is used", "n = int(input())\ncandy_bags = list(range(1, n**2 + 1))\nfor i in range(n):\n    print(*candy_bags[i::n])\n\n\nThis program works by first taking the input for the number of brothers, n. It then generates a list of candy bags with the range from 1 to n^2 (inclusive). The list is then printed out in chunks of n items, effectively giving each brother a distinct set of candies.\n\nThis solution is correct because it ensures that each brother gets a different number of candies,", "n = int(input())\ncandies = [i+1 for i in range(n**2)]\nfor i in range(n):\n    print(' '.join(map(str, candies[i::n])))\n\n\nThis code works by first generating a list of all possible candies (from 1 to n^2). It then uses a loop to print n elements from the list starting from the i-th element, then n elements from the list starting from the (i+1)-th element, and so on. This results in a matrix where each row contains a different number of candies", "n = int(input())\ncandies = [i for i in range(1, n ** 2 + 1)]\nfor i in range(n):\n    print(' '.join(map(str, candies[i::n])))\n\n\nEXPLANATION:\nThe code first reads the input number `n`. Then it creates a list `candies` containing numbers from 1 to `n**2`. It then iterates over the list `candies` with step `n`, printing the elements of the list starting from index `i` with step `n`.", "n = int(input())\ncandies = [i for i in range(1, n**2+1)]\nfor i in range(n):\n    print(' '.join(map(str, candies[i::n])))\n\n\nThis code reads the number of brothers from the input and creates a list of candies. It then prints the candies for each brother by taking every nth element from the list.\n\nThe code works because it takes every nth element from the list and prints them as a line of candies for each brother. This ensures that each brother gets the same number of cand"], "prompt": "\nQUESTION:\nGerald has n younger brothers and their number happens to be even. One day he bought n^2 candy bags. One bag has one candy, one bag has two candies, one bag has three candies and so on. In fact, for each integer k from 1 to n^2 he has exactly one bag with k candies. \n\nHelp him give n bags of candies to each brother so that all brothers got the same number of candies.\n\n\n-----Input-----\n\nThe single line contains a single integer n (n is even, 2 \u2264 n \u2264 100) \u2014 the number of Gerald's brothers.\n\n\n-----Output-----\n\nLet's assume that Gerald indexes his brothers with numbers from 1 to n. You need to print n lines, on the i-th line print n integers \u2014 the numbers of candies in the bags for the i-th brother. Naturally, all these numbers should be distinct and be within limits from 1 to n^2. You can print the numbers in the lines in any order. \n\nIt is guaranteed that the solution exists at the given limits.\n\n\n-----Examples-----\nInput\n2\n\nOutput\n1 4\n2 3\n\n\n\n-----Note-----\n\nThe sample shows Gerald's actions if he has two brothers. In this case, his bags contain 1, 2, 3 and 4 candies. He can give the bags with 1 and 4 candies to one brother and the bags with 2 and 3 to the other brother.\nPlease provide the solution as pure code only, without explanations or comments.\n\nANSWER:\n```python\n"}}