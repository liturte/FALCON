{"3732": {"code": ["x, y, m = map(int, input().split())\n\nif max(x, y) >= m:\n    print(0)\nelif x + y < m", "x, y, m = map(int, input().split())\nif max(x, y) < m:\n    print(-1)\nelse:\n    print(max(", "x, y, m = map(int, input().split())\n\nif max(x, y) < m:\n    print(-1)\nelse:\n    print(max", "x, y, m = map(int, input().split())\n\nif max(x, y) < m:\n    print(-1)\nelse:\n    print(max", "import sys\n\ndef main():\n    x, y, m = map(int, sys.stdin.readline().split())\n\n    if max(x, y) >="], "prompt": "\nQUESTION:\nLet us call a pair of integer numbers m-perfect, if at least one number in the pair is greater than or equal to m. Thus, the pairs (3, 3) and (0, 2) are 2-perfect while the pair (-1, 1) is not.\n\nTwo integers x, y are written on the blackboard. It is allowed to erase one of them and replace it with the sum of the numbers, (x + y).\n\nWhat is the minimum number of such operations one has to perform in order to make the given pair of integers m-perfect?\n\n\n-----Input-----\n\nSingle line of the input contains three integers x, y and m ( - 10^18 \u2264 x, y, m \u2264 10^18).\n\nPlease, do not use the %lld specifier to read or write 64-bit integers in C++. It is preffered to use the cin, cout streams or the %I64d specifier.\n\n\n-----Output-----\n\nPrint the minimum number of operations or \"-1\" (without quotes), if it is impossible to transform the given pair to the m-perfect one.\n\n\n-----Examples-----\nInput\n1 2 5\n\nOutput\n2\n\nInput\n-1 4 15\n\nOutput\n4\n\nInput\n0 -1 5\n\nOutput\n-1\n\n\n\n-----Note-----\n\nIn the first sample the following sequence of operations is suitable: (1, 2) $\\rightarrow$ (3, 2) $\\rightarrow$ (5, 2).\n\nIn the second sample: (-1, 4) $\\rightarrow$ (3, 4) $\\rightarrow$ (7, 4) $\\rightarrow$ (11, 4) $\\rightarrow$ (15, 4).\n\nFinally, in the third sample x, y cannot be made positive, hence there is no proper sequence of operations.\nPlease provide the solution as pure code only, without explanations or comments.\n\nANSWER:\n```python\n"}}