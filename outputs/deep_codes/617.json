{"617": {"code": ["import re\nprint(max(eval(s[:i] + '(' + s[i:]) for i in range(1, len(s), 2) if s[i-1] in '*+'))\n\n\nEXPLANATION:\nThis Python solution uses a brute-force approach to solve the problem. It tries to insert a bracket at every possible position in the expression (every other position, as the signs are in between the digits), and evaluates the", "import re\nimport itertools\n\ndef solve(expr):\n    nums = list(map(int, re.findall('\\d+', expr)))\n    ops = re.findall('[*+]', expr)\n    return max(eval(''.join(n)) for n in itertools.permutations(nums + ops, len(nums + ops)))\n\nprint(solve(input()))\n\n\nThis code uses", "# Python program to solve the problem\ndef max_value(expression):\n    # Convert the expression into a list of characters\n    chars = list(expression)\n    # Initialize the maximum value\n    max_val = 0\n    # Iterate over all possible pairs of brackets\n    for i in range(1, len(chars), 2):\n        for j in range(i + 2, len(chars), 2):\n            # Create a copy of the", "def solve():\n    s = input()\n    max_val = 0\n    dp = [[[-float('inf')] * 16 for _ in range(16)] for _ in range(16)]\n    dp[0][0][0] = 0\n    cnt_plus = cnt_mul = 0\n    nums = []\n    for i in range(len(s)):\n        if i % 2 == 0:\n            num", "import re\nprint(max(eval(s[:i] + '(' + s[i:] if s[i] in '*+' else s[i:] + ')') for i in range(1, len(s), 2)))\n\n\nEXPLANATION:\nThe program works by evaluating the expression at each possible position to insert a bracket. It then takes the maximum value of these evaluations. The eval function is used to evaluate the string as a Python expression"], "prompt": "\nQUESTION:\nVanya is doing his maths homework. He has an expression of form $x_{1} \\diamond x_{2} \\diamond x_{3} \\diamond \\ldots \\diamond x_{n}$, where x_1, x_2, ..., x_{n} are digits from 1 to 9, and sign [Image] represents either a plus '+' or the multiplication sign '*'. Vanya needs to add one pair of brackets in this expression so that to maximize the value of the resulting expression.\n\n\n-----Input-----\n\nThe first line contains expression s (1 \u2264 |s| \u2264 5001, |s| is odd), its odd positions only contain digits from 1 to 9, and even positions only contain signs  +  and  * . \n\nThe number of signs  *  doesn't exceed 15.\n\n\n-----Output-----\n\nIn the first line print the maximum possible value of an expression.\n\n\n-----Examples-----\nInput\n3+5*7+8*4\n\nOutput\n303\n\nInput\n2+3*5\n\nOutput\n25\n\nInput\n3*4*5\n\nOutput\n60\n\n\n\n-----Note-----\n\nNote to the first sample test. 3 + 5 * (7 + 8) * 4 = 303.\n\nNote to the second sample test. (2 + 3) * 5 = 25.\n\nNote to the third sample test. (3 * 4) * 5 = 60 (also many other variants are valid, for instance, (3) * 4 * 5 = 60).\nPlease provide the solution as pure code only, without explanations or comments.\n\nANSWER:\n```python\n"}}