{"4772": {"code": ["from collections import defaultdict\n\ndef solve(R, C, grid):\n    words = defaultdict(list)\n    for r in range(R):\n        s = ''\n        for c in range(C):\n            if grid[r][c] == '#':\n                if len(s) > 1:\n                    words[len(s)].append(s)\n                s = ''\n            else:\n                s += grid[r][c]\n        if len(s) > 1:\n            words[len(s)].append(s)\n\n    for c in range(C):\n        s =", "import sys\nfrom collections import deque\n\ndef solve():\n    R, C = map(int, input().split())\n    grid = [list(input()) for _ in range(R)]\n    dx, dy = [0, 1, 0, -1], [1, 0, -1, 0]\n    ans = 'z' * 100\n\n    def bfs(x, y, d):\n        q = deque([(x, y, grid[x][y], d)])\n        while q:\n            x, y, s, d = q.pople", "from collections import defaultdict\n\ndef get_word(grid, r, c):\n    words = set()\n    directions = [(0, 1), (1, 0), (-1, 0), (0, -1)] # right, down, left, up\n    for i in range(r):\n        for j in range(c):\n            if grid[i][j] != '#':\n                for d in directions:\n                    dx, dy = d\n                    word = grid[i][j]\n                    x, y = i + dx, j + dy\n                    while 0 <= x < r and", "def find_word(crossword):\n    R, C = len(crossword), len(crossword[0])\n    word_set = set()\n\n    # horizontal words\n    for r in range(R):\n        word = ''\n        for c in range(C):\n            if crossword[r][c] == '#':\n                if len(word) >= 2:\n                    word_set.add(word)\n                word = ''\n            else:\n                word += crossword[r][c]\n        if len(word) >= 2:\n            word_set.add(word)", "from collections import defaultdict\n\ndef get_words(grid):\n    words = defaultdict(list)\n    for r, row in enumerate(grid):\n        for c, char in enumerate(row):\n            if char != '#':\n                for dr, dc in [(-1, 0), (1, 0), (0, -1), (0, 1)]:\n                    word = char\n                    nr, nc = r + dr, c + dc\n                    while 0 <= nr < len(grid) and 0 <= nc < len(grid[0]) and grid["], "prompt": "\nQUESTION:\nLittle Ivica solves crossword puzzles every day. In case you haven\u2019t seen one, a crossword puzzle starts on a grid of $R \\times C$ squares, each of which is either empty or blocked. The player\u2019s task is to write words in consecutive empty squares vertically (top down) or horizontally (left to right).\n\nIvica\u2019s sister has a strange habit of looking at crosswords Ivica has finished solving, and finding the lexicographically smallest word in it. She only considers words at least $2$ characters long.\n\nWrite a program that, given a crossword puzzle, finds that word.\n\n-----Input-----\nThe first line contains two integers $R$ and $C$ ($2 \\le R, C \\le 20$), the number of rows and columns in the crosswords.\n\nEach of the following $R$ lines contains a string of $C$ characters. Each of those characters is either a lowercase letter of the English alphabet, or the character \u2018#\u2019 representing a blocked square.\n\nThe input will be such that a solution will always exist.\n\n-----Output-----\nOutput the lexicographically smallest word in the crossword.\n\n-----Examples-----\nSample Input 1:\n4 4\nluka\no#a#\nkula\ni#a#\nSample Output 1:\nkala\n\nSample Input 2:\n4 4\nluka\no#a#\nkula\ni#as\nSample Output 2:\nas\nPlease provide the solution as pure code only, without explanations or comments.\n\nANSWER:\n```python\n"}}