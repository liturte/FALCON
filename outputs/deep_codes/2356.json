{"2356": {"code": ["def solve():\n    t = int(input())\n    for _ in range(t):\n        n = int", "def solve(n, a):\n    if n == 1:\n        return a\n    else:\n        b", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    a", "from collections import deque\n\ndef solve():\n    t = int(input().strip())\n    for _ in", "def solve():\n    t = int(input())\n    for _ in range(t):\n        n = int"], "prompt": "\nQUESTION:\nYou are given an array $a_1, a_2, \\dots , a_n$. Array is good if for each pair of indexes $i < j$ the condition $j - a_j \\ne i - a_i$ holds. Can you shuffle this array so that it becomes good? To shuffle an array means to reorder its elements arbitrarily (leaving the initial order is also an option).\n\nFor example, if $a = [1, 1, 3, 5]$, then shuffled arrays $[1, 3, 5, 1]$, $[3, 5, 1, 1]$ and $[5, 3, 1, 1]$ are good, but shuffled arrays $[3, 1, 5, 1]$, $[1, 1, 3, 5]$ and $[1, 1, 5, 3]$ aren't.\n\nIt's guaranteed that it's always possible to shuffle an array to meet this condition.\n\n\n-----Input-----\n\nThe first line contains one integer $t$ ($1 \\le t \\le 100$) \u2014 the number of test cases.\n\nThe first line of each test case contains one integer $n$ ($1 \\le n \\le 100$) \u2014 the length of array $a$.\n\nThe second line of each test case contains $n$ integers $a_1, a_2, \\dots , a_n$ ($1 \\le a_i \\le 100$).\n\n\n-----Output-----\n\nFor each test case print the shuffled version of the array $a$ which is good.\n\n\n-----Example-----\nInput\n3\n1\n7\n4\n1 1 3 5\n6\n3 2 1 5 6 4\n\nOutput\n7\n1 5 1 3\n2 4 6 1 3 5\nPlease provide the solution as pure code only, without explanations or comments.\n\nANSWER:\n```python\n"}}