{"2997": {"code": ["import sys\nfrom collections import defaultdict\nfrom heapq import heappop, heappush\n\ndef read_int():\n    return int(sys.stdin.readline())\n\ndef read_ints():\n    return list(map(int, sys.stdin.readline().split()))\n\ndef solve():\n    N, M = read_ints()\n    graph = defaultdict(list)\n    for _ in range(M):\n        a, b = read_", "import sys\nfrom collections import defaultdict\n\ndef dfs(u, p):\n    global res\n    c = color[u]\n    for v in adj[u]:\n        if v == p: continue\n        if color[v] == -1:\n            color[v] = 1 - c\n            res = max(res, 1 - c)\n            dfs(v, u)\n        elif color[v] == c:\n            res = max(res", "from collections import defaultdict\n\ndef max_color_changes(nodes, edges):\n    graph = defaultdict(list)\n    for u, v in edges:\n        graph[u].append(v)\n        graph[v].append(u)\n\n    color = [-1]*(nodes+1)\n    color[1] = 0\n    stack = [1]\n    max_changes = 0\n\n    while stack:\n        node = stack.pop()", "from collections import deque\n\ndef bfs(graph, start):\n    visited = [0] * (len(graph) + 1)\n    queue = deque([start])\n    visited[start] = 1\n    color_changes = 0\n    while queue:\n        node = queue.popleft()\n        for neighbor in graph[node]:\n            if not visited[neighbor]:\n                queue.append(neighbor)\n                visited[neighbor] = 1", "from collections import deque\n\nN, M = map(int, input().split())\nedges = [[] for _ in range(N+1)]\nfor _ in range(M):\n    a, b = map(int, input().split())\n    edges[a].append(b)\n    edges[b].append(a)\n\nvisited = [0]*(N+1)\nqueue = deque([1])\nvisited[1] = 1\nwhile"], "prompt": "\nQUESTION:\nAlice and Bob are playing a game on a simple connected graph with $N$ nodes and $M$ edges.\n\nAlice colors each edge in the graph red or blue.\n\nA path is a sequence of edges where each pair of consecutive edges have a node in common. If the first edge in the pair is of a different color than the second edge, then that is a \u201ccolor change.\u201d\n\nAfter Alice colors the graph, Bob chooses a path that begins at node $1$ and ends at node $N$. He can choose any path on the graph, but he wants to minimize the number of color changes in the path. Alice wants to choose an edge coloring to maximize the number of color changes Bob must make. What is the maximum number of color changes she can force Bob to make, regardless of which path he chooses?\n\n-----Input-----\nThe first line contains two integer values $N$ and $M$ with $2 \\le N \\le 100000$ and $1 \\le M \\le 100000$. The next $M$ lines contain two integers $a_ i$ and $b_ i$ indicating an undirected edge between nodes $a_ i$ and $b_ i$ ($1 \\le a_ i, b_ i \\le N$, $a_ i \\not= b_ i$).\n\nAll edges in the graph are unique.\n\n-----Output-----\nOutput the maximum number of color changes Alice can force Bob to make on his route from node $1$ to node $N$.\n\n-----Examples-----\nSample Input:\n3 3\n1 3\n1 2\n2 3\nSample Output:\n0\nPlease provide the solution as pure code only, without explanations or comments.\n\nANSWER:\n```python\n"}}