{"4901": {"code": ["def rotate(s, n):\n    return ''.join(chr((ord(c) - ord('A') + n) % 26 + ord('A')) for c in s)\n\ndef divide_rotate_merge(s):", "def rotate(c, n):\n    return chr((ord(c) - ord('A') + n) % 26 + ord('A'))\n\ndef divide(s):\n    return s[:len(s)//2], s[len(", "def rotate(s, n):\n    return ''.join(chr((ord(c) - 65 + n) % 26 + 65) for c in s)\n\ndef divide_and_rotate(s):\n    half =", "def divide_and_rotate(s):\n    mid = len(s) // 2\n    half1, half2 = s[:mid], s[mid:]\n    rotation1 = sum(ord(c) - ord('A') for c in half", "import string\n\ndef rotate(s, n):\n    return s[n:] + s[:n]\n\ndef divide(s):\n    return s[:len(s)//2], s[len(s)//2:]\n\ndef merge(s"], "prompt": "\nQUESTION:\nDRM Encryption is a new kind of encryption. Given an encrypted string (which we\u2019ll call a DRM message), the decryption process involves three steps: Divide, Rotate and Merge. This process is described in the following example with the DRM message \u201cEWPGAJRB\u201d:Divide\n\n\u2013 First, divide the message in half to \u201cEWPG\u201d and \u201cAJRB\u201d.Rotate\n\n\u2013 For each half, calculate its rotation value by summing up the values of each character ($\\textrm{A} = 0, \\textrm{B} = 1, \\ldots , \\textrm{Z} = 25$). The rotation value of \u201cEWPG\u201d is $4 + 22 + 15 + 6 = 47$. Rotate each character in \u201cEWPG\u201d $47$ positions forward (wrapping from Z to A when necessary) to obtain the new string \u201cZRKB\u201d. Following the same process on \u201cAJRB\u201d results in \u201cBKSC\u201d.Merge\n\n\u2013 The last step is to combine these new strings (\u201cZRKB\u201d and \u201cBKSC\u201d) by rotating each character in the first string by the value of the corresponding character in the second string. For the first position, rotating \u2018Z\u2019 by \u2018B\u2019 means moving it forward 1 character, which wraps it around to \u2018A\u2019. Continuing this process for every character results in the final decrypted message, \u201cABCD\u201d.\n\n-----Input-----\nThe input contains a single DRM message to be decrypted. All characters in the string are uppercase letters and the string\u2019s length is even and $\\leq 15000$.\n\n-----Output-----\nDisplay the decrypted DRM message.\n\n-----Examples-----\nSample Input:\nEWPGAJRB\nSample Output:\nABCD\nPlease provide the solution as pure code only, without explanations or comments.\n\nANSWER:\n```python\n"}}