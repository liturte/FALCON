{"1072": {"code": ["def min_operations(n, m, table):\n    table = [''.join(col) for col in zip(*table)]\n    table.sort()\n    return sum(s > t for s, t in zip", "def solve():\n    n, m = map(int, input().split())\n    table = [input() for _ in range(n)]\n    return min(sum(row > row[i+1:] for i in range", "def min_operations(n, m, table):\n    table = [list(row) for row in table]\n    table = list(map(list, zip(*table)))  # transpose the table\n    table =", "def solve(n, m, table):\n    table = [list(row) for row in table]\n    table = list(map(list, zip(*table)))  # transpose table\n    table.sort(key=", "def min_operations(n, m, table):\n    table = [list(row) for row in table]\n    table = [list(x) for x in zip(*table)]  # transpose the table"], "prompt": "\nQUESTION:\nYou are given an n \u00d7 m rectangular table consisting of lower case English letters. In one operation you can completely remove one column from the table. The remaining parts are combined forming a new table. For example, after removing the second column from the table\n\nabcd\n\nedfg\n\nhijk\n\n\n\n\u00a0\n\nwe obtain the table:\n\nacd\n\nefg\n\nhjk\n\n\n\n\u00a0\n\nA table is called good if its rows are ordered from top to bottom lexicographically, i.e. each row is lexicographically no larger than the following one. Determine the minimum number of operations of removing a column needed to make a given table good.\n\n\n-----Input-----\n\nThe first line contains two integers \u00a0\u2014 n and m (1 \u2264 n, m \u2264 100).\n\nNext n lines contain m small English letters each\u00a0\u2014 the characters of the table.\n\n\n-----Output-----\n\nPrint a single number\u00a0\u2014 the minimum number of columns that you need to remove in order to make the table good.\n\n\n-----Examples-----\nInput\n1 10\ncodeforces\n\nOutput\n0\n\nInput\n4 4\ncase\ncare\ntest\ncode\n\nOutput\n2\n\nInput\n5 4\ncode\nforc\nesco\ndefo\nrces\n\nOutput\n4\n\n\n\n-----Note-----\n\nIn the first sample the table is already good.\n\nIn the second sample you may remove the first and third column.\n\nIn the third sample you have to remove all the columns (note that the table where all rows are empty is considered good by definition).\n\nLet strings s and t have equal length. Then, s is lexicographically larger than t if they are not equal and the character following the largest common prefix of s and t (the prefix may be empty) in s is alphabetically larger than the corresponding character of t.\nPlease provide the solution as pure code only, without explanations or comments.\n\nANSWER:\n```python\n"}}