{"2994": {"code": ["R, C = map(int, input().split())\ngrid = [list(input()) for _ in range(R)]\n\nfor c in range(C):\n    falling = [r for r in range(R-1, -1, -1) if grid[r][c] == 'a']\n    for r in falling:\n        if r+1 < R and grid[r+1][c] == '.':\n            grid[r+1][c] = 'a'\n            grid[r][c] = '.'\n\nprint('\\n'.join(''.join(row) for row in grid))\n\n\nThis solution works by first reading in the grid and storing it in a 2D list. Then it iterates over each column", "def gravity(grid):\n    R, C = len(grid), len(grid[0])\n    for c in range(C):\n        r = R - 1\n        while r >= 0:\n            if grid[r][c] == 'a':\n                nxt = r + 1\n                while nxt < R and grid[nxt][c] == '.':\n                    nxt += 1\n                if nxt < R and grid[nxt][c] == '#':\n                    nxt -= 1\n                grid[nxt][c] = 'a'\n                grid[r][c] = '.'\n            r -= 1\n    return grid\n\nR, C = map(int, input().split())\ngrid = [list(", "R, C = map(int, input().split())\ngrid = [list(input()) for _ in range(R)]\n\nfor c in range(C):\n    for r in range(R-1, -1, -1):\n        if grid[r][c] == '.':\n            for d in range(r-1, -1, -1):\n                if grid[d][c] == 'a':\n                    grid[d+1][c] = 'a'\n                    grid[d][c] = '.'\n                    break\n\nprint('\\n'.join([''.join(row) for row in grid]))\n\n\nThis code reads in the grid and then iterates through each column from bottom to top and each row from right to", "def gravity(grid):\n    R, C = len(grid), len(grid[0])\n    for c in range(C):\n        r = R - 1\n        while r >= 0:\n            if grid[r][c] == 'a':\n                down = r + 1\n                while down < R and grid[down][c] == '.':\n                    down += 1\n                if down < R and grid[down][c] == '#':\n                    grid[r][c] = '.'\n                    grid[down][c] = 'a'\n                elif down == R:\n                    grid[r][c] = '.'\n                    grid[r-1][c] = 'a'\n            r -= 1\n    return grid", "R, C = map(int, input().split())\ngrid = [list(input()) for _ in range(R)]\n\nfor c in range(C):\n    for r in range(R-1, -1, -1):\n        if grid[r][c] == 'a':\n            nr = r + 1\n            while nr < R and grid[nr][c] == '.':\n                grid[nr][c] = 'a'\n                grid[nr-1][c] = '.'\n                nr += 1\n\nprint('\\n'.join(''.join(row) for row in grid))\n\nThis code reads the input and then loops over the columns and rows in reverse order. If it finds an '"], "prompt": "\nQUESTION:\nYou have a 2D rectangular grid. Each grid cell contains either an apple, an obstacle, or is empty. Empty cells are denoted as \u2019.\u2019, apples as \u2019a\u2019, and obstacles as \u2019#\u2019. You are to implement a simulation of gravity, based on the following rules: \n - The obstacles do not move.\n - Whenever there is an empty cell immediately below an apple, the apple moves into the empty cell.\n\nPrint out the final configuration of the board after all apples reach their final locations. Merely iterating the gravity rule, a step at a time, will likely take too long on large datasets.\n\n-----Input-----\nThe input begins with a line containing integers $R$ and $C$, designating the number of rows and columns of the grid, such that $1 \\leq R \\leq 50000$ and $1 \\leq C \\leq 10$. The first line is followed by $R$ additional lines, each designating a row of the grid, from top to bottom. Each line has $C$ characters, each of which is either \u2019.\u2019, \u2019a\u2019, or \u2019#\u2019.\n\n-----Output-----\nOutput $R$ grid lines displaying the final state.\n\n-----Examples-----\nSample Input:\n3 3\naaa\n#..\n..#\nSample Output:\na..\n#.a\n.a#\nPlease provide the solution as pure code only, without explanations or comments.\n\nANSWER:\n```python\n"}}