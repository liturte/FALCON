{"663": {"code": ["import math\n\nr, x, y, x1, y1 = map(int, input().split())\n\n# calculate distance between two points\ndistance = math.sqrt((x1-x)**2 + (y1-y)**2)\n\n# if distance is more than double the radius, we can directly move the circle to the destination\nif distance > 2*r:\n    print(2)\nelse:\n    # if distance is less than or equal to double the radius, we need to rotate the circle\n    # the number of steps is the ceil of the distance divided by the radius", "import math\n\nr, x, y, x1, y1 = map(int, input().split())\n\n# Calculate the distance between the original and destination centers\nd = math.sqrt((x1-x)**2 + (y1-y)**2)\n\n# If the distance is greater than the double of the radius, it's impossible to reach the destination\nif d > 2*r:\n    print(-1)\nelse:\n    # If the distance is less than the radius, we need to move the circle to a new position\n    if d < r:\n        print(2", "import math\n\nr, x, y, x_, y_ = map(int, input().split())\n\n# Calculate the distance between the two centers\nd = math.sqrt((x - x_)**2 + (y - y_)**2)\n\n# If the distance is greater than 2 times the radius, we can reach the destination in one step\nif d > 2 * r:\n    print(2)\nelse:\n    # If the distance is less than or equal to the radius, we need to rotate the circle around the pin\n    # We can calculate the number of steps required by dividing the", "import math\n\nr, x, y, x_, y_ = map(int, input().split())\nprint(math.ceil(math.sqrt((x_-x)**2 + (y_-y)**2) / (2*r)))\n\n\nThis solution uses the Pythagorean theorem to calculate the distance between the current and final circle centers, and then divides this distance by twice the radius of the circle. The result is then rounded up to the nearest whole number, which gives the minimum number of steps required to move the circle center to the final position.\n\nThe ceil function is used to handle", "import math\n\nr, x, y, x_, y_ = map(int, input().split())\n\nd = math.sqrt((x - x_)**2 + (y - y_)**2)\n\nif d >= 2*r:\n    print(2)\nelse:\n    print(int(math.ceil(d/r)))\n\n\nEXPLANATION:\nThis problem can be solved by using the Pythagorean theorem. The distance between two points (x1, y1) and (x2, y2) is sqrt((x2-x1)^2"], "prompt": "\nQUESTION:\nAmr loves Geometry. One day he came up with a very interesting problem.\n\nAmr has a circle of radius r and center in point (x, y). He wants the circle center to be in new position (x', y').\n\nIn one step Amr can put a pin to the border of the circle in a certain point, then rotate the circle around that pin by any angle and finally remove the pin.\n\nHelp Amr to achieve his goal in minimum number of steps.\n\n\n-----Input-----\n\nInput consists of 5 space-separated integers r, x, y, x' y' (1 \u2264 r \u2264 10^5,  - 10^5 \u2264 x, y, x', y' \u2264 10^5), circle radius, coordinates of original center of the circle and coordinates of destination center of the circle respectively.\n\n\n-----Output-----\n\nOutput a single integer \u2014 minimum number of steps required to move the center of the circle to the destination point.\n\n\n-----Examples-----\nInput\n2 0 0 0 4\n\nOutput\n1\n\nInput\n1 1 1 4 4\n\nOutput\n3\n\nInput\n4 5 6 5 6\n\nOutput\n0\n\n\n\n-----Note-----\n\nIn the first sample test the optimal way is to put a pin at point (0, 2) and rotate the circle by 180 degrees counter-clockwise (or clockwise, no matter).\n\n[Image]\nPlease provide the solution as pure code only, without explanations or comments.\n\nANSWER:\n```python\n"}}