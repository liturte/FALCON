{"3314": {"code": ["from collections import Counter\n\ndef min_rotations(s1, s2, s3):\n    s = [s1, s2, s3]\n    c = [Counter(x) for x in s]\n    d = [{}, {}, {}]\n    for i in range(3):\n        for j in range(3):\n            d[i][j] = sum(abs(c[i][ch] - c[j][ch]) for ch in 'ABC')\n    dp = [[0]*3 for _ in range(1 << (3*2))]\n    for mask in range(1, 1 << (3*2))", "from collections import Counter\n\ndef min_rotations(wheels):\n    initial_counts = [Counter(wheel[i] for wheel in wheels) for i in range(len(wheels[0]))]\n    target_counts = [{'A': x, 'B': y, 'C': z} for x, y, z in zip(*initial_counts)]\n    if any(max(count.values()) > 3 for count in target_counts):\n        return -1\n    return sum(min(abs(count['A']-1), abs(count['B']-1), abs(count['C']-1)) for count in target_count", "from collections import Counter\n\ndef min_rotations(s1, s2, s3):\n    c1, c2, c3 = Counter(s1), Counter(s2), Counter(s3)\n    if any(v > 1 for v in c1.values()) or any(v > 1 for v in c2.values()) or any(v > 1 for v in c3.values()):\n        return -1\n    counts = [c1, c2, c3]\n    rotations = 0\n    while not all(c[k] == 3 for c in counts for k in 'ABC'):\n        for i in range", "from collections import deque\n\ndef min_rotations(wheels):\n    initial_state = [deque(list(w)) for w in wheels]\n    target_state = [['A', 'B', 'C'] for _ in range(len(wheels[0]))]\n    rotations = [[0, 0, 0] for _ in range(len(wheels[0]))]\n\n    def rotate(i, d):\n        for _ in range(3):\n            initial_state[i].rotate(d)\n            rotations[i][0] += d\n            rotations[i][1] = rotations[i-1][", "from collections import deque\n\ndef min_rotations(wheels):\n    counts = [[0]*3 for _ in range(3)]\n    for i in range(3):\n        for j in range(len(wheels[i])):\n            counts[i][ord(wheels[i][j])-65] += 1\n    rotations = [0]*3\n    for i in range(3):\n        if counts[i][0] == 0 or counts[i][1] == 0 or counts[i][2] == 0:\n            return -1\n        if counts[i][0] == counts[i][1] or counts[i"], "prompt": "\nQUESTION:\nThere are three horizontal wheels of letters stacked one on top of the other, all with the same number of columns. All wheels have one letter, either \u2018A\u2019, \u2018B\u2019 or \u2018C\u2019, in each of its columns on the edge of the wheel. You may rotate the wheels to adjust the positions of the letters. In a single rotation, you can rotate any single wheel to the right or to the left by one column. The wheels are round, of course, so the first column and last column are adjacent. \n\nYou would like to determine whether it is possible to rotate the wheels so that every column has three distinct letters across the three wheels, and if so, determine the minimum number of rotations required.\n\n-----Input-----\nThe input has exactly three lines. Each line has a string $s$ ($2 \\leq |s| \\leq 5 \\cdot 10^3$) consisting only of upper-case letters \u2018A\u2019, \u2018B\u2019 or \u2018C\u2019, describing the letters of one wheel in their initial positions. All three strings will be of the same length.\n\n-----Output-----\nOutput a single integer, which is the minimum number of rotations required, or $-1$ if it isn\u2019t possible.\n\n-----Examples-----\nSample Input 1:\nABC\nABC\nABC\nSample Output 1:\n2\n\nSample Input 2:\nABBBAAAA\nBBBCCCBB\nCCCCAAAC\nSample Output 2:\n3\nPlease provide the solution as pure code only, without explanations or comments.\n\nANSWER:\n```python\n"}}