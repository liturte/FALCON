{"3761": {"code": ["import sys\n\ns = sys.stdin.readline().strip()\nx, y = map(int, sys.stdin.readline().split())\n\ndx, dy = 1, 0\ndirs = [(0, 1), (1, 0), (0, -1), (-1, 0)]\n\nfor c in s:\n    if c == 'T':\n        dx, dy = dy, -dx\n    else:\n        x += dx\n        y += dy\n\nprint('Yes' if x == x and y == y else 'No')\n\n\nThis Python script reads the input and executes the instructions one by one. If an 'F' is encountered, the robot moves in its current direction. If a 'T' is encountered, the robot changes its direction. The final coordinates of the robot are compared to the target coordinates to determine if the objective is achie", "import sys\n\ns = sys.stdin.readline().strip()\nx, y = map(int, sys.stdin.readline().split())\n\n# Initialize the direction to the positive x-axis.\ndirection = 0\n# Initialize the position to the origin.\nposition = [0, 0]\n# Define the directions.\ndirections = [[0, 1], [1, 0], [0, -1], [-1, 0]]\n\nfor i in s:\n    if i == 'F':\n        # Move in the current direction.\n        position[0] += directions[direction][0]\n        position[1] += directions[direction][1]\n    else:\n        # Turn 90 degrees.\n        direction = (direction + 1) % 4 if i == 'R' else (direction - 1) % 4", "s = input().strip()\nx, y = map(int, input().split())\ndx, dy = 1, 0\nfor c in s:\n    if c == 'T':\n        dx, dy = -dy, dx\n    else:\n        x += dx\n        y += dy\nprint('Yes' if x == y == 0 else 'No')\n\n\nThis solution works by simulating the robot's movement. It keeps track of the current direction (dx and dy) and updates the coordinates (x and y) accordingly. If a 'T' is encountered, it rotates the direction 90 degrees. If an 'F' is encountered, it moves in the current direction. After all instructions are processed, it checks if the robot ended up at the origin.\n\nThe time complexity is O(n), where n is the length of the instruction sequence, because each instruction is processed once. The space", "def is_achievable(s, x, y):\n    # Direction: 0->x-axis, 1->y-axis, 2->-x-axis, 3->-y-axis\n    direction = 0\n    # Initial position is (0, 0)\n    pos_x, pos_y = 0, 0\n    # Execute instructions\n    for inst in s:\n        if inst == 'F':\n            if direction == 0:\n                pos_x += 1\n            elif direction == 1:\n                pos_y += 1\n            elif direction == 2:\n                pos_x -= 1\n            else:\n                pos_y -= 1\n        else:\n            direction = (direction + 1) % 4\n    # Check if final position is (x, y)\n    return pos_x == x and pos_", "def isReachable(s, x, y):\n    dx, dy = 0, 1\n    x_cur, y_cur = 0, 0\n    for i in range(len(s)):\n        if s[i] == 'F':\n            x_cur += dx\n            y_cur += dy\n        else:\n            if dx == 0:\n                dx, dy = dy, -dx\n            else:\n                dx, dy = -dy, dx\n        if x_cur == x and y_cur == y:\n            return True\n    return False\n\ns = input()\nx, y = map(int, input().split())\nprint('Yes' if isReachable(s, x, y) else 'No')\n\n\nIn this solution, we are using the concept of vectors. The initial direction of the robot is given by the vector ("], "prompt": "\nQUESTION:\nA robot is put at the origin in a two-dimensional plane.\nInitially, the robot is facing in the positive x-axis direction.\nThis robot will be given an instruction sequence s.\ns consists of the following two kinds of letters, and will be executed in order from front to back.\n - F : Move in the current direction by distance 1.\n - T : Turn 90 degrees, either clockwise or counterclockwise.\nThe objective of the robot is to be at coordinates (x, y) after all the instructions are executed.\nDetermine whether this objective is achievable.\n\n-----Constraints-----\n - s consists of F and T.\n - 1 \\leq |s| \\leq 8 000\n - x and y are integers.\n - |x|, |y| \\leq |s|\n\n-----Input-----\nInput is given from Standard Input in the following format:\ns\nx y\n\n-----Output-----\nIf the objective is achievable, print Yes; if it is not, print No.\n\n-----Sample Input-----\nFTFFTFFF\n4 2\n\n-----Sample Output-----\nYes\n\nThe objective can be achieved by, for example, turning counterclockwise in the first T and turning clockwise in the second T.\nPlease provide the solution as pure code only, without explanations or comments.\n\nANSWER:\n```python\n"}}