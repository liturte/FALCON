{"1579": {"code": ["from collections import Counter\n\ndef max_operations():\n    n = int(input())\n    x_coords = [0] * n\n    y_coords = [0] * n\n    for i in range(n):\n        x_coords[i], y_coords[i] = map(int, input().split())\n    x_counter = Counter(x_coords)\n    y_counter = Counter(y_coords)\n    return min(sum([k * (k - 1) // 2 for k in x_counter.values()]),\n               sum([k", "from collections import Counter\n\nN = int(input())\nxy = [tuple(map(int, input().split())) for _ in range(N)]\nx_counter = Counter(x for x, y in xy)\ny_counter = Counter(y for x, y in xy)\n\nmax_x = max(x_counter.values())\nmax_y = max(y_counter.values())\n\nprint(min(max_x, max_y) - 1)\n\n\nThis solution works by first counting the number of dots for each x and y coordinate. Then it finds the maximum number", "from collections import Counter\n\nN = int(input())\nxy = [tuple(map(int, input().split())) for _ in range(N)]\nx_count = Counter(x for x, y in xy)\ny_count = Counter(y for x, y in xy)\n\nmax_x = max(x_count.values())\nmax_y = max(y_count.values())\n\nprint(min(max_x, max_y, N//2) * 2)\n\n\nThis code first counts the number of dots for each x and y coordinates. Then it finds the", "from collections import defaultdict\n\nN = int(input())\ndots = [list(map(int, input().split())) for _ in range(N)]\n\nxd = defaultdict(int)\nyd = defaultdict(int)\nxy = dict()\n\nfor x, y in dots:\n    xd[x] += 1\n    yd[y] += 1\n    xy[(x, y)] = 1\n\nxd = list(xd.items())\nyd = list(yd.items())\n\nxd.sort()\nyd.sort()\n\ncount = 0\n\ni = 0\nj = 0\n\nwhile", "from collections import Counter\n\nN = int(input())\nxy = [tuple(map(int, input().split())) for _ in range(N)]\nx = [i[0] for i in xy]\ny = [i[1] for i in xy]\ncx = Counter(x)\ncy = Counter(y)\nres = 0\nfor i in cx:\n    if cx[i] >= 2:\n        for j in cy:\n            if cy[j] >= 2 and (i, j) not in xy:\n                res += cx[i] * cy["], "prompt": "\nQUESTION:\nThere are N dots in a two-dimensional plane. The coordinates of the i-th dot are (x_i, y_i).\nWe will repeat the following operation as long as possible:\n - Choose four integers a, b, c, d (a \\neq c, b \\neq d) such that there are dots at exactly three of the positions (a, b), (a, d), (c, b) and (c, d), and add a dot at the remaining position.\nWe can prove that we can only do this operation a finite number of times. Find the maximum number of times we can do the operation.\n\n-----Constraints-----\n - 1 \\leq N \\leq 10^5\n - 1 \\leq x_i, y_i \\leq 10^5\n - If i \\neq j, x_i \\neq x_j or y_i \\neq y_j.\n - All values in input are integers.\n\n-----Input-----\nInput is given from Standard Input in the following format:\nN\nx_1 y_1\n:\nx_N y_N\n\n-----Output-----\nPrint the maximum number of times we can do the operation.\n\n-----Sample Input-----\n3\n1 1\n5 1\n5 5\n\n-----Sample Output-----\n1\n\nBy choosing a = 1, b = 1, c = 5, d = 5, we can add a dot at (1, 5). We cannot do the operation any more, so the maximum number of operations is 1.\nPlease provide the solution as pure code only, without explanations or comments.\n\nANSWER:\n```python\n"}}