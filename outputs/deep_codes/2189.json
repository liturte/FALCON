{"2189": {"code": ["from collections import defaultdict\nfrom heapq import heappop, heappush\n\ndef smallest_lexicographically(n, m, edges):\n    graph = defaultdict(list)\n    indegrees = [0] * (n + 1)\n\n    for u, v in edges:\n        graph[u].append(v)\n        indegrees[v] += 1\n\n    heap = [i for i in range", "import sys\nfrom collections import defaultdict, deque\n\ndef min_lexicographical_order(n, edges):\n    graph = defaultdict(list)\n    indegree = [0]*(n+1)\n    for u,v in edges:\n        graph[u].append(v)\n        indegree[v] += 1\n    queue = deque([i for i in range(1,n+1) if", "from collections import defaultdict, deque\n\ndef toposort(graph):\n    in_degree = defaultdict(int)\n    for u, v in graph:\n        in_degree[v] += 1\n\n    Q = deque([u for u in graph if in_degree[u] == 0])\n\n    S = []\n    while Q:\n        u = Q.popleft()\n        S.append(u", "from collections import defaultdict, deque\n\ndef lexicographically_smallest_permutation(n, m, edges):\n    graph = defaultdict(list)\n    in_degree = [0] * (n + 1)\n    \n    for u, v in edges:\n        graph[u].append(v)\n        in_degree[v] += 1\n\n    q = deque()\n    for i in range", "from collections import defaultdict, deque\n\ndef lexicographically_smallest_permutation(n, m, edges):\n    graph = defaultdict(list)\n    in_degree = [0] * (n + 1)\n    for u, v in edges:\n        graph[u].append(v)\n        in_degree[v] += 1\n    queue = deque([i for i in range(1, n"], "prompt": "\nQUESTION:\nYou are given a directed acyclic graph with n vertices and m edges. There are no self-loops or multiple edges between any pair of vertices. Graph can be disconnected.\n\nYou should assign labels to all vertices in such a way that:\n\n  Labels form a valid permutation of length n \u2014 an integer sequence such that each integer from 1 to n appears exactly once in it.  If there exists an edge from vertex v to vertex u then label_{v} should be smaller than label_{u}.  Permutation should be lexicographically smallest among all suitable. \n\nFind such sequence of labels to satisfy all the conditions.\n\n\n-----Input-----\n\nThe first line contains two integer numbers n, m (2 \u2264 n \u2264 10^5, 1 \u2264 m \u2264 10^5).\n\nNext m lines contain two integer numbers v and u (1 \u2264 v, u \u2264 n, v \u2260 u) \u2014 edges of the graph. Edges are directed, graph doesn't contain loops or multiple edges.\n\n\n-----Output-----\n\nPrint n numbers \u2014 lexicographically smallest correct permutation of labels of vertices.\n\n\n-----Examples-----\nInput\n3 3\n1 2\n1 3\n3 2\n\nOutput\n1 3 2 \n\nInput\n4 5\n3 1\n4 1\n2 3\n3 4\n2 4\n\nOutput\n4 1 2 3 \n\nInput\n5 4\n3 1\n2 1\n2 3\n4 5\n\nOutput\n3 1 2 4 5\nPlease provide the solution as pure code only, without explanations or comments.\n\nANSWER:\n```python\n"}}