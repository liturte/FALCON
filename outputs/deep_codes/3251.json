{"3251": {"code": ["from operator import itemgetter\n\ndef longest_sequence(intervals):\n    intervals.sort(key=itemgetter(1))\n    seq = [intervals[0]]\n    for i in range(1, len(intervals)):\n        if intervals[i][0] > seq[-1][1]:\n            seq.append(intervals[i])\n    return seq\n\nN = int(input())\nintervals = [list(map(int, input().split())) for _ in range(N)]\nseq = longest_sequence(intervals)\nprint(len(seq))\nfor interval in seq:\n    print(interval[0], interval[1])", "def solve():\n    N = int(input())\n    intervals = []\n    for _ in range(N):\n        a, b = map(int, input().split())\n        intervals.append((a, b))\n\n    intervals.sort(key=lambda x: (x[1], -x[0]))\n\n    result = [intervals[0]]\n    for a, b in intervals[1:]:\n        if a > result[-1][0] and b < result[-1][1]:\n            result[-1] = (a, b)\n        elif a > result[-1][0]:\n            result.append((a, b))\n\n    print(len(result))\n    for", "N = int(input())\nintervals = [list(map(int, input().split())) for _ in range(N)]\nintervals.sort(key=lambda x: (x[1], x[0]))\n\nsequence = [intervals[0]]\nfor interval in intervals[1:]:\n    if interval[0] > sequence[-1][0] and interval[1] < sequence[-1][1]:\n        sequence[-1] = interval\nprint(len(sequence))\nfor interval in sequence:\n    print(interval[0], interval[1])\n\n\nThis solution works by first sorting the intervals by the endpoint of each interval. It then iteratively checks each interval to see if it is a", "from operator import itemgetter\n\ndef longest_sequence(intervals):\n    intervals.sort(key=itemgetter(1))\n    sequences = [[intervals[0]]]\n    for i in range(1, len(intervals)):\n        if intervals[i][0] > sequences[-1][-1][1]:\n            sequences.append([intervals[i]])\n        elif sequences[-1][-1][1] >= intervals[i][0]:\n            sequences[-1].append(intervals[i])\n    longest_sequence = max(sequences, key=len)\n    return len(longest_interval_sequence), longest_sequence\n\nN = int(input())\ninter", "def longest_sequence():\n    n = int(input())\n    intervals = []\n    for _ in range(n):\n        a, b = map(int, input().split())\n        intervals.append((a, b))\n\n    intervals.sort(key=lambda x: (x[1], -x[0]))\n\n    res = [intervals[0]]\n    for start, end in intervals[1:]:\n        if res[-1][1] <= start:\n            res.append((start, end))\n\n    print(len(res))\n    for start, end in res:\n        print(start, end)\n\nlongest_sequence()\n\n\nExplanation:"], "prompt": "\nQUESTION:\nMirko got a set of intervals for his birthday. There are many games he can play with them. In one of them, Mirko must find the longest sequence of distinct intervals such that each interval in the sequence is in the set and that each interval contains the one that follows in the sequence.\n\nWrite a program which finds one such longest sequence.\n\n-----Input-----\nThe first line of input contains the integer $N$ $(1 \\le N \\le 100000)$, the number of intervals in the set.\n\nEach of the following $N$ lines contains two integers $A$ and $B$ describing one interval $(1 \\le A < B \\le 1000000)$.\n\n-----Output-----\nOutput the length $K$ of the longest sequence on the first line.\n\nEach of the following $K$ lines should contain one element of the sequence, an interval in the same format it was given in the input.\n\n-----Examples-----\nSample Input 1:\n3\n3 4\n2 5\n1 6\nSample Output 1:\n3\n1 6\n2 5\n3 4\n\nSample Input 2:\n5\n10 30\n20 40\n30 50\n10 60\n30 40\nSample Output 2:\n3\n10 60\n30 50\n30 40\nPlease provide the solution as pure code only, without explanations or comments.\n\nANSWER:\n```python\n"}}