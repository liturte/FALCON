{"4435": {"code": ["from collections import deque\n\nn = int(input())\na = list(map(int, input().split()))\nodd = [i for i in range(n) if a[i] % 2 == 1]\neven", "from collections import deque\n\nn = int(input())\na = list(map(int, input().split()))\n\nodd = [i for i in range(n) if a[i] % 2 == 1]", "from collections import deque\n\nn = int(input())\na = list(map(int, input().split()))\n\nodd = [i for i in range(n) if a[i] % 2 == 1]", "from collections import deque\n\ndef min_moves(n, a):\n    graph = [[] for _ in range(n+1)]\n    for i in range(n):\n        if i - a[i] >", "from collections import deque\n\nn = int(input())\na = list(map(int, input().split()))\n\nodd = [i for i in range(n) if a[i] % 2 == 1]"], "prompt": "\nQUESTION:\nYou are given an array $a$ consisting of $n$ integers. In one move, you can jump from the position $i$ to the position $i - a_i$ (if $1 \\le i - a_i$) or to the position $i + a_i$ (if $i + a_i \\le n$).\n\nFor each position $i$ from $1$ to $n$ you want to know the minimum the number of moves required to reach any position $j$ such that $a_j$ has the opposite parity from $a_i$ (i.e. if $a_i$ is odd then $a_j$ has to be even and vice versa).\n\n\n-----Input-----\n\nThe first line of the input contains one integer $n$ ($1 \\le n \\le 2 \\cdot 10^5$) \u2014 the number of elements in $a$.\n\nThe second line of the input contains $n$ integers $a_1, a_2, \\dots, a_n$ ($1 \\le a_i \\le n$), where $a_i$ is the $i$-th element of $a$.\n\n\n-----Output-----\n\nPrint $n$ integers $d_1, d_2, \\dots, d_n$, where $d_i$ is the minimum the number of moves required to reach any position $j$ such that $a_j$ has the opposite parity from $a_i$ (i.e. if $a_i$ is odd then $a_j$ has to be even and vice versa) or -1 if it is impossible to reach such a position.\n\n\n-----Example-----\nInput\n10\n4 5 7 6 7 5 4 4 6 4\n\nOutput\n1 1 1 2 -1 1 1 3 1 1\nPlease provide the solution as pure code only, without explanations or comments.\n\nANSWER:\n```python\n"}}