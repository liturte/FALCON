{"595": {"code": ["def next_leap_year(year):\n    while True:\n        year += 1\n        if year % 400 == 0 or (year % 4 == 0 and year % 100 != 0):\n            return year\nprint(next_leap_year(int(input())))\n\n\nEXPLANATION:\nThis code is a Python function that finds the next leap year after a given year. It uses a while loop to continuously increment the year by 1 and check if the year is a leap year by checking if it is divisible by 400 or if it is divisible by 4 but not by 100. If it is, it returns the year. The input year is taken from the user and passed to the function.\n\nNote: This code assumes that the", "def next_same_calendar_year(year):\n    while True:\n        year += 1\n        if (year % 4 == 0 and year % 100 != 0) or (year % 400 == 0):\n            days = 366\n        else:\n            days = 365\n        if days % 7 == 0:\n            return year\nprint(next_same_calendar_year(int(input())))\n\nThis Python program will take a year as input and then increment the year by one until it finds a year where the number of days in the year is divisible by 7. It checks for leap years by checking if the year is divisible by 4, but not by 100, or if it is divisible by 400.", "y = int(input())\nwhile True:\n    y += 1\n    if (y % 4 == 0 and y % 100 != 0) or y % 400 == 0:\n        leap = True\n    else:\n        leap = False\n    if leap:\n        if y % 5 == 0:\n            print(y)\n            break\n    else:\n        if y % 5 == 1:\n            print(y)\n            break\n\n\nExplanation:\nThe program reads the year y. Then, it enters a loop that continues until it finds the next year that has the same calendar (Monday-Sunday pattern) as year y. It checks if the year is a leap year by checking if it is divisible by 400 or by 4 but", "def next_year(y):\n    while True:\n        y += 1\n        if (y % 4 == 0 and y % 100 != 0) or y % 400 == 0:\n            leap = True\n        else:\n            leap = False\n        if leap:\n            if y % 5 == 0 and y % 7 == 0:\n                return y\n        else:\n            if y % 5 == 0 and y % 7 == 1:\n                return y\n\ny = int(input())\nprint(next_year(y))\n\n\nThis code checks every year after the given year y for a year where the calendar is the same as y. It does this by checking if the year is a leap year and if it is divisible by 5 and", "def next_leap_year(year):\n    while True:\n        year += 1\n        if (year % 4 == 0 and year % 100 != 0) or (year % 400 == 0):\n            return year\n\nyear = int(input())\nprint(next_leap_year(year))\n\n\nExplanation:\nThis program defines a function next_leap_year that takes a year as input and returns the next leap year. It does this by incrementing the input year by 1 and checking if the new year is a leap year (i.e., if it is divisible by 4 but not by 100, or if it is divisible by 400). If the new year is a leap year, the function returns it. If"], "prompt": "\nQUESTION:\nThe girl Taylor has a beautiful calendar for the year y. In the calendar all days are given with their days of week: Monday, Tuesday, Wednesday, Thursday, Friday, Saturday and Sunday.\n\nThe calendar is so beautiful that she wants to know what is the next year after y when the calendar will be exactly the same. Help Taylor to find that year.\n\nNote that leap years has 366 days. The year is leap if it is divisible by 400 or it is divisible by 4, but not by 100 (https://en.wikipedia.org/wiki/Leap_year).\n\n\n-----Input-----\n\nThe only line contains integer y (1000 \u2264 y < 100'000) \u2014 the year of the calendar.\n\n\n-----Output-----\n\nPrint the only integer y' \u2014 the next year after y when the calendar will be the same. Note that you should find the first year after y with the same calendar.\n\n\n-----Examples-----\nInput\n2016\n\nOutput\n2044\n\nInput\n2000\n\nOutput\n2028\n\nInput\n50501\n\nOutput\n50507\n\n\n\n-----Note-----\n\nToday is Monday, the 13th of June, 2016.\nPlease provide the solution as pure code only, without explanations or comments.\n\nANSWER:\n```python\n"}}