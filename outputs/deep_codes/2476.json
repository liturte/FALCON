{"2476": {"code": ["from collections import Counter\n\nN = int(input())\nA = list(map(int, input().split()))\n\ncounter = Counter(A)\nkeys = sorted(counter.keys())\nvalues = sorted(counter.values())\n\nmax_k = 0\nfor k in range(1, N+1):\n    if k <= len(keys) and (not values or values[-1] >= k):\n        max_k = k\n\nprint(max_k)\n\n\nThis solution uses a Counter to count the frequency of each number in the input list A. Then it sorts the keys and values. It", "from collections import Counter\n\ndef solve(n, a):\n    a.sort()\n    a.reverse()\n    counter = Counter(a)\n    d = list(counter.values())\n    d.sort()\n    d.reverse()\n    ans = [0] * n\n    j = 0\n    for i in range(n):\n        while j < len(d) and d[j] <= i+1:\n            j += 1\n        ans[i] = j\n    print('\\n'.join(map(str, ans)))\n\nn = int(input())", "from collections import Counter\n\nN = int(input())\nA = list(map(int, input().split()))\ncounter = Counter(A)\nvalues = sorted(list(counter.values()))\n\nres = [0] * N\nres[0] = len(A)\n\nfor i in range(1, N):\n    if values[i-1] >= i:\n        res[i] = res[i-1] - i + 1\n    else:\n        res[i] = res[i-1]\n\nprint('\\n'.join(map(str, res)))\n\nThis", "from collections import Counter\n\nN = int(input())\nA = list(map(int, input().split()))\n\ncount = Counter(A)\nvalues = sorted(count.values())\n\nres = [0] * N\nres[0] = len(A)\n\nfor i in range(1, N):\n    if values[i - 1] >= i:\n        res[i] = res[i - 1] - i\n    else:\n        res[i] = res[i - 1] - values[i - 1]\n\nprint('\\n'.join(map(", "from collections import Counter\n\nN = int(input())\nA = list(map(int, input().split()))\n\ncounter = Counter(A)\nkeys = sorted(counter.keys())\n\nans = [0] * N\ndp = [0] * (N+1)\n\nfor i in range(len(keys)-1, -1, -1):\n    dp[keys[i]] = dp[keys[i]+1]\n    if keys[i] <= N-1:\n        dp[keys[i]] = max(dp[keys[i]], counter[keys[i"], "prompt": "\nQUESTION:\nTakahashi has N cards. The i-th of these cards has an integer A_i written on it.\nTakahashi will choose an integer K, and then repeat the following operation some number of times:\n - Choose exactly K cards such that the integers written on them are all different, and eat those cards. (The eaten cards disappear.)\nFor each K = 1,2, \\ldots, N, find the maximum number of times Takahashi can do the operation.\n\n-----Constraints-----\n -  1 \\le N \\le 3 \\times 10^5 \n -  1 \\le A_i \\le N \n - All values in input are integers.\n\n-----Input-----\nInput is given from Standard Input in the following format:\nN\nA_1 A_2 \\ldots A_N\n\n-----Output-----\nPrint N integers.\nThe t-th (1 \\le t \\le N) of them should be the answer for the case K=t.\n\n-----Sample Input-----\n3\n2 1 2\n\n-----Sample Output-----\n3\n1\n0\n\nFor K = 1, we can do the operation as follows:\n - Choose the first card to eat.\n - Choose the second card to eat.\n - Choose the third card to eat.\nFor K = 2, we can do the operation as follows:\n - Choose the first and second cards to eat.\nFor K = 3, we cannot do the operation at all. Note that we cannot choose the first and third cards at the same time.\nPlease provide the solution as pure code only, without explanations or comments.\n\nANSWER:\n```python\n"}}