{"3641": {"code": ["def solve(k, n, weights):\n    total = sum(weights)\n    if total % k != 0:\n        return \"NO\"\n    target = total // k\n    current = 0\n    for weight in weights:\n        current += weight\n        if current > target:\n            return \"NO\"\n        elif current == target:\n            current = 0\n    return \"YES\"\n\nk, n = map(int, input().split())\nweights = list(map(int, input().split()))\nprint(solve(k, n, weights))\n\n\nThis solution works by first checking if the total weight of the beads is divisible by the number of friends. If it's not, it's impossible to split the necklace evenly, so we return \"NO\". \n\nIf the total weight is divisible by the number of friends, we calculate the target weight each person gets by dividing the total", "def solve(k, n, weights):\n    if sum(weights) % k != 0:\n        return \"NO\"\n    target_weight = sum(weights) // k\n    current_weight = 0\n    for weight in weights:\n        current_weight += weight\n        if current_weight > target_weight:\n            return \"NO\"\n        elif current_weight == target_weight:\n            current_weight = 0\n    return \"YES\"\n\nk, n = map(int, input().split())\nweights = list(map(int, input().split()))\nprint(solve(k, n, weights))\n\nThis solution works by first checking if the total weight of all beads is divisible by the number of friends. If it isn't, it's impossible to split the necklace evenly, so it returns \"NO\". If it is, it calculates the target weight each friend should get by", "def can_split(k, n, weights):\n    total_weight = sum(weights)\n    if total_weight % k != 0:\n        return \"NO\"\n    target_weight = total_weight // k\n    current_weight = 0\n    for weight in weights:\n        current_weight += weight\n        if current_weight > target_weight:\n            return \"NO\"\n        if current_weight == target_weight:\n            current_weight = 0\n    return \"YES\"\n\nk, n = map(int, input().split())\nweights = list(map(int, input().split()))\nprint(can_split(k, n, weights))\n\n\nThis code works by first checking if the total weight of the necklace can be evenly divided by the number of friends. If not, it returns \"NO\" immediately. If it can, it calculates the target weight for each friend. It then", "def solve():\n    k, n = map(int, input().split())\n    weights = list(map(int, input().split()))\n    total = sum(weights)\n    if total % k != 0:\n        return 'NO'\n    target = total // k\n    cuts = 0\n    for weight in weights:\n        if weight > target:\n            return 'NO'\n        cuts += weight\n        if cuts == target:\n            cuts = 0\n    return 'YES' if cuts == 0 else 'NO'\n\nprint(solve())\n\n\nThis Python solution works by first checking if the total weight of all beads is divisible by the number of friends. If not, it immediately returns 'NO' because it's impossible to split the necklace evenly. If the total weight is divisible, it calculates the target weight each friend should get by dividing the total weight by the number of friends. It then iter", "def solve():\n    k, n = map(int, input().split())\n    beads = list(map(int, input().split()))\n\n    if sum(beads) % k != 0:\n        return \"NO\"\n\n    target = sum(beads) // k\n    current = 0\n    for bead in beads:\n        current += bead\n        if current > target:\n            return \"NO\"\n        elif current == target:\n            current = 0\n\n    return \"YES\"\n\nprint(solve())\n\n\nThis Python program first checks if the total weight of all beads is divisible by the number of friends. If it's not, it returns \"NO\" because it's impossible to split the necklace into segments of equal weight.\n\nIf the total weight is divisible by the number of friends, the program calculates the target weight for each segment (total weight divided by number of"], "prompt": "\nQUESTION:\nA group of friends was given a necklace. The necklace is a circular nylon wire with gold beads of various weights glued on. They want to cut the wire into segments so that everybody gets one segment, every person gets the same amount of gold, no bead is cut, and no gold is left over. They wonder whether such a split is possible.\n\n-----Input-----\nThe first line contains two integers $k$ and $n$ where $k$ is the number of friends and $n$ is the number of beads on the necklace. The next line contains $n$ positive integers\u2014the weights of the beads in the order they occur on the necklace. You may assume $k\\leq 1000000$, $n\\leq 10000000$, and that bead weights are each $\\leq 1000000000$.\n\n-----Output-----\nThe output consists of a single line consisting of the string YES if the necklace can be split into $k$ segments of equal weight, and the string NO otherwise.\n\n-----Examples-----\nSample Input:\n3 4\n1 2 2 1 \nSample Output:\nYES\nPlease provide the solution as pure code only, without explanations or comments.\n\nANSWER:\n```python\n"}}