{"2347": {"code": ["QUESTION:\nPolycarp has built his own web service. Being a modern web service it includes login feature. And that always implies password security problems.\n\nPolycarp decided to store the hash of the password, generated by the following algorithm:  take the password $p$, consisting of lowercase Latin letters, and shuffle the letters randomly in it to obtain $p'$ ($p'$ can still be equal to $p$);  generate two random strings, consisting of lowercase Latin letters, $s_1$ and $s_2$ (any of these strings can be empty);  the resulting hash $h = s_1 + p' + s_2$, where addition is string concatenation. \n\nFor example, let the password $p =$ \"abacaba\". Then $p'$ can be equal to \"aabcaab\". Random strings $s1 =$ \"zyx\" and $s2 =$ \"kjh\". Then $h =$ \"zyxaabcaabkjh\".\n\nNote that no letters could be deleted or added to $p$ to obtain $p'$, only the order could be changed.\n\nNow Polycarp asks you to help him to implement the password check module. Given the password $p$ and the hash $h$, check that $h$ can be the hash for the password $p$.\n\nYour program should answer $t$ independent test cases.\n\n\n-----Input-----\n\nThe first line contains one integer $t$ ($1 \\le t \\le 100$) \u2014 the number of test cases.\n\nThe first line of each test case contains a non-empty string $p$, consisting of lowercase Latin letters. The length of $p$ does not exceed $100$.\n\nThe second line of each test case contains a non-empty string $h$, consisting of lowercase Latin letters. The length of $h$ does not exceed $100$.\n\n\n-----Output-----\n\nFor each test case print the answer to it \u2014 \"YES\" if the given hash $h$ could be obtained from the given password $p$ or \"NO\" otherwise.\n\n\n-----Example-----\nInput\n5\nabacaba\nzyxaabcaabkjh\nonetwothree\nthreetwoone\none\nzzonneyy\none\nnone\ntwenty\nten\n\nOutput\nYES\nYES\nNO\nYES\nNO\n\n\n\n-----Note-----\n\nThe first test case is explained in the statement.\n\nIn the second test case both $s_1$ and $s_2$ are empty and $p'=$ \"threetwoone\".", "QUESTION:\nPolycarp has built his own web service. Being a modern web service it includes login feature. And that always implies password security problems.\n\nPolycarp decided to store the hash of the password, generated by the following algorithm:  take the password $p$, consisting of lowercase Latin letters, and shuffle the letters randomly in it to obtain $p'$ ($p'$ can still be equal to $p$);  generate two random strings, consisting of lowercase Latin letters, $s_1$ and $s_2$ (any of these strings can be empty);  the resulting hash $h = s_1 + p' + s_2$, where addition is string concatenation. \n\nFor example, let the password $p =$ \"abacaba\". Then $p'$ can be equal to \"aabcaab\". Random strings $s1 =$ \"zyx\" and $s2 =$ \"kjh\". Then $h =$ \"zyxaabcaabkjh\".\n\nNote that no letters could be deleted or added to $p$ to obtain $p'$, only the order could be changed.\n\nNow Polycarp asks you to help him to implement the password check module. Given the password $p$ and the hash $h$, check that $h$ can be the hash for the password $p$.\n\nYour program should answer $t$ independent test cases.\n\n\n-----Input-----\n\nThe first line contains one integer $t$ ($1 \\le t \\le 100$) \u2014 the number of test cases.\n\nThe first line of each test case contains a non-empty string $p$, consisting of lowercase Latin letters. The length of $p$ does not exceed $100$.\n\nThe second line of each test case contains a non-empty string $h$, consisting of lowercase Latin letters. The length of $h$ does not exceed $100$.\n\n\n-----Output-----\n\nFor each test case print the answer to it \u2014 \"YES\" if the given hash $h$ could be obtained from the given password $p$ or \"NO\" otherwise.\n\n\n-----Example-----\nInput\n5\nabacaba\nzyxaabcaabkjh\nonetwothree\nthreetwoone\none\nzzonneyy\none\nnone\ntwenty\nten\n\nOutput\nYES\nYES\nNO\nYES\nNO\n\n\n\n-----Note-----\n\nThe first test case is explained in the statement.\n\nIn the second test case both $s_1$ and $s_2$ are empty and $p'=$ \"threetwoone\".", "QUESTION:\nPolycarp has built his own web service. Being a modern web service it includes login feature. And that always implies password security problems.\n\nPolycarp decided to store the hash of the password, generated by the following algorithm:  take the password $p$, consisting of lowercase Latin letters, and shuffle the letters randomly in it to obtain $p'$ ($p'$ can still be equal to $p$);  generate two random strings, consisting of lowercase Latin letters, $s_1$ and $s_2$ (any of these strings can be empty);  the resulting hash $h = s_1 + p' + s_2$, where addition is string concatenation. \n\nFor example, let the password $p =$ \"abacaba\". Then $p'$ can be equal to \"aabcaab\". Random strings $s1 =$ \"zyx\" and $s2 =$ \"kjh\". Then $h =$ \"zyxaabcaabkjh\".\n\nNote that no letters could be deleted or added to $p$ to obtain $p'$, only the order could be changed.\n\nNow Polycarp asks you to help him to implement the password check module. Given the password $p$ and the hash $h$, check that $h$ can be the hash for the password $p$.\n\nYour program should answer $t$ independent test cases.\n\n\n-----Input-----\n\nThe first line contains one integer $t$ ($1 \\le t \\le 100$) \u2014 the number of test cases.\n\nThe first line of each test case contains a non-empty string $p$, consisting of lowercase Latin letters. The length of $p$ does not exceed $100$.\n\nThe second line of each test case contains a non-empty string $h$, consisting of lowercase Latin letters. The length of $h$ does not exceed $100$.\n\n\n-----Output-----\n\nFor each test case print the answer to it \u2014 \"YES\" if the given hash $h$ could be obtained from the given password $p$ or \"NO\" otherwise.\n\n\n-----Example-----\nInput\n5\nabacaba\nzyxaabcaabkjh\nonetwothree\nthreetwoone\none\nzzonneyy\none\nnone\ntwenty\nten\n\nOutput\nYES\nYES\nNO\nYES\nNO\n\n\n\n-----Note-----\n\nThe first test case is explained in the statement.\n\nIn the second test case both $s_1$ and $s_2$ are empty and $p'=$ \"threetwoone\"", "QUESTION:\nPolycarp has built his own web service. Being a modern web service it includes login feature. And that always implies password security problems.\n\nPolycarp decided to store the hash of the password, generated by the following algorithm:  take the password $p$, consisting of lowercase Latin letters, and shuffle the letters randomly in it to obtain $p'$ ($p'$ can still be equal to $p$);  generate two random strings, consisting of lowercase Latin letters, $s_1$ and $s_2$ (any of these strings can be empty);  the resulting hash $h = s_1 + p' + s_2$, where addition is string concatenation. \n\nFor example, let the password $p =$ \"abacaba\". Then $p'$ can be equal to \"aabcaab\". Random strings $s1 =$ \"zyx\" and $s2 =$ \"kjh\". Then $h =$ \"zyxaabcaabkjh\".\n\nNote that no letters could be deleted or added to $p$ to obtain $p'$, only the order could be changed.\n\nNow Polycarp asks you to help him to implement the password check module. Given the password $p$ and the hash $h$, check that $h$ can be the hash for the password $p$.\n\nYour program should answer $t$ independent test cases.\n\n\n-----Input-----\n\nThe first line contains one integer $t$ ($1 \\le t \\le 100$) \u2014 the number of test cases.\n\nThe first line of each test case contains a non-empty string $p$, consisting of lowercase Latin letters. The length of $p$ does not exceed $100$.\n\nThe second line of each test case contains a non-empty string $h$, consisting of lowercase Latin letters. The length of $h$ does not exceed $100$.\n\n\n-----Output-----\n\nFor each test case print the answer to it \u2014 \"YES\" if the given hash $h$ could be obtained from the given password $p$ or \"NO\" otherwise.\n\n\n-----Example-----\nInput\n5\nabacaba\nzyxaabcaabkjh\nonetwothree\nthreetwoone\none\nzzonneyy\none\nnone\ntwenty\nten\n\nOutput\nYES\nYES\nNO\nYES\nNO\n\n\n\n-----Note-----\n\nThe first test case is explained in the statement.\n\nIn the second test case both $s_1$ and $s_2$ are empty and $p'=$ \"threetwoone\".", "QUESTION:\nPolycarp has built his own web service. Being a modern web service it includes login feature. And that always implies password security problems.\n\nPolycarp decided to store the hash of the password, generated by the following algorithm:  take the password $p$, consisting of lowercase Latin letters, and shuffle the letters randomly in it to obtain $p'$ ($p'$ can still be equal to $p$);  generate two random strings, consisting of lowercase Latin letters, $s_1$ and $s_2$ (any of these strings can be empty);  the resulting hash $h = s_1 + p' + s_2$, where addition is string concatenation. \n\nFor example, let the password $p =$ \"abacaba\". Then $p'$ can be equal to \"aabcaab\". Random strings $s1 =$ \"zyx\" and $s2 =$ \"kjh\". Then $h =$ \"zyxaabcaabkjh\".\n\nNote that no letters could be deleted or added to $p$ to obtain $p'$, only the order could be changed.\n\nNow Polycarp asks you to help him to implement the password check module. Given the password $p$ and the hash $h$, check that $h$ can be the hash for the password $p$.\n\nYour program should answer $t$ independent test cases.\n\n\n-----Input-----\n\nThe first line contains one integer $t$ ($1 \\le t \\le 100$) \u2014 the number of test cases.\n\nThe first line of each test case contains a non-empty string $p$, consisting of lowercase Latin letters. The length of $p$ does not exceed $100$.\n\nThe second line of each test case contains a non-empty string $h$, consisting of lowercase Latin letters. The length of $h$ does not exceed $100$.\n\n\n-----Output-----\n\nFor each test case print the answer to it \u2014 \"YES\" if the given hash $h$ could be obtained from the given password $p$ or \"NO\" otherwise.\n\n\n-----Example-----\nInput\n5\nabacaba\nzyxaabcaabkjh\nonetwothree\nthreetwoone\none\nzzonneyy\none\nnone\ntwenty\nten\n\nOutput\nYES\nYES\nNO\nYES\nNO\n\n\n\n-----Note-----\n\nThe first test case is explained in the statement.\n\nIn the second test case both $s_1$ and $s_2$ are empty and $p'=$ \"threetwoone\"."], "prompt": "\nQUESTION:\nPolycarp has built his own web service. Being a modern web service it includes login feature. And that always implies password security problems.\n\nPolycarp decided to store the hash of the password, generated by the following algorithm:  take the password $p$, consisting of lowercase Latin letters, and shuffle the letters randomly in it to obtain $p'$ ($p'$ can still be equal to $p$);  generate two random strings, consisting of lowercase Latin letters, $s_1$ and $s_2$ (any of these strings can be empty);  the resulting hash $h = s_1 + p' + s_2$, where addition is string concatenation. \n\nFor example, let the password $p =$ \"abacaba\". Then $p'$ can be equal to \"aabcaab\". Random strings $s1 =$ \"zyx\" and $s2 =$ \"kjh\". Then $h =$ \"zyxaabcaabkjh\".\n\nNote that no letters could be deleted or added to $p$ to obtain $p'$, only the order could be changed.\n\nNow Polycarp asks you to help him to implement the password check module. Given the password $p$ and the hash $h$, check that $h$ can be the hash for the password $p$.\n\nYour program should answer $t$ independent test cases.\n\n\n-----Input-----\n\nThe first line contains one integer $t$ ($1 \\le t \\le 100$) \u2014 the number of test cases.\n\nThe first line of each test case contains a non-empty string $p$, consisting of lowercase Latin letters. The length of $p$ does not exceed $100$.\n\nThe second line of each test case contains a non-empty string $h$, consisting of lowercase Latin letters. The length of $h$ does not exceed $100$.\n\n\n-----Output-----\n\nFor each test case print the answer to it \u2014 \"YES\" if the given hash $h$ could be obtained from the given password $p$ or \"NO\" otherwise.\n\n\n-----Example-----\nInput\n5\nabacaba\nzyxaabcaabkjh\nonetwothree\nthreetwoone\none\nzzonneyy\none\nnone\ntwenty\nten\n\nOutput\nYES\nYES\nNO\nYES\nNO\n\n\n\n-----Note-----\n\nThe first test case is explained in the statement.\n\nIn the second test case both $s_1$ and $s_2$ are empty and $p'=$ \"threetwoone\" is $p$ shuffled.\n\nIn the third test case the hash could not be obtained from the password.\n\nIn the fourth test case $s_1=$ \"n\", $s_2$ is empty and $p'=$ \"one\" is $p$ shuffled (even thought it stayed the same). \n\nIn the fifth test case the hash could not be obtained from the password.\nPlease provide the solution as pure code only, without explanations or comments.\n\nANSWER:\n```python\n"}}