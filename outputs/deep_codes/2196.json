{"2196": {"code": ["def solve():\n    n = int(input())\n    a = list(map(int, input().split()))\n    total = sum(a)\n    m = 2 ** max(a)\n    return (m - 1) - total\n\nprint(solve())\n\nThis code reads the input, calculates the sum of the array elements, determines the maximum power of 2 that is smaller or equal", "def min_numbers(n, a):\n    v = sum(a)\n    b = len(bin(v)[2:]) - 1\n    return b - v.bit_length() + 1\n\nn = int(input())\na = list(map(int, input().split()))\nprint(min_numbers(n, a))\n\n\nThis program uses the property that the", "def solve():\n    n = int(input().strip())\n    arr = list(map(int, input().strip().split()))\n    total = sum(arr)\n    result = 0\n    while total > 0:\n        while total >= 2**(result+1):\n            result += 1\n        total -= 2**result\n    return result\n\nprint(solve())\n\nThis code uses", "def min_numbers_to_add(n, numbers):\n    total = sum(numbers)\n    v = 1\n    while total + v <= 2**v - 1:\n        v += 1\n    return v\n\nn = int(input())\nnumbers = list(map(int, input().split()))\nprint(min_numbers_to_add(n, numbers))", "def min_numbers(n, arr):\n    total = sum(arr)\n    v = 0\n    while total > (1 << v) - 1:\n        v += 1\n    return v\n\nn = int(input())\narr = list(map(int, input().split()))\nprint(min_numbers(n, arr))\n\n\nThis solution works by first calculating the total"], "prompt": "\nQUESTION:\nIvan has got an array of n non-negative integers a_1, a_2, ..., a_{n}. Ivan knows that the array is sorted in the non-decreasing order. \n\nIvan wrote out integers 2^{a}_1, 2^{a}_2, ..., 2^{a}_{n} on a piece of paper. Now he wonders, what minimum number of integers of form 2^{b} (b \u2265 0) need to be added to the piece of paper so that the sum of all integers written on the paper equalled 2^{v} - 1 for some integer v (v \u2265 0). \n\nHelp Ivan, find the required quantity of numbers.\n\n\n-----Input-----\n\nThe first line contains integer n (1 \u2264 n \u2264 10^5). The second input line contains n space-separated integers a_1, a_2, ..., a_{n} (0 \u2264 a_{i} \u2264 2\u00b710^9). It is guaranteed that a_1 \u2264 a_2 \u2264 ... \u2264 a_{n}.\n\n\n-----Output-----\n\nPrint a single integer \u2014 the answer to the problem.\n\n\n-----Examples-----\nInput\n4\n0 1 1 1\n\nOutput\n0\n\nInput\n1\n3\n\nOutput\n3\n\n\n\n-----Note-----\n\nIn the first sample you do not need to add anything, the sum of numbers already equals 2^3 - 1 = 7.\n\nIn the second sample you need to add numbers 2^0, 2^1, 2^2.\nPlease provide the solution as pure code only, without explanations or comments.\n\nANSWER:\n```python\n"}}