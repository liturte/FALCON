{"4436": {"code": ["import math\n\ndef solve(n):\n    for i in range(2, math.isqrt(n) + 1):\n        if n % i == 0:\n            return i, n // i\n    return -1, -1\n\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a, b = solve(n)\n    if a == -1:\n        print(\"NO\")\n    else:\n        c = n // (a * b)\n        if a * b * c == n and a < b and b < c:\n            print(\"YES\", a, b, c)\n        else:\n            print(\"NO\")\n\n\nThis code works by iterating over all possible", "import math\n\ndef factorize(n):\n    factors = []\n    while n % 2 == 0:\n        factors.append(2)\n        n = n / 2\n    for i in range(3,int(math.sqrt(n))+1,2):\n        while n % i== 0:\n            factors.append(int(i))\n            n = n / i\n    if n > 2:\n        factors.append(int(n))\n    return factors\n\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    factors = factorize(n)\n    if len(factors) < 3:\n        print(\"NO\")\n    else:\n        factors.sort()", "import math\n\nt = int(input())\n\ndef factorize(n):\n    factors = []\n    while n % 2 == 0:\n        factors.append(2)\n        n = n / 2\n    for i in range(3,int(math.sqrt(n))+1,2):\n        while n % i== 0:\n            factors.append(int(i))\n            n = n / i\n    if n > 2:\n        factors.append(int(n))\n    return factors\n\nfor _ in range(t):\n    n = int(input())\n    factors = factorize(n)\n    if len(factors) < 3:\n        print(\"NO\")\n    else:\n        print(\"YES", "from math import sqrt\n\ndef find_factors(n):\n    factors = []\n    for i in range(2, int(sqrt(n))+1):\n        if n % i == 0:\n            factors.append(i)\n            if n // i != i:\n                factors.append(n // i)\n    return factors\n\ndef solve(n):\n    if n < 8:\n        return 'NO'\n    factors = find_factors(n)\n    factors.sort()\n    for i in range(len(factors)):\n        for j in range(i+1, len(factors)):\n            a = factors[i]\n            b = factors[j]\n            c = n // (a*b", "import sys\n\ndef factorize(n):\n    factors = []\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            factors.append(i)\n    if n > 1:\n        factors.append(n)\n    return factors\n\ndef solve(n):\n    factors = factorize(n)\n    if len(factors) < 3:\n        return \"NO\"\n    else:\n        return \"YES\\n\" + ' '.join(map(str, factors[:3]))\n\nt = int(sys.stdin.readline())\nfor _ in range(t):\n    n = int(sys.stdin.readline"], "prompt": "\nQUESTION:\nYou are given one integer number $n$. Find three distinct integers $a, b, c$ such that $2 \\le a, b, c$ and $a \\cdot b \\cdot c = n$ or say that it is impossible to do it.\n\nIf there are several answers, you can print any.\n\nYou have to answer $t$ independent test cases.\n\n\n-----Input-----\n\nThe first line of the input contains one integer $t$ ($1 \\le t \\le 100$) \u2014 the number of test cases.\n\nThe next $n$ lines describe test cases. The $i$-th test case is given on a new line as one integer $n$ ($2 \\le n \\le 10^9$).\n\n\n-----Output-----\n\nFor each test case, print the answer on it. Print \"NO\" if it is impossible to represent $n$ as $a \\cdot b \\cdot c$ for some distinct integers $a, b, c$ such that $2 \\le a, b, c$.\n\nOtherwise, print \"YES\" and any possible such representation.\n\n\n-----Example-----\nInput\n5\n64\n32\n97\n2\n12345\n\nOutput\nYES\n2 4 8 \nNO\nNO\nNO\nYES\n3 5 823\nPlease provide the solution as pure code only, without explanations or comments.\n\nANSWER:\n```python\n"}}