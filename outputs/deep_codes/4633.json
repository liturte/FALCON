{"4633": {"code": ["from collections import deque\n\nt = int(input())\nfor _ in range(t):\n    n, s = map(int, input().split())\n    if n >= s:\n        print(0)\n        continue\n    visited = [0]*163\n    visited[n] = 1\n    queue = deque([(n, 0)])\n    while queue:\n        x, step = queue.popleft()\n        for i in range(x+1):\n            if x+i <= 162 and not visited[x+i]:", "def min_moves(n, s):\n    if n >= s:\n        return 0\n    else:\n        return (s - n + 9) // 10\n\nt = int(input())\nfor _ in range(t):\n    n, s = map(int, input().split())\n    print(min_moves(n, s))\n\nThe solution is based on the fact that you can increase the number by 1 in one move and the sum of digits is increasing by at most 9 in one move. Therefore, the minimum number of moves is the number", "from sys import stdin, stdout\n\ndef solve():\n    n, s = map(int, stdin.readline().split())\n    if n >= s:\n        stdout.write('0\\n')\n        return\n    digits = list(map(int, str(n)))\n    digits.sort()\n    ans = 0\n    for d in digits:\n        if d + ans * 9 <= s:\n            ans += d\n        else:\n            ans += (s - ans) // d\n            if (s - ans", "def solve(n, s):\n    if sum(int(i) for i in str(n)) <= s:\n        return 0\n    dp = [0] + [10**18]*s\n    dp2 = [0] + [1]*s\n    for i in range(1, s+1):\n        for digit in map(int, str(n)):\n            if digit <= i and dp[i-digit] + 1 < dp[i]:\n                dp[i] = dp[i-digit] + 1", "import sys\n\ndef min_moves(n, s):\n    if n >= s:\n        return 0\n    n_str = str(n)\n    n_len = len(n_str)\n    dp = [0] * (s + 1)\n    digit_dp = [[0] * (s + 1) for _ in range(10)]\n    for i in range(1, 10):\n        digit_dp[i][0] = i\n        for j in range(1, s + 1):\n            digit_dp[i][j"], "prompt": "\nQUESTION:\nYou are given a positive integer $n$. In one move, you can increase $n$ by one (i.e. make $n := n + 1$). Your task is to find the minimum number of moves you need to perform in order to make the sum of digits of $n$ be less than or equal to $s$.\n\nYou have to answer $t$ independent test cases.\n\n\n-----Input-----\n\nThe first line of the input contains one integer $t$ ($1 \\le t \\le 2 \\cdot 10^4$) \u2014 the number of test cases. Then $t$ test cases follow.\n\nThe only line of the test case contains two integers $n$ and $s$ ($1 \\le n \\le 10^{18}$; $1 \\le s \\le 162$).\n\n\n-----Output-----\n\nFor each test case, print the answer: the minimum number of moves you need to perform in order to make the sum of digits of $n$ be less than or equal to $s$.\n\n\n-----Example-----\nInput\n5\n2 1\n1 1\n500 4\n217871987498122 10\n100000000000000001 1\n\nOutput\n8\n0\n500\n2128012501878\n899999999999999999\nPlease provide the solution as pure code only, without explanations or comments.\n\nANSWER:\n```python\n"}}