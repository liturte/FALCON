{"4680": {"code": ["A, B, C = map(int, input().split())\nprint('YES' if A+B+C == 17 else 'NO')\n\n\nEXPLANATION:\nThe total number of syllables in a Haiku is 17 (5+5+7). The solution checks if the sum of the input syllables is equal to 17. If it is, it prints 'YES'. Otherwise, it prints 'NO'.\n\nThis solution assumes that the input will always be valid, i.e., it will always contain three integers between 1 and 10.\n\nThe solution uses a single line of code to read the input, calculate the sum, and print the result. It uses a ternary expression to simplify the code.\n\nThe solution uses the `map` function to read the input and convert it to integers. The `input().split()` function splits the input by spaces and the `int` function converts the resulting strings to integers.\n\nThe `print` function is used to print the result. It uses a ternary expression to simplify the code. If the sum of the syllables is 17, it", "A, B, C = map(int, input().split())\nprint('YES' if A + B + C == 17 else 'NO')\n\n\nThis Python program reads three integers A, B, and C from the input. It then checks if the sum of these three numbers is 17, which is the total number of syllables in a Haiku. If the sum is 17, it prints 'YES'; otherwise, it prints 'NO'.\n\nNote: The number of syllables in each phrase does not matter in this problem because it's not about counting the exact number of syllables in each phrase, but rather about whether the total number of syllables in the three phrases together equals the total number of syllables in a Haiku (17).\n\nThis solution assumes that the input will always be three integers separated by spaces, as per the problem statement. If this is not the case, the program may need to be modified to handle different input formats.\n\nAlso note that this solution assumes that the input will be valid, i.e., that the numbers A, B, and C are all between 1 and 10 (inclusive). If", "A, B, C = map(int, input().split())\nprint('YES' if A+B+C==17 else 'NO')\n\n\nThis code works by reading in the lengths of the three phrases from the input, then checking if the sum of these lengths is 17 (the total number of syllables in a Haiku). If the sum is 17, it prints 'YES'. Otherwise, it prints 'NO'.\n\nThis is a very simple solution and works under the constraints of the problem. It's a good example of how Python's conditional expression (also known as a ternary operator) can simplify code.\n\nThe condition `A+B+C==17` checks if the sum of the lengths of the three phrases is 17, and the expression `'YES' if A+B+C==17 else 'NO'` returns 'YES' if the condition is true and 'NO' otherwise.\n\nThis solution assumes that the lengths of the phrases are given in syllables. If the lengths are given in some other unit, the solution would need to be adjusted accordingly.", "A, B, C = map(int, input().split())\n\nif A + B + C == 17:\n    print(\"YES\")\nelse:\n    print(\"NO\")\n\n\nThis code works by taking in the lengths of the three phrases as input, and then checks if the sum of these lengths equals 17 (the total number of syllables in a Haiku). If so, it prints \"YES\"; otherwise, it prints \"NO\".\n\nThe constraints in the problem statement (1\u2266A,B,C\u226610) are not checked in this code as they are inherent in the problem definition.\n\nPlease note that this code assumes that the phrases are used exactly once. If phrases can be used multiple times, the sum should be divided by 2.\n\nThis code is written in Python 3.\n\n\nA, B, C = map(int, input().split())\n\nif A + B + C == 17 or A + B + C == 24 or A + B + C == 31:\n    print(\"YES\")\nelse:\n    print(\"NO\")", "A, B, C = map(int, input().split())\n\ndef can_construct_haiku(A, B, C):\n    for a in range(1, A+1):\n        for b in range(1, B+1):\n            for c in range(1, C+1):\n                if a + b + c == 15:\n                    return True\n    return False\n\nprint(\"YES\" if can_construct_haiku(A, B, C) else \"NO\")\n\n\nThis code works by iterating over all possible combinations of the lengths of the three phrases. If any combination adds up to 15 (the total number of syllables in a Haiku), the function returns True. If no such combination is found after checking all possibilities, the function returns False. The result of this function is then printed to the console.\n\nNote: This code assumes that the input will always be valid and does not check for input errors."], "prompt": "\nQUESTION:\nIroha loves Haiku. Haiku is a short form of Japanese poetry. A Haiku consists of three phrases with 5, 7 and 5 syllables, in this order.\nTo create a Haiku, Iroha has come up with three different phrases. These phrases have A, B and C syllables, respectively. Determine whether she can construct a Haiku by using each of the phrases once, in some order.\n\n-----Constraints-----\n - 1\u2266A,B,C\u226610\n\n-----Input-----\nThe input is given from Standard Input in the following format:\nA B C\n\n-----Output-----\nIf it is possible to construct a Haiku by using each of the phrases once, print YES (case-sensitive). Otherwise, print NO.\n\n-----Sample Input-----\n5 5 7\n\n-----Sample Output-----\nYES\n\nUsing three phrases of length 5, 5 and 7, it is possible to construct a Haiku.\nPlease provide the solution as pure code only, without explanations or comments.\n\nANSWER:\n```python\n"}}