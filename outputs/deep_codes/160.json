{"160": {"code": ["from heapq import *\n\nN, K = map(int, input().split())\nA = list(map(int, input().split()))\n\nh = [-a for a in A]\nheapify(h)\n\nwhile K > 0:\n    a = -heappop(h)\n    b = -heappop(h)\n    heappush(h, -(a-b))\n    K -= 1\n\nprint(-h[0])\n\n\nThis code uses a heap to keep track of the largest elements in the array. It pops the two largest elements from the heap, subtracts the larger one from the smaller one", "import sys\nfrom collections import deque\nfrom heapq import heappop, heappush\n\ndef main():\n    n, k = map(int, sys.stdin.readline().split())\n    a = list(map(int, sys.stdin.readline().split()))\n\n    a.sort()\n    a = deque(a)\n    heap = []\n\n    while a and a[0] < 0:\n        heappush(heap, -a[0])\n        a.popleft()\n\n    while k > 0 and heap:\n        max_val = -heappop(heap)\n        if", "from sys import stdin\nfrom math import gcd\n\ndef main():\n    N, K = map(int, stdin.readline().split())\n    A = list(map(int, stdin.readline().split()))\n    A.sort()\n\n    g = A[0]\n    for i in range(1, N):\n        g = gcd(g, A[i])\n\n    if K >= g:\n        print(g)\n    else:\n        print(max(i for i in range(1, g+1) if g % i == 0 and g // i <= K))\n\nmain()", "from heapq import heappop, heappush\ndef max_divisor():\n    n, k = map(int, input().split())\n    a = list(map(int, input().split()))\n    hq = []\n    for i in range(n):\n        heappush(hq, a[i])\n    while k > 0:\n        mi = heappop(hq)\n        ma = heappop(hq)\n        heappush(hq, -mi)\n        heappush(hq, ma-mi)\n        k -= 1\n    return -hq[0]\nprint(max_", "from heapq import *\nfrom sys import stdin\n\nread = stdin.readline\n\nN, K = map(int, read().split())\nA = list(map(int, read().split()))\n\nh = [-a for a in A]\nheapify(h)\n\nwhile K > 0 and h[0] < 0:\n    a = heappop(h)\n    K -= 1\n    heappush(h, a + 1)\n\nif K % 2 == 1:\n    return -h[0]\nelse:\n    return -max(h)\n\n\nThis solution uses a heap to keep track"], "prompt": "\nQUESTION:\nWe have a sequence of N integers: A_1, A_2, \\cdots, A_N.\nYou can perform the following operation between 0 and K times (inclusive):\n - Choose two integers i and j such that i \\neq j, each between 1 and N (inclusive). Add 1 to A_i and -1 to A_j, possibly producing a negative element.\nCompute the maximum possible positive integer that divides every element of A after the operations. Here a positive integer x divides an integer y if and only if there exists an integer z such that y = xz.\n\n-----Constraints-----\n - 2 \\leq N \\leq 500\n - 1 \\leq A_i \\leq 10^6\n - 0 \\leq K \\leq 10^9\n - All values in input are integers.\n\n-----Input-----\nInput is given from Standard Input in the following format:\nN K\nA_1 A_2 \\cdots A_{N-1} A_{N}\n\n-----Output-----\nPrint the maximum possible positive integer that divides every element of A after the operations.\n\n-----Sample Input-----\n2 3\n8 20\n\n-----Sample Output-----\n7\n\n7 will divide every element of A if, for example, we perform the following operation:\n - Choose i = 2, j = 1. A becomes (7, 21).\nWe cannot reach the situation where 8 or greater integer divides every element of A.\nPlease provide the solution as pure code only, without explanations or comments.\n\nANSWER:\n```python\n"}}