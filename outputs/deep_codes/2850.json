{"2850": {"code": ["import sys\nfrom collections import deque\n\ndef main():\n    n, k = map(int, sys.stdin.readline().split())\n    weights = list(map(int, sys.stdin.readline().split()))\n\n    left, right = 0, max(weights)\n    while left < right:\n        mid = (left + right) // 2\n        if check(weights, mid, k):\n            right = mid\n        else:\n            left = mid + 1\n    print(left)\n\ndef check(weights, limit, k):\n    count = 0\n    for weight in weights:\n        if weight > limit:\n            return False\n        if count +", "from sys import stdin\nfrom collections import deque\n\nn, k = map(int, stdin.readline().split())\nweights = list(map(int, stdin.readline().split()))\n\ndef min_heavy_box_weight():\n    weights.sort()\n    weights = deque(weights)\n    min_weight = float('inf')\n    while len(weights) >= k:\n        current_weight = sum(weights[-k:])\n        if current_weight < min_weight:\n            min_weight = current_weight\n        weights.pop()\n    return min_weight\n\nprint(min_heavy_box_weight())\n\n\nEx", "import sys\ndef min_max_weight():\n    n, k = map(int, sys.stdin.readline().split())\n    weights = list(map(int, sys.stdin.readline().split()))\n    weights.sort()\n    l, r = max(weights), sum(weights)\n    while l < r:\n        mid = (l + r) // 2\n        if check(mid, weights, k):\n            r = mid\n        else:\n            l = mid + 1\n    return l\n\ndef check(mid, weights, k):\n    count = 0\n    for weight in weights:\n        if count + weight <= mid:\n            count += weight", "from sys import stdin\n\ndef read_int():\n    return int(stdin.readline().strip())\n\ndef read_ints():\n    return list(map(int, stdin.readline().strip().split()))\n\nn, k = read_int(), read_int()\nweights = read_ints()\n\nweights.sort()\n\nl, r = max(weights), sum(weights)\n\nwhile l < r:\n    mid = (l + r) // 2\n    count = 0\n    cur_sum = 0\n    for weight in weights:\n        if cur_sum + weight > mid:\n            count += 1\n            cur_sum = 0\n        cur", "import sys\n\ndef main():\n    n, k = map(int, sys.stdin.readline().split())\n    weights = list(map(int, sys.stdin.readline().split()))\n\n    left, right = max(weights), sum(weights)\n\n    while left < right:\n        mid = (left + right) // 2\n        if can_pack(weights, mid, k):\n            right = mid\n        else:\n            left = mid + 1\n\n    print(left)\n\ndef can_pack(weights, limit, k):\n    boxes = 0\n    total = 0\n    for weight in weights:\n        if total + weight > limit"], "prompt": "\nQUESTION:\nBrandon Greg Jr. is moving to the United States to double his salary. He has $n$ items that he needs to pack into $k$ big boxes. The $n$ items are currently arranged in a row, and Brandon doesn\u2019t want to bother reordering them, so he will partition the $n$ items into $k$ groups of consecutive items, and put each of the $k$ groups into their own box. For convenience when moving, Brandon wants to minimize the weight of the heaviest box. The weights of the boxes themselves are negligible.\n\n-----Input-----\nThe first line contains two space-separated integers $n$ and $k$ ($1\\le k\\le n\\le 10^5$), denoting the number of items and the number of boxes respectively.\n\nThe second line of input contains $n$ space-separated integers $w_ i$ ($1\\le w_ i\\le 10^4$), representing the weight of each item in order.\n\n-----Output-----\nThe only line of output should contain a single integer, denoting the minimum possible weight of the heaviest box.\n\n-----Examples-----\nSample Input 1:\n7 2\n3 1 1 3 9 5 2\nSample Output 1:\n16\n\nSample Input 2:\n7 4\n1 2 8 3 5 2 7\nSample Output 2:\n9\nPlease provide the solution as pure code only, without explanations or comments.\n\nANSWER:\n```python\n"}}