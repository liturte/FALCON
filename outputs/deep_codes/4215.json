{"4215": {"code": ["A, B = map(int, input().split())\nprint(A - B * 2)\n\n\nExplanation:\nThe uncovered part of the window is the total width of the window minus twice the length of one curtain. So we subtract twice the length of one curtain from the total width of the window.\n\"\"\"\n\n# solution\nA, B = map(int, input().split())\nprint(A - B * 2)\n\n\nThe `map()` function applies the `int()` function to each item in the input list, and returns a map object. We then use the `split()` function to split the input by spaces, and `print()` to output the result.\n\"\"\"\n\n# solution\nA, B = map(int, input().split())\nprint(A - B * 2)\n\n\nThe `map()` function applies the `int()` function to each item in the input list, and returns a map object. We then use the `split()` function to split the input by spaces, and `print()` to output the result", "A, B = map(int, input().split())\nprint(max(A - 2 * B, 0))\n\n\nEXPLANATION:\nThe uncovered part of the window is the maximum of the horizontal length of the window minus twice the length of one curtain, and 0. This is because if the length of the window is less than twice the length of one curtain, there is no uncovered part.\n\nThe map function is used to convert the input into integers. The input().split() function splits the input into words, and map applies the function to each word.\n\nThe max function is used to find the maximum of the two values.\n\nThe print function is used to output the result.\n\nThis code assumes that the curtains cover the ends of the window, but not the middle. If the curtains cover the middle as well, the code would need to be adjusted accordingly.\n\nThis code works for all possible inputs as per the constraints provided.\n\nThis code is written in Python 3.\n\nNote: The problem seems to be a bit ambiguous, as it doesn't specify", "A, B = map(int, input().split())\nprint(max(A-2*B, 0))\n\nThis solution works by subtracting twice the length of the curtains from the window's width, and then taking the maximum of the result and 0. This gives the total horizontal length of the uncovered part of the window. If the result is negative, it means that all of the window is covered by the curtains, so the solution returns 0.\n\nThe `map` function is used to convert the input from string to integer, and `input().split()` is used to split the input by space. The `print` function is used to output the result.\n\nThe time complexity of this solution is O(1), because it only involves a fixed number of arithmetic operations and a comparison. The space complexity is also O(1), because it only uses a fixed amount of memory to store the input and output.", "A, B = map(int, input().split())\nprint(max(A - 2 * B, 0))\n\n\nThis solution works by first reading in the window length (A) and curtain length (B). It then calculates the uncovered part of the window as A minus twice the curtain length (since the curtains cover both ends of the window). If the uncovered part is negative (which means the curtains cover the whole window), it prints 0 instead.\n\nThis solution works because the goal is to minimize the horizontal length of the uncovered part of the window, so it's always best to cover as much of the window as possible with the curtains. This is achieved by placing the curtains as far apart as possible.\n\nThe solution is written in Python and uses the built-in `map` function to read in the input values and the `max` function to ensure that the uncovered part of the window is not negative.", "A, B = map(int, input().split())\nprint(max(A - 2 * B, 0))\n\n\nEXPLANATION:\nThe uncovered part of the window is the part that is not covered by the two curtains. The uncovered part has a horizontal length of A - 2 * B, where A is the horizontal length of the window, and B is the horizontal length of each curtain. If A - 2 * B is less than 0, the uncovered part has a horizontal length of 0 (since the curtains cover the whole window).\n\"\"\"\n\n# ----------------------------------------\n# SOLUTION\n# ----------------------------------------\n\nA, B = map(int, input().split())\nprint(max(A - 2 * B, 0))\n\n# ----------------------------------------\n# END\n# ----------------------------------------\n\n\"\"\"\n\n# ----------------------------------------\n# END\n# ----------------------------------------\n\n\n# ----------------------------------------\n# SOLUTION\n# ----------------------------------------\n\nA, B = map(int, input().split())\nprint"], "prompt": "\nQUESTION:\nThe window of Takahashi's room has a width of A. There are two curtains hung over the window, each of which has a horizontal length of B. (Vertically, the curtains are long enough to cover the whole window.)\nWe will close the window so as to minimize the total horizontal length of the uncovered part of the window.\nFind the total horizontal length of the uncovered parts of the window then.\n\n-----Constraints-----\n - 1 \\leq A \\leq 100\n - 1 \\leq B \\leq 100\n - A and B are integers.\n\n-----Input-----\nInput is given from Standard Input in the following format:\nA B\n\n-----Output-----\nPrint the total horizontal length of the uncovered parts of the window.\n\n-----Sample Input-----\n12 4\n\n-----Sample Output-----\n4\n\nWe have a window with a horizontal length of 12, and two curtains, each of length 4, that cover both ends of the window, for example. The uncovered part has a horizontal length of 4.\nPlease provide the solution as pure code only, without explanations or comments.\n\nANSWER:\n```python\n"}}