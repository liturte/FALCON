{"1738": {"code": ["from collections import default", "from collections import default", "def min_com", "def min_com", "def min_com"], "prompt": "\nQUESTION:\nIvan wants to write a letter to his friend. The letter is a string s consisting of lowercase Latin letters.\n\nUnfortunately, when Ivan started writing the letter, he realised that it is very long and writing the whole letter may take extremely long time. So he wants to write the compressed version of string s instead of the string itself.\n\nThe compressed version of string s is a sequence of strings c_1, s_1, c_2, s_2, ..., c_{k}, s_{k}, where c_{i} is the decimal representation of number a_{i} (without any leading zeroes) and s_{i} is some string consisting of lowercase Latin letters. If Ivan writes string s_1 exactly a_1 times, then string s_2 exactly a_2 times, and so on, the result will be string s.\n\nThe length of a compressed version is |c_1| + |s_1| + |c_2| + |s_2|... |c_{k}| + |s_{k}|. Among all compressed versions Ivan wants to choose a version such that its length is minimum possible. Help Ivan to determine minimum possible length.\n\n\n-----Input-----\n\nThe only line of input contains one string s consisting of lowercase Latin letters (1 \u2264 |s| \u2264 8000).\n\n\n-----Output-----\n\nOutput one integer number \u2014 the minimum possible length of a compressed version of s.\n\n\n-----Examples-----\nInput\naaaaaaaaaa\n\nOutput\n3\n\nInput\nabcab\n\nOutput\n6\n\nInput\ncczabababab\n\nOutput\n7\n\n\n\n-----Note-----\n\nIn the first example Ivan will choose this compressed version: c_1 is 10, s_1 is a.\n\nIn the second example Ivan will choose this compressed version: c_1 is 1, s_1 is abcab.\n\nIn the third example Ivan will choose this compressed version: c_1 is 2, s_1 is c, c_2 is 1, s_2 is z, c_3 is 4, s_3 is ab.\nPlease provide the solution as pure code only, without explanations or comments.\n\nANSWER:\n```python\n"}}