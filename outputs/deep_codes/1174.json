{"1174": {"code": ["import heapq\nimport sys\ninput = sys.stdin.readline\n\ndef solve():\n    N, M = map(int, input().split())\n    A = list(map(int, input().split()))\n\n    # Convert A to a list of tuples, where each tuple is (price, discount)\n    A = [(a, min(M, a.bit_length() - 1)) for a in A]\n\n    # Sort A by price\n    A.sort()\n\n    # Use a heap to keep track of the unused discounts\n    unused_discounts = []\n\n    # Total cost\n    total_cost = 0\n\n    for price, discount in A:\n        # Use any unused discounts on the item\n        while", "import heapq\nimport math\n\nN, M = map(int, input().split())\nA = list(map(int, input().split()))\n\ndiscounts = [0] * M\nfor i in range(N):\n    x = A[i]\n    while x % 2 == 0:\n        x //= 2\n        discounts[i % M] += 1\n    A[i] = x\n\nheapq.heapify(A)\nfor i in range(M):\n    d = discounts[i]\n    if d > 0:\n        a = heapq.heappop(A)\n        heapq.heappush(A, a // (2 ** d))\n\nprint(sum(A))\n\nThis", "import heapq\n\nN, M = map(int, input().split())\nA = list(map(int, input().split()))\n\n# Convert the prices to negative to make them into a max heap\nA = [-a for a in A]\nheapq.heapify(A)\n\nfor _ in range(M):\n    # Pop the most expensive item from the max heap\n    max_price = -heapq.heappop(A)\n    # Calculate the discounted price\n    discounted_price = max_price // 2\n    # Push the discounted price back into the max heap\n    heapq.heappush(A, -discounted_price)\n\n# The total cost is the sum of all items in the", "import heapq\n\nN, M = map(int, input().split())\nA = list(map(int, input().split()))\n\n# Calculate the minimum number of tickets needed for each item\ntickets = []\nfor a in A:\n    count = 0\n    while a % 2 == 0:\n        a //= 2\n        count += 1\n    heapq.heappush(tickets, (count, a))\n\n# Use the discount tickets to reduce the price of the items\nwhile M > 0 and tickets:\n    count, a = heapq.heappop(tickets)\n    if count <= M:\n        M -= count\n    else:\n        heapq.heappush(tickets, (count - M, a))", "import heapq\nimport sys\n\ndef solve():\n    N, M = map(int, sys.stdin.readline().split())\n    A = list(map(int, sys.stdin.readline().split()))\n    A = [-a for a in A]\n    heapq.heapify(A)\n    for _ in range(M):\n        a = -heapq.heappop(A)\n        heapq.heappush(A, -(a // 2))\n    print(-sum(A))\n\nsolve()\n\nThis Python program uses a heap to keep track of the prices of the items. The heap is initialized with the prices of the items. The program then iterates M times, each time popping the most"], "prompt": "\nQUESTION:\nTakahashi is going to buy N items one by one.\nThe price of the i-th item he buys is A_i yen (the currency of Japan).\nHe has M discount tickets, and he can use any number of them when buying an item.\nIf Y tickets are used when buying an item priced X yen, he can get the item for \\frac{X}{2^Y} (rounded down to the nearest integer) yen.\nWhat is the minimum amount of money required to buy all the items?\n\n-----Constraints-----\n - All values in input are integers.\n - 1 \\leq N, M \\leq 10^5\n - 1 \\leq A_i \\leq 10^9\n\n-----Input-----\nInput is given from Standard Input in the following format:\nN M\nA_1 A_2 ... A_N\n\n-----Output-----\nPrint the minimum amount of money required to buy all the items.\n\n-----Sample Input-----\n3 3\n2 13 8\n\n-----Sample Output-----\n9\n\nWe can buy all the items for 9 yen, as follows:\n - Buy the 1-st item for 2 yen without tickets.\n - Buy the 2-nd item for 3 yen with 2 tickets.\n - Buy the 3-rd item for 4 yen with 1 ticket.\nPlease provide the solution as pure code only, without explanations or comments.\n\nANSWER:\n```python\n"}}