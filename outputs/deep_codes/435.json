{"435": {"code": ["from collections import Counter\n\ndef max_beauty(n, k, s):\n    max_len = 0\n    left = 0\n    counter = Counter()\n    for right in range(n):\n        counter[s[right]] += 1\n        if right - left + 1 - counter.most_common(1)[0][1] > k:\n            counter[s[left]] -= 1\n            left += 1\n        max_len = max(max_len, right - left + 1)\n    return max_len\n\nn, k = map(int, input().split())\ns = input()\nprint(max_beauty(n, k, s))\n\n\nExplanation:\nThis solution uses a sliding window approach with two po", "def max_beauty(n, k, s):\n    max_len = count = max(map(len, ''.join(s).split('b')))\n    for i in range(1, n):\n        if s[i] == s[i-1] == 'b':\n            count += 1\n        else:\n            count = 1\n        if count + k >= max_len:\n            max_len = count + k\n    return max_len\n\nn, k = map(int, input().split())\ns = input()\nprint(max_beauty(n, k, s))\n\n\nExplanation:\nThe solution uses a sliding window approach. It counts the number of 'b's in the string and keeps track of the", "from collections import Counter\n\ndef max_beauty(n, k, s):\n    c = Counter()\n    max_freq = 0\n    left = 0\n    for right in range(n):\n        c[s[right]] += 1\n        max_freq = max(max_freq, c[s[right]])\n        if right - left + 1 > max_freq + k:\n            c[s[left]] -= 1\n            left += 1\n    return max_freq\n\nn, k = map(int, input().split())\ns = input()\nprint(max_beauty(n, k, s))\n\n\nThis Python code uses a sliding window approach to solve the problem. The `Counter` class", "from collections import Counter\n\ndef max_beauty(n, k, s):\n    count = Counter(s)\n    max_len = max(count.values())\n    \n    if max_len > k:\n        return max_len - 1\n    elif max_len + k >= n:\n        return max_len\n    else:\n        return max_len + (k - (n - max_len))\n\nn, k = map(int, input().split())\ns = input()\nprint(max_beauty(n, k, s))\n\n\nThis solution uses the Counter class from the collections module to count the number of occurrences of each character in the string. It then finds the maximum length of a substring with the", "def max_beauty(n, k, s):\n    l = 0\n    r = 0\n    max_length = 0\n    max_count = 0\n    while r < n:\n        if s[r] == s[l]:\n            r += 1\n        elif k > 0:\n            k -= 1\n            r += 1\n        else:\n            while s[l] == s[r]:\n                l += 1\n            l += 1\n        max_length = max(max_length, r - l + 1)\n    return max_length\n\nn, k = map(int, input().split())\ns = input()\nprint(max_beauty(n, k, s))\n\nThis solution works by using a sliding window approach"], "prompt": "\nQUESTION:\nHigh school student Vasya got a string of length n as a birthday present. This string consists of letters 'a' and 'b' only. Vasya denotes beauty of the string as the maximum length of a substring (consecutive subsequence) consisting of equal letters.\n\nVasya can change no more than k characters of the original string. What is the maximum beauty of the string he can achieve?\n\n\n-----Input-----\n\nThe first line of the input contains two integers n and k (1 \u2264 n \u2264 100 000, 0 \u2264 k \u2264 n)\u00a0\u2014 the length of the string and the maximum number of characters to change.\n\nThe second line contains the string, consisting of letters 'a' and 'b' only.\n\n\n-----Output-----\n\nPrint the only integer\u00a0\u2014 the maximum beauty of the string Vasya can achieve by changing no more than k characters.\n\n\n-----Examples-----\nInput\n4 2\nabba\n\nOutput\n4\n\nInput\n8 1\naabaabaa\n\nOutput\n5\n\n\n\n-----Note-----\n\nIn the first sample, Vasya can obtain both strings \"aaaa\" and \"bbbb\".\n\nIn the second sample, the optimal answer is obtained with the string \"aaaaabaa\" or with the string \"aabaaaaa\".\nPlease provide the solution as pure code only, without explanations or comments.\n\nANSWER:\n```python\n"}}