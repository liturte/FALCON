{"4015": {"code": ["from queue import Queue\n\ndef bfs(n, m):\n    q = Queue()\n    q.put((n, 0))\n    visited = {n}\n\n    while not q.empty():\n        cur, step = q.get()\n        if cur == m:\n            return step\n        for i in [cur*2, cur*3]:", "def solve(n, m):\n    if n > m:\n        return -1\n    if n == m:\n        return 0\n    if m % n == 0:\n        return solve(n, m // n) + 1\n    else:\n        return -1\n\nn, m = map(int, input().split())\nprint(solve(n,", "n, m = map(int, input().split())\n\nif n > m:\n    print(-1)\nelif n == m:\n    print(0)\nelse:\n    dp = [0] * (m+1)\n    dp[n] = 1\n    for i in range(n+1, m+1):\n        if dp", "from heapq import heappop, heappush\n\ndef solve(n, m):\n    if n >= m:\n        return max(0, n - m)\n    q = [(0, n)]\n    seen = {n}\n    while q:\n        k, v = heappop(q)\n        if v == m:\n            return k", "from heapq import heappop, heappush\n\ndef min_moves(n, m):\n    if n > m:\n        return -1\n    q = [(0, n)]\n    seen = {n}\n    while q:\n        steps, curr = heappop(q)\n        if curr == m:\n            return steps"], "prompt": "\nQUESTION:\nPolycarp plays \"Game 23\". Initially he has a number $n$ and his goal is to transform it to $m$. In one move, he can multiply $n$ by $2$ or multiply $n$ by $3$. He can perform any number of moves.\n\nPrint the number of moves needed to transform $n$ to $m$. Print -1 if it is impossible to do so.\n\nIt is easy to prove that any way to transform $n$ to $m$ contains the same number of moves (i.e. number of moves doesn't depend on the way of transformation).\n\n\n-----Input-----\n\nThe only line of the input contains two integers $n$ and $m$ ($1 \\le n \\le m \\le 5\\cdot10^8$).\n\n\n-----Output-----\n\nPrint the number of moves to transform $n$ to $m$, or -1 if there is no solution.\n\n\n-----Examples-----\nInput\n120 51840\n\nOutput\n7\n\nInput\n42 42\n\nOutput\n0\n\nInput\n48 72\n\nOutput\n-1\n\n\n\n-----Note-----\n\nIn the first example, the possible sequence of moves is: $120 \\rightarrow 240 \\rightarrow 720 \\rightarrow 1440 \\rightarrow 4320 \\rightarrow 12960 \\rightarrow 25920 \\rightarrow 51840.$ The are $7$ steps in total.\n\nIn the second example, no moves are needed. Thus, the answer is $0$.\n\nIn the third example, it is impossible to transform $48$ to $72$.\nPlease provide the solution as pure code only, without explanations or comments.\n\nANSWER:\n```python\n"}}