{"731": {"code": ["w, m, k = map(int, input().split())\n\ndef S(n):\n    return len(str(n))\n\ndef max_length(w, m, k):\n    length = 0\n    while w >= S(m)*k:\n        w -= S(m)*k\n        m += 1\n        length += 1\n    return length\n\nprint(max_length(w, m, k))\n\nThis code uses a helper function S(n) to calculate the number of digits in n. The main function max_length calculates the maximum length of the sequence by repeatedly adding the next number to the sequence and", "w, m, k = map(int, input().split())\n\ndef S(n):\n    return len(str(n))\n\ndef max_sequence_length(w, m, k):\n    cost = S(m) * k\n    if cost > w:\n        return 0\n    w -= cost\n    length = 1\n    while True:\n        m += 1\n        cost = S(m) * k\n        if cost > w:\n            break\n        w -= cost\n        length += 1\n    return length\n\nprint(max_sequence_length(w, m, k))\n\nThis code", "def S(n):\n    return len(str(n))\n\ndef solve(w, m, k):\n    dp = [0] * (w + 1)\n    for i in range(1, w + 1):\n        dp[i] = max(dp[i - 1], dp[max(0, i - m)] + S(m) * k)\n    return dp[w]\n\nw, m, k = map(int, input().split())\nprint(solve(w, m, k))\n\nThis code uses dynamic programming to solve the problem. The dp array stores the maximum", "def S(n):\n    return len(str(n))\n\ndef max_sequence_length(w, m, k):\n    cost = [0] * 19\n    for i in range(1, 19):\n        cost[i] = cost[i-1] + S(i) * k\n        if cost[i] > w:\n            cost[i] = cost[i-1]\n            break\n\n    length = 0\n    while m > 0:\n        length += m // (10 ** cost[length + 1])\n        m //= (10 ** cost[length + 1])", "import sys\n\nw, m, k = map(int, sys.stdin.readline().split())\n\ndef S(n):\n    return len(str(n))\n\ncount = 0\nwhile w >= S(m) * k:\n    w -= S(m) * k\n    m += 1\n    count += 1\n\nprint(count)\n\n\nThis program works by repeatedly adding the next number in the sequence (m) to the sequence and decrementing the cost (w). It does this as long as the cost to add the next number is less than or equal to the remaining cost. The length of the sequence is increment"], "prompt": "\nQUESTION:\nWe'll define S(n) for positive integer n as follows: the number of the n's digits in the decimal base. For example, S(893) = 3, S(114514) = 6.\n\nYou want to make a consecutive integer sequence starting from number m (m, m + 1, ...). But you need to pay S(n)\u00b7k to add the number n to the sequence.\n\nYou can spend a cost up to w, and you want to make the sequence as long as possible. Write a program that tells sequence's maximum length.\n\n\n-----Input-----\n\nThe first line contains three integers w (1 \u2264 w \u2264 10^16), m (1 \u2264 m \u2264 10^16), k (1 \u2264 k \u2264 10^9).\n\nPlease, do not write the %lld specifier to read or write 64-bit integers in C++. It is preferred to use the cin, cout streams or the %I64d specifier.\n\n\n-----Output-----\n\nThe first line should contain a single integer \u2014 the answer to the problem.\n\n\n-----Examples-----\nInput\n9 1 1\n\nOutput\n9\n\nInput\n77 7 7\n\nOutput\n7\n\nInput\n114 5 14\n\nOutput\n6\n\nInput\n1 1 2\n\nOutput\n0\nPlease provide the solution as pure code only, without explanations or comments.\n\nANSWER:\n```python\n"}}