{"3417": {"code": ["def max_independent_set(graph):\n    nodes = list(graph.keys())\n    nodes.sort(key=lambda x: len(graph[x]), reverse=True)\n    independent_set = set()\n    for node in nodes:\n        if all(neighbor not in independent_set for neighbor in graph[node]):\n            independent_set.add(node)\n    return len(independent_independent_set)\n\nn, m = map(int, input().split())\ngraph = {i: set() for i in range(1, n + 1)}\nfor _ in range(m):\n    a, b = map(int, input().split())\n    graph[a].add(b)\n    graph[b].add(a)\n\nprint(max", "from collections import defaultdict\n\ndef max_independent_set(graph, start=1, visited=None):\n    if visited is None:\n        visited = set()\n    if not graph[start]:\n        return 1\n    if start in visited:\n        return 0\n    visited.add(start)\n    return max(max_independent_set(graph, node, visited) for node in graph[start])\n\nn, m = map(int, input().split())\ngraph = defaultdict(list)\nfor _ in range(m):\n    a, b = map(int, input().split())\n    graph[a].append(b)\n    graph[b].append(a)\nprint(max_independent_set(graph))\n\n\nExplanation:", "import sys\n\ndef read_input():\n    n, m = map(int, sys.stdin.readline().split())\n    graph = [[] for _ in range(n + 1)]\n    for _ in range(m):\n        a, b = map(int, sys.stdin.readline().split())\n        graph[a].append(b)\n        graph[b].append(a)\n    return n, graph\n\ndef max_independent_set(n, graph):\n    dp = [0] * (n + 1)\n    dp[1] = len(graph[1]) + 1\n    for i in range(2, n + 1):\n        dp[i] = max(dp[i - 1], dp[i -", "from sys import stdin\n\ndef max_independent_set(graph):\n    n = len(graph)\n    dp = [[0, 0] for _ in range(n+2)]\n    for i in range(n, 0, -1):\n        dp[i][1] = 1 + max(dp[j][0] for j in graph[i-1])\n        dp[i][0] = max(dp[j][1] for j in graph[i-1])\n    return max(dp[i][0] for i in range(1, n+1))\n\nn, m = map(int, stdin.readline().split())\ngraph = [[] for _ in range(n)]\nfor _ in range(m):", "from sys import stdin\n\ndef read_int():\n    return int(stdin.readline().strip())\n\ndef read_ints():\n    return list(map(int, stdin.readline().strip().split()))\n\ndef solve(n, m, edges):\n    graph = [[] for _ in range(n+1)]\n    for u, v in edges:\n        graph[u].append(v)\n        graph[v].append(u)\n    dp = [[0, 0] for _ in range(n+1)]\n    visited = [False]*(n+1)\n    def dfs(u):\n        visited[u] = True\n        dp[u][1] = 1\n        for v in graph[u]:\n            if"], "prompt": "\nQUESTION:\nFor an undirected, simple graph $G = (V, E)$ we call a subset $V\u2019 \\subseteq V$ an independent set if no two elements of $V\u2019$ are connected by an edge. An independent set of $G$ is called a maximum independent set if there is no independent set in $G$ with strictly more vertices. Given a specific kind of connected graph $G$, find the size of a maximum independent set of $G$.\n\n-----Input-----\n - The input starts with one line, containing integers $n$ ($1 \\leq n \\leq 100$), the number of vertices in the graph, and $m$ ($n-1 \\leq m \\leq n + 15$), the number of edges in the graph.\n - Then follow $m$ lines, each containing integers $a, b$ ($1 \\leq a, b \\leq n$) indicating that there is an edge between vertices $a$ and $b$.\n\nThe graph given by this input is guaranteed to be both simple and connected: there is at most one edge between each pair of vertices, there are no loops, and there is a path between each pair of vertices.\n\n-----Output-----\n - Output the number of vertices in a maximum independent set of the input graph.\n\n-----Examples-----\nSample Input:\n2 1\n1 2\nSample Output:\n1\nPlease provide the solution as pure code only, without explanations or comments.\n\nANSWER:\n```python\n"}}