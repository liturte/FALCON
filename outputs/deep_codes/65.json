{"65": {"code": ["def min_distance(nums):\n    min_num = min(nums)\n    min_indices = [i for i, num in enumerate(nums) if num == min_num]\n    return min(b - a for a, b in zip(min_indices, min_indices[1:]))\n\nn = int(input())\nnums = list(map(int, input().split()))\nprint(min_distance(nums))\n\n\nThis solution works by first finding the minimum number in the list and then finding the indices of all occurrences of this minimum number. It then finds the minimum difference between any two consecutive indices, which is the distance between two nearest minimums.\n\nThe time complexity of this solution is O(n) because it makes a single pass through the list to find the minimum number and a second pass to find the indices of all occurrences of this minimum number. The space complexity is also O(n) because in the worst case, all elements in the list are the same and we need to", "n = int(input())\nnums = list(map(int, input().split()))\n\nmin1 = min(nums)\nmin2 = float('inf')\n\nfor i in range(n):\n    if nums[i] < min2 and nums[i] > min1:\n        min2 = nums[i]\n\nprint(abs(nums.index(min1) - nums[nums.index(min1) + 1:].index(min2)) + 1)\n\n\nThis solution works by first finding the smallest number in the array. Then, it finds the next smallest number that is larger than the first smallest number. The distance between these two numbers is then calculated and printed.\n\nThe `abs` function is used to ensure that the distance is always positive, even if the second smallest number occurs before the first smallest number in the array. The `index` function is used to find the positions of the smallest and second smallest numbers in the array.\n\nThis solution has a time complexity of O(n^", "def min_distance(arr):\n    min_val = min(arr)\n    min_indices = [i for i, x in enumerate(arr) if x == min_val]\n    return min(j - i for i, j in zip(min_indices, min_indices[1:]))\n\nn = int(input().strip())\narr = list(map(int, input().strip().split()))\nprint(min_distance(arr))\n\n\nThis code first finds the minimum value in the array and then finds the indices of all occurrences of this minimum value. It then calculates the minimum distance between these indices.\n\nThe `min_distance` function works by creating a list of indices where the minimum value occurs in the array. It then calculates the minimum difference between any two consecutive indices in this list. This difference is the minimum distance between two occurrences of the minimum value in the array.\n\nThe main part of the code reads the input, converts it to a list of integers, and then calls the `", "def min_distance(arr):\n    min_val = min(arr)\n    min_indices = [i for i, x in enumerate(arr) if x == min_val]\n    return min(j - i for i, j in zip(min_indices, min_indices[1:]))\n\nn = int(input().strip())\narr = list(map(int, input().strip().split()))\nprint(min_distance(arr))\n\nThis Python code takes an array of integers as input and calculates the minimum distance between two occurrences of the minimum value in the array. It first finds the minimum value in the array and then finds the indices of all occurrences of this minimum value. It then calculates the minimum difference between any two consecutive indices, which represents the minimum distance between two occurrences of the minimum value.\n\nPlease note that the input and output format may vary depending on the specific requirements of the problem. The provided solution assumes that the input format is as described in the problem statement.", "n = int(input())\na = list(map(int, input().split()))\n\nmin1 = min(a)\nmin2 = min(a[a.index(min1) + 1:])\n\nprint(a.index(min2) - a.index(min1))\n\n\nExplanation:\nThis solution works by first finding the first minimum in the array, then finding the second minimum which is not included in the range from the first minimum to the end of the array. The distance between the two minimums is then calculated by subtracting the index of the first minimum from the index of the second minimum.\n\nThe index() function is used to find the index of a value in the list, and the min() function is used to find the minimum value in a list. The second min() call is limited to the part of the list after the first min, to ensure that the second min is not the same as the first min.\n\nThe final result is printed to the console."], "prompt": "\nQUESTION:\nYou are given an array of n integer numbers a_0, a_1, ..., a_{n} - 1. Find the distance between two closest (nearest) minimums in it. It is guaranteed that in the array a minimum occurs at least two times.\n\n\n-----Input-----\n\nThe first line contains positive integer n (2 \u2264 n \u2264 10^5) \u2014 size of the given array. The second line contains n integers a_0, a_1, ..., a_{n} - 1 (1 \u2264 a_{i} \u2264 10^9) \u2014 elements of the array. It is guaranteed that in the array a minimum occurs at least two times.\n\n\n-----Output-----\n\nPrint the only number \u2014 distance between two nearest minimums in the array.\n\n\n-----Examples-----\nInput\n2\n3 3\n\nOutput\n1\n\nInput\n3\n5 6 5\n\nOutput\n2\n\nInput\n9\n2 1 3 5 4 1 2 3 1\n\nOutput\n3\nPlease provide the solution as pure code only, without explanations or comments.\n\nANSWER:\n```python\n"}}