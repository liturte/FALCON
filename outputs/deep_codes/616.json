{"616": {"code": ["from scipy.sparse.csgraph import minimum_spanning_tree\nfrom scipy.sparse import csr_matrix\nfrom heapq import heappop, heappush\n\nN, M = map(int, input().split())\nG = [[] for _ in range(N+1)]\nfor _ in range(M):\n    a, b = map(", "from scipy.sparse.csgraph import csgraph_from_dense, minimum_spanning_tree\nfrom scipy.sparse import csr_matrix\nfrom itertools import combinations\n\nN, M = map(int, input().split())\nkeys = [list(map(int, input().split())) for _ in range(M)]\nboxes = [list", "from sys import stdin\nfrom itertools import combinations\nfrom functools import reduce\n\ndef read_int():\n    return int(stdin.readline().strip())\n\ndef read_ints():\n    return list(map(int, stdin.readline().strip().split()))\n\ndef solve():\n    N, M = read_int(), read_int()\n    keys", "from scipy.sparse.csgraph import shortest_path\nfrom scipy.sparse import csr_matrix\nimport sys\n\ndef main():\n    N, M = map(int, sys.stdin.readline().split())\n    keys = [list(map(int, sys.stdin.readline().split())) for _ in range(M)]", "from scipy.sparse.csgraph import minimum_spanning_tree\nfrom itertools import combinations\nimport sys\n\ndef solve():\n    N, M = map(int, sys.stdin.readline().split())\n    keys = [list(map(int, sys.stdin.readline().split())) for _ in range(M)]\n    graph = [[0]"], "prompt": "\nQUESTION:\nWe have N locked treasure boxes, numbered 1 to N.\nA shop sells M keys. The i-th key is sold for a_i yen (the currency of Japan), and it can unlock b_i of the boxes: Box c_{i1}, c_{i2}, ..., c_{i{b_i}}. Each key purchased can be used any number of times.\nFind the minimum cost required to unlock all the treasure boxes. If it is impossible to unlock all of them, print -1.\n\n-----Constraints-----\n - All values in input are integers.\n - 1 \\leq N \\leq 12\n - 1 \\leq M \\leq 10^3\n - 1 \\leq a_i \\leq 10^5\n - 1 \\leq b_i \\leq N\n - 1 \\leq c_{i1} < c_{i2} < ... < c_{i{b_i}} \\leq N\n\n-----Input-----\nInput is given from Standard Input in the following format:\nN M\na_1 b_1\nc_{11} c_{12} ... c_{1{b_1}}\n:\na_M b_M\nc_{M1} c_{M2} ... c_{M{b_M}}\n\n-----Output-----\nPrint the minimum cost required to unlock all the treasure boxes.\nIf it is impossible to unlock all of them, print -1.\n\n-----Sample Input-----\n2 3\n10 1\n1\n15 1\n2\n30 2\n1 2\n\n-----Sample Output-----\n25\n\nWe can unlock all the boxes by purchasing the first and second keys, at the cost of 25 yen, which is the minimum cost required.\nPlease provide the solution as pure code only, without explanations or comments.\n\nANSWER:\n```python\n"}}