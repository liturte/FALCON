{"4888": {"code": ["n, T = map(int, input().split())\ntimes = list(map(int, input().split()))\n\ntotal_time = 0\nfor i in range(n):\n    total_time += times[i]\n    if total_time > T:\n        print(i)\n        break\nelse:\n    print(n)\n\n\nExplanation:\nThis solution works by iterating over the list of task times and adding them to a running total. When the total time", "n, T = map(int, input().split())\ntimes = list(map(int, input().split()))\n\ntotal = 0\nfor i in range(n):\n    if total + times[i] > T:\n        break\n    total += times[i]\n\nprint(i+1)\n\n\nExplanation:\nWe first read in the number of tasks `n` and the total time `T`. We then read in the times it takes for each task and store", "n, T = map(int, input().split())\ntimes = list(map(int, input().split()))\n\ntotal = 0\nfor i in range(n):\n    if total + times[i] > T:\n        print(i)\n        break\n    else:\n        total += times[i]\nelse:\n    print(n)\n\n\nThis Python program first reads the number of tasks `n` and the total time `T`. Then it reads the time taken", "n, T = map(int, input().split())\ntimes = list(map(int, input().split()))\n\ntotal_time = 0\nfor i in range(n):\n    if total_time + times[i] <= T:\n        total_time += times[i]\n    else:\n        print(i)\n        break\nelse:\n    print(n)\n\n\nThis Python script first reads the number of tasks `n` and the maximum time `T`,", "n, T = map(int, input().split())\ntasks = list(map(int, input().split()))\n\ntotal = 0\nfor i in range(n):\n    if total + tasks[i] > T:\n        break\n    total += tasks[i]\n\nprint(i + 1)\n\n\nExplanation:\nWe first read the number of tasks and the maximum time the server can run. Then we read the times it takes for each task. We keep adding tasks"], "prompt": "\nQUESTION:\nYou are in charge of a server that needs to run some submitted tasks on a first-come, first-served basis. Each day, you can dedicate the server to run these tasks for at most $T$ minutes. Given the time each task takes, you want to know how many of them will be finished today.\n\nConsider the following example. Assume $T = 180$ and the tasks take $45, 30, 55, 20, 80,$ and $20$ minutes (in order they are submitted). Then, only four tasks can be completed. The first four tasks can be completed because they take $150$ minutes, but not the first five, because they take $230$ minutes which is greater than $180$. Notice that although there is enough time to perform the sixth task (which takes $20$ minutes) after completing the fourth task, you cannot do that because the fifth task is not done yet.\n\n-----Input-----\nThe input consists of a single test case. The first line contains two integers $n$ and $T$ where $1 \\le n \\le 50$ is the number of tasks and $1 \\le T \\le 500$. The next line contains $n$ positive integers no more than $100$ indicating how long each task takes in order they are submitted.\n\n-----Output-----\nDisplay the number of tasks that can be completed in $T$ minutes on a first-come, first-served basis.\n\n-----Examples-----\nSample Input:\n6 180\n45 30 55 20 80 20\nSample Output:\n4\nPlease provide the solution as pure code only, without explanations or comments.\n\nANSWER:\n```python\n"}}