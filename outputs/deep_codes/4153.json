{"4153": {"code": ["def max_removable_cubes(S: str) -> int:\n    stack = []\n    removable_cubes = 0\n\n    for c in S:\n        if c == '1':\n            stack.append(c)\n        elif stack:\n            stack.pop()\n            removable_cubes += 1\n\n    return removable_cubes\n\nS = input()\nprint(max_removable_cubes(S))\n\n\nThis solution works by iterating over the string S from bottom to top. If it encounters a '1', it pushes it onto a stack. If it encounters a '0', it pops a cube from the stack (if there is one) and increments the count of removable cubes. The final count is the maximum number of cubes that can be removed.\n\nThe time complexity of this solution is O(N", "def max_removable_cubes(s: str) -> int:\n    stack = []\n    removable_cubes = 0\n\n    for cube in s:\n        if cube == '1':\n            stack.append(cube)\n        else:\n            if stack and stack[-1] == '1':\n                stack.pop()\n                removable_cubes += 1\n            else:\n                stack.append(cube)\n\n    return removable_cubes\n\ns = input()\nprint(max_removable_cubes(s))\n\n\nThis solution works by using a stack to keep track of the cubes that have not been matched with a red cube yet. When a red cube is encountered, it checks if the top of the stack is a blue cube. If it is, they can be removed, and the red cube is added", "def max_removable_cubes(s):\n    count = 0\n    stack = []\n    for c in s:\n        if c == '1':\n            stack.append(c)\n        elif stack and stack[-1] == '0':\n            stack.pop()\n            count += 1\n        else:\n            stack.append(c)\n    return count\n\ns = input()\nprint(max_removable_cubes(s))\n\n\nExplanation:\nThis problem can be solved by using a stack. We iterate through the string and push each cube onto the stack. If we encounter a blue cube and the top of the stack is red, we pop the red cube from the stack and increment the count. If the top of the stack is not red, we just push the blue cube onto the stack. At the end, the count will be the maximum number of cubes", "n = int(input())\ns = input()\n\nreds = [0]*(n+1)\nblues = [0]*(n+1)\n\nfor i in range(n):\n    if s[i] == '0':\n        reds[i+1] = reds[i] + 1\n        blues[i+1] = blues[i]\n    else:\n        blues[i+1] = blues[i] + 1\n        reds[i+1] = reds[i]\n\nprint(max(reds[-1], blues[-1]))\n\n\nThis solution uses dynamic programming to track the maximum number of cubes that can be removed with the condition that no two adjacent cubes of the same color are removed. The `reds` and `blues` arrays keep track of the maximum number of red or blue cubes that can be removed up to", "def max_cubes_removed():\n    S = input()\n    N = len(S)\n    reds = S.count('0')\n    blues = N - reds\n    return min(reds, blues)\n\nprint(max_cubes_removed())\n\n\nExplanation:\nThis problem can be solved by counting the number of red and blue cubes and returning the minimum of these two counts. This is because you can always remove a pair of adjacent cubes that are of different colors, and this will leave a cube of the same color on top of the removed cubes. Therefore, the maximum number of cubes that can be removed is the minimum number of red or blue cubes.\n\"\"\"\n\n\n# Test case 1\nprint(max_cubes_removed(\"0011\"))  # Expected output: 2\n\n# Test case 2\nprint"], "prompt": "\nQUESTION:\nThere are N cubes stacked vertically on a desk.\nYou are given a string S of length N. The color of the i-th cube from the bottom is red if the i-th character in S is 0, and blue if that character is 1.\nYou can perform the following operation any number of times: choose a red cube and a blue cube that are adjacent, and remove them. Here, the cubes that were stacked on the removed cubes will fall down onto the object below them.\nAt most how many cubes can be removed?\n\n-----Constraints-----\n - 1 \\leq N \\leq 10^5\n - |S| = N\n - Each character in S is 0 or 1.\n\n-----Input-----\nInput is given from Standard Input in the following format:\nS\n\n-----Output-----\nPrint the maximum number of cubes that can be removed.\n\n-----Sample Input-----\n0011\n\n-----Sample Output-----\n4\n\nAll four cubes can be removed, by performing the operation as follows:\n - Remove the second and third cubes from the bottom. Then, the fourth cube drops onto the first cube.\n - Remove the first and second cubes from the bottom.\nPlease provide the solution as pure code only, without explanations or comments.\n\nANSWER:\n```python\n"}}