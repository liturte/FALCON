{"541": {"code": ["import sys\n\ndef read_int():\n    return int(sys.stdin.readline().strip())\n\ndef read_ints():\n    return list(map(int, sys.stdin.readline().strip().split()))\n\nN, M = read_ints()\nrequests = [read_ints() for _ in range(M)]\n\nrequests.sort()\n\nbridges = [0] * (N + 1)\nbridges[0] = 1\nbridges[N] = 1\n\nremoved = 0\nfor a, b in requests:\n    if bridges[a] == 0 and bridges[b] == 0:\n        removed += 1\n    brid", "import sys\n\ndef read_int():\n    return int(sys.stdin.readline())\n\ndef read_ints():\n    return list(map(int, sys.stdin.readline().split()))\n\nN, M = read_ints()\nrequests = [read_ints() for _ in range(M)]\nrequests.sort()\n\nremoved = 0\nlast_b = 0\nfor a, b in requests:\n    if a <= last_b:\n        removed += 1\n        if b < last_b:\n            last_b = b\n    else:\n        last_b = b\n\nprint(removed)\n\n\nThis solution works by", "import sys\n\ndef main():\n    N, M = map(int, sys.stdin.readline().split())\n    requests = [tuple(map(int, sys.stdin.readline().split())) for _ in range(M)]\n    requests.sort(key=lambda x: (x[1], x[0]))\n    removed = 0\n    last_b = 0\n    for a, b in requests:\n        if a < last_b:\n            removed += 1\n        else:\n            last_b = b\n    print(removed)\n\nif __name__ == '__main__':\n    main()\n\nThis solution sorts the requests by the end", "import sys\n\ndef read_input():\n    N, M = map(int, sys.stdin.readline().split())\n    requests = [tuple(map(int, sys.stdin.readline().split())) for _ in range(M)]\n    return N, M, requests\n\ndef solve(N, M, requests):\n    requests.sort()\n    last_end = 0\n    removed_bridges = 0\n    for a, b in requests:\n        if a > last_end:\n            removed_bridges += a - last_end - 1\n        last_end = max(last_end, b)\n    if last_end < N:", "def solve():\n    N, M = map(int, input().split())\n    requests = [tuple(map(int, input().split())) for _ in range(M)]\n    requests.sort()\n    count = [1] * N\n    total = N\n    for a, b in requests:\n        a -= 1\n        b -= 1\n        if count[a] == 0:\n            continue\n        total -= count[a] * (count[a] - 1) // 2\n        total -= count[b] * (count[b] - 1) // 2\n        count[a] += count[b]\n        total += count[a"], "prompt": "\nQUESTION:\nThere are N islands lining up from west to east, connected by N-1 bridges.\nThe i-th bridge connects the i-th island from the west and the (i+1)-th island from the west.\nOne day, disputes took place between some islands, and there were M requests from the inhabitants of the islands:\nRequest i: A dispute took place between the a_i-th island from the west and the b_i-th island from the west. Please make traveling between these islands with bridges impossible.\nYou decided to remove some bridges to meet all these M requests.\nFind the minimum number of bridges that must be removed.\n\n-----Constraints-----\n - All values in input are integers.\n - 2 \\leq N \\leq 10^5\n - 1 \\leq M \\leq 10^5\n - 1 \\leq a_i < b_i \\leq N\n - All pairs (a_i, b_i) are distinct.\n\n-----Input-----\nInput is given from Standard Input in the following format:\nN M\na_1 b_1\na_2 b_2\n:\na_M b_M\n\n-----Output-----\nPrint the minimum number of bridges that must be removed.\n\n-----Sample Input-----\n5 2\n1 4\n2 5\n\n-----Sample Output-----\n1\n\nThe requests can be met by removing the bridge connecting the second and third islands from the west.\nPlease provide the solution as pure code only, without explanations or comments.\n\nANSWER:\n```python\n"}}