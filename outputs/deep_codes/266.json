{"266": {"code": ["def solve(m, s):\n    if s > 9 * m:\n        return -1, -1\n    min_val = max_val = s\n    min_num = max_num = ''\n    for _ in range(m):\n        for d in range(10):\n            if min_val <= d <= max_val:\n                min_num += str(d)\n                max_num += str(9 - d)\n                break\n    return int(min_num), int(max_num[::-1])\n\nm, s = map(int, input().split())\nprint(*solve(m, s))\n\nThis code defines a function `solve(m, s)` that calculates the minimum and maximum possible numbers of length `m` and sum of digits `s`. If no such numbers exist, it returns `-1, -1`. The main part of the code reads the input, calls the `solve` function with the input parameters, and prints the result.\n\nThe function works by iterating over the digits of the numbers from left to right. For each digit, it tries", "m, s = map(int, input().split())\nif s > 9 * m or s < m:\n    print(-1, -1)\nelse:\n    min_num = s if s > 9 else 10 - s\n    max_num = 9 * m\n    min_num += (10 ** (m - 1)) * (s // 9) if s % 9 != 0 else (10 ** m) - 1\n    max_num += (10 ** (m - 1)) * (s // 9) - 1 if s % 9 != 0 else (10 ** m) - 1\n    print(min_num, max_num)\n\nThis solution works by first checking if the sum of the digits (s) is greater than the maximum possible sum (9 * m) or less than the minimum possible sum (m). If so, it prints -1 -1. If not, it calculates the minimum and maximum possible numbers. The minimum possible number is calculated as the sum of the smallest possible number (s % 9 or 10 - s) and the largest possible number (", "m, s = map(int, input().split())\n\nif m * 9 < s or s == 0:\n    print(\"-1 -1\")\nelse:\n    min_num = [0] * m\n    max_num = [0] * m\n    \n    for i in range(m - 1, -1, -1):\n        if i == m - 1:\n            min_num[i] = 1\n            max_num[i] = 9\n            s -= 1\n        else:\n            if s > 9:\n                min_num[i] = 9\n                max_num[i] = 9\n                s -= 9\n            else:\n                min_num[i] = s\n                max_num[i] = s\n                s = 0\n    \n    print(\"\".join(map(str, min_num)), \"\".join(map(str, max_num)))\n\n\nThis code first checks if it's impossible to get a number with the given length and sum of digits. If it's impossible, it prints \"-1 -1\". If it's", "def find_numbers(m, s):\n    if m*9 < s or s == 0 and m > 1:\n        return '-1 -1'\n    min_num = [9]*m if s > 9 else [s] + [0]*(m-1)\n    max_num = [0]*(m-1) + [9]*m if s > 9 else [s]\n    return ''.join(map(str, min_num)), ''.join(map(str, max_num))\n\nm, s = map(int, input().split())\nprint(find_numbers(m, s))\n\n\nEXPLANATION:\nThe solution is based on the observation that the smallest number with length m and sum of digits s is obtained by assigning the largest possible digit to the first position, then the next largest possible digit to the next position, and so on. The largest number is obtained by the opposite process.\n\nIn the case when s > 9, the largest possible digit is 9, so we can assign it to the first position and the remaining sum s-9 to the remaining positions. The smallest number", "m, s = map(int, input().split())\nif s > 9 * m or s < m:\n    print(-1, -1)\nelse:\n    min_num = s - 1 if m != 1 else s\n    max_num = [9] * m if s != 0 else [0]\n    print(int(''.join(map(str, min_num + max_num[::-1]))), int(''.join(map(str, max_num + min_num[::-1]))))\n\n\nEXPLANATION:\nThe solution is based on the observation that the minimum number can be obtained by subtracting 1 from the sum of digits and the maximum number can be obtained by using 9 as many times as possible and then reversing the digits. \n\nFirst, it checks if the sum of digits (s) is greater than 9 times the length of the number (m). If it is, it prints \"-1 -1\" because it is impossible to obtain a number with such sum of digits. \n\nIf it is possible, it calculates the minimum number and the maximum number."], "prompt": "\nQUESTION:\nYou have a positive integer m and a non-negative integer s. Your task is to find the smallest and the largest of the numbers that have length m and sum of digits s. The required numbers should be non-negative integers written in the decimal base without leading zeroes.\n\n\n-----Input-----\n\nThe single line of the input contains a pair of integers m, s (1 \u2264 m \u2264 100, 0 \u2264 s \u2264 900) \u2014 the length and the sum of the digits of the required numbers.\n\n\n-----Output-----\n\nIn the output print the pair of the required non-negative integer numbers \u2014 first the minimum possible number, then \u2014 the maximum possible number. If no numbers satisfying conditions required exist, print the pair of numbers \"-1 -1\" (without the quotes).\n\n\n-----Examples-----\nInput\n2 15\n\nOutput\n69 96\n\nInput\n3 0\n\nOutput\n-1 -1\nPlease provide the solution as pure code only, without explanations or comments.\n\nANSWER:\n```python\n"}}