{"2324": {"code": ["def palindromic_characteristics(s):\n    n = len(s)\n    res = [0] * n\n    count = [[[0] * 26 for _ in range(n)] for _ in range(n)]\n    dp = [[0] * n for", "s = input().strip()\nn = len(s)\n\n# Create a list of prefixes and suffixes\nprefix = [0]*n\nsuffix = [0]*n\nnext_prefix = [0]*n\nnext_suffix = [0]*n\ncount", "s = input()\nn = len(s)\np = [0] * (2*n + 1)\nh = [0] * (2*n + 1)\np[0] = p[1] = 1\nh[0] = 0\nfor i in range(1", "def palindromic_characteristics(s):\n    n = len(s)\n    res = [0] * n\n    cnt = [[0] * 26 for _ in range(n)]\n    cnt[0][ord(s[0]) - ord('a')", "def count_palindromes(s):\n    n = len(s)\n    res = [0]*(n+1)\n    prefix = [0]*n\n    suffix = [0]*n\n    p = [0]*n\n    for i in range(n"], "prompt": "\nQUESTION:\nPalindromic characteristics of string s with length |s| is a sequence of |s| integers, where k-th number is the total number of non-empty substrings of s which are k-palindromes.\n\nA string is 1-palindrome if and only if it reads the same backward as forward.\n\nA string is k-palindrome (k > 1) if and only if:   Its left half equals to its right half.  Its left and right halfs are non-empty (k - 1)-palindromes. \n\nThe left half of string t is its prefix of length \u230a|t| / 2\u230b, and right half\u00a0\u2014 the suffix of the same length. \u230a|t| / 2\u230b denotes the length of string t divided by 2, rounded down.\n\nNote that each substring is counted as many times as it appears in the string. For example, in the string \"aaa\" the substring \"a\" appears 3 times.\n\n\n-----Input-----\n\nThe first line contains the string s (1 \u2264 |s| \u2264 5000) consisting of lowercase English letters.\n\n\n-----Output-----\n\nPrint |s| integers\u00a0\u2014 palindromic characteristics of string s.\n\n\n-----Examples-----\nInput\nabba\n\nOutput\n6 1 0 0 \n\nInput\nabacaba\n\nOutput\n12 4 1 0 0 0 0 \n\n\n\n-----Note-----\n\nIn the first example 1-palindromes are substring \u00aba\u00bb, \u00abb\u00bb, \u00abb\u00bb, \u00aba\u00bb, \u00abbb\u00bb, \u00ababba\u00bb, the substring \u00abbb\u00bb is 2-palindrome. There are no 3- and 4-palindromes here.\nPlease provide the solution as pure code only, without explanations or comments.\n\nANSWER:\n```python\n"}}