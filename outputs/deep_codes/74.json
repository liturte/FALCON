{"74": {"code": ["def find_prime(n):\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    for prime in primes:\n        if prime > n:\n            break\n        if n % prime == 0:\n            return prime\n    return None\n\ndef solve(n):\n    if n % 2 == 0:\n        n += 1\n    primes = []", "from sympy import isprime\n\ndef prime_partition(n):\n    primes = [i for i in range(2, n) if isprime(i)]\n    for i in primes:\n        if isprime(n - i):\n            return [i, n - i]\n    for i in primes:\n        for j in primes:\n            if isprime(n - i - j):\n                return [i, j, n - i - j]\n    for i in primes:\n        for j in primes:\n            for k in primes:\n                if isprime(n - i - j - k):\n                    return [i, j, k, n - i - j - k]\n\nn = int(input())", "def prime_check(n):\n    if n == 2 or n == 3: return True\n    if n < 2 or n%2 == 0: return False\n    if n < 9: return True\n    if n%3 == 0: return False\n    r = int(n**0.5)\n    f = 5\n    while f <= r:\n        if n%f == 0: return False\n        if n%(f+2) == 0: return False\n        f +=6\n    return True\n\ndef prime_sum(n):\n    if n < 8:\n        return [n]\n    if n == 9:\n        return [3, 3, 3]\n    if n == 11:\n        return [3, 3,", "from sympy import isprime\n\ndef prime_partition(n):\n    primes = [p for p in range(2, n) if isprime(p)]\n    for i in range(len(primes)):\n        for j in range(i+1, len(primes)):\n            for k in range(j+1, len(primes)):\n                if primes[i] + primes[j] + primes[k] == n:\n                    return [3, primes[i], primes[j], primes[k]]\n    return [2, n//2, n//2] if n%2==0 else [1, n]\n\nn = int(input())\nresult = prime_partition(n)", "def is_prime(n):\n    if n == 2 or n == 3:\n        return True\n    if n < 2 or n % 2 == 0:\n        return False\n    for i in range(3, int(n**0.5)+1, 2):\n        if n % i == 0:\n            return False\n    return True\n\ndef find_primes(n):\n    primes = []\n    for i in range(2, n):\n        if is_prime(i):\n            primes.append(i)\n    return primes\n\ndef represent(n):\n    primes = find_primes(n)\n    representation = []\n    for prime in primes:\n        if sum(representation) + prime"], "prompt": "\nQUESTION:\nDima loves representing an odd number as the sum of multiple primes, and Lisa loves it when there are at most three primes. Help them to represent the given number as the sum of at most than three primes.\n\nMore formally, you are given an odd numer n. Find a set of numbers p_{i} (1 \u2264 i \u2264 k), such that\n\n\n\n 1 \u2264 k \u2264 3\n\n p_{i} is a prime\n\n $\\sum_{i = 1}^{k} p_{i} = n$\n\nThe numbers p_{i} do not necessarily have to be distinct. It is guaranteed that at least one possible solution exists.\n\n\n-----Input-----\n\nThe single line contains an odd number n (3 \u2264 n < 10^9).\n\n\n-----Output-----\n\nIn the first line print k (1 \u2264 k \u2264 3), showing how many numbers are in the representation you found.\n\nIn the second line print numbers p_{i} in any order. If there are multiple possible solutions, you can print any of them.\n\n\n-----Examples-----\nInput\n27\n\nOutput\n3\n5 11 11\n\n\n\n-----Note-----\n\nA prime is an integer strictly larger than one that is divisible only by one and by itself.\nPlease provide the solution as pure code only, without explanations or comments.\n\nANSWER:\n```python\n"}}