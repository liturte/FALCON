{"2080": {"code": ["def", "def", "def", "def", "def"], "prompt": "\nQUESTION:\nIvan is developing his own computer game. Now he tries to create some levels for his game. But firstly for each level he needs to draw a graph representing the structure of the level.\n\nIvan decided that there should be exactly n_{i} vertices in the graph representing level i, and the edges have to be bidirectional. When constructing the graph, Ivan is interested in special edges called bridges. An edge between two vertices u and v is called a bridge if this edge belongs to every path between u and v (and these vertices will belong to different connected components if we delete this edge). For each level Ivan wants to construct a graph where at least half of the edges are bridges. He also wants to maximize the number of edges in each constructed graph.\n\nSo the task Ivan gave you is: given q numbers n_1, n_2, ..., n_{q}, for each i tell the maximum number of edges in a graph with n_{i} vertices, if at least half of the edges are bridges. Note that the graphs cannot contain multiple edges or self-loops.\n\n\n-----Input-----\n\nThe first line of input file contains a positive integer q (1 \u2264 q \u2264 100 000) \u2014 the number of graphs Ivan needs to construct.\n\nThen q lines follow, i-th line contains one positive integer n_{i} (1 \u2264 n_{i} \u2264 2\u00b710^9) \u2014 the number of vertices in i-th graph.\n\nNote that in hacks you have to use q = 1.\n\n\n-----Output-----\n\nOutput q numbers, i-th of them must be equal to the maximum number of edges in i-th graph.\n\n\n-----Example-----\nInput\n3\n3\n4\n6\n\nOutput\n2\n3\n6\n\n\n\n-----Note-----\n\nIn the first example it is possible to construct these graphs:  1 - 2, 1 - 3;  1 - 2, 1 - 3, 2 - 4;  1 - 2, 1 - 3, 2 - 3, 1 - 4, 2 - 5, 3 - 6.\nPlease provide the solution as pure code only, without explanations or comments.\n\nANSWER:\n```python\n"}}