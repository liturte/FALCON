{"3328": {"code": ["from itertools import combinations\n\ndef min_visible_fields(N, K, table):\n    visible_fields = sum(table[i][j] for i in range(N) for j in range(N))\n    for i in range(N):\n        row_fields = [table[i][j+1]-table[i][j] if j+1<N else 0 for j in range(N)]\n        for combo in combinations(row_fields, K):\n            combo = sorted(combo)\n            temp_fields = sum(row", "import sys\n\ndef solve():\n    N, K = map(int, sys.stdin.readline().split())\n    mat = [list(map(int, sys.stdin.readline().split())) for _ in range(N)]\n    ans = float('inf')\n    for bit in range(1 << N):\n        temp = [row[:] for row in mat]\n        cnt = 0\n        for i in range(N):\n            if (bit & (1 << i)) > 0:\n                cnt += 1", "def min_visible_fields(N, K, table):\n    # Flatten the 2D table to 1D\n    flat_table = [item for sublist in table for item in sublist]\n    # Sort the flattened table\n    flat_table.sort()\n    # The visible fields are the ones which are not covered by the dominoes\n    # So, we need to add the smallest K numbers from the sorted flattened table\n    return sum(flat_table[:K])\n\nN, K = map(int, input().split", "import sys\n\ndef min_visible(N, K, table):\n    def cover(row):\n        return min(table[row][i:i+3] for i in range(N-2))\n\n    def switch(i, j):\n        for x in range(N):\n            table[x][i], table[x][j] = table[x][j], table[x][i]\n\n    table = [[table[j][i] for j in range(N)] for i in range(N)]\n    table = [sorted", "import sys\n\ndef min_visible_fields(n, k, table):\n    min_sum = sys.maxsize\n    for row in range(2**n):\n        if bin(row).count('1') != k: continue\n        new_table = [list(i) for i in table]\n        for j in range(n):\n            if ((row >> j) & 1):\n                for i in range(n):\n                    new_table[i][j] = 0 if new_table[i][j] else 1"], "prompt": "\nQUESTION:\nMirko received an $N \\times N$ table for his birthday, where a non-negative integer is written in each field of the table. Unfortunately, the written numbers are too large for Mirko\u2019s taste, so he will place $K$ dominoes on top of the table that will cover the fields that are too large. More precisely, Mirko places the dominoes according to the following rules:\n - each domino covers two fields of the table that are adjacent in a row or in a column,\n - the dominoes do not overlap (but can touch),\n - the sum of all visible (uncovered) fields needs to be as small as possible.\n\nIt is your task to determine the required minimal sum of visible fields. The test data will be such that it will always be possible to place $K$ dominoes without overlapping.\n\n-----Input-----\nThe first line of input contains the integers $N$ ($1 \\leq N \\leq 2000$), the dimensions of the table, and $K$ ($1 \\leq K \\leq 8$), the number of dominoes. Each of the following $N$ lines contains $N$ integers from the interval $[0, 1000]$. These $N \\times N$ numbers describe Mirko\u2019s table.\n\n-----Output-----\nThe first and only line of output must contain the minimal sum of visible fields after covering the table with dominoes.\n\n-----Examples-----\nSample Input:\n3 1\n2 7 6\n9 5 1\n4 3 8\nSample Output:\n31\nPlease provide the solution as pure code only, without explanations or comments.\n\nANSWER:\n```python\n"}}