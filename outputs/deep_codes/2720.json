{"2720": {"code": ["R, C = map(int, input().split())\nmaze = [input() for _ in range(R)]\n\nodd_squares = sum(i%2==j%2 for i in range(R) for j in range(C))\n\nprint(min(odd_squares, R*C-odd_squares))\n\n\nExplanation:\nThe", "def min_walls_to_remove(R, C, maze):\n    min_walls = 0\n    for i in range(R):\n        for j in range(C-1):\n            if maze[i][j] == '/' and maze[i][j+1] == '\\\\':\n                min_walls += 1\n    return min_w", "def solve(R, C, maze):\n    def is_outside(r, c):\n        return r < 0 or c < 0 or r >= R or c >= C\n\n    def dfs(r, c):\n        if is_outside(r, c) or (r, c) in visited or maze[r][c] == '.':\n            return", "def solve(R, C, maze):\n    def is_wall(i, j):\n        return maze[i][j] == '/' or maze[i][j] == '\\\\'\n\n    def is_odd(i, j):\n        return (i + j) % 2 == 1\n\n    def is_even(i, j):\n        return", "def min_walls_to_remove(maze):\n    R, C = len(maze), len(maze[0])\n    def is_valid(x, y):\n        return 0 <= x < R and 0 <= y < C and maze[x][y] != '.'\n    def is_wall(x, y):\n        return maze"], "prompt": "\nQUESTION:\nGiven an orthogonal maze rotated $45$ degrees and drawn with forward and backward slash characters (see below), determine the minimum number of walls that need to be removed to ensure it is possible to escape outside of the maze from every region of the (possibly disconnected) maze.\n\n/\\\n\\/\n\nThis maze has only a single region fully enclosed. Removing any wall connects it to the outside.\n\n/\\..\n\\.\\.\n.\\/\\\n..\\/\n\nThis maze has two enclosed areas. Two walls need to be removed to connect all regions to the outside.\n\n-----Input-----\nThe first line has two numbers, $R$ and $C$, giving the number of rows and columns in the maze\u2019s input description. Following this are $R$ lines each with $C$ characters, consisting only of the characters \u2018/\u2019, \u2018\\\u2019, and \u2018.\u2019. Both $R$ and $C$ are in the range $1\\ldots 1000$.\n\nDefine an odd (even) square as one where the sum of the $x$ and $y$ coordinates is odd (even). Either all forward slashes are in the odd squares and all backslashes in the even squares, or vice versa.\n\n-----Output-----\nOutput on a single line an integer indicating how many walls need to be removed so escape is possible from every region in the maze.\n\n-----Examples-----\nSample Input 1:\n2 2\n/\\\n\\/\nSample Output 1:\n1\n\nSample Input 2:\n4 4\n/\\..\n\\.\\.\n.\\/\\\n..\\/\nSample Output 2:\n2\n\nSample Input 3:\n2 2\n\\/\n/\\\nSample Output 3:\n0\nPlease provide the solution as pure code only, without explanations or comments.\n\nANSWER:\n```python\n"}}