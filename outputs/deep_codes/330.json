{"330": {"code": ["def solve(p, y):\n    for i in range(y, p-1, -1):\n        flag = True\n        for j in range(2, int(i**0.5)+1):\n            if i % j == 0:\n                if max(j, i//j) <= y and max(j, i//j) >= p:\n                    flag = False\n                    break\n        if flag:\n            return i", "def highest_branch():\n    p, y = map(int, input().split())\n    for x in range(y, p-1, -1):\n        if all(gcd(x, y) == 1 for y in range(2, x)):\n            return x\n    return -1\n\ndef gcd(x, y):\n    while y:\n        x, y = y, x % y\n    return x", "def highest_branch(p, y):\n    for x in range(y, 1, -1):\n        if all(g % x != 0 for g in range(2, y+1)):\n            return x\n    return -1\n\np, y = map(int, input().split())\nprint(highest_branch(p, y))\n\n\nEXPLANATION:\nThe code takes input p and y and", "p, y = map(int, input().split())\n\nfor i in range(y, p-1, -1):\n    grasshoppers_jump = [i]\n    j = 2\n    while i * j <= y:\n        grasshoppers_jump.append(i*j)\n        j += 1\n    if all(i not in range(p, y+1) for i in grasshoppers_jump):", "import math\n\np, y = map(int, input().split())\n\nfor x in range(y, p-1, -1):\n    valid = True\n    for n in range(2, math.floor(y/x)+1):\n        if x*n <= y:\n            valid = False\n            break\n    if valid:\n        print(x)\n        break\nelse:\n        print(-1)"], "prompt": "\nQUESTION:\nThe weather is fine today and hence it's high time to climb the nearby pine and enjoy the landscape.\n\nThe pine's trunk includes several branches, located one above another and numbered from 2 to y. Some of them (more precise, from 2 to p) are occupied by tiny vile grasshoppers which you're at war with. These grasshoppers are known for their awesome jumping skills: the grasshopper at branch x can jump to branches $2 \\cdot x, 3 \\cdot x, \\ldots, \\lfloor \\frac{y}{x} \\rfloor \\cdot x$.\n\nKeeping this in mind, you wisely decided to choose such a branch that none of the grasshoppers could interrupt you. At the same time you wanna settle as high as possible since the view from up there is simply breathtaking.\n\nIn other words, your goal is to find the highest branch that cannot be reached by any of the grasshoppers or report that it's impossible.\n\n\n-----Input-----\n\nThe only line contains two integers p and y (2 \u2264 p \u2264 y \u2264 10^9).\n\n\n-----Output-----\n\nOutput the number of the highest suitable branch. If there are none, print -1 instead.\n\n\n-----Examples-----\nInput\n3 6\n\nOutput\n5\n\nInput\n3 4\n\nOutput\n-1\n\n\n\n-----Note-----\n\nIn the first sample case grasshopper from branch 2 reaches branches 2, 4 and 6 while branch 3 is initially settled by another grasshopper. Therefore the answer is 5.\n\nIt immediately follows that there are no valid branches in second sample case.\nPlease provide the solution as pure code only, without explanations or comments.\n\nANSWER:\n```python\n"}}