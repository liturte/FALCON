{"3932": {"code": ["def check_tree(n, c):\n    if n == 1:\n        return True\n    if n == 2:\n        return False\n    if n == 3:\n        return c[1] > 1\n    if n == 4:\n        return c[1] > 1 and c[2] > 1\n    if n == 5:\n        return c[1] > 1 and c[2] > 1 and c[3] > 1 and c[4] > 1\n    return False\n\nn = int(input())", "def solve(n, c):\n    if n == 1 or n == 2:\n        return 'NO'\n    else:\n        return 'YES'\n\nn = int(input())\nc = list(map(int, input().split()))\nprint(solve(n, c))\n\nExplanation:\nThe problem can be solved by observing that the tree should have at least two nodes at each level, except for the root. If the root has only one child, that child must have at least two children, and so on.", "def solve(n, c):\n    if n == 1:\n        return \"NO\"\n    if n == 2:\n        return \"YES\" if c[0] == 1 and c[1] == 1 else \"NO\"\n    if sum(c) % 2 == 0:\n        return \"YES\"\n    return \"NO\"\n\nn = int(input())\nc = list(map(int, input().split()))\nprint(solve(n, c))\n\n\nThis solution works by checking the sum", "def solve(n, c):\n    if n > 1 and max(c) >= 3:\n        return \"YES\"\n    else:\n        return \"NO\"\n\nn = int(input())\nc = list(map(int, input().split()))\nprint(solve(n, c))\n\n\nEXPLANATION:\nThis is a python solution to the problem. The problem can be solved by simply checking if there are any nodes in the tree with more than two children or if there are any nodes in the tree with a", "def solve():\n    n = int(input())\n    c = list(map(int, input().split()))\n    c.sort(reverse=True)\n    total = sum(c)\n    if total < n or c[0] > n or c[0] - n > c[1]:\n        return \"NO\"\n    return \"YES\"\n\nprint(solve())\n\nThis code works by first sorting the list of node counts in descending order. It then checks if the total number of nodes is less"], "prompt": "\nQUESTION:\nIahub and Iahubina went to a picnic in a forest full of trees. Less than 5 minutes passed before Iahub remembered of trees from programming. Moreover, he invented a new problem and Iahubina has to solve it, otherwise Iahub won't give her the food. \n\nIahub asks Iahubina: can you build a rooted tree, such that\n\n  each internal node (a node with at least one son) has at least two sons;  node i has c_{i} nodes in its subtree? \n\nIahubina has to guess the tree. Being a smart girl, she realized that it's possible no tree can follow Iahub's restrictions. In this way, Iahub will eat all the food. You need to help Iahubina: determine if there's at least one tree following Iahub's restrictions. The required tree must contain n nodes.\n\n\n-----Input-----\n\nThe first line of the input contains integer n (1 \u2264 n \u2264 24). Next line contains n positive integers: the i-th number represents c_{i} (1 \u2264 c_{i} \u2264 n).\n\n\n-----Output-----\n\nOutput on the first line \"YES\" (without quotes) if there exist at least one tree following Iahub's restrictions, otherwise output \"NO\" (without quotes). \n\n\n-----Examples-----\nInput\n4\n1 1 1 4\n\nOutput\nYES\nInput\n5\n1 1 5 2 1\n\nOutput\nNO\nPlease provide the solution as pure code only, without explanations or comments.\n\nANSWER:\n```python\n"}}