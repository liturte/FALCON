{"2467": {"code": ["n: int) -> List[List[int]]list ofink:n: int) -> List[int]list ofn: int) ->tuple:(k, n) ->(n: int) ->list of:0) ->)( n )] : return([ n ] )[ n ] )if ( n ==)if (", "= 0, n =2, 2, 4]3, n ==2,= [1,2,6],[1,3,5],[1,3,4]]=[2,3,4]][1,2,6], [2,3,5],2,3,4]],2:\nANSE:2:\nANSE:[", "= [1,2,6],[2,3,5], [2,3,4]]=[1,2,6], [1,3,5], [2,3,4]]k=n=5, n=9][1,2,6], [1,3,5],[2,3,4]]: return=.=== [", "k: int, n:(n) -> List[List[int]]:\nANSI:(k,n) -> List[List[int]]:\nANSI=1, n: int) ->self.k in range(k)] ) :] ):( n )n ) :nn, n) ->k, n) ->)n ) :", "n: int, n2: int,n1, n2, n3, n5, n6,n = n,1, n=9):n2,= n,n2,,n2, n4,n, n8,n8, n8,n8, n8, n8, n8, n8,n8, n8, n", "k: int, n: int= n,=n )( self, k,n )))n )[ n ]]n )()()k, n ) )( self)] =( self,)], n )( selfn )( self,", "( self,,, n : int) -> List[List[int]]:\nANALYSIS() : return= 2, n=n =,2:n, n: int) ->) -> List[List[int]]:\nANALYSIS def=(, n ), n ); return n( selfnn )if) {", "3, n: int]3, n: int]n: int]int]:\nANSE=n: int, n: int]:[1,3,5], [2,3,4], [2,3,6],[1,3,5],[2,3,4]][1,2,6], [2,3,5], [2,3,4]]", "k, n: int)k, n: int)) : returnself,).() : return( ).kn = n ) )(( ).)..( ).( ).( ) )]:)), n) )]] )", "list of1, 2,2, 2, 4]1, 2,n:3,] for i in()ki ] =[[ 2, 3,4]1 ]] = [ 1,[ 2[ 2, 3 ][[ 2]] :][ 2 ][ 1 ] :,]"], "prompt": "\nQUESTION:\nFind all possible combinations of k numbers that add up to a number n, given that only numbers from 1 to 9 can be used and each combination should be a unique set of numbers.\n\nNote:\n\n\n       All numbers will be positive integers.\n       The solution set must not contain duplicate combinations.\n\n\nExample 1:\n\n\nInput: k = 3, n = 7\nOutput: [[1,2,4]]\n\n\nExample 2:\n\n\nInput: k = 3, n = 9\nOutput: [[1,2,6], [1,3,5], [2,3,4]]\nclass Solution:\n    def combinationSum3(self, k: int, n: int) -> List[List[int]]:\n        \nUse Call-Based format\nANSWER:\n"}}