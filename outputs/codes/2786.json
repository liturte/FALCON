{"2786": {"code": ["regular bracket-sequenceof.theof thecharacter in theisthecharacter in thea regular bracket-sequence,andthea regularthenot.ifstring is\". split=.(}. split (. split (", "can bethethethecan bein acharacter, andaregular bracket-sequencea regular bracket-sequencea regular bracket-sequencethetheregular bracket-sequence,thatcorrespondingthe string has beenthethecharacter.theof thethethea regular bracket-sequence,the regular bracket-sequence, the", "aofregular bracket-sequence,) {,, $A$, $B$, $AB$,,) { return( $A$,, $B$(]=, $A$, $B$ ) {$A$,, $B$,, $B$,=; if ()) { return \"\"]", "a regular bracket-sequence[] )) )in theand{{} ]} ] ][ ](] [] [ ] [] )] ) {[] ) {] ) {] ) {)] ) {(] ). split () {", "() {iflength () {() ) {2()( )(\" ))( )}(.( )( ) )( ) )( ) ) { return.((( )", ") { #!/usr/bin/env node( ) { //}=. split ({ // }= [ ] ;) ; } else {[ ] ;if (.,) ; }if (; } else[ ]{ //0 ; }) ) {(\"[{}]()\" )() ) ; } }if ([", "theregular bracket-sequencesa stringa string ofofregularofaofcharacters that arecharacter.andthecharacters are represented by theof the) {({})= { } ;= {:= { } ;= {} ; }", "=$A$ orA$='A''B' ]'B' ] [ 'C''C' ] [ 'A' ]'B' ]]'A' ] )[ 'A' ]'B' ]'B' ] [ 'A' ]'B' ] )]]() )]) { if ((", "sequence.sequenceintheregularof.{)}).(; } }(output0 :output:format:; }the( ) ;) ; }:: {", "regular bracket-sequencesregularnot regular,\u201c[{}](){}\u201d areregular, andtheof regularthecharactersthe last characterof theof thelength of theathethe first linethe first linethestring isof thestringof thethe lastit could be athethe string is a"], "prompt": "\nQUESTION:\nA regular bracket-sequence is a string of characters consisting only of opening and closing brackets, and satisfying the following conditions:\n - An empty string is a regular bracket-sequence.\n - If $A$ is a regular bracket-sequence, then ($A$), [$A$] and {$A$} are also regular bracket-sequences.\n - If $A$ and $B$ are regular bracket-sequences, then $AB$ is also a regular bracket-sequence.\n\nFor example, the sequences \u201c[({})]\u201d, \u201c[](){}\u201d and \u201c[{}]()[{}]\u201d are regular, but the sequences \u201c[({{([\u201d, \u201c[]({)}\u201d and \u201c[{}])([{}]\u201d are not.\n\nIvica has found a string which looks like it could be a regular bracket-sequence. Some of the characters have become smudged and illegible, and could have been any character.\n\nWrite a program that calculates how many ways the illegible characters in the string can be replaced by brackets so that the result is a regular bracket-sequence. This number can be very large, so output only its last $5$ digits.\n\n-----Input-----\nThe first line contains an even integer $N$ ($2 \\le N \\le 200$), the length of the string. The second line contains the string. Illegible characters are represented by the \u2018?\u2019 character.\n\n-----Output-----\nOutput the number of regular bracket-sequences the string could have read.\n\n-----Examples-----\nSample Input 1:\n6\n()()()\nSample Output 1:\n1\n\nSample Input 2:\n10\n(?([?)]?}?\nSample Output 2:\n3\nUse Standard Input format\nANSWER:\n"}}