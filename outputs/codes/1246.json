{"1246": {"code": ["thetheof theatothethethe indexthethenumber of thein the(1 \u2264 100 000)\u00a0\u2014thethethe number ofthethethe number of thethe numberthethe number of thethe current log.of thethethe number of the records", "in the event log.the.a1the record.thewas..=1.0 ) ). add () ) ). add (;; } }. add () ))0,). add (1 ). add. add () )) ). add", "thetoto thethecurrent log.theresult ofadd the./ 2(1...(. append (( 'Peta11 )). append (.). append (). append (). append (( 'Peta' ). append", "the.thewastheathethe number ofofthe number ofthethethe numberin thein the outputin theof thethevalues in thethethe\"1\"(1 \u2264 n \u2264thethe number ofthe number of the", "thethethe0of thethetheof theis notto be applied. Theof thethethe same(n,arethe1 \u2264 nin theis used.thethein thethe next line isthe first line isnumber of thein the input. The number", "thethe).thelog. Theisthe(n- 1 )\u00a0\u2014 theresult is thethein the current log.the recordbethe result in theof theand thethein theisthelog. The numberin thethethe current logthe number of thein thethethewas added to the", "the( 1 \u2264the number ofthethein theit wasthe heap isathethe currentis aof thethe input isthethea record inthe=.] =.(..) == 0 ) {", "theit isthethebeif the record wasif the record wasthe) {(in the)of thea new()..(( )(.+]... log. format (. log. format (", "()).; if)... add (=. add ( 0,.). add(. add () ; }index in the. add ( 0,indexindexindex). add (.. add ()the record.a result of. add ( 0,", "thetheelementsthe same number inin thethein the event log.thethe log, and itisthethethe log isthelogthetheisthea number ofthein the event log.a number ofof thethe input is a numberof the record in the"], "prompt": "\nQUESTION:\nPetya has recently learned data structure named \"Binary heap\".\n\nThe heap he is now operating with allows the following operations:   put the given number into the heap;  get the value of the minimum element in the heap;  extract the minimum element from the heap; \n\nThus, at any moment of time the heap contains several integers (possibly none), some of them might be equal.\n\nIn order to better learn this data structure Petya took an empty heap and applied some operations above to it. Also, he carefully wrote down all the operations and their results to his event log, following the format:   insert x\u00a0\u2014 put the element with value x in the heap;  getMin x\u00a0\u2014 the value of the minimum element contained in the heap was equal to x;  removeMin\u00a0\u2014 the minimum element was extracted from the heap (only one instance, if there were many). \n\nAll the operations were correct, i.e. there was at least one element in the heap each time getMin or removeMin operations were applied.\n\nWhile Petya was away for a lunch, his little brother Vova came to the room, took away some of the pages from Petya's log and used them to make paper boats.\n\nNow Vova is worried, if he made Petya's sequence of operations inconsistent. For example, if one apply operations one-by-one in the order they are written in the event log, results of getMin operations might differ from the results recorded by Petya, and some of getMin or removeMin operations may be incorrect, as the heap is empty at the moment they are applied.\n\nNow Vova wants to add some new operation records to the event log in order to make the resulting sequence of operations correct. That is, the result of each getMin operation is equal to the result in the record, and the heap is non-empty when getMin ad removeMin are applied. Vova wants to complete this as fast as possible, as the Petya may get back at any moment. He asks you to add the least possible number of operation records to the current log. Note that arbitrary number of operations may be added at the beginning, between any two other operations, or at the end of the log.\n\n\n-----Input-----\n\nThe first line of the input contains the only integer n (1 \u2264 n \u2264 100 000)\u00a0\u2014 the number of the records left in Petya's journal.\n\nEach of the following n lines describe the records in the current log in the order they are applied. Format described in the statement is used. All numbers in the input are integers not exceeding 10^9 by their absolute value.\n\n\n-----Output-----\n\nThe first line of the output should contain a single integer m\u00a0\u2014 the minimum possible number of records in the modified sequence of operations.\n\nNext m lines should contain the corrected sequence of records following the format of the input (described in the statement), one per line and in the order they are applied. All the numbers in the output should be integers not exceeding 10^9 by their absolute value.\n\nNote that the input sequence of operations must be the subsequence of the output sequence.\n\nIt's guaranteed that there exists the correct answer consisting of no more than 1 000 000 operations.\n\n\n-----Examples-----\nInput\n2\ninsert 3\ngetMin 4\n\nOutput\n4\ninsert 3\nremoveMin\ninsert 4\ngetMin 4\n\nInput\n4\ninsert 1\ninsert 1\nremoveMin\ngetMin 2\n\nOutput\n6\ninsert 1\ninsert 1\nremoveMin\nremoveMin\ninsert 2\ngetMin 2\n\n\n\n-----Note-----\n\nIn the first sample, after number 3 is inserted into the heap, the minimum number is 3. To make the result of the first getMin equal to 4 one should firstly remove number 3 from the heap and then add number 4 into the heap.\n\nIn the second sample case number 1 is inserted two times, so should be similarly removed twice.\nUse Standard Input format\nANSWER:\n"}}