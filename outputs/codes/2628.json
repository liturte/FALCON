{"2628": {"code": ["-:::::: int: int: int :: int :: int : int: int: int :: int : int: int): int : intint : int]) : intint : int :: int : intint: int : intint : int :: int : int", "n : int: int: int: int[( n0.0+ n0.0 ) )) : print (0.0 )=() ) : print[ ]]= 0.0: print ()= 0.0): print () print (: print ( \"n\" )\"0\" ) print ()", "#( n ::gray code.( n : int.).(n ).( 0, n0,).).)0, 0).). split[ 0). join ()() ; print () ;..", "n:::::::.::: return] )= 0.0 ;: return []( self )] ) [ 1(.(,),, 3:] ) ;", "-n0.)).( n0 ).n).).( ) )([ n( ).0 ] ).( ) ;]0 ].[ 0 ]0 ]: 0] = 0] ).", "-=() ->) ->= [ ]2:\n\nInput:\u00a002:\nANA-1-1,2:1,3:2,1:1,1:1,2:1,2:1,2:1,3:1,3:2,2:1,3:2,3:1,2:1,1:1,0:1,0", "=[n]1 ].).( self,0) :\" \"return)(). split ()= 1 ]= 0, 3 ]= 0= 0 )( self,] = 0)n ] = 0.0 ], 0[ 0 ]", "n:.0 ).0,n) : #) { return [n) : return.0 ] ) [()) [ 1 ]] ) )) [0 ] )1 ] )() )]. split () ). split ( )", "n : int].] := 0.= 0.1.] :::#= 0.:0.0.:.= 0.:,0.: 0.1: 0.2, 0.2, 0.1, 0.10.2, 0.2, 0.3", "0 :(self, n : intn : int:: return: return(.[, 0, n) ),]nn := 00, 0, 0, 0, 0,0, 0,0,1,,[ 2 ] ]) ) {] =. split ("], "prompt": "\nQUESTION:\nThe gray code is a binary numeral system where two successive values differ in only one bit.\n\nGiven a non-negative integer n representing the total number of bits in the code, print the sequence of gray code. A gray code sequence must begin with 0.\n\nExample 1:\n\n\nInput:\u00a02\nOutput:\u00a0[0,1,3,2]\nExplanation:\n00 - 0\n01 - 1\n11 - 3\n10 - 2\n\nFor a given\u00a0n, a gray code sequence may not be uniquely defined.\nFor example, [0,2,3,1] is also a valid gray code sequence.\n\n00 - 0\n10 - 2\n11 - 3\n01 - 1\n\n\nExample 2:\n\n\nInput:\u00a00\nOutput:\u00a0[0]\nExplanation: We define the gray code sequence to begin with 0.\n\u00a0            A gray code sequence of n has size = 2n, which for n = 0 the size is 20 = 1.\n\u00a0            Therefore, for n = 0 the gray code sequence is [0].\nclass Solution:\n    def grayCode(self, n: int) -> List[int]:\n        \nUse Call-Based format\nANSWER:\n"}}