{"410": {"code": ["the firsta_1 = 1a_2 =1 is not greater than2; \u2264thea_2 = 1; \u2264theof themonsterthethe last monsteris not greater than) ;(1 \u2264 n)a_2 = 2 ;(1 \u2264a_1 = 2 ;\u2264", "the first monsterthe11, 2,2, 2,,22the2,...,a_1, a_2,= 1;monsterin theof thethe first monsterto the firstthe first monster, the firstmonster in the queue.1monster is notthe second monsterthe second monster, the", "thethewereeatmonster in themonster.a_1 =1is not greater thanmonster.) ) ;the first monster in the(1 \u2264 n.,., nn,)1 ) ; if () ) {;) ; } else) {", "thea_2the monster.(a_1, a_2,).( a_1, a_2, a_3, a_4,monster that was..a_1, a_2, a_3..( a_1,], a_3,).).( a_1, a_2a", "eating ato the first monster.......[ 1, 22, 2,..) ) ) {( a_1,1 ).a_1, a_2, a_3.....( a_1, a_2.) ).", "the1the.eat the first monster,1. Aeat thethe monster in the.( 1)..the.( 1,.).)..).( 1,).( 1,).( 2,", "we know thatthea_1 =.0 )> a_1 = 1a_2a_3 = 2] a_1 =2 is notin the...(.).)...( a_1, a_2,)...).a_3 = 2 ; a_3", "the first monsterthe last monster Ain the lastmonster A will bethe last monster Aa_1,a_2, a_3,...the next monstermonster A,the last monster A,a_1, a_2,theand a_3 in thethe first monster Aeat the last monster A,the nextmonster", "in thethe first monsterthethemonstera_2,thethe first monsterthe first monsterthe first monsterthe last monster isistothe monsterthe firstmonster.the first monster isthe firstmonster.monster.the first monster,the second monster, thethethe first monster. if", "in the.1 \u2264) >the monsterthe.) > 1 )0.5 ) >= a_2.1, a_3= a_2.2.., a_1..0.5 ) >1.5 ) > 0.5the0.5theto the(a_2, a"], "prompt": "\nQUESTION:\nThere was an epidemic in Monstropolis and all monsters became sick. To recover, all monsters lined up in queue for an appointment to the only doctor in the city.\n\nSoon, monsters became hungry and began to eat each other. \n\nOne monster can eat other monster if its weight is strictly greater than the weight of the monster being eaten, and they stand in the queue next to each other. Monsters eat each other instantly. There are no monsters which are being eaten at the same moment. After the monster A eats the monster B, the weight of the monster A increases by the weight of the eaten monster B. In result of such eating the length of the queue decreases by one, all monsters after the eaten one step forward so that there is no empty places in the queue again. A monster can eat several monsters one after another. Initially there were n monsters in the queue, the i-th of which had weight a_{i}.\n\nFor example, if weights are [1, 2, 2, 2, 1, 2] (in order of queue, monsters are numbered from 1 to 6 from left to right) then some of the options are:  the first monster can't eat the second monster because a_1 = 1 is not greater than a_2 = 2;  the second monster can't eat the third monster because a_2 = 2 is not greater than a_3 = 2;  the second monster can't eat the fifth monster because they are not neighbors;  the second monster can eat the first monster, the queue will be transformed to [3, 2, 2, 1, 2]. \n\nAfter some time, someone said a good joke and all monsters recovered. At that moment there were k (k \u2264 n) monsters in the queue, the j-th of which had weight b_{j}. Both sequences (a and b) contain the weights of the monsters in the order from the first to the last.\n\nYou are required to provide one of the possible orders of eating monsters which led to the current queue, or to determine that this could not happen. Assume that the doctor didn't make any appointments while monsters were eating each other.\n\n\n-----Input-----\n\nThe first line contains single integer n (1 \u2264 n \u2264 500)\u00a0\u2014 the number of monsters in the initial queue.\n\nThe second line contains n integers a_1, a_2, ..., a_{n} (1 \u2264 a_{i} \u2264 10^6)\u00a0\u2014 the initial weights of the monsters.\n\nThe third line contains single integer k (1 \u2264 k \u2264 n)\u00a0\u2014 the number of monsters in the queue after the joke. \n\nThe fourth line contains k integers b_1, b_2, ..., b_{k} (1 \u2264 b_{j} \u2264 5\u00b710^8)\u00a0\u2014 the weights of the monsters after the joke. \n\nMonsters are listed in the order from the beginning of the queue to the end.\n\n\n-----Output-----\n\nIn case if no actions could lead to the final queue, print \"NO\" (without quotes) in the only line. \n\nOtherwise print \"YES\" (without quotes) in the first line. In the next n - k lines print actions in the chronological order. In each line print x\u00a0\u2014 the index number of the monster in the current queue which eats and, separated by space, the symbol 'L' if the monster which stays the x-th in the queue eats the monster in front of him, or 'R' if the monster which stays the x-th in the queue eats the monster behind him. After each eating the queue is enumerated again. \n\nWhen one monster eats another the queue decreases. If there are several answers, print any of them.\n\n\n-----Examples-----\nInput\n6\n1 2 2 2 1 2\n2\n5 5\n\nOutput\nYES\n2 L\n1 R\n4 L\n3 L\n\nInput\n5\n1 2 3 4 5\n1\n15\n\nOutput\nYES\n5 L\n4 L\n3 L\n2 L\n\nInput\n5\n1 1 1 3 3\n3\n2 1 6\n\nOutput\nNO\n\n\n-----Note-----\n\nIn the first example, initially there were n = 6 monsters, their weights are [1, 2, 2, 2, 1, 2] (in order of queue from the first monster to the last monster). The final queue should be [5, 5]. The following sequence of eatings leads to the final queue:  the second monster eats the monster to the left (i.e. the first monster), queue becomes [3, 2, 2, 1, 2];  the first monster (note, it was the second on the previous step) eats the monster to the right (i.e. the second monster), queue becomes [5, 2, 1, 2];  the fourth monster eats the mosnter to the left (i.e. the third monster), queue becomes [5, 2, 3];  the finally, the third monster eats the monster to the left (i.e. the second monster), queue becomes [5, 5]. \n\nNote that for each step the output contains numbers of the monsters in their current order in the queue.\nUse Standard Input format\nANSWER:\n"}}