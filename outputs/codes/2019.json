{"2019": {"code": ["Alice canAlice can makemovemove, Alice canmove, Bob canmove, Alice canmove, AliceAlice can not make anymove,$s$ turn intoAlice canAlice canbeAlice canmove, Alice can not makemove, Bobcan not make any move,can not make anymove, Alice canmove,", "AliceAlice canAlice canAlice can win print DAAlice canAlice canAlice canAlice can not make anyAlice canAliceAlice can not make anyAliceBob canAlice can not make anyAlice can not make anymoveAlice canmove initially.Alice canmove initially.Alice can not make any", "AliceAlice can beAliceAliceAlice canAlice canAlice can beAlice canAlice can(Alice can notAlice canAlice canAlice canAlice canAlice can notAlice canAlice canmove initially.theaAlice canmove.move string $s$ turn intoAlice can", "thisthe following movesofAlice canmove in thethemove string $s$ turn intoAlice canmove initially.Alice can not make anymove(Alice canAlice cancan not make anymoveifbe in.move stringAlicemove string $s$ become emptyAlice can not make anymove.Alice canmove initially.", "AliceAlicemove string $s$ turn intoBob can not make anyAlice can not make anycanmove string $s$ turn intoAlicemove string $s$ turn intoAlice canmoveAlice canmoveAlice canmove initially.Alice canAlice canmove stringAlice can notmoveAlicemoveAlicecan not", "AliceAlice canmove and Bob's moveAlice canAlicemove stringAlice canmove initially.Alicemove stringAlice canmovemove string $s$ turn intoAlicemove string $s$ turn intomove.moveAlicemove string $s$ turn intoAlice can not make anyAlicemove string $s$Alice", "AliceAlice can=Alice canmove initially.Alice canmove initially. Alice canAlice canAlice canmove initially. Alice canmove initially. Alice canmovemoveAlice can not make anyAlice can not make anymove initially.Alice canAlice can notmove initially. Alice canmove initially.Alice can not make", "Alice canAlice canAlice can not make anycan't make anyaddone\\le, 0 )AliceAlice can not make any{( \"Alice\", \"Bob\",) {1 ) ;( \"Alice\",\"Alice\", \"Alice\"\"Alice\", \"Alice\", \"Alice\",A", ")(.,)( ).() )) ; if () ); }}( )( ) )( )() ) ) {)((( ) ; if (( ) ;( )() { if () ) { if (", "Alice isBob isAlice is notAliceAlice is notthe second move.Alice isAlice is notAlicethemove.Alice isAlicemoveAlice can not make anyAlice can not make anytheAlice is notAlice isthe first testAlice istheAlice isAliceAlice is"], "prompt": "\nQUESTION:\nAlica and Bob are playing a game.\n\nInitially they have a binary string $s$ consisting of only characters 0 and 1.\n\nAlice and Bob make alternating moves: Alice makes the first move, Bob makes the second move, Alice makes the third one, and so on. During each move, the current player must choose two different adjacent characters of string $s$ and delete them. For example, if $s = 1011001$ then the following moves are possible:   delete $s_1$ and $s_2$: $\\textbf{10}11001 \\rightarrow 11001$;  delete $s_2$ and $s_3$: $1\\textbf{01}1001 \\rightarrow 11001$;  delete $s_4$ and $s_5$: $101\\textbf{10}01 \\rightarrow 10101$;  delete $s_6$ and $s_7$: $10110\\textbf{01} \\rightarrow 10110$. \n\nIf a player can't make any move, they lose. Both players play optimally. You have to determine if Alice can win.\n\n\n-----Input-----\n\nFirst line contains one integer $t$ ($1 \\le t \\le 1000$)\u00a0\u2014 the number of test cases.\n\nOnly line of each test case contains one string $s$ ($1 \\le |s| \\le 100$), consisting of only characters 0 and 1.\n\n\n-----Output-----\n\nFor each test case print answer in the single line.\n\nIf Alice can win print DA (YES in Russian) in any register. Otherwise print NET (NO in Russian) in any register.\n\n\n-----Example-----\nInput\n3\n01\n1111\n0011\n\nOutput\nDA\nNET\nNET\n\n\n\n-----Note-----\n\nIn the first test case after Alice's move string $s$ become empty and Bob can not make any move.\n\nIn the second test case Alice can not make any move initially.\n\nIn the third test case after Alice's move string $s$ turn into $01$. Then, after Bob's move string $s$ become empty and Alice can not make any move.\nUse Standard Input format\nANSWER:\n"}}