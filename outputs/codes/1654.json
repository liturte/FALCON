{"1654": {"code": ["suitability of the stringsuitabilityissuitability of(1 \u2264 |s|) )asuitability ofofsuitabilitysuitability ofin)suitability of thein the'?' characters.asuitability of theofsuitability of1.a suitability ofthesuitability of", "ofofof stringof a string s'a' with suitability(1 \u2264 |s| \u2264suitability ofsuitability ofin the first lineofone ofmore than 2,suitability ofsuitability ofofa stringin thesuitability ofsuitability ofofsuitability of a stringand", "( 12 ).suitability of2 ] ).( 1 \u22641.).)...(.(( 1( 1).( 1 \u2264 |s|, 1 ) ).[ 1 ] )( 1..( 1. indexOf (; }. split (", "and tcan achieve is2ofinof(1 \u2264 |s|1of\"baab\"can achieve isis\"aa?n?b?n?n?n?n?n?n?n?n?n?n?n?n?n?n?n?n?n?n?n?n?n?n?n?n?", "suitability ofof string tsuitabilitycan achieve isoftheofofsuitability ofsuitability ofstringinof string ssuitability of string tiscan achieve is 1.suitability of string sofofsuitabilityifstring t\"b\"string t\"suitabilitysuitability of", "suitability of2.suitability of(1stringis maximal.).(0 ).= 'aa' ;= 'aa' ;'aa' ;'azbz' ;; for ( int ii = 0 ; i;(])[] [ i])] ) ; }[ i ] ) {", "inthe following)suitability of stringsuitability ofof) {} ) ;) {=) ;() ) ;=( )= 0 ; i <{if (([ ii ] [ 0] ; }) { for ( ii ] ; if (0 ) { if () { print (", "suitability offor allstring..( ) { if (.)( ) ;) ) {[ ] ))( ) ) {} } }.( )[ ]] ) ;)\"?\" : \" \".] ). split (). join ()] ) ; }(", ".theof)suitability ofinthetsuitability of\"azbz\" isofsuitability of\"azbz\"isof a singleString s,a single charactersuitability of aof a\"abab\" isissuitability ofsuitability of a stringis maximal.issuitability of a", "suitability ofisofis 1.isaaofthatasuitability ofsuitability ofis 1.suitability ofis 1.suitability ofsuitability ofsuitabilityof s,isthesuitability ofisof a stringsuitability ofsuitability of"], "prompt": "\nQUESTION:\nYou are given two strings s and t consisting of small Latin letters, string s can also contain '?' characters. \n\nSuitability of string s is calculated by following metric:\n\nAny two letters can be swapped positions, these operations can be performed arbitrary number of times over any pair of positions. Among all resulting strings s, you choose the one with the largest number of non-intersecting occurrences of string t. Suitability is this number of occurrences.\n\nYou should replace all '?' characters with small Latin letters in such a way that the suitability of string s is maximal.\n\n\n-----Input-----\n\nThe first line contains string s (1 \u2264 |s| \u2264 10^6).\n\nThe second line contains string t (1 \u2264 |t| \u2264 10^6).\n\n\n-----Output-----\n\nPrint string s with '?' replaced with small Latin letters in such a way that suitability of that string is maximal.\n\nIf there are multiple strings with maximal suitability then print any of them.\n\n\n-----Examples-----\nInput\n?aa?\nab\n\nOutput\nbaab\n\nInput\n??b?\nza\n\nOutput\nazbz\n\nInput\nabcd\nabacaba\n\nOutput\nabcd\n\n\n\n-----Note-----\n\nIn the first example string \"baab\" can be transformed to \"abab\" with swaps, this one has suitability of 2. That means that string \"baab\" also has suitability of 2.\n\nIn the second example maximal suitability you can achieve is 1 and there are several dozens of such strings, \"azbz\" is just one of them.\n\nIn the third example there are no '?' characters and the suitability of the string is 0.\nUse Standard Input format\nANSWER:\n"}}