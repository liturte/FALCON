{"3255": {"code": ["a hopper canthe.a).( ) ){( ),[ 0 ][ 1 ]) ; } }{( ) ; } }) ;)1 ]\" \",( )= 0 ; i <) {( ) ; fori <{ if ({[ i", ". Thethethe(aofof thea)the nextof thethe next element is atlength of thein the arraytheof thethe nextthe(a hopper canthe next element of thethe next elementthe next element is atthe next element is atthe next elementif (", "of thethelength ofthetheislength ofanda hopperthethe nextthe number ofthethethe next.(length of thearray ofthearray. A hopper canthe length of thethethe nextthethe next", "andathe length of theais the number oftheyin ain thethethe length oftheof thethea hopper can makethethenumber ofthethelength ofthe length of the//the currentis the maximum number ofthe number ofthe", "ofalength of theaaofanthe nexta hopper canlength of$D$ and $M$ are$n$thethethethe// Thethethethethethearraythe length of theof theof the current element and", "aaa;{ if ()} else if (n ) {. append (the first linethe firstoutput is the( n ) ). append (; } }. append (. append ()=( n ) )the) ; if ()( 1 ) {((", "ahaven\u2019tthethe..( 'n', 'D''M', 'M', 'D', 'M', 'M''n', 'D''M', 'M', 'N', 'N''n', 'D', 'M''n', 'D','M',", "andhappenedthe nextis aaa hoppertells thethe current elementthearrayofofthe next elementthethe current element.thethethe firstthe next element is atthe next element is atthe nextthe next elementa hopper canin the next element, thethe next elementthe next element is at", "a.).0 ) {} if ()length () ) {) ;( ) ; }) ; }() ) {() ) {) ; }(,( )) {.(( ) ) {0 ) ; }- 1 ) ==; } }", "thearraythe nextthe next elementof thetheis thecan=) {) {)( ) ; }.==;([ ]] ;.( ) ;..{ var. length ; if ("], "prompt": "\nQUESTION:\nA hopper is a virtual creature that visits Java programs and explores their arrays. Scientists observed a hopper and came to the following conclusions:\n - a hopper only visits arrays with integer entries,\n - a hopper always explores a sequence of array elements using the following rules:\n - a hopper cannot jump too far, that is, the next element is always at most $D$ indices away (how far a hopper can jump depends on the length of its legs),\n - a hopper doesn\u2019t like big changes in values\u2014the next element differs from the current element by at most $M$, more precisely the absolute value of the difference is at most $M$ (how big a change in values a hopper can handle depends on the length of its arms), and\n - a hopper never visits the same element twice.\n - a hopper will explore the array with the longest exploration sequence.\n\nThe scientists now need to prepare arrays for further study of hoppers and they need your help. They want a program that given an array and values $D$ and $M$ computes the length of the longest exploration sequence in the array.\n\n-----Input-----\nThe first line contains three numbers $n$, $D$, $M$, where $n$ is the length of the array (as described above, $D$ is the maximum length of a jump the hopper can make, and $M$ is the maximum difference in values a hopper can handle). The next line contains $n$ integers\u2014the entries of the array. We have $1 \\leq D \\leq 7$, $1 \\leq M \\leq 10000$, $1 \\leq n \\leq 1000$ and the integers in the array are between $-1000000$ and $1000000$.\n\n-----Output-----\nThe output contains one line\u2014the length of the longest exploration sequence. The hopper can start and end at any location and the length is computed as the number of visited locations.\n\n-----Examples-----\nSample Input 1:\n8 3 1\n1 7 8 2 6 4 3 5\nSample Output 1:\n8\n\nSample Input 2:\n8 2 1\n1 7 8 2 6 4 3 5\nSample Output 2:\n3\nUse Standard Input format\nANSWER:\n"}}