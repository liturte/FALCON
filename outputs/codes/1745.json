{"1745": {"code": ["the pipe isthe field isa corner square.the pipe isthesquare ofsquare of thesquare of the fieldbethesquare of the field isto besquare of thethe pipe isthe squareinthe pipe issquare of thesquare ofthe square issquare of the fieldthe pipethesquare. \n\n-----Output----- input.the input", "thecorrespondingthe pipe is(90 degrees)the pipe issquare of thethe pipe is notasquare of thesquare of thesquare of thesquare of thethe pipeof the field,the pipeat least one square.pipeand the pipesquare of thethesquare of thethe pipe is emptythe pipe isthethe pipe isof the", "the fieldthe pipethe pipeofthe pipe isthe pipethe pipe isthesquare of thesquare of thesquare of the mapsquare of thesquare.the pipethe pipe isthe square of thethe pipeisthe pipe isfora single segment of thesquare of theof thethe pipe isbe a corner square,the pipe is a", "pipe)allthe pipethe pipe isthe).the pipe.. ***. # ***. ## ***. # ***. #the pipe isthe pipe isasquare of the map,thethe pipe isof thesquare of the map.of the map ischaracterthe squareof thesquare.square of thesquare is", "the pipe isone(2square of thein the pipe.the pipe isthe pipe isthesquare of the pipe.square of the pipe isthesquare.the squaresquare of thesquare.the squareof theissquare of theofsquare of thesquare of thethe pipe. \n\n-----Input-----square of thesquare of thesquare of the", "a(the pipethe fieldisas#..*#//...#..*# ****.the pipeof theasquare of the.. *.the pipe is#..*# ***. #**. #thethesquare of thetosquare of thethe pipe issquare of the pipeis represented by characterthe pipe in thethe pipe is", "thesquare isof the field,to theandand the pipebethe pipe is notat all,square of the pipe isthe pipe isin thesquare of thethe pipe is notsquare of thesquare of thesquare isof thesquare.square of thethesquarethe pipe issquare of thesquare ofsquare of the", "theof the pipe.the pipethe pipebetween the twothe pipethe pipe isinthe pipe.the pipe isthe square of theof thesquare. \n\nItthe pipeisthethesquare.(2 \u2264of thesquare of thethe pipe issquare.thesquare of thesquare.", "the pipe. *#*. ##to be(1 \u2264 n,square of thein thethe pipe isof the fieldatthesquare of the pipe.thethesquare of thesquarethe squaresquare of thesquare ofsquare of thesquare of thethe square of thesquare ofthethesquare of thesquare of the map.", ".the pipesquares of the field,the pipeisof theat least 2the pipe isby. \n\n-----Input-----square of thethesquare of thesquareofsquare of the mapof thesquare isthesquare.square of the map.the square of thesquare issquare of the map.square of thesquare of the"], "prompt": "\nQUESTION:\nOn a certain meeting of a ruling party \"A\" minister Pavel suggested to improve the sewer system and to create a new pipe in the city.\n\nThe city is an n \u00d7 m rectangular squared field. Each square of the field is either empty (then the pipe can go in it), or occupied (the pipe cannot go in such square). Empty squares are denoted by character '.', occupied squares are denoted by character '#'.\n\nThe pipe must meet the following criteria:  the pipe is a polyline of width 1,  the pipe goes in empty squares,  the pipe starts from the edge of the field, but not from a corner square,  the pipe ends at the edge of the field but not in a corner square,  the pipe has at most 2 turns (90 degrees),  the border squares of the field must share exactly two squares with the pipe,  if the pipe looks like a single segment, then the end points of the pipe must lie on distinct edges of the field,  for each non-border square of the pipe there are exacly two side-adjacent squares that also belong to the pipe,  for each border square of the pipe there is exactly one side-adjacent cell that also belongs to the pipe. \n\nHere are some samples of allowed piping routes: \n\n           ....#            ....#            .*..#\n\n           *****            ****.            .***.\n\n           ..#..            ..#*.            ..#*.\n\n           #...#            #..*#            #..*#\n\n           .....            ...*.            ...*.\n\n\n\nHere are some samples of forbidden piping routes: \n\n           .**.#            *...#            .*.*#\n\n           .....            ****.            .*.*.\n\n           ..#..            ..#*.            .*#*.\n\n           #...#            #..*#            #*.*#\n\n           .....            ...*.            .***.\n\n\n\nIn these samples the pipes are represented by characters ' * '.\n\nYou were asked to write a program that calculates the number of distinct ways to make exactly one pipe in the city. \n\nThe two ways to make a pipe are considered distinct if they are distinct in at least one square.\n\n\n-----Input-----\n\nThe first line of the input contains two integers n, m (2 \u2264 n, m \u2264 2000)\u00a0\u2014\u00a0the height and width of Berland map.\n\nEach of the next n lines contains m characters \u2014 the map of the city. \n\nIf the square of the map is marked by character '.', then the square is empty and the pipe can through it. \n\nIf the square of the map is marked by character '#', then the square is full and the pipe can't through it.\n\n\n-----Output-----\n\nIn the first line of the output print a single integer \u2014 the number of distinct ways to create a pipe.\n\n\n-----Examples-----\nInput\n3 3\n...\n..#\n...\n\nOutput\n3\nInput\n4 2\n..\n..\n..\n..\n\nOutput\n2\n\nInput\n4 5\n#...#\n#...#\n###.#\n###.#\n\nOutput\n4\n\n\n-----Note-----\n\nIn the first sample there are 3 ways to make a pipe (the squares of the pipe are marked by characters ' * '): \n\n       .*.        .*.        ...\n\n       .*#        **#        **#\n\n       .*.        ...        .*.\nUse Standard Input format\nANSWER:\n"}}