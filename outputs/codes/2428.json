{"2428": {"code": ["\\le\\le |s|$) \u2014 the$s\\le\\le |s|$)$t$\\le |t|$) \u2014 thestring $t$\\le\\le\\le |t|$)in\\le\\le |s|$) \u2014$s$$T$string $t$$T$the string", "$s_1 s_4 s_5\\le |t| \\le |t|$.$t$$T$ answers$T$ answers \u2014the$s_1 s_4 s_5= \\text{ababcd}$. At$s = \\text{ababcd}$. At$s_1 s_2 s_5 s_6\\le |s|$", "canif it's possible tostring$s$ and $p =$p =(case insensitive)it's possible to build $t$$t$ and$T$ and(case insensitive) if\\le))$T$$t$$T$).string $t$thestringit's possible to$T$ andstring $T$$", "$p$ contains theof(case$1 \\le |s|$) \u2014 the$t$$T$of$1 \\le |t| \\lein the string$T$ containsthethe string you'd like to(case insensitive).$s$ contains the$T$ contains theof the first line contains$T$ containsthe first$T$", "is\\le$s$\\le |t| \\le |s|$)the$T$$T$the first line containslength of the string$T$ andthe string you'd like to\\le |t| \\le\\le |s|$)(case insensitive),$T$of$T$(case insensitive),$T$=\\le |", "s_2\\le |s|$) \u2014$sa $t$$t$$s_2\\le |s|$)= \\text{ababcd}$. At$s_2\\le\\le(case insensitive) $T$)() )\\le\\le |s|$)$t$).\\le |s|$)", "\\le |s|$) is.$T$\\le |t|$) isin$s$ is$s$=$p$$t$ is $t$$t$$t$=$s$ is== $t$$s$ is$s$ is$s$ is$t$$s$ is$s$ is", "the$t$ in $t$$T$).(( case insensitive) if it's$t$ and$T$ and$T$\\le |t|$)the string you'd likeit's possible to$T$ anda(case insensitive) if it's possible(case$T$ and$T$(case(casein$T", "$s$\\le( case insensitive) if$T$\\le |s|$)\\le\\le |t|$) \u2014$s$$t$the$t$$2T$ lines contain test cases.(case insensitive) if it's possible$T$2 $T$ answersthe initial string $s$(case insensitive) if it's possible", "$s$ isof $s$$T$$T$\\le |s|$)= \\text{ababcd}$.$s$ isthe string you'd like to$T$ is$T$ contains.=,$s$ and $p$T$ and $p= \\text{ababcd}$. At$s_1$p ="], "prompt": "\nQUESTION:\nYou are given a string $s$. You can build new string $p$ from $s$ using the following operation no more than two times:   choose any subsequence $s_{i_1}, s_{i_2}, \\dots, s_{i_k}$ where $1 \\le i_1 < i_2 < \\dots < i_k \\le |s|$;  erase the chosen subsequence from $s$ ($s$ can become empty);  concatenate chosen subsequence to the right of the string $p$ (in other words, $p = p + s_{i_1}s_{i_2}\\dots s_{i_k}$). \n\nOf course, initially the string $p$ is empty. \n\nFor example, let $s = \\text{ababcd}$. At first, let's choose subsequence $s_1 s_4 s_5 = \\text{abc}$ \u2014 we will get $s = \\text{bad}$ and $p = \\text{abc}$. At second, let's choose $s_1 s_2 = \\text{ba}$ \u2014 we will get $s = \\text{d}$ and $p = \\text{abcba}$. So we can build $\\text{abcba}$ from $\\text{ababcd}$.\n\nCan you build a given string $t$ using the algorithm above?\n\n\n-----Input-----\n\nThe first line contains the single integer $T$ ($1 \\le T \\le 100$) \u2014 the number of test cases.\n\nNext $2T$ lines contain test cases \u2014 two per test case. The first line contains string $s$ consisting of lowercase Latin letters ($1 \\le |s| \\le 400$) \u2014 the initial string.\n\nThe second line contains string $t$ consisting of lowercase Latin letters ($1 \\le |t| \\le |s|$) \u2014 the string you'd like to build.\n\nIt's guaranteed that the total length of strings $s$ doesn't exceed $400$.\n\n\n-----Output-----\n\nPrint $T$ answers \u2014 one per test case. Print YES (case insensitive) if it's possible to build $t$ and NO (case insensitive) otherwise.\n\n\n-----Example-----\nInput\n4\nababcd\nabcba\na\nb\ndefi\nfed\nxyz\nx\n\nOutput\nYES\nNO\nNO\nYES\nUse Standard Input format\nANSWER:\n"}}