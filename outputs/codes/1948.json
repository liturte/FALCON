{"1948": {"code": ["vertexvertex3thetheAlice'stheofof thethe gamethetwothethethe firsttheto the first linen,a \u2264Alice's starting position,a\u2264a\u2264Alice's starting position,Bob'sthe next line containsa\u2264 a\u2264\u2264", "AlicetheAlice'sAlice'satheAlice'stheAlice's starting position,Alice'sthethethethe.( ) [ 0( ) [ 0 ][ 0 ]..( ); if (()21 ] ) ;[ 2 ] ) ;", "AliceAlice's1 ]2 ]Alice's1 ] [Image] \nAliceAlice's starting position, theAlice'sAlice'sAlice'sAlice's3] \nBob isAlice'sBob'sAlice'sAlice'sAlice'sAlice'sAlice'sAlice'sAlice's2 ]A", "Thegame startsvertexAlicethethetheisof the(2 \u2264 n12Bob'sAlice'sthea 2Alice's starting position, the.Alice'sa 2thetheof thethetheof the Bob's", "aAlice'sthe33Alice'svertextheAlice'sand theAlice'sAlice's(30.0the Alice'sAlice's startingis thethe Bob's starting position.the Bob'sthethe(123Alice's starting position, theAlice's starting position, the red", "Alice cantomove isof thegame runsthe tree looks like this:Alice'sAlice'saAlice'sis(3 \u2264 nAlice'sa1Alice'sn - 1 linesbe[Image] \nAliceAliceAliceAliceAliceAliceBobAliceBobAliceBobAliceBobAlice", "Alicevertex 2Alice's starting positiontheAlice'sAlice'svertex 2 isthe(33Alice's4A: go to vertexAlice'sthe2vertex 4A: go to3\nA:to vertex3\nA: go4A: go3\nA: go2A: go4A:go to4", ". Thevertex 2 isAlice's2Alice'stoAlice'sb isvertex 3Alice'sBob'sAlice'sAlice'sBob'sAlice'sAlice'sAlice'sAlice'sAlice'stheAlice'sAlice'sAlice'sAlice'sAlice'sBob's, the blue", "AlicetheisAlice's starting position,Alice'sbthe(3 \u2264Alice's(4 \u2264232341 24Alice's)3Alice'sAlice'sAlice'sBob'sAlice's starting position, theBob's starting position, theAlice", "the game run thetheAlice'stheAlice'sBob's(2 \u226411224Alice's startingAlice's starting position,2thethe(2 \u2264= 2 \u2264113the gameAlice's starting position, theisto be"], "prompt": "\nQUESTION:\nAlice got tired of playing the tag game by the usual rules so she offered Bob a little modification to it. Now the game should be played on an undirected rooted tree of n vertices. Vertex 1 is the root of the tree.\n\nAlice starts at vertex 1 and Bob starts at vertex x (x \u2260 1). The moves are made in turns, Bob goes first. In one move one can either stay at the current vertex or travel to the neighbouring one.\n\nThe game ends when Alice goes to the same vertex where Bob is standing. Alice wants to minimize the total number of moves and Bob wants to maximize it.\n\nYou should write a program which will determine how many moves will the game last.\n\n\n-----Input-----\n\nThe first line contains two integer numbers n and x (2 \u2264 n \u2264 2\u00b710^5, 2 \u2264 x \u2264 n).\n\nEach of the next n - 1 lines contains two integer numbers a and b (1 \u2264 a, b \u2264 n) \u2014 edges of the tree. It is guaranteed that the edges form a valid tree.\n\n\n-----Output-----\n\nPrint the total number of moves Alice and Bob will make.\n\n\n-----Examples-----\nInput\n4 3\n1 2\n2 3\n2 4\n\nOutput\n4\n\nInput\n5 2\n1 2\n2 3\n3 4\n2 5\n\nOutput\n6\n\n\n\n-----Note-----\n\nIn the first example the tree looks like this:\n\n [Image] \n\nThe red vertex is Alice's starting position, the blue one is Bob's. Bob will make the game run the longest by standing at the vertex 3 during all the game. So here are the moves:\n\nB: stay at vertex 3\n\nA: go to vertex 2\n\nB: stay at vertex 3\n\nA: go to vertex 3\n\nIn the second example the tree looks like this:\n\n [Image] \n\nThe moves in the optimal strategy are:\n\nB: go to vertex 3\n\nA: go to vertex 2\n\nB: go to vertex 4\n\nA: go to vertex 3\n\nB: stay at vertex 4\n\nA: go to vertex 4\nUse Standard Input format\nANSWER:\n"}}