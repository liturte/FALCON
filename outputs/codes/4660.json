{"4660": {"code": ["the list containing the validemails in theformat type:is a validthe string a valid:: a = [ ]= [ ] foremail inemail in. append. appendaemail in a] for _ inifin) : if( a]. append)] [ 0 ]=. append (: a [ 1 ]", ".the10.0 or 0.1 ortheatheofn1.0 or) )True[]] [ 1 ]=. append (. append ( 'name']]( 'username',) ]][ 1 ] [] =: [", "is the...) #list(filter(lambda x:x*x, l))=if n ==if n == 0. append (.) #). append (:)( 'a'( 'a' ). appendif n == 0. append. append( 'a' ) )) ). append ( 'a'", "if.)input( ) )( ) )[ ] )[] ) )= list ( filter_mail)) )( ) )[) )( ) ])(() ). join (( )) )( ). split () [ 0 ] )", "=ofand the number ofof)00 and x << 80 and x <10 and x < 80a string witha valid email addressifemail addressis not a validtheemail address andemail addressemail address;{email_address.email_address..if ()email_address.", "email address is( n )== list(filter(lambda x:x*x, l))if len(email_address)n ] =if len ( email_address )==len ( email_address )() ] =[.. appendemail_address.] =[ ]. append (if notemail_address] [ 0 ][", "number ofthe number ofof thethe list ofthethe: #'#',toa list of thelist oftooffor i inlist(filter(fun, i))the list ofofin a. split ( '\\n'. join (. split ( '\\n' ),'' ). split ( '\\n') ))", ".) {email_address.. split ( '@') ) )]] =[ 0 ])() #of the list of) #(, 'email_address' ) )()(, 'email_address', 'username@websitename.extension'( 'email_address', 'email_address' ) ). split (", "in the list ofvalid email addressesa validemailaof ain the list ofofthea validlist ofin the list of validemailthe list ofto the list ofa validof theemail_addressforemail_address in.email_address in) { return(() : return", "email addresses.forinemailif not0 and notin a listemailemail is notreturn Falsea lista list ofemail:,:: [. append ( [] )( )( ) ))).).). append (( ) )[ ]"], "prompt": "\nQUESTION:\n=====Problem Statement=====\nYou are given an integer N followed by N email addresses. Your task is to print a list containing only valid email addresses in lexicographical order.\nValid email addresses must follow these rules:\nIt must have the username@websitename.extension format type.\nThe username can only contain letters, digits, dashes and underscores.\nThe website name can only have letters and digits.\nThe maximum length of the extension is 3. \n\nConcept\n\nA filter takes a function returning True or False and applies it to a sequence, returning a list of only those members of the sequence where the function returned True. A Lambda function can be used with filters.\n\nLet's say you have to make a list of the squares of integers from 0 to 9 (both included).\n\n>> l = list(range(10))\n>> l = list(map(lambda x:x*x, l))\n\nNow, you only require those elements that are greater than 10 but less than 80.\n\n>> l = list(filter(lambda x: x > 10 and x < 80, l))\n\nEasy, isn't it?\n\n=====Input Format=====\nThe first line of input is the integer N, the number of email addresses.\nN lines follow, each containing a string.\n\n\n=====Constraints=====\nEach line is a non-empty string.\n\n=====Output Format=====\nOutput a list containing the valid email addresses in lexicographical order. If the list is empty, just output an empty list, [].\ndef fun(s):\n    # return True if s is a valid email, else return False\n\ndef filter_mail(emails):\n    return list(filter(fun, emails))\n\nif __name__ == '__main__':\n    n = int(input())\n    emails = []\n    for _ in range(n):\n        emails.append(input())\n\nfiltered_emails = filter_mail(emails)\nfiltered_emails.sort()\nprint(filtered_emails)\nUse Standard Input format\nANSWER:\n"}}