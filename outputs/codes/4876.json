{"4876": {"code": ["output the= 0 ;]. split () [ 0[ 0 ]. split[ 1 ]. split[ 2 ]. split+ 1 ]. splitsplit (1 ).split ([ 1 ]2 ]( ) )]. split (. split ([] ) [ 1[ 1] ) [ 0 ]. split (} }, 2 ]", "in the inputthein the input.the first line of() {string=\" \".. split ( \" \")] ) ; fori = 0 ; ilength ; i ++ )] ). split (( ) ; }. split ( \"( \" \" )[ i ]. split) [ 0 ])] ) [)1 ] )", "onewiththe1 )of theof the first linein the input...inputinput ) )) ;+ 1(. format (. format ( '()( '() ;.. format ( '( '1'. format( '2'", "of theforin::: \"A\", \"A\" : \"A\" }\"A\", \"A\" ), \"A\"\"A\", \"A\" )\"A\", \"A\",\"A\" },\"A\" ), \"A\"\"A\", \"B\", \"C\", \"A\"\"A\", \"", "toisone of) {(restaurant) isa menu item withits name.outputtheof restaurant in the input[1]of the\" \" \"[2] \\le) )restaurants are the samethethe(restaurant)the[1],(restaurant) isa menu item.\" \"", "a single lineof restaurants inandbethe firstof thethename of theof the firstthe first ofa single line.the firstthe first of the restaurantsis theand the lastin the input.ifis aas: 'A'1a single line.input:as athethe number of restaurants in", "one of thethe.( n )). split ()( nn::n ).] ). split:). join).( n ). join()). join (). split(])} } else {= n ;n + 1$ ) ;", "oftheof thethethe.as a.\" \"athe firstaof restaurant names,asa number ofof the restaurantsthethe second\" \" is thethe restaurantby the\" \".\" \"..", "the first line of inputtheofthe first line is thea singlethe restauranttheand the restaurantthethethe restaurant menu isthe restaurant menu,the restaurant menu isofthe restaurantthe restaurant menu.isn\u2019tof restaurantsfor theif\" +\" + \"restaurant", "1as menu items,oneforrestaurants,the.\\) { var). split; for (; i < restaurantsif ( restaurants [ i] [ 0 ] ==)] [ 1 ]) [ 0 ](} } else()] ; }; fori =++ ) {} } else if"], "prompt": "\nQUESTION:\nAs a Swede, you hold a deep love for the traditional Thursday lunch of pea soup and pancakes. You love it so much, in fact, that you will eat it any meal it is available. You find yourself looking at the menus for all your favorite restaurants every day to see if this combination is available, and realized you can do this more easily with a program. Given a list of restaurant menus, decide where to eat. \n\n-----Input-----\nThe first line of input contains a number $n$ ($1 \\le n \\le 10$), the number of restaurants. Then follow the $n$ restaurant menus. Each menu starts with a line containing a number $k$ ($1 \\le k \\le 10$), the number of menu items for the day. The remainder of the menu consists of $k + 1$ lines, each containing a nonempty string of at most $100$ characters. The first of these lines is the restaurant name, and the rest are menu items. Strings consist only of lower case letters \u2018a\u2019-\u2018z\u2019 and spaces, and they always start and end with a letter. All restaurant names are unique.\n\n-----Output-----\nOutput a single line. If at least one restaurant has both \u201cpea soup\u201d and \u201cpancakes\u201d as menu items, output the name of the first of those restaurants, by the order in which the restaurants appear in the input. Otherwise, output \u201cAnywhere is fine I guess\u201d.\n\n-----Examples-----\nSample Input:\n2\n2\nq\npotatoes\nsalad\n3\nnymble\npancakes\npea soup\npunsch\nSample Output:\nnymble\nUse Standard Input format\nANSWER:\n"}}