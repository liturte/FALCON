{"4661": {"code": ["1, 2, 3]a single line of input:.a singlea single line ofa single linea singlea single linefunctiona singlea single line ofa single linea single line ofa singlefunctionoutput: a list ofa single line ofthe lambda functionn: # returnlist of fibonacci numbers1, 2, 3]a single", "printtheone line of input: ana singlelambda functionoutput: a singlethe( n, fibonacci(n))print (list(map(cube, fibonacci(n))))A list of fibonacci numbersa single line of input:a single line ofa single line containingnumber of fibonacci numbers.( n,n", "a singlein:a singlea: print ( list(map(fibonacci(n)), fibonacci(n))))a singlelist ofa single linea singlefunction \n\nCOSa single line of input:a single line containing thefunctionaa single line ofaa singlea singlea singlea single lineofof", "afunctioninputa singlea number0 : n( n )a fibonacci numbera list of fibonacci numbersa list of fibonacci numbersint(input())n( n ) ))[ 'Tina','Raj',, 'Tom' ] )( n ) )( n ) ) )[ 'T", ":function \n\nlambda = lambda: #lambda functionlambda function \nCOF ==lambdalambda function \nCOF: # printa list ofn = int(input())n = int(input()))fibonacci(n): #a single line containing thenumbers, #aa single line of input:afunction \nCOF = lambda( fib", "a singlenumber of fibonacci numbersa single linea single line ofof input: an integerlambdaa single line ofa single line ofa single line ofthefibonacci numbers(]( n )print(list(map(cube, fibonacci(n))))print(list(map(cube,(n)))) #function \n\n", "a single line containinga singleafibonacci numberfunction \n\nCube = lambdaa list of fibonacci numbersa list of fibonacci numbersinput ( )a single line containingfibonacci numbersoutput (n, fibonacci(n))for a single line offunctionlambda function \nCubeinput ( )a single line of input", "= lambda x :thea singlea list ofnumbers, 2 being thea single line ofinput: a= lambda()## return a list ofa single line of input:a list ofthea list of fibonacci numbers,alist of fibonacci numbers,return a lista list ofnumbers,a list ofnumber of", "thelists of fibonacci numbersfunction \n\nlambda (function \n\nlambda ( fibonacci)thelist of fibonacci numbers,one line of input: an1, 2, 3]a singlelambda function \n\nlambdaa lambda function \n\nlambda(fibonacci(n))a singlefunction \n\nlambda ( fibonaccia single line", "function \n\n78= lambda xaa stringa list of fibonaccinumber of fibonacci numbersa singlea single line containinga singlefibonacci numbersfibonacci ( n )fibonacci(n): # return a listnumber offibonacci(n): #the firstnumber.number.a single line"], "prompt": "\nQUESTION:\n=====Problem Statement=====\nLet's learn some new Python concepts! You have to generate a list of the first N fibonacci numbers, 0 being the first number. Then, apply the map function and a lambda expression to cube each fibonacci number and print the list.\n\nConcept\n\nThe map() function applies a function to every member of an iterable and returns the result. It takes two parameters: first, the function that is to be applied and secondly, the iterables.\nLet's say you are given a list of names, and you have to print a list that contains the length of each name.\n\n>> print (list(map(len, ['Tina', 'Raj', 'Tom'])))  \n[4, 3, 3]  \n\nLambda is a single expression anonymous function often used as an inline function. In simple words, it is a function that has only one line in its body. It proves very handy in functional and GUI programming.\n\n>> sum = lambda a, b, c: a + b + c\n>> sum(1, 2, 3)\n6\n\nNote:\n\nLambda functions cannot use the return statement and can only have a single expression. Unlike def, which creates a function and assigns it a name, lambda creates a function and returns the function itself. Lambda can be used inside lists and dictionaries. \n\n=====Input Format=====\nOne line of input: an integer N.\n\n=====Output Format=====\nA list on a single line containing the cubes of the first N fibonacci numbers.\ncube = lambda x: # complete the lambda function \n\ndef fibonacci(n):\n    # return a list of fibonacci numbers\n\nif __name__ == '__main__':\n    n = int(input())\n    print(list(map(cube, fibonacci(n))))\nUse Standard Input format\nANSWER:\n"}}