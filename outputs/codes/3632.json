{"3632": {"code": ["isof thethenofoflength of thethetheis aof$a..z$, all theinitial string is$a..z$, all thethetheistheof the firstthethe firstis a prefix of anyto be aof$n$. This is the$a..z$ and $a..z$,", "the.( 2).(). split ({ var n([ 0] ). join ([ 1 ] ))(. split) ). split () [[]]). join. join)]. split (. split (", "can$n$$a..z$ aretheaoftheisto$a..z$ isis$a..z$ are theof thefor the first testone$a..z$ are thethefirstthe firststring, which isisaof theis the firstof theof the first input string,", "the).( n - k -) ).).).( ninif( k - 1( k -]). length )). length ).). length ).( n -. length ).(). length(()){ if ( n( n )( n - 1 )", "theallofthethetheofof thetwo$n$$k$$a..z$the$a..z$thethe$k$ is theof theof theof thethe$a..z$ areof thestring, which is the$a..z$ are thelower case letters,", "thethecontainstheofthe testofthenumbers oftheinthetheoneof thethethethe(in thearraythe originalthethe firstone of thethe lastin the list ofin the list of allofof theof the original string, in", "the$n$ is the$n$ is$k$ is$n$ is theisthetoathethestring, theis the$a..z$ are theof the firstof$k$ is the$a..z$ are thetheof thethein the list of$n$the firstof $a..z$", "( $1is thetheinthetheis$n$is)(+\" \". split (= n). split (. split ()( ) ;split)split ( ) ;(+)", "the(numbers of lower casethe$1$ and thennumbers,ofthein the list ofin the list ofstring.a single integer, whichlength of all inputistointhenumbertheof alllength ofall input strings,$a..z$ are equal to $a$and $a..z$ are equal tothe number of", ":( $1 $k $then$$n$theof $n$theanumber ofthe$n$, then $k$$k$ is thefirsta string, whichis theis the$k$ is theof thethe.(() ==$k$ $n$( ) =="], "prompt": "\nQUESTION:\nConsider $n$ initial strings of lower case letters, where no initial string is a prefix of any other initial string. Now, consider choosing $k$ of the strings (no string more than once), and concatenating them together. You can make this many such composite strings:$n \\times (n-1) \\times (n-2) \\times \\ldots \\times (n-k+1)$\n\nConsider sorting all of the composite strings you can get via this process in alphabetical order. You are given a test composite string, which is guaranteed to belong on this list. Find the position of this test composite string in the alphabetized list of all composite strings, modulo $10^9+7$. The first composite string in the list is at position $1$.\n\n-----Input-----\nEach input will consist of a single test case. Note that your program may be run multiple times on different inputs. Each test case will begin with a line with two integers, first $n$ and then $k$ ($1 \\le k \\le n$), where $n$ is the number of initial strings, and $k$ is the number of initial strings you choose to form composite strings. The upper bounds of $n$ and $k$ are limited by the constraints on the strings, in the following paragraphs.\n\nEach of the next $n$ lines will contain a string, which will consist of one or more lower case letters $a..z$. These are the $n$ initial strings. It is guaranteed that none of the initial strings will be a prefix of any other of the initial strings.\n\nFinally, the last line will contain another string, consisting of only lower case letters $a..z$. This is the test composite string, the position of which in the sorted list you must find. This test composite string is guaranteed to be a concatenation of $k$ unique initial strings.\n\nThe sum of the lengths of all input strings, including the test string, will not exceed $10^6$ letters.\n\n-----Output-----\nOutput a single integer, which is the position in the list of sorted composite strings where the test composite string occurs. Output this number modulo $10^9+7$.\n\n-----Examples-----\nSample Input:\n5 3\na\nb\nc\nd\ne\ncad\nSample Output:\n26\nUse Standard Input format\nANSWER:\n"}}