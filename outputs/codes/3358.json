{"3358": {"code": ["athecan bea numberall of theinstruction.the number tothethethetheistheall of the0.is notaa number.isa singlethethe number ofandis an integer $0$ (0=the number to output.", "thetheof thethe stack.) ;{) ;} ) ;output ={[ 0 ][ 1 ]) ; }0 ] ) ;] )] ) ; }; if (=() ; }) ;.(} if () { return 0 ;", "andoutputthethe{ if (!( 00 ) {-if (( 0 )-( 0 ) ; }{( 0 ) ; }output.(output; }( 10{ print ( \"Invalid) ; }= 00 ] = 1 ;= 0 ; i <++ ) { if (", "thestack of0thethe+; if (){] =.;[ 0 ]; if (()) { print (\"=) ; }() ; }) ;else { print ( \") ;; }", "/thetoand)outputa)the{{ n == n.( n )+= 1 ; n= nn.); n..[ 0 ] ;n. length ;)( n ) ;.0 ]if ( n.", "theinternallya singleof thethetheanall thevalues of theone of thethetheof thethetheistothethethe last instructionin theinstruction.is thethe last instructionto theone of the", "a single=1 ),) ) ;a1 ), 0;= 0,.0 ){ if ([ 0]. length ==)[ 0 ].0)00 ]. length] []] [ 0 ];] [ 0 ] [[ 0 ][ 0 ]", "-ACOX ACOX ACOX-a. ACOX ACOX ACOX ACOXACOXACOX ACOX XCOXACOX XCOX XCOX XCOXthe:XCOX XCO XCOXCOX XCOX XCOX XCOX XCOXACOX XCOX XCOX XCO", "isainstructionthetheisthetheinthe= 00, n =) ;; i ++ )[ i] =() ;) ;=.(, 0,) ; }( '0', '0'. length ; i", "of-a:( A.1 ] )(( A: () ) ]( A ).A )( A ) )( A) )( A )( A ),) ), A )A )A )( A ), A ) )A ) ) ;"], "prompt": "\nQUESTION:\nOne thing almost all computers have in common, whether it is a simple stack-based calculator, a 6502 powered BBC Micro, or a brand new Android phone, every modern computer requires programs that turn either high-level languages or assembly language into machine code.\n\nUKIEPC recently designed their own processor. While very easy to load programs onto, it is not as complex as some, since it has only one aim: show a number on an innovative laser display board!\n\nThe available memory consists of three $8$-bit registers: A, X, and Y, plus an infinite stack. At program start these registers are initialised to unknown values, and the stack is empty.\n\nThe processor supports six unique instructions:\n - PH <reg>: push the contents of the register (i.e.\u00a0A, X, or Y) onto the stack.\n - PL <reg>: pop a value off the stack into the register. The program will terminate if this instruction is called when the stack is empty.\n - AD: pop two values off the stack, and push the lowest $8$ bits of their sum onto the stack.\n - ZE <reg>: set the register equal to zero.\n - ST <reg>: set the register equal to one.\n - DI <reg>: send the value of the register to the laser display board and exit.\n\nDue to memory constraints, the maximum number of instructions that can be written to disk is $40$. Further instructions will not be executed.\n\nGiven a number, write a program to output the number on the laser display board.\n\n-----Input-----\n - One line containing an integer $N$ ($0 \\le N \\le 255$), the number to output.\n\n-----Output-----\n - At most $40$ lines, each containing one valid instruction.\n\nWhen run in sequence the lines should output the number $N$. The last instruction should be a DI.\n\n-----Examples-----\nSample Input:\n2\nSample Output:\nST A\nST X\nPH A\nPH X\nAD\nPL Y\nDI Y\nUse Standard Input format\nANSWER:\n"}}