{"4533": {"code": ["ifchild ihas1.the2 cookies.1, 2, 3.. length )1..if (g.. size < s.)( ) ).1 ] ) ).(] ) )). length )) :( ) :g.( ) )", ":issj >= gi,a= self., g: returnif (==) =={ return 00 ) )(. add ().)() == 1( ) )[ 0 ]) == 1 )1 ] ). add (( ).( ),", ") ->#: ###: ## # #self.n_children# # # # ## # # # ## # ## # # # ## # ## # # # ## # # # ## # # ## ## # ## # # # ## # # ## # ## # # # ##", "..0.[1,2,3], [1,1]\nOutput: 0.1.#'0',1, 2, 3.a\" \",, 1.\" \",2 ] ) ).]\" \",\" \",\" \",\" \", \" \"\" \"\" \", \" \"\", \" \",", ":) -> int ::..)].( ) )=.( ) )(.) )) ) ; }( ).( ) ){) {0.0 ].) { if.].].. length )", "ifisisthe childrenthatthetheit isa= g..] [] [ 0 ]s [ 0 ]]] = ss []] [ 1] [ 1 ]s] [ 1 ]] [ 0 ]]] [ 1 ] [] [ 0 ]", "g..{(.len ()],) )..( )( )] ):( ) ).( ) ) )).( ) )( ) ))if (..( ){ return (.", "self, gsj ) -> int ::(()) )..( ) :( ).sj >=sj >=)) :;..) )() )...( ) ) )) ) ). append", ".= g.).( ).( )( ) ; if[ 1, 2.self..=).( )=],.( ).).[ 1 ] )( ).) ;( ). length=[ 1 ] )", "thethethe childathechildren with thethethe(n, i, j)(n, j,s:s:g,: ##s.s.len(i) #n.s.len(i) #s.s.len(i) #is aallchildren with the samechildren ##ifif ( n"], "prompt": "\nQUESTION:\nAssume you are an awesome parent and want to give your children some cookies. But, you should give each child at most one cookie. Each child i has a greed factor gi, which is the minimum size of a cookie that the child will be content with; and each cookie j has a size sj. If sj >= gi, we can assign the cookie j to the child i, and the child i will be content. Your goal is to maximize the number of your content children and output the maximum number.\n\n\nNote:\nYou may assume the greed factor is always positive. \nYou cannot assign more than one cookie to one child.\n\n\nExample 1:\n\nInput: [1,2,3], [1,1]\n\nOutput: 1\n\nExplanation: You have 3 children and 2 cookies. The greed factors of 3 children are 1, 2, 3. \nAnd even though you have 2 cookies, since their size is both 1, you could only make the child whose greed factor is 1 content.\nYou need to output 1.\n\n\n\nExample 2:\n\nInput: [1,2], [1,2,3]\n\nOutput: 2\n\nExplanation: You have 2 children and 3 cookies. The greed factors of 2 children are 1, 2. \nYou have 3 cookies and their sizes are big enough to gratify all of the children, \nYou need to output 2.\nclass Solution:\n    def findContentChildren(self, g: List[int], s: List[int]) -> int:\n        \nUse Call-Based format\nANSWER:\n"}}