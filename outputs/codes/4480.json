{"4480": {"code": ["( self :A :] AA : A)A: return### return A== A[j] #== A[j] #A: A[j]A[j]] = A [A[j]A[i] == A[j]A[i] == A[j]A[j]A[j] == A[", "= [0,1]=[ 0,1]1]A [) { ifA [\". length ==\" \" ) return]A [ j - 1A [ j,][ j ]0 ] == A(] == A0 ] == A [: return; }\" + AA( A;", "A [:: A = [0,0]A =[0,0][0,0]A [:A [ 0 ]1 ] +A[j]j-1] == A[j]A[j] == A[j-1]A [ j-1]A [ j]A [ j ]] == AA [A[j", "AA [ 0 ] +A [A[j-1] +A [j-1] +...A [1 ] +... +A[j-1] +...+ A[i+1] +...+ A[j]A[j]A[i]A[j-1] == A[j]A[j-1] +... + A[i]", "AA [] )AifiifA [ i= A: return true ifA [(: return): returnA : A( self,.))A.self, A. length - 1 ]A [ j ]A [] == A", "A.)A [ i, A []A [ j ] ]::A [ j - 1-[ 0 ] ]= A] ]],], A [() { return[A [], A [ iA], A] )", "A :] )[] ))if (A [A [[ 0 ]A []] = A0 ]1 ] =0 ] =] = A [1 ][ 2 ]] = A [1 ]A[j][][= A[ 1", ":AA [] == A[i]1 ] == A[j]A [A []A [ i:if (A.!=A[i] == A[j-1] == A[j]returnA [ i ]A[j]A] == Areturn A ==A [] == A[j]A [ i", "A [ i ]) -> bool:] :[ ] :] :if ([2 ] == A[ 3 ] ==: return false=) { if ([ 1] ) { returnif ( self [)[ 0 ] == A[ 0 ] == A[ 0 ]A [ 1 ]. length( self[ 0 ]] ) { return", "A [ i ]A [ j -A []A[j] == A[j-1] returnA [] == A [] == A [= 0[i] == A[j](A[j] == A[j-1]]A [ j-1] == A[j-1]A[j] == A[j-1]A ["], "prompt": "\nQUESTION:\nGiven an array A of integers, return true if and only if we can partition the array into three non-empty parts with equal sums.\nFormally, we can partition the array if we can find indexes i+1 < j with (A[0] + A[1] + ... + A[i] == A[i+1] + A[i+2] + ... + A[j-1] == A[j] + A[j-1] + ... + A[A.length - 1])\n\u00a0\nExample 1:\nInput: A = [0,2,1,-6,6,-7,9,1,2,0,1]\nOutput: true\nExplanation: 0 + 2 + 1 = -6 + 6 - 7 + 9 + 1 = 2 + 0 + 1\n\nExample 2:\nInput: A = [0,2,1,-6,6,7,9,-1,2,0,1]\nOutput: false\n\nExample 3:\nInput: A = [3,3,6,5,-2,2,5,1,-9,4]\nOutput: true\nExplanation: 3 + 3 = 6 = 5 - 2 + 2 + 5 + 1 - 9 + 4\n\n\u00a0\nConstraints:\n\n3 <= A.length <= 50000\n-10^4\u00a0<= A[i] <= 10^4\nclass Solution:\n    def canThreePartsEqualSum(self, A: List[int]) -> bool:\n        \nUse Call-Based format\nANSWER:\n"}}