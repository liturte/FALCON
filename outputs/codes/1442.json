{"1442": {"code": ["order book.  publicorder book oforder book of.[ 1 ].= 1,sell orders2 ]..].= 0 ;..);.} } else {....sell orders. add ( order )", "in order book ofthe) {order bookorder book of0) ; forin order book oforder book oforders.order book oforder book of depthain order bookof orderorder book ofordersin order book of.) ) { if (( ) == 0( ) ) {) { if (0 ) {= 0 ;1", "buy or sellin descending orderorder bookorder book oforders.the orderorders inorder book ofsellordersinandsell orders in descending orderorder book ofin descending order.and.>)( ).( ).( ).( ).). add (( ) ).sell orders in descending order", "orders with price p andbuy or sellorders with= 0 ;order book ofdepth0 ; order book oforders. The order bookin order book oforder book of={ order book) { order; orderbook. addOrder) { orderbook= orderbook. addOrderbuy, 0, 0. addOrder (: orderbook: orderbook.", "order book of(1 \u2264 n.1 \u2264 n(1 \u2264(1 \u2264sell orders are(2 \u22640 \u2264\u2014 direction, price and.s(1(1(2,(2, 4), (4, 5), (3,(1, 5), (6,", ").::order:: :: :: : :: ::: : :: : : :: : : :: : :::: : ::: :::: : :::: :: : : :", ".)sell ordersorder books withwith priceorder books withdirection d(0 \u2264 p_{i}price p_{i}in descending orderin descending orderin descending order.forsell ordersbuy orders(0 \u2264sell orders with==..... order. order( order. order", "withorder bookinbuy or sellordersbuy or sellthe){ #print '###aorder book of(1 \u2264 n(1=n ) ;if> 0 ) {. length - 1; i < n ;i= n + 1) ; }; i ++ )(0 ) ; }.", "ordersorders= 14 )= 1 ) ;orderbook ofsell orders is= 0 ;] == 1 ;[ 1 ] =.] == 1 ;= 1=.=11 ]1 ] = 1 ;.sell orders.orders for ain order book ofin order book of", "buy orders andorders (0\u2264 n \u2264sell orders (1sell orders (1\u2264(1ordertellsorders oforder bookorder book oforders.sell orders (1,(2, 3),5,4).)order book ofiforders oforder book oforders,a, directionorder"], "prompt": "\nQUESTION:\nIn this task you need to process a set of stock exchange orders and use them to create order book.\n\nAn order is an instruction of some participant to buy or sell stocks on stock exchange. The order number i has price p_{i}, direction d_{i} \u2014 buy or sell, and integer q_{i}. This means that the participant is ready to buy or sell q_{i} stocks at price p_{i} for one stock. A value q_{i} is also known as a volume of an order.\n\nAll orders with the same price p and direction d are merged into one aggregated order with price p and direction d. The volume of such order is a sum of volumes of the initial orders.\n\nAn order book is a list of aggregated orders, the first part of which contains sell orders sorted by price in descending order, the second contains buy orders also sorted by price in descending order.\n\nAn order book of depth s contains s best aggregated orders for each direction. A buy order is better if it has higher price and a sell order is better if it has lower price. If there are less than s aggregated orders for some direction then all of them will be in the final order book.\n\nYou are given n stock exhange orders. Your task is to print order book of depth s for these orders.\n\n\n-----Input-----\n\nThe input starts with two positive integers n and s (1 \u2264 n \u2264 1000, 1 \u2264 s \u2264 50), the number of orders and the book depth.\n\nNext n lines contains a letter d_{i} (either 'B' or 'S'), an integer p_{i} (0 \u2264 p_{i} \u2264 10^5) and an integer q_{i} (1 \u2264 q_{i} \u2264 10^4) \u2014 direction, price and volume respectively. The letter 'B' means buy, 'S' means sell. The price of any sell order is higher than the price of any buy order.\n\n\n-----Output-----\n\nPrint no more than 2s lines with aggregated orders from order book of depth s. The output format for orders should be the same as in input.\n\n\n-----Examples-----\nInput\n6 2\nB 10 3\nS 50 2\nS 40 1\nS 50 6\nB 20 4\nB 25 10\n\nOutput\nS 50 8\nS 40 1\nB 25 10\nB 20 4\n\n\n\n-----Note-----\n\nDenote (x, y) an order with price x and volume y. There are 3 aggregated buy orders (10, 3), (20, 4), (25, 10) and two sell orders (50, 8), (40, 1) in the sample.\n\nYou need to print no more than two best orders for each direction, so you shouldn't print the order (10 3) having the worst price among buy orders.\nUse Standard Input format\nANSWER:\n"}}