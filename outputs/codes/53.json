{"53": {"code": [".() { if () { printie.]) ; }) { print (( ) ;() ; }[ ][].if (( ) ; } }.) ; } else( ) ;{ print ( \"Could) ; } },.. split (", "( 1 \u2264 mis1 \u2264 100) \u2014sn (2 \u2264 100)i \u2264 100) \u2014 then_1, b_2,..., b_{n} (1n_1,..., b_{n} (1\u2264 100)to form somestring s.a \u2264", "soflengthm) a_{i} = a_{m}t) a_{i} \u2260 a_{m}a_{i} =(1 \u2264 n\u2264) t_1,\u2264 100,is even,and n is even,\u2014 the numberof characters in s.length m is even.is even,the", "..., n )...{}.].[ 0 ] ;0]. length. length ; i< len ; i( )[ i]. length ; i. length]i ]] =} else if ((", "a \u226411 1 1 1 1a_i ithe index is. \".). split (.) )[ 0 ]. split ((; ii0 ].. split ( ')0 ]. split]][] ) ) )= [ ] ;] ;", "thetheif n is even.thecan getisthesis even.is even.2 3 4828 8 11 1 1 1 11 1 1 1 11 1 1 11 1 1 1 11 1 1 1 11 1 111 1 1 1 12 2 31 1 11 1 1 12 1", "string a oftheathat it can bea_1, a_2,...,ofnumbers b_1,the number of characters inthe beauty of indexof1 1 1 1 12 2 1b_2,..., b_n,a_1,..., b_n,of)i + 1](1 \u2264\ufffd", "and a_{m}in a_{m} \u2260[ ] a_i =]. split () ).( ) ; ii )t_i ])= t_i ;) {[[ i ]] ;.; i()= t_i ;) {[ i ]length ; i ++]. length ;", "(1 \u2264 n \u2264number oft \u2264 100).1 \u2264sin t.)t(2 \u2264 n \u2264 100,)n =n- 1 ]sn]i= 0 ; i <. split () [ 1)() {= i +", "= 0 ; i <] == 0 ; i] = i ;i ] )] ; }; i ++ ) {[]] =[ i ]] [] ; } }=() ;(); }( 'n',i ] )] [ i ]] [ 0 ]= ( i] )"], "prompt": "\nQUESTION:\nA string a of length m is called antipalindromic iff m is even, and for each i (1 \u2264 i \u2264 m) a_{i} \u2260 a_{m} - i + 1.\n\nIvan has a string s consisting of n lowercase Latin letters; n is even. He wants to form some string t that will be an antipalindromic permutation of s. Also Ivan has denoted the beauty of index i as b_{i}, and the beauty of t as the sum of b_{i} among all indices i such that s_{i} = t_{i}.\n\nHelp Ivan to determine maximum possible beauty of t he can get.\n\n\n-----Input-----\n\nThe first line contains one integer n (2 \u2264 n \u2264 100, n is even) \u2014 the number of characters in s.\n\nThe second line contains the string s itself. It consists of only lowercase Latin letters, and it is guaranteed that its letters can be reordered to form an antipalindromic string.\n\nThe third line contains n integer numbers b_1, b_2, ..., b_{n} (1 \u2264 b_{i} \u2264 100), where b_{i} is the beauty of index i.\n\n\n-----Output-----\n\nPrint one number \u2014 the maximum possible beauty of t.\n\n\n-----Examples-----\nInput\n8\nabacabac\n1 1 1 1 1 1 1 1\n\nOutput\n8\n\nInput\n8\nabaccaba\n1 2 3 4 5 6 7 8\n\nOutput\n26\n\nInput\n8\nabacabca\n1 2 3 4 4 3 2 1\n\nOutput\n17\nUse Standard Input format\nANSWER:\n"}}