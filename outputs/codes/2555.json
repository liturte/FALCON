{"2555": {"code": ["thepok\u00e9mon$n$ $n$a_i$ $n$ $q$ $n$ $q$the$n$ $n$ $q$$n$ $q$\\cdot 10^5$, 0$r$ $n$ \\cdot 10^5$,numbers are distinct.number of pok\u00e9mon and numberofthe{", "that$k$.( $b_1$i$thethe pok\u00e9mon.\\cdotnumber of pok\u00e9monpok\u00e9mon.thethepok\u00e9mon.a_i$ - a_ktheof the pok\u00e9mont(\\cdot 10^5$) denoting thethethe", "== $;) ; if ($==) {( a_i$ ) ;) ; }for= $a_i$ - a_k) {()( a_i$ ) ;( a_k )) ) {() ; }) ;( a_i ).( a_i ) ;( a_k", "the pok\u00e9mon softheof.\\cdot 10^5$) denoting thepok\u00e9mon andthea pok\u00e9mon(a pok\u00e9monthey are the samethe pok\u00e9monof the pok\u00e9mon, or teampok\u00e9mon.a pok\u00e9mon).thetheto", "$n$.and $t$ can be) ) {;thetheof thethe$r_i$ -the=$l_i$-th\\dots$q_i$-thpok\u00e9mon.of the).in the=({,, 0,) ) ;a_i$ - 1", "( $1$1 - 1) \\cdot\\cdot$n$for eachof$q$ $n$, $q$$n$, $n$ and$t$ $n$$n$ and$n$, $q$ $n$ andof$q$ $n$ and $n$\\cdot 10^5$) denoting thenumber of", "number of pok\u00e9mons:::: n$: q$ (: n$: n$ (: n$ (n$: n$ ( ): n$: n$ ( ): n$ ( ):: n$ ( )n$ ( )( ) {: n$ (: n$ ( )}): n", "ofathethetheof the armythethethe pok\u00e9monand $l_i$-thof the army. Thethe pok\u00e9monthe pok\u00e9mon isthethe pok\u00e9mon. Theisthethethe pok\u00e9monthethe pok\u00e9mon. Thethe pok\u00e9", "they arethe pok\u00e9mon\u00a0\u2014 it is thethethe$l$ -ofthe pok\u00e9monisthe1 \\cdot 10^5, 0 \\leofin eachthethein the$r_i$ is equal to$l_i$,$r_i$, $r_i$and $l_", "thethe.\"\\cdot 10^5$)of each test caseinteger $n$1 \\le( 1) )of(t \\le 10^5$)number ofnumber of operations respectively.numberofof thetheis one positive integer $t$1number ofofnumber of operations respectively.of theone positive integer $n"], "prompt": "\nQUESTION:\nThis is the hard version of the problem. The difference between the versions is that the easy version has no swap operations. You can make hacks only if all versions of the problem are solved.\n\nPikachu is a cute and friendly pok\u00e9mon living in the wild pikachu herd.\n\nBut it has become known recently that infamous team R wanted to steal all these pok\u00e9mon! Pok\u00e9mon trainer Andrew decided to help Pikachu to build a pok\u00e9mon army to resist.\n\nFirst, Andrew counted all the pok\u00e9mon\u00a0\u2014 there were exactly $n$ pikachu. The strength of the $i$-th pok\u00e9mon is equal to $a_i$, and all these numbers are distinct.\n\nAs an army, Andrew can choose any non-empty subsequence of pokemons. In other words, Andrew chooses some array $b$ from $k$ indices such that $1 \\le b_1 < b_2 < \\dots < b_k \\le n$, and his army will consist of pok\u00e9mons with forces $a_{b_1}, a_{b_2}, \\dots, a_{b_k}$.\n\nThe strength of the army is equal to the alternating sum of elements of the subsequence; that is, $a_{b_1} - a_{b_2} + a_{b_3} - a_{b_4} + \\dots$.\n\nAndrew is experimenting with pok\u00e9mon order. He performs $q$ operations. In $i$-th operation Andrew swaps $l_i$-th and $r_i$-th pok\u00e9mon.\n\nAndrew wants to know the maximal stregth of the army he can achieve with the initial pok\u00e9mon placement. He also needs to know the maximal strength after each operation.\n\nHelp Andrew and the pok\u00e9mon, or team R will realize their tricky plan!\n\n\n-----Input-----\n\nEach test contains multiple test cases.\n\nThe first line contains one positive integer $t$ ($1 \\le t \\le 10^3$) denoting the number of test cases. Description of the test cases follows.\n\nThe first line of each test case contains two integers $n$ and $q$ ($1 \\le n \\le 3 \\cdot 10^5, 0 \\le q \\le 3 \\cdot 10^5$) denoting the number of pok\u00e9mon and number of operations respectively.\n\nThe second line contains $n$ distinct positive integers $a_1, a_2, \\dots, a_n$ ($1 \\le a_i \\le n$) denoting the strengths of the pok\u00e9mon.\n\n$i$-th of the last $q$ lines contains two positive integers $l_i$ and $r_i$ ($1 \\le l_i \\le r_i \\le n$) denoting the indices of pok\u00e9mon that were swapped in the $i$-th operation.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $3 \\cdot 10^5$, and the sum of $q$ over all test cases does not exceed $3 \\cdot 10^5$. \n\n\n-----Output-----\n\nFor each test case, print $q+1$ integers: the maximal strength of army before the swaps and after each swap.\n\n\n-----Example-----\nInput\n3\n3 1\n1 3 2\n1 2\n2 2\n1 2\n1 2\n1 2\n7 5\n1 2 5 4 3 6 7\n1 2\n6 7\n3 4\n1 2\n2 3\n\nOutput\n3\n4\n2\n2\n2\n9\n10\n10\n10\n9\n11\n\n\n\n-----Note-----\n\nLet's look at the third test case:\n\nInitially we can build an army in such way: [1 2 5 4 3 6 7], its strength will be $5-3+7=9$.\n\nAfter first operation we can build an army in such way: [2 1 5 4 3 6 7], its strength will be $2-1+5-3+7=10$.\n\nAfter second operation we can build an army in such way: [2 1 5 4 3 7 6], its strength will be $2-1+5-3+7=10$.\n\nAfter third operation we can build an army in such way: [2 1 4 5 3 7 6], its strength will be $2-1+5-3+7=10$.\n\nAfter forth operation we can build an army in such way: [1 2 4 5 3 7 6], its strength will be $5-3+7=9$.\n\nAfter all operations we can build an army in such way: [1 4 2 5 3 7 6], its strength will be $4-2+5-3+7=11$.\nUse Standard Input format\nANSWER:\n"}}