{"2639": {"code": ["#:[1,2,2],[1,2],[1,2]2][1,2],[1,2],[1][2],[1],[1,2],[1,2][1], [1,2], [1,2], [1,2], [1,2], [1,2],[1,2],", "nums: List[int]:(self, nums:[1,2,2][1,2,2],[1,2],[1,2], [2,1], [1,2], [1,2],[1,2],[1,2,2],[2,2],[1,2], [1,2,2], [2,2],[", "(nums: List[int])->List[List[int]]:List[int]:\nANME:(nums:0 ]:\nANME:\nANME:\nANME[1,2][2],[1,2],[1,2],[2],[2],[2],[1,2],[1,2],[2,2],[1,2,2],[1", "nums: List[int][1,2,2][1,2,2],[1,2,2],[1,2], [1,2], [2,2],[1,2,2], [2,1,2,2],[1,2][1,2,2], [2,2,2],[1,2,2],[1,2", "[1,2,2],[1,2,2],[2,2][1,2,2],[2],[1,2,2],[1,2],[1,2,2], [1,2,2], [1,2,2],[1,2], [1,2],[1,2][2]][1,2],", "self, nums: List[int]]: returnnumsin nums:: returnnums, nums): return(self, nums, nums, nums,#: returnif nums(self, nums): returnlist ( numslist.( nums, nums( nums)( nums: returnnums.self.).]= nums( nums", ")=; if) { return( nums )[] ) return( nums )=( nums ) )( nums ) return[ ]) return( nums ) )( nums )( nums ) returnreturnlist ( nums )", "nums: List[int][1,2,2],[1,2,2], [2,2],[1,2],[1,2],[1,2],[1,2], [1,2], [2,2],[1,2],[1,2],[1,2]][1,2][2],[1,2],", ".]()2self, nums: List[int](:]( nums[ ]) ) : return( nums [ 0 ][]) : return nums: returnlist [list ( nums )] )[] ) :]] ) ) : return( nums [ 1 ]: return nums", ": returnreturn subsetsWithDup(self,nums: List[int](self):return subsetsWithDup(nums):list[: return subsetsWithDup(nums:[( nums: List[int]]):return] ) )( nums: List[int]): return subsetsWithDup(self, nums:( nums: List[int]):returnList[int]:return subsetsWithDup"], "prompt": "\nQUESTION:\nGiven a collection of integers that might contain duplicates, nums, return all possible subsets (the power set).\n\nNote: The solution set must not contain duplicate subsets.\n\nExample:\n\n\nInput: [1,2,2]\nOutput:\n[\n  [2],\n  [1],\n  [1,2,2],\n  [2,2],\n  [1,2],\n  []\n]\nclass Solution:\n    def subsetsWithDup(self, nums: List[int]) -> List[List[int]]:\n        \nUse Call-Based format\nANSWER:\n"}}