{"4659": {"code": ["22]1][1,3,3,1],[1,4,6,4,1],[1,4,6,4,1],[1,6,6,4,1],[1,3,3,1],[1,4,6,4,1], [1,6,6,6,1][1,4,6,4,1", "numRows: int:::: int :: int :int :: int :: int(1 ) ) :int()] )] ) ; return)=])( self, numRows) ;return self.self.(self", "function generate(self, numRows: int):list(self: List[int]):=list(self: List[int]): return(numRows] :) :] : returnreturn] : return)[] )[[ 0 ] ::[ 0 ] :( selfnumRows[:. join (( self.) : return", "(self, numRows: int):=numRows: int):( self, numRows: int):( self, numRows: int):self, numRows: int):( self, numRows: int)::[0](self, numRows:self, numRows: int):( self, numRows: int):: return) ::=numRows >=: return( self, numRowsnum", "int:if numRows >=0:21] \"\"\" \"\"\" \"\"\": \"\"\" \"\"\" \"\"\" \"\"\"\"\"\" \"\"\" \"\"\" \"\"\" \"\"\"\"\"\" \"\"\" \"\"\" \"\"\" \"\"\"\"\"\" \"\"\" \"\"\" \"\"\" \"\"\"\"\"\" \"\"\" \"\"\" \"\"\" \"\"\"\"\"\" \"\"\" \"\"\" \"\"\" \"\"\"\"\"\" \"\"\" \"\"\" \"\"\" \"\"\"\"\"\"\"\"\" \"\"\" \"\"\" \"\"\" \"\"\"\"\"\"\"\"\" \"\"\" \"\"\" \"\"\" \"\"\"\"\"\" \"\"\" \"\"\" \"\"\" \"\"\"\"\"\" \"\"\" \"\"\" \"\"\"\"\"\" \"\"\" \"\"\" \"\"\" \"\"\"\"\"\" \"\"\" \"\"\" \"\"\" \"\"\"", ":: return( selfnumRows(numRows: int): return#(numRows: int): return (numRows -): return)if ( numRows <numRows )( numRowsnumRows - 1 ]) )[numRows( self, numRows", "numRows: int:: int:[1,3,3,1],[1,4,6,4,1].) ;] =numRows] =[ ]]numRows = numRows(:] =[[. append ((] =] = self.[ 0 ]]=( self( self", "int[1,2,3],[1,4,6,4,1],[1,3,3,1],[1,4,6,4,1],[1,4,6,4,1],[1,5,5,1],[1,4,6,4,1],[1,3,4,1],[1,6,6,4,", ":if numRows <= 0numRows )numRows[: returnnumRows ) ]: return[] return [ ]] #()] =( )if numRows <= 0{ return [ ]: return [ ]]( )( ) : return[ 1 ] ) :if numRowsnumRows ) ;; } elsereturn [ ]", ".() )) :=.( ).[] ) [ 0:(). append (=[ ] )] ) )) ) ) )if ( numRows >>= 0 )numRows - 1if numRows >numRows::, numRows )return"], "prompt": "\nQUESTION:\nGiven a non-negative integer\u00a0numRows, generate the first numRows of Pascal's triangle.\n\n\nIn Pascal's triangle, each number is the sum of the two numbers directly above it.\n\nExample:\n\n\nInput: 5\nOutput:\n[\n     [1],\n    [1,1],\n   [1,2,1],\n  [1,3,3,1],\n [1,4,6,4,1]\n]\nclass Solution:\n    def generate(self, numRows: int) -> List[List[int]]:\n        \nUse Call-Based format\nANSWER:\n"}}