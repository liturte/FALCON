{"3123": {"code": ["aof)a stringa stringa string as follows.1:1 1 1 12:\n21:Output 2:\n2output 1:\n1:11:11:11:11:11:11:11:11:11:11:1:1:1:1:1:1:1:1:1:1:1", "a stringisstring{ if (!is a string,containsstring, whichisthethe stringthata string, whichis a\\le a_n\\le$1, $2, $3,$4,\\le a_n\\le== (((= ( ([ ] )= (= ( () ).", "stringif thearein asingle lineandone line isone line istheina string as follows.$n$ integerstring containscharacters, whichfollowed bythe stringof a$a_1$ quote characters,the string(a_1$ n$$a_2$ quote characters,is followed by aa positive number of non-quote", "arethat is thestring.a stringis a stringininis notthe$k$ -a string. The$k$-quotation is aa string.a string with1:a $k$1:output 2:\n2Outputoutput 1:C2C2CO2CO2CO2CO2CO2CO2CO2CO2CO2CO", "$k$.if there isin a $k$quotation marks are0and theare$k$the string.$k$ -theofthe$k$1:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0", "$ka single charactera stringthe$a_n$ integer, which$a_n$number of non-quote characters,or(a_n$ integer)number of(a_n$ integer)are theintegerandtheone of thetheaa$a_n$ integer,as follows.the stringthestring is$a", "a single quoteit istheofquotationsisthey arethethecharacter,thatthe string,withcharacter, which isin theand thethecharacter, whichis a single character.theofthein the output.quote characters, which isthe string. split (", "$1$-quotation is a string,$k$ifthe output isoutput is a string.$k$$k$is a stringareathestring containsa string witha stringin-betweenthecharacters, which are followed byquote characters, andthe inputthe inputis a string.is a string, whichthe string is athe string", "the inputandis a2:0:1:2:2:2:2:2:2:2:2:2:2:2:2:2:2:2:2:2:2:2:2:2:2:2:2:2:2:2:2:2:1:1:1:1:2:1:1:1:1:1:2:1:", "a stringa string inor the$a_1$ quote characters$a_2$ quote characters, whicha positive number of non-quotecharacters, which are followed bythethe $a_1$stringthethe$a_2$ quote characters,a positive number of non-quotecharacters, which are followed bya positive number ofcharacters, andfollowed bythe string"], "prompt": "\nQUESTION:\nNested quotations are great not only for writing literature with a complex narrative structure, but also in programming languages. While it may seem necessary to use different quotation marks at different nesting levels for clarity, there is an alternative. We can display various nesting levels using $k$-quotations, which are defined as follows.\n\nA $1$-quotation is a string that begins with a quote character, ends with another quote character and contains no quote characters in-between. These are just the usual (unnested) quotations. For example, 'this is a string' is a $1$-quotation.\n\nFor $k > 1$, a $k$-quotation is a string that begins with $k$ quote characters, ends with another $k$ quote characters and contains a nested string in-between. The nested string is a non-empty sequence of $(k-1)$-quotations, which may be preceded, separated, and/or succeeded by any number of non-quote characters. For example, ''All 'work' and no 'play''' is a $2$-quotation.\n\nGiven a description of a string, you must determine its maximum possible nesting level.\n\n-----Input-----\nThe input consists of two lines. The first line contains an integer $n$ ($1 \\le n \\le 100$). The second line contains $n$ integers $a_1, a_2, \\ldots , a_ n$ ($1 \\le a_ i \\le 100$), which describe a string as follows. The string starts with $a_1$ quote characters, which are followed by a positive number of non-quote characters, which are followed by $a_2$ quote characters, which are followed by a positive number of non-quote characters, and so on, until the string ends with $a_ n$ quote characters.\n\n-----Output-----\nDisplay the largest number $k$ such that a string described by the input is a $k$-quotation. If there is no such $k$, display no quotation instead.\n\n-----Examples-----\nSample Input 1:\n5\n2 1 1 1 3\nSample Output 1:\n2\n\nSample Input 2:\n1\n22\nSample Output 2:\n4\nUse Standard Input format\nANSWER:\n"}}