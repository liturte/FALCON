{"2726": {"code": [".0 0 011 :output:1:2:6 11 13 152:1:1:7:7:8 9 109 10 11 1212 13 1516:2:6 10 118 9 10 111:2:1:8 9 10 111:C0 0 0 1:C0 02:C", "the). Thethe cardthethe deck.thethe.], 0,], 1,), 0), 1, 1, 1,,, 0, 0,,, 0, 00, 0,,1, 11,00, 0, 0,1, 1,1, 1", "thetheto betheof acardsthethe card in thethetheinputa number ofcards in the deck.the card iscardthe=)=in the( n) ; if ((== 1 ) {( n ) )} else { if (", "theandtheitthe(.{( ){ return 0 ;({ return 0 ;= 0 ; i <}({ return 0 ; };\" +(.\" +.\" + \"+ \" \" +\" + \" \"; }", ".  public)the deck. Theisinthethe= n) { int i=i.() { if (> 0 )> 0 ){( ) ; }) ;else { if()) ;) {) { if (( ) ) ;", "0.7theandthetheof thecards in the deck.$0 \\le a_ i$$0the number of cardsof thecards in thethecards in the deck.thethecards in the deck.$a_ i$the number of cardsin thethecards in the deck.for each card.the number", "jacobthe cardthethethat numberthethe lastcardthe deck. Thecardsthethe cardthethethe cardin thejacob isthe firstthenumber of cards(a card in thethethe number of cardsthecards in the deck.the card in thethe deck,these are the same,", "theaathe cardtheisthe cardtheathethe1:0: 0:1:1:1:1: 1:0: 1: 1:1: 1: 1:1:1:1: 1: 1: 1: 11: 1: 1: 1: 1:: 1: 1:2: 1:", "() ) {( n ) ;number of cards in thein the deckif)of.0.0000001:1:2:3:92:1.000000 1:1:1.0000005:1.0000001:1.0000001:1:1.000000 1:1.000000 1:1.000000Input5", "Jacob\u2019s(thethebethethe()the deck. Thethe next lineis athe first line containsfor the firstthe number ofof thenumber of cardsthe deckthethe.thethe('' +$1- 1 ) / 2.0of theof the deck.theof the"], "prompt": "\nQUESTION:\nJacob is playing a very odd solo card game called StopCard. In this game, the deck consists of $n$ cards where every card has one unique integer written on one side of it. The deck is shuffled randomly before the game is played. During each turn of the game, Jacob can choose to either take a card off the top of the deck and read that value, or not take a card off the deck and end the game. His final score for the game is the value of the last card taken from the deck. The deck will always have at least one card, and the first turn of the game must always be to draw the top card of the deck.\n\nJacob has a basic understanding of optimal stopping theory, so he devises a plan to play the game somewhat effectively. His plan is to keep drawing cards for a predetermined number ($c$) of times, then to keep going until he sees a card that is larger than all the cards he previously saw, then to stop. His score will be the value written on that card. If he never sees a larger value on a card than the first cards he skipped, he would continue drawing until the deck runs out and would be left with a score equal to the number on the last card in the deck.\n\nWhat is Jacob\u2019s expected score under this strategy?\n\n-----Input-----\nThe input consists of a single test case. The first line contains two integers $n$ and $c$ denoting the number of cards in the deck ($0 < n \\le 64$) and $c$ is the number of cards Jacob will definitely draw ($0 \\le c < n$). The second line contains $n$ distinct integers $a_ i$ ($0 \\le a_ i \\le 10000$) - the numbers written on the cards in the deck, which may be given in any order.\n\n-----Output-----\nOutput the expected score under Jacob\u2019s strategy. Your answer will be considered correct if its absolute or relative error does not exceed $10^{-5}$.\n\n-----Examples-----\nSample Input 1:\n2 1\n0 1\nSample Output 1:\n0.500000\n\nSample Input 2:\n4 2\n0 4 8 6\nSample Output 2:\n5.500000\n\nSample Input 3:\n15 7\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15\nSample Output 3:\n11.266667\nUse Standard Input format\nANSWER:\n"}}