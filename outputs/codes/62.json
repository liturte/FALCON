{"62": {"code": ["a_1, a_2,..., a_{n}the(1 \u2264n)int in \u2264(1 \u22642a_{i} = a_{i} -(1(1 \u2264 n \u2264(0 \u2264 a_{i})the(1 \u2264 na_{", "number ofofand1] ))] )( 1) )) {( 1 \u2264)) {(= ()] ) ) )] [ 0 ]:) ) ) {)( 1 )a_1, a_2,a_1, a_2,...( 1 \u2264 a_{i}", ".( 1(01)..) ) {})=1 ) {() { returna_1, a_2,( ) ) {.) ; }.}()) {[ 0 ] ;; } }\"BitLGM\") { return (", "theyoua_1, a_2,..., a_{n}:::: a_1,a_2: a_2,: a_1: a_2, n: a_n }: a_n }the number ofa_1, n :: a_n },: a_n },: a_n }:", "thenumber ofall ofa_1, a_2,..., a_{n}(1 \u2264\u226410 \u22642 \u2264\"BitLGM\" (with the quotes)\"BitAryo\"\"BitLGM\" (with the quotes)\"BitAryo\" (without the quotes).\"BitLGM\"", ".theof thetakes one of= 1:'1','0', '1',, '0', '0','0', '0', '0''1', '1''0','0''0', '0''0', '0', '0''1''0'", "00thein thesequencethetheof0 \u2264andit cana_{i} - x, thata_{i} - x, that is,a_{i} - x, thatin the(0 \u2264 a_{i}//thei ]1 ]= 00 ] ==()) { if ( a", "of thetelling theplays\"BitLGM\" or \"BitAryo\"(2 \u2264 n1tellinga_1) a_2,..., a_{n}andanda_1, a_2,..., a_{n}the(1 \u2264 nthe(1 \u2264a_{i}", "thatthe number oftheyit.it is, apply assignment:- x, forthata_{i}= 1,= 1,a_{i}the(00.1, 0.1, 0.1, 0.1,a_{i} <=Ais aandmoves are in turnandthethe followingthethethe", "a_1, a_2,..., a_{n}.thea_i =< 300 )of nthat\"BitLGM\" or(2 \u2264 n \u2264.\"BitLGM\" or \"BitAryo\" (without\"BitLGM\" or \"BitAryo\" (withoutthe\"BitLGM\" or\"Bit"], "prompt": "\nQUESTION:\nSince most contestants do not read this part, I have to repeat that Bitlandians are quite weird. They have their own jobs, their own working method, their own lives, their own sausages and their own games!\n\nSince you are so curious about Bitland, I'll give you the chance of peeking at one of these games.\n\nBitLGM and BitAryo are playing yet another of their crazy-looking genius-needed Bitlandish games. They've got a sequence of n non-negative integers a_1, a_2, ..., a_{n}. The players make moves in turns. BitLGM moves first. Each player can and must do one of the two following actions in his turn:\n\n  Take one of the integers (we'll denote it as a_{i}). Choose integer x (1 \u2264 x \u2264 a_{i}). And then decrease a_{i} by x, that is, apply assignment: a_{i} = a_{i} - x.  Choose integer x $(1 \\leq x \\leq \\operatorname{min}_{i = 1} a_{i})$. And then decrease all a_{i} by x, that is, apply assignment: a_{i} = a_{i} - x, for all i. \n\nThe player who cannot make a move loses.\n\nYou're given the initial sequence a_1, a_2, ..., a_{n}. Determine who wins, if both players plays optimally well and if BitLGM and BitAryo start playing the described game in this sequence.\n\n\n-----Input-----\n\nThe first line contains an integer n (1 \u2264 n \u2264 3).\n\nThe next line contains n integers a_1, a_2, ..., a_{n} (0 \u2264 a_{i} < 300).\n\n\n-----Output-----\n\nWrite the name of the winner (provided that both players play optimally well). Either \"BitLGM\" or \"BitAryo\" (without the quotes).\n\n\n-----Examples-----\nInput\n2\n1 1\n\nOutput\nBitLGM\n\nInput\n2\n1 2\n\nOutput\nBitAryo\n\nInput\n3\n1 2 1\n\nOutput\nBitLGM\nUse Standard Input format\nANSWER:\n"}}