{"2725": {"code": ["{thethe- 1 $...a_n\\\\right\\}\\right\\}\\left\\{\\right\\} \\left\\{ \\sum\\right\\} \\left\\{ \\sum\\right\\} \\left\\{ \\sum\\right\\} \\right\\} \\right\\} \\right\\{ \\sum$ \\{ \\} $\\{ \\", ".  public static({ var i =.; for iin(i{[ ii ] =) [ 0] [ i ]=] [ i ] ;i ] =] =[ i ] ;[ i ]].]] =; i <] = (= ( int )] ; if (", "in theof( a_1\\dotsc\\dotsc \\{ 2,\\dots,\\dots, n\\}\\dots, n\\}the{ @link(@link\\dots\\dots, n\\}\\dots, n\\} \\dots\\dots, n\\}\\dots\\dots, n\\}", "the: a_1,\\dotsc: a_\\dotsc\\dotsc,: A \\\\dotsc, \\dots, n\\\\dots,I\\dotsc, a_ n\\ }\\dotsc,\\dots, n\\ }\\dotsc,\\dots, n\\}\\dots, n\\} \\dots\\dots, n", "..thetheof. \\n {} ) ;to. \\n {=.([ ] [ ]=. add () ; } }. add (] =( ) ;1 ] [=] =,, 1 ) ;. add () ; }", "that.the....0.0.0.0\\0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.", "of thethe number oftheirtheirthethe(\\{\\}thea_n\\}\\{ \\} $\\{\\}of theof thethethe(a_1,\\dotsc,a_ n)\\big $\\{\\} $\\{$3$, corresponding to$\\{ 2, 3\\} $\\{$", "of thetheinwere.: 1} ) ).{= 1.0 /0.0 /\\n: 0 } )1.0 /../ 2.0 / 2.0] } }.1.0 / 2.0- 1.0 / 2.01.0 / 2.03.0 / 2.0", "={ 12 } \\right\\{ 22 \\}\\} $\\{ 3\\} $\\{\\} $\\{\\} $\\{\\} $\\{ 2,$5$, corresponding$\\{ 3\\} $\\{\\} $\\{ 2, 3\\}{\\} $\\{$2\\} $\\{ 3\\}\\}", "oneitthea_i \\ in\\in I\\in I \\in I \\in\\in I\\in I \\in I \\inI\\in I\\in I\\in I \\in\\in I \\in II \\in I \\in II\\in\\in I\\in I\\in$\\{ \\} $\\{2\\} $\\{ 2"], "prompt": "\nQUESTION:\nOne of the most difficult things about going on a holiday is making sure your luggage does not exceed the maximum weight. You, chairman of the Backpacker\u2019s Association for Packing Carry-ons, are faced with exactly this problem. You are going on a lovely holiday with one of your friends, but now most of your time is spent in frustration while trying to pack your backpack. In order to optimize this process, you and your friend have independently set upon trying to find better ways to pack.\n\nAfter some time you have a serious breakthrough! Somehow you managed to solve the Knapsack problem in polynomial time, defying expectations everywhere. You are not interested in any theoretical applications, so you immediately return to your friend\u2019s apartment in order to now quickly pack your backpack optimally.\n\nWhen you arrive there, you find that your friend has set upon her own solution, namely to enumerate all possible packings. This means that all items you possibly wanted to bring are scattered across the entire apartment, and it would take a really long time to get all the items back together.\n\nLuckily you can use the work your friend has done. For every possible subset of items that you can possibly bring, she has written down the total weight of these items. Alas, she did not write down what items were part of this total, so you do not know what items contributed to each total weight. If the original weights of the items formed a collection $(a_1,\\dotsc ,a_ n)$ of non-negative integers, then your friend has written down the multiset\\[ S\\big ((a_1,\\dotsc ,a_ n)\\big ) := \\left\\{ \\sum _{i \\in I} a_ i \\; \\middle |\\; I \\subseteq \\{ 1, \\dots , n\\} \\right\\} . \\]\n\nFor example, if your friend had two items, and the weights of those two items are $2, 3$, then your friend has written down\n - $0$, corresponding to the empty set $\\{ \\} $;\n - $2$, corresponding to the subset $\\{ 2\\} $;\n - $3$, corresponding to the subset $\\{ 3\\} $;\n - $5$, corresponding to the subset $\\{ 2, 3\\} $.\n\nYou want to reconstruct the weights of all the individual items so you can start using your Knapsack algorithm. It might have happened that your friend made a mistake in adding all these weights, so it might happen that her list is not consistent.\n\n-----Input-----\n - One line containing a single integer $1\\leq n\\leq 18$ the number of items.\n - $2^n$ lines each containing a single integer $0\\leq w\\leq 2^{28}$, the combined weight of a subset of the items. Every subset occurs exactly once.\n\n-----Output-----\nOutput non-negative integers $a_1, \\dotsc , a_ n$ on $n$ lines in non-decreasing order such that $S\\big ((a_1,\\dotsc ,a_ n)\\big )=\\{ b_1,\\dotsc ,b_{2^n}\\} $, provided that such integers exist. Otherwise, output a single line containing impossible.\n\n-----Examples-----\nSample Input 1:\n1\n0\n5\nSample Output 1:\n5\n\nSample Input 2:\n3\n7\n5\n2\n4\n1\n6\n3\n0\nSample Output 2:\n1\n2\n4\n\nSample Input 3:\n2\n0\n1\n2\n4\nSample Output 3:\nimpossible\nUse Standard Input format\nANSWER:\n"}}