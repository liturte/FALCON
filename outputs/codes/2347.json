{"2347": {"code": ["the hash $h$thatrandomly in it$s_1$ +$s_2$\"no\" if$h'all of theserandomastring,a random string,$s_1$ + $s_2$ isof therandomly in$s_1$ and $s_2$ are emptythe hash $h$the hash for the$", "the password $p$.{, \"t\" ) ; }= $ \"zyxaabcaabkjh\"$t$$s1$\"zyxaabcaabkjh\".of therandom string in$s_1$ and $s_2$ arethe$h'$ can still be equal$h$ can bethethe password $p$\"z", "for the given$h'$if the$h$the$s_1$ and $s_2$ arerandom strings, $s_1$ and $s_2$is$h' isthe(of $p'$. Theis $s_1$ and $s_2$ arebe equal to $p$.of thethe password $p$$h'", "$s_1$ +in$p'$ can still be equalin theto $p'$the password $p$= $ \"aabacaba\".of theif$s_1$= $ \"zyxaabcaabkjh\" is$s_1$ + \"p\"$s_2$ + \"p\"is$h' is$h'", "$h$$h$ canto obtain $p$($s_1$ and $s_2$israndom, $s_1$,) ;=( ) ;;( ) ;)the] ; } }( ) ;if ( $p$ ==is$p'$ is() {) ; }.; }", "$s_1$ofof the$s_2$the$p$ isberandomly in the$h'(all$s_1$can be empty andthe $s_2$ are empty andis$p'$ can still be equal$p'$ can still be equal(any of these$s_1$ is.=.( '", "$p'$ can still be$h$$p'$\\le t \\le 100$).thetheof$s_1$ and $s_2$theisis$p'not be empty and\\le\\le$s_1$$s_2$ isthe second test case is\\le t \\le\\le t \\le 100$).", "$p'$ can still be$h'$ can still be equalthe password$p'$ can still be equal$h'$can bein$s_1$ isempty and$s_2$ are\"aabacaba\".the hash $h$$h'$ canof the$h$ can bebe equal to \"aabacaba\".$h$$t", ".$p$isin thethe first test$h' is$s_1$is $s_2$and $s_1$is $s_2$ is empty.$h'\\le t(2)test cases.the given$p'$,the$s_1$,$s_2$ isis$s_1$", "is$h$ isof the$p'$israndominpassword.$h' can bein the$h'the given hashof the$h'$isofthe sametoa random string,$p'$,the random$h$,.( \"testcase\" ), \"password\"in thethe given hash. \"nob"], "prompt": "\nQUESTION:\nPolycarp has built his own web service. Being a modern web service it includes login feature. And that always implies password security problems.\n\nPolycarp decided to store the hash of the password, generated by the following algorithm:  take the password $p$, consisting of lowercase Latin letters, and shuffle the letters randomly in it to obtain $p'$ ($p'$ can still be equal to $p$);  generate two random strings, consisting of lowercase Latin letters, $s_1$ and $s_2$ (any of these strings can be empty);  the resulting hash $h = s_1 + p' + s_2$, where addition is string concatenation. \n\nFor example, let the password $p =$ \"abacaba\". Then $p'$ can be equal to \"aabcaab\". Random strings $s1 =$ \"zyx\" and $s2 =$ \"kjh\". Then $h =$ \"zyxaabcaabkjh\".\n\nNote that no letters could be deleted or added to $p$ to obtain $p'$, only the order could be changed.\n\nNow Polycarp asks you to help him to implement the password check module. Given the password $p$ and the hash $h$, check that $h$ can be the hash for the password $p$.\n\nYour program should answer $t$ independent test cases.\n\n\n-----Input-----\n\nThe first line contains one integer $t$ ($1 \\le t \\le 100$) \u2014 the number of test cases.\n\nThe first line of each test case contains a non-empty string $p$, consisting of lowercase Latin letters. The length of $p$ does not exceed $100$.\n\nThe second line of each test case contains a non-empty string $h$, consisting of lowercase Latin letters. The length of $h$ does not exceed $100$.\n\n\n-----Output-----\n\nFor each test case print the answer to it \u2014 \"YES\" if the given hash $h$ could be obtained from the given password $p$ or \"NO\" otherwise.\n\n\n-----Example-----\nInput\n5\nabacaba\nzyxaabcaabkjh\nonetwothree\nthreetwoone\none\nzzonneyy\none\nnone\ntwenty\nten\n\nOutput\nYES\nYES\nNO\nYES\nNO\n\n\n\n-----Note-----\n\nThe first test case is explained in the statement.\n\nIn the second test case both $s_1$ and $s_2$ are empty and $p'=$ \"threetwoone\" is $p$ shuffled.\n\nIn the third test case the hash could not be obtained from the password.\n\nIn the fourth test case $s_1=$ \"n\", $s_2$ is empty and $p'=$ \"one\" is $p$ shuffled (even thought it stayed the same). \n\nIn the fifth test case the hash could not be obtained from the password.\nUse Standard Input format\nANSWER:\n"}}