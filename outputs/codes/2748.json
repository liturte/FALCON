{"2748": {"code": ["[str]:\nANSE) -> List[str]:\nANSE::\"a\"\"b\"\"d\" : \"e\": \"e\",\"d\"\"w\" :\"e\", \"w\"\"i\", \"b\",\"t\"\"r\", \"s\", \"l\"\"g\", \"s\"\"p\",", ":\"3\", \"6\", \"7\",\"8\", \"9\", \"13\", \"14\", \"15\",\"12\", \"16\", \"16\", \"17\", \"18\",\"10\", \"11\", \"19\", \"18\", \"19\",\"9\", \"0\", \"11\", \"19\",\"19\", \"18\", \"18\",\"18\", \"19\", \"19\", \"19\", \"19", "digits:[:: [ \"a\",\"b\", \"c\", \"d\", \"e\",\"e\", \"f\", \"g\", \"h\",\"g\", \"k\", \"s\", \"h\", \"g\",\"s\",\"c\", \"h\", \"s\", \"b\",\"f\",\"r\", \"e\", \"r\", \"l\",\"r\", \"s\", \"f", "::2-9 inclusive,0, 1, 2, 3,1, 2, 3,1, 2, 4,2,3,\"A\",\"A\", \"C\", \"C\", \"F\",\"A\", \"A\", \"F\", \"F\", \"G\", \"D\",\"F\", \"D\", \"F\", \"G\",\"H\", \"L\", \"T\",", "A.:: str: str :: str: str : str:: str :: str ::\"aa\" :: str : str: str ::: str: str : str: str :: str ::: str::: str : str: str :str : str", "(\"d\", \"e\", \"f\", \"g\", \"h\",\"t\", \"t\", \"g\", \"h\", \"p\",\"p\", \"l\", \"c\", \"n\",\"h\", \"l\", \"r\", \"k\",\"k\",\"m\", \"n\", \"o\", \"k\",\"k\",\"l\", \"m\", \"l\", \"n\",\"u\",", "format\nANSWER:\nANSWER,::::: 'a','b', 'c', 'd', 'e', 'f','h', 'i', 'k', 'k', 'k''j','y', 'k','o''p', 'p', 'p'", "in rangeadigit,if digits.Length<(return [1 ]:. split (, 1 ) [ 0)() ).. split] ), 1 )(,:[ \"a\" ]):: \"a\" ] }return: \"a\"", ":() -> List[str]:\n        \nUse Call-Based::: return:)) :. append (=return [ ]: [ ]] ) :: return,: [ ],:) :,:] :() :[ ] :],", ":: \"2-9\": \"2-9\"\"2-9\" ]:\"6\" ] : \"3\"\"5\" ] : \"6\"\"7\"\"8\": \"9\": \"9\" ] ::\"0\",\"9\", \"0\"\"9\" ] : \"9\"\"8\" ] :\"9\","], "prompt": "\nQUESTION:\nGiven a string containing digits from 2-9 inclusive, return all possible letter combinations that the number could represent.\n\nA mapping of digit to letters (just like on the telephone buttons) is given below. Note that 1 does not map to any letters.\n\n\n\nExample:\n\n\nInput: \"23\"\nOutput: [\"ad\", \"ae\", \"af\", \"bd\", \"be\", \"bf\", \"cd\", \"ce\", \"cf\"].\n\n\nNote:\n\nAlthough the above answer is in lexicographical order, your answer could be in any order you want.\nclass Solution:\n    def letterCombinations(self, digits: str) -> List[str]:\n        \nUse Call-Based format\nANSWER:\n"}}