{"4828": {"code": ["the new. {) ; }=) { for (; i <<()( )} }; }() {( instruction{(if ( instruction) {, 0 ) ; }( instruction) { if ( instruction( instruction ); } else {( instruction ) {", "a program thatnew processor modelbea program thatisin thethe programin the) {( instruction ) )=( instruction )0 ]), 0,;0,) )if;=);= new( instruction) ) ; if (", "( anew processor modelthis programnew processor model.instructions thatnotaaa programof0.a programthetheinstruction, the first oneis athe firstis athe firstof memory, the secondis ain thetheof memory.= new", "tothethe new processor.one of the0: 0:0: 1: 0::0: 0: 1:0: 1:1: 0: 0:0: 0:0: 0: 0: 0:0: 0: 0: 0: 0:0: 0: 0:0:0: 0: 0:0: 0:0:0", "=()] ) ; }//({new processor:{;{0 ] ;0) ;; }) ; } if ()= 0 ; i <[ i ]0 ] ;= 0 ; i <. length ;;) ;] ; } }( int ) (", "new processor model. Theisaais1:: 0x0A0A0B0C0C0C0C0D0C0C0C0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D0", "ofthe0.)all instructions in thenew processor.A, B, C, D,0.the0.theone of theof thenew processor.1:A1A2A2A2A2A2A2A2A2A2A2A2A2A2A2A2A2A2A2A2A2A2A2A", "new processor model.ofin thenew processor model.thethe program to beone of thethetheprogram to beto benew processorthenew processor model,ofthe newthe newnewof themachine code.theof thenew processor model.).).. split (''", "be inserted for thethe new processortheoftheinstructioninstruction isthe(a program) thatthe newthefor the newthe oldthe programthe new( a program) thatthethe newthethethe newmachine code of thethis program istheof memory. Thecan be placed in", "thenew processor.isintheprogramif aaninofthethe newinstructions arethethetheathe new).the... A.(. A.A. A. B"], "prompt": "\nQUESTION:\nMirko purchased a new microprocessor. Unfortunately, he soon learned that many of his programs that he wrote for his old processor didn\u2019t work on the new processor.\n\nDeep inside the technical documentation for both processors, he found an explanation. In order to work faster, the new processor imposes certain constraints on the machine code of programs, constraints that never existed on the previous model.\n\nThe machine code of a processor consists of instructions that are executed sequentially. Each instruction uses a byte of memory. Also, instructions can have zero or more parameters, each of which uses an additional byte of memory. In machine code, parameters immediately follow an instruction.\n\nWhen formatted as text, machine code instructions are uppercase letters, while parameters are lowercase letters. For example:\n\nA\n\nb\n\nc\n\nb\n\nB\n\nc\n\nc\n\nC\n\nD\n\ne\n\nf\n\ng\n\nh\n\nThis program consists of four instructions; the first takes three parameters, the second two, the third none and the fourth takes four parameters. The program uses $13$ bytes of memory.\n\nThe new processor model fetches memory in four-byte chunks so each instruction must start at a memory address that is divisible by four (the first byte in memory is address $0$). To achieve that, we can insert NOP (no operation) instructions into the old program, instructions that do nothing and are not limited to memory locations divisible by four. The above program, adapted to run on the new processor, can look like this:\n\nA\n\nb\n\nc\n\nb\n\nB\n\nc\n\nc\n\nNOP\n\nC\n\nNOP\n\nNOP\n\nNOP\n\nD\n\ne\n\nf\n\ng\n\nh\n\nThe instructions A, B, C and D are now at memory locations $0$, $4$, $8$ and $12$, which satisfies the processor\u2019s constraints.\n\nWrite a program that determines the smallest number of NOP instructions that need to be inserted for the given program to work on the new processor model.\n\n-----Input-----\nThe input contains the machine code of the program written for the old processor model. The program will consist of at most $200$ English letters.\n\nThe program will always start in an instruction, i.e., the first letter in the machine code will be uppercase. If an instruction appears more than once in the machine code, it will always take the same number of parameters.\n\n-----Output-----\nOutput the smallest number of NOP instructions needed to adapt the program for the new processor.\n\n-----Examples-----\nSample Input 1:\nAbcd\nSample Output 1:\n0\n\nSample Input 2:\nEaEbFabG\nSample Output 2:\n5\nUse Standard Input format\nANSWER:\n"}}