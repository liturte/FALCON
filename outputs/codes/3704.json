{"3704": {"code": [". ( ) ) {( ) ) {address in Berland( ).the( ).athethe()forof( )( )address.( ) )( ){( )) {).( ) ).( )( ) ).", "of theis athe$c$ andthe following$d$ istheis aof the$8$ bits, the$8$)the followingbits areand $d$.( ) ;the( ) ;the=( ) ;,.. get (the next. get) { return (( ) ; }", "and(in thethethe network$a.b.c.d/x$ contains all IPv4 addressestheaddress $a.b.c.d/x$ containsaddresses withbits equal toa single addressa single address $a.b.c.d/x$ipv4 addresses$a.b.c.d/x$ contains allIPv4 addresses with $x$ leftmost", "of IPv4 addressesin theis used forin the(intothethe$8$ bits(in this order),the following blocks of$8$ bitsthe followingof $8$ bits,thein thefor the$8$ofof $8$ bitsof $8$ bits.thethethe following blocks ofof$8$ bits", "==(the.; } if (istheof= 0 ; i <; i ++ )[ i ]) )= 0 ; i <; i ++ ) {) ;[ i ]= 0;; },]],[ i ].( )= 0 ;", "address inan IPv4 addressin theIPv4 address(in this order),=(; } }address in Berlandto be used.\") ; }address in thein theinof the network equipmentofaaddressthe firstan IPv4 address in theabe used as anaddress $a.b.c.d/x$", ").  public staticin thethein theIPv4 addresses in BerlandisainIPv4 addresstheof theintheisof the followingtoaof thetheaddressthe addressin the followingbe converted to an octet$b$ and $c$$d$. Athe following block of $8$", "in Berland andtoin the$a$$a$ and $c$$a$a single address$a$ and $d$the address$a$the(inof the$a$ and $c$ are$a$ and$a$ and $d$ arein the(of theof theof the address $a$two octets", "address inthean IPv4 address inina single(asthe$0$)$0$$x$of the(thethe networkthe network in Berlandof the followingbits ofthe following blocksof the$2^{32}$ availablethe following$0$(in this order) $8$the following blocks of$2^", ")of theaddresstois used tothe address inasof the followingthethe followingtheofof the following blocks ofthe following blocksof the following blocksof the followingofthe following blocks ofoftheof the following blockstheof thein theofbe used"], "prompt": "\nQUESTION:\nBerkomnadzor\u00a0\u2014 Federal Service for Supervision of Communications, Information Technology and Mass Media\u00a0\u2014 is a Berland federal executive body that protects ordinary residents of Berland from the threats of modern internet.\n\nBerkomnadzor maintains a list of prohibited IPv4 subnets (blacklist) and a list of allowed IPv4 subnets (whitelist). All Internet Service Providers (ISPs) in Berland must configure the network equipment to block access to all IPv4 addresses matching the blacklist. Also ISPs must provide access (that is, do not block) to all IPv4 addresses matching the whitelist. If an IPv4 address does not match either of those lists, it's up to the ISP to decide whether to block it or not. An IPv4 address matches the blacklist (whitelist) if and only if it matches some subnet from the blacklist (whitelist). An IPv4 address can belong to a whitelist and to a blacklist at the same time, this situation leads to a contradiction (see no solution case in the output description).\n\nAn IPv4 address is a 32-bit unsigned integer written in the form $a.b.c.d$, where each of the values $a,b,c,d$ is called an octet and is an integer from $0$ to $255$ written in decimal notation. For example, IPv4 address $192.168.0.1$ can be converted to a 32-bit number using the following expression $192 \\cdot 2^{24} + 168 \\cdot 2^{16} + 0 \\cdot 2^8 + 1 \\cdot 2^0$. First octet $a$ encodes the most significant (leftmost) $8$ bits, the octets $b$ and $c$\u00a0\u2014 the following blocks of $8$ bits (in this order), and the octet $d$ encodes the least significant (rightmost) $8$ bits.\n\nThe IPv4 network in Berland is slightly different from the rest of the world. There are no reserved or internal addresses in Berland and use all $2^{32}$ possible values.\n\nAn IPv4 subnet is represented either as $a.b.c.d$ or as $a.b.c.d/x$ (where $0 \\le x \\le 32$). A subnet $a.b.c.d$ contains a single address $a.b.c.d$. A subnet $a.b.c.d/x$ contains all IPv4 addresses with $x$ leftmost (most significant) bits equal to $x$ leftmost bits of the address $a.b.c.d$. It is required that $32 - x$ rightmost (least significant) bits of subnet $a.b.c.d/x$ are zeroes.\n\nNaturally it happens that all addresses matching subnet $a.b.c.d/x$ form a continuous range. The range starts with address $a.b.c.d$ (its rightmost $32 - x$ bits are zeroes). The range ends with address which $x$ leftmost bits equal to $x$ leftmost bits of address $a.b.c.d$, and its $32 - x$ rightmost bits are all ones. Subnet contains exactly $2^{32-x}$ addresses. Subnet $a.b.c.d/32$ contains exactly one address and can also be represented by just $a.b.c.d$.\n\nFor example subnet $192.168.0.0/24$ contains range of 256 addresses. $192.168.0.0$ is the first address of the range, and $192.168.0.255$ is the last one.\n\nBerkomnadzor's engineers have devised a plan to improve performance of Berland's global network. Instead of maintaining both whitelist and blacklist they want to build only a single optimised blacklist containing minimal number of subnets. The idea is to block all IPv4 addresses matching the optimised blacklist and allow all the rest addresses. Of course, IPv4 addresses from the old blacklist must remain blocked and all IPv4 addresses from the old whitelist must still be allowed. Those IPv4 addresses which matched neither the old blacklist nor the old whitelist may be either blocked or allowed regardless of their accessibility before. \n\nPlease write a program which takes blacklist and whitelist as input and produces optimised blacklist. The optimised blacklist must contain the minimal possible number of subnets and satisfy all IPv4 addresses accessibility requirements mentioned above. \n\nIPv4 subnets in the source lists may intersect arbitrarily. Please output a single number -1 if some IPv4 address matches both source whitelist and blacklist.\n\n\n-----Input-----\n\nThe first line of the input contains single integer $n$ ($1 \\le n \\le 2\\cdot10^5$) \u2014 total number of IPv4 subnets in the input.\n\nThe following $n$ lines contain IPv4 subnets. Each line starts with either '-' or '+' sign, which indicates if the subnet belongs to the blacklist or to the whitelist correspondingly. It is followed, without any spaces, by the IPv4 subnet in $a.b.c.d$ or $a.b.c.d/x$ format ($0 \\le x \\le 32$). The blacklist always contains at least one subnet.\n\nAll of the IPv4 subnets given in the input are valid. Integer numbers do not start with extra leading zeroes. The provided IPv4 subnets can intersect arbitrarily.\n\n\n-----Output-----\n\nOutput -1, if there is an IPv4 address that matches both the whitelist and the blacklist. Otherwise output $t$ \u2014 the length of the optimised blacklist, followed by $t$ subnets, with each subnet on a new line. Subnets may be printed in arbitrary order. All addresses matching the source blacklist must match the optimised blacklist. All addresses matching the source whitelist must not match the optimised blacklist. You can print a subnet $a.b.c.d/32$ in any of two ways: as $a.b.c.d/32$ or as $a.b.c.d$.\n\nIf there is more than one solution, output any.\n\n\n-----Examples-----\nInput\n1\n-149.154.167.99\n\nOutput\n1\n0.0.0.0/0\n\nInput\n4\n-149.154.167.99\n+149.154.167.100/30\n+149.154.167.128/25\n-149.154.167.120/29\n\nOutput\n2\n149.154.167.99\n149.154.167.120/29\n\nInput\n5\n-127.0.0.4/31\n+127.0.0.8\n+127.0.0.0/30\n-195.82.146.208/29\n-127.0.0.6/31\n\nOutput\n2\n195.0.0.0/8\n127.0.0.4/30\n\nInput\n2\n+127.0.0.1/32\n-127.0.0.1\n\nOutput\n-1\nUse Standard Input format\nANSWER:\n"}}