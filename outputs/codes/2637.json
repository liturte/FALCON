{"2637": {"code": ["[1,2,1][1,2,1][2,1,1][1,2,1][2,2,1],[1,2,1],[1,1,2]\n[2,1]\n[1,2,1], [2,1,2], [2,1][2,1]\n]list(nums): List", "(nums: List[int],(nums:nums:[int],[int],::: return: returnnums:: return numsreturn nums", "[1,2,1][1,1,2],[2,2,1],[1,2,1],[1,2,1]\n[1,2],[1,1,1],[1,1,1]\n[2,1]\n].).)[ 2] ]).( ).( nums,: return nums)", "[[1,2,1],[1,2,1],[1,1,2], [1,2,1],[2,1,1],[2,1,1], [2,1,2],[2,1]][2,1]] if nums[[2,1] ][2]]list[ 2 ] ][", "fori in numsif nums.contains(i)(nums[i]):nums[i]=nums[i] returnif nums[i]!=0:nums[i]=nums[i] return)if nums.length:nums.length:nums.length:nums.length-1 returnreturn nums.map(lambda: nums.map(lambda[i]:= nums.map", ": return nums: return nums]#@=[ 1, 2] forin nums ]( nums )) :if nums [: return nums]] [])] }= nums [ 0][[[ 2 ] ][ 1 ]] ) return nums]", "= nums.map(lambda) if nums.self.nums.= nums= nums [ 0) if nums.return nums", "if nums.() : return nums[] : return nums[: return nums if nums)return nums[ 0 ] ]else( nums )[ 0 ] :]]] = nums return", "if nums.count(1)] : return nums,[] ) return nums[[( self.( nums )return nums [ 0 ]. sort ( ): return nums= nums [ 1 ][ 2 ]( nums [ 0) )", "list of nums:[1,2,1][1,1,2], [1,1,2], [2,1,1][1,2,1],[1,2]\n[1,2,1],[1,2,1],[1,1,2], [1,2,1], [1,2,1], [1,1,1], [2,"], "prompt": "\nQUESTION:\nGiven a collection of numbers that might contain duplicates, return all possible unique permutations.\n\nExample:\n\n\nInput: [1,1,2]\nOutput:\n[\n  [1,1,2],\n  [1,2,1],\n  [2,1,1]\n]\nclass Solution:\n    def permuteUnique(self, nums: List[int]) -> List[List[int]]:\n        \nUse Call-Based format\nANSWER:\n"}}