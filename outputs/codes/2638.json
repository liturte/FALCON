{"2638": {"code": ["(self,(self, triangle: List[List[int]]) -> int:\nYY:#:#:=return#:. minTotal[[ ]= 0 ;[ i ]. minTotal (= triangle.( i.int. minTotal ( self[ ]. minTotal ( self( self1 ]]self.[", "###= 1#1 # ### # # # ## # # ## ## # # ## # # ## # # # ## # # ## # # ## # # # ## # ## # # ## ## # # # ## # # # ## # # # ## # # #", "the triangle::...=.([ 0 ][ 1 ] ):][] ) ) :] )= 0.0.()( )[ 0 ]. length( ) ; for. length ; i <) {", "1 ]:[[2,3,4],\n[6,5,7],\n [4,1,8,3],\n[6,5,7],\n[4,1,8,3],\n [6,5,7],[4,1,8,3][2,3]3,2,5]1] )2[3,5,7", "= 1= 2]][ 2 ][ 3 ]] ):, 2,:, 3, 5, 6, 7,, 67, 8, 71,5,,5, 6, 8, 77, 10,, 9,, 10, 10, 15,,, 8,", "( self, triangle: List[int])( self, triangle: List[int]) ->#([ int ]) -> int: #of##A.# #( self, triangle)( self, triangle )= 0.0 ] )..),self.),: # ## # # # ## # # #", "with1 :21 :1:22 ::1 ]2 ] ) ->2 ] ) ->12 ] ) ->11 ] ):2 ] )2 ] ) ->3 ] ) ->[ 2 ]:2 ] )3 ] )[ 2 ] )2 ]) : 2 ]", "( self, triangle: List[int])## ## ## ## ## # ## # ## # ## # ## # # ## ## # # # ## # # # ## # # ## # # # ## # # # ## # ## # # # ## # # # ## # # #", "( self,triangle: List[int]):float:int:\nYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYY", "def minimumTotal (self, triangle::2 + 3 +2 + 4 +2 +10 ) := 0: return 0[= 0[][ 21 ]int :( self, triangle)= 0: return( self, triangle] ) )( self, triangle)= 0 if. length]"], "prompt": "\nQUESTION:\nGiven a triangle, find the minimum path sum from top to bottom. Each step you may move to adjacent numbers on the row below.\n\nFor example, given the following triangle\n\n\n[\n     [2],\n    [3,4],\n   [6,5,7],\n  [4,1,8,3]\n]\n\n\nThe minimum path sum from top to bottom is 11 (i.e., 2 + 3 + 5 + 1 = 11).\n\nNote:\n\nBonus point if you are able to do this using only O(n) extra space, where n is the total number of rows in the triangle.\nclass Solution:\n    def minimumTotal(self, triangle: List[List[int]]) -> int:\n        \nUse Call-Based format\nANSWER:\n"}}