{"701": {"code": ["(inthebe convertedtheto\"array\" (without theconvention. Print \"array\"ifofthestring. Ifit, thethestring, theis not allowedthethebea non-empty word s(notof the(withthewith theof the \"Bizons\" team.the \"Bizons\" team.", ".of a stringto thea string,of thetheif ita\"array\" (withoutconvenience,of thestring.thebeof the \"Asteroid\"theastringthatof the(asthe \"Bizons\"theabe used inis only for the \"Bizons\"", "theit can beof thethe\"automaton\" (with thethe problem.\"array\"theas\"array\" (with the\"both\" (with thestring, thewon't solve\"array\", \"automaton\", \"array\"\"array\" (without theor\"array\" (with theto solve the problem.onlythebe", "be transformed intothe)(without the quotes)tosuffix automatonthethetheisthe problem.\"array\" (without the quotes), ifitneed toconstituting thetheof the \"Bizons\"thethe \"Bizons\"\"Bizons\" can solve thethe problem.\"array\" (without the quotes),forto solve", "are notof the\"won\" andthese are notthe problem.a string,thethetheofword s.theof the\"won\"with theaaa string,\"won\"andthe \"won\"the problemthemselves. Thethe \"Won\" problem,a problem.the problem. The problem", "tothreetheproblem,.\"need tree\"..=..\"array\" ).\"array\" )., \"array\" ).. array. array.(string) ; }\"array\" ).\"array\" ].[[]( \"array\" )., \"array\" )", "the \"Bizons\" teamthemselves.  public static void) { for( ) { if( ) ) {(( ).) ; } else( ) ;( )., \"w\"\"w\" ) ; }\"w\" ) { if (( ).( ) ) {(\"w\" )( )( )=) ;", "ifthe problemthird sample you cantoa singleit istheof theto the\"array\" (without theif you needisif you needto solve the problem.usetheisthestring: \"A\"s\"\"t\" \"w\"\"w\" \"w\" \"w\"\"w\" \"w\" \"w\" \"w\" \"", "ofthe problem.\"need tree\"\"array\"be transformed into\"array\"the\"array\" (without theandand \"automaton\" anduse ofsuffix array. Theofuse ofthewon't solve the problem.arenotonly with(withoutof theproblem.thestringof the suffix tree.the problem. Print \"need", ". inofa string,it's\"array\"if\"array\" (without theuse ofif the \"Bizons\"s and t,thedata structures to solve the) {\"A\"..\"A\" )\"A\" ) ;..\"A\" ) ;\"A\" ) ;\"B\" ) {\""], "prompt": "\nQUESTION:\nBizon the Champion isn't just a bison. He also is a favorite of the \"Bizons\" team.\n\nAt a competition the \"Bizons\" got the following problem: \"You are given two distinct words (strings of English letters), s and t. You need to transform word s into word t\". The task looked simple to the guys because they know the suffix data structures well. Bizon Senior loves suffix automaton. By applying it once to a string, he can remove from this string any single character. Bizon Middle knows suffix array well. By applying it once to a string, he can swap any two characters of this string. The guys do not know anything about the suffix tree, but it can help them do much more. \n\nBizon the Champion wonders whether the \"Bizons\" can solve the problem. Perhaps, the solution do not require both data structures. Find out whether the guys can solve the problem and if they can, how do they do it? Can they solve it either only with use of suffix automaton or only with use of suffix array or they need both structures? Note that any structure may be used an unlimited number of times, the structures may be used in any order.\n\n\n-----Input-----\n\nThe first line contains a non-empty word s. The second line contains a non-empty word t. Words s and t are different. Each word consists only of lowercase English letters. Each word contains at most 100 letters.\n\n\n-----Output-----\n\nIn the single line print the answer to the problem. Print \"need tree\" (without the quotes) if word s cannot be transformed into word t even with use of both suffix array and suffix automaton. Print \"automaton\" (without the quotes) if you need only the suffix automaton to solve the problem. Print \"array\" (without the quotes) if you need only the suffix array to solve the problem. Print \"both\" (without the quotes), if you need both data structures to solve the problem.\n\nIt's guaranteed that if you can solve the problem only with use of suffix array, then it is impossible to solve it only with use of suffix automaton. This is also true for suffix automaton.\n\n\n-----Examples-----\nInput\nautomaton\ntomat\n\nOutput\nautomaton\n\nInput\narray\narary\n\nOutput\narray\n\nInput\nboth\nhot\n\nOutput\nboth\n\nInput\nneed\ntree\n\nOutput\nneed tree\n\n\n\n-----Note-----\n\nIn the third sample you can act like that: first transform \"both\" into \"oth\" by removing the first character using the suffix automaton and then make two swaps of the string using the suffix array and get \"hot\".\nUse Standard Input format\nANSWER:\n"}}