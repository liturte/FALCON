{"2118": {"code": ["thearray \u2014the number of0thenumber ofthe number ofmergesort (a, 0, n)is the number of elementsn, and k = 1ifarray a[n] \u2264 n \u2264(n,n - 1,...,\u2264 1 \u2264array is sortedarray is{2,1,", "i = 0 ;of(= {1, 3, 4},= {1,3, 4, 6, 7,= {3, 4,1,k, 200000, 11,0,1,0,= 1,1,2, 3, 4,2, 3,1, 2,k, 1\u2264 n, 1, 1,", ". ( a,a [= 2 *.n( 1n = 2 *< n ;1 \u2264( 1 \u2264n \u2264a(nn = 2) ;0,(n0 )1 ] [ 0 ]( n - 10( 1 \u2264k", "of1\u2264 1 \u2264(n1,)the number ofthe numberof1, n \u2264 1,ofthe number of elements inarray, then1,the number ofnumber ofthe number ofofisonean, n,n,,2, n, k(1 \u2264 n", "the[l, r]a [ 0= 2.= {1, 2, 3,2, 3,.array1, k, n,k0, n, k \u2264 n.( 1).(.==1k ],n ). sortif ((1,n \u2264 n \ufffd", "n - 1][ l] \u2014of a [1,of[1, n].+ 1 ] ).. length< n ; i ++]. length -) ;) ; }, 1 ) ;) ) {= 1 ; if (n ) {], 0 ) ;) ) {a =) ; if (n )", "is a= 0 ;the array1to do thea [].] = 1 ;in a[0], a[1],= 1- 1 ] =0 ; i <= 1 ; i= 2n =k =; i <), a)([ i)} } }( ) ; if (", "in thearrayisthe number ofin theofarray inthe numberthe array is sortedand1,..., a[n -ifa1,..., a[n -a[n - 1],...,array is sorted.is sorted, sotheif a.,0, n ) ;a [ 1a [1, 2, 3", "it is sorted in= 0 ; i= 02 ] <).a [1 ] )a [ 1 ],),) ;[] ) ;)k ] =( 1,[ 1) ;=2 ]= 1 ; i <i ] ; in ; i ++= 0 ; i <) ; i(", "the0,a [1 ] \u2014of1, 3, 4],kk= 1,n1, 1,k \u2264is sorted.1, 1,=.=(, 11,k \u2264 n \u2264(0, n)<1, 1, n \u2264"], "prompt": "\nQUESTION:\nMerge sort is a well-known sorting algorithm. The main function that sorts the elements of array a with indices from [l, r) can be implemented as follows:  If the segment [l, r) is already sorted in non-descending order (that is, for any i such that l \u2264 i < r - 1 a[i] \u2264 a[i + 1]), then end the function call;  Let $\\operatorname{mid} = \\lfloor \\frac{l + r}{2} \\rfloor$;  Call mergesort(a, l, mid);  Call mergesort(a, mid, r);  Merge segments [l, mid) and [mid, r), making the segment [l, r) sorted in non-descending order. The merge algorithm doesn't call any other functions. \n\nThe array in this problem is 0-indexed, so to sort the whole array, you need to call mergesort(a, 0, n).\n\nThe number of calls of function mergesort is very important, so Ivan has decided to calculate it while sorting the array. For example, if a = {1, 2, 3, 4}, then there will be 1 call of mergesort \u2014 mergesort(0, 4), which will check that the array is sorted and then end. If a = {2, 1, 3}, then the number of calls is 3: first of all, you call mergesort(0, 3), which then sets mid = 1 and calls mergesort(0, 1) and mergesort(1, 3), which do not perform any recursive calls because segments (0, 1) and (1, 3) are sorted.\n\nIvan has implemented the program that counts the number of mergesort calls, but now he needs to test it. To do this, he needs to find an array a such that a is a permutation of size n (that is, the number of elements in a is n, and every integer number from [1, n] can be found in this array), and the number of mergesort calls when sorting the array is exactly k.\n\nHelp Ivan to find an array he wants!\n\n\n-----Input-----\n\nThe first line contains two numbers n and k (1 \u2264 n \u2264 100000, 1 \u2264 k \u2264 200000) \u2014 the size of a desired permutation and the number of mergesort calls required to sort it.\n\n\n-----Output-----\n\nIf a permutation of size n such that there will be exactly k calls of mergesort while sorting it doesn't exist, output  - 1. Otherwise output n integer numbers a[0], a[1], ..., a[n - 1] \u2014 the elements of a permutation that would meet the required conditions. If there are multiple answers, print any of them.\n\n\n-----Examples-----\nInput\n3 3\n\nOutput\n2 1 3 \nInput\n4 1\n\nOutput\n1 2 3 4 \nInput\n5 6\n\nOutput\n-1\nUse Standard Input format\nANSWER:\n"}}