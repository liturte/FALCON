{"1738": {"code": [".thelength isastring s_2.a_1 + s_2 +s_2 is a.c_1 is 10, s_1 iss_2 is a.s_2 isc_2 isc_2 iss_2 iss_2 is a.c_2 isc_2 iss_2 is ab.s_3", "{).] = 0c_11, c_2 isc_2 isc_3 isc_3 is 1, s_3s_3 is a.s_3 is a.c_2c_2 is 1, s_3 isc_3 iss_3 isc_3 isc_2 isisc_2 iss", ".isan.the=intheisthethe= 0.0 ;0.0 ; if (in,.:.1 ] = 0.0( c_1; if ( c_10.0c_1= c_1 +s_1 + s_2)", "a string s.  public static) ;; }) ;) ;( )) ;() { if () { return.( )( ) ;( ) ; }(s_1, c_2(, c_2, c_3c_2s_3 isc_3c_3 is 1, s_3 is", "c_1 is a.a. s_1 is ab.s_2 is a. c_2s_2 iss_1 isis a.c_1 is 1, s_1c_3 iss_3 is a. s_3 isc_3 iss_1 isc_2 isc_2 is 3, s_2 iss_1s", "iss_2(.inthe1 )c_2 isc_2 is 1, s_2 isc_3 is 1, s_3c_3 is 4, s_3c_2s_2c_2 iss_3 iss_2 is a.c_3 isc_2 isc_3 is 1, s_2", "a( s )).).( s ).c_2s_2s_2 is)) { returns_2 )...( c_1 ).( s ).()..s_2 ).( c_1 )0 ] ). s_1 ).).s_2 )", "theisthe00.c_2c_3 is 4,c_3 isc_3 is 4, s_3isc_3 isc_2 is 1, s_2 iss_2 isc_2s_2 is a.s_2 isc_2 is 2, c_3 iss_3 is a.c_", "a_1 + |s_1| \u2264a_2 + |s_2|the-a_2 + |s_2|a_2 +a_3 +\u2264c_1 iss_1 is a.c_2 iss_2s_2 is ab.c_2 is 3, s_2 isc_3 is 9,", "inis(0\u2264 |s| \u22640.a_1 +a_2 +a_2a_3 +a_2s_2 is a.c_2 is 2, s_2 isc_3s_3 is ab.isc_3 is 1, s_3 isc_4 isc_4 iss_"], "prompt": "\nQUESTION:\nIvan wants to write a letter to his friend. The letter is a string s consisting of lowercase Latin letters.\n\nUnfortunately, when Ivan started writing the letter, he realised that it is very long and writing the whole letter may take extremely long time. So he wants to write the compressed version of string s instead of the string itself.\n\nThe compressed version of string s is a sequence of strings c_1, s_1, c_2, s_2, ..., c_{k}, s_{k}, where c_{i} is the decimal representation of number a_{i} (without any leading zeroes) and s_{i} is some string consisting of lowercase Latin letters. If Ivan writes string s_1 exactly a_1 times, then string s_2 exactly a_2 times, and so on, the result will be string s.\n\nThe length of a compressed version is |c_1| + |s_1| + |c_2| + |s_2|... |c_{k}| + |s_{k}|. Among all compressed versions Ivan wants to choose a version such that its length is minimum possible. Help Ivan to determine minimum possible length.\n\n\n-----Input-----\n\nThe only line of input contains one string s consisting of lowercase Latin letters (1 \u2264 |s| \u2264 8000).\n\n\n-----Output-----\n\nOutput one integer number \u2014 the minimum possible length of a compressed version of s.\n\n\n-----Examples-----\nInput\naaaaaaaaaa\n\nOutput\n3\n\nInput\nabcab\n\nOutput\n6\n\nInput\ncczabababab\n\nOutput\n7\n\n\n\n-----Note-----\n\nIn the first example Ivan will choose this compressed version: c_1 is 10, s_1 is a.\n\nIn the second example Ivan will choose this compressed version: c_1 is 1, s_1 is abcab.\n\nIn the third example Ivan will choose this compressed version: c_1 is 2, s_1 is c, c_2 is 1, s_2 is z, c_3 is 4, s_3 is ab.\nUse Standard Input format\nANSWER:\n"}}