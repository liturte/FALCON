{"4860": {"code": ["it\u2019sthethethethea singlenumberofin increasing numeric order,thethethe last numberthe last numberthe last number theythe last numberthe last number theyathe last numberthe last numberthe last numberin increasing numeric order, onetheyonenumber in increasing numeric order,are no duplicates.isn\u2019t", "thein increasing numeric order, oneofthatofthein increasing numericin increasing numeric order, oneatin increasing numeric order, onetheandtheonethecounting,thetheof thethe numberin increasing numeric order, oneonetheand onein increasing numeric order, onethe child missed", "ofthethe= 1 ;0 ;= 0 ;; }= 0 ; i++ ) {[ i ]] =[ i ] ).(if ()]) { if (; }.;( ) ;}) ;) ; }(", ".=1 ).0 )..( )). split ()( )). join ( '). join (. join ( ').(). join (). join (). split) ).( \" \" )].( \" \" ))). join (\"). join (", "#8theifthe childall thethe last numberthe lastthe childthe lastthethe last numberthe last numbera unique number inthe last number theynotthe last numberthe lastin increasing numeric order, onethe lastthe lastthe last numberthe last numberthe last numberthe last numbera number ofthe last number", "===+=+.. split ({ } ; }. split ('') {0.0 ; }. split (''0 ; for= 0 ; i <i ++ ) {if () {=) ; }. split (''( ) ) ;. split ( ') )= 0; if (in", "ofthe.Aa number between $1$two1,2, 3, 4, 5, 7,1, 2, 3,A1, 2,4,3,2,2, 3, 4, 5,2, 3, 4,7, 8, 9,9,9, 9, 9, 9,9, 9, 9, 9,", ") {]] = 11 ].1 ]] = 1) { if (< 2 ) {.( ) ).= 1.. split (. split () [1 ] =)2 ];[] =] == 0 ; i <. length ; i ++) { if (", "thetheandthe childtheisofthe lastrecorded therecordedin increasing numeric order, oneone per line.the first linefirst lineandof inputeachthe last number1,two, two,the last numberone of theall thea number betweenthe last numberthe last number", "a number ofthetheirtheof inputareall thenumberin increasingofthe last number(inclusive)oneof input containsthean integer between $1$ andthe last number theyand the last numberbethe last numberthe last numberisin increasing numeric order, onenumber ofonein increasing numeric order, one"], "prompt": "\nQUESTION:\nYou enjoy your new job as a teacher of young children. It\u2019s fun to see them learning to count, recognize letters, draw, and interact with the world.\n\nOne common problem you\u2019ve noticed is that children often forget numbers when counting. For example, early on they might count \u201cone, two, three, five, six.\u201d You have to remind them about that \u201cfour\u201d that they didn\u2019t say. And as they get more proficient and clever, they may use the \u201cquick\u201d way of counting: \u201cone, two, skip a few, ninety-nine, one hundred!\u201d\n\nPlease write a program that can help you (and your students) identify the missing numbers when they are counting.\n\n-----Input-----\nThe first line of input contains a single integer $n$, where $1 \\le n \\le 100$. Each of the next $n$ lines contains one number that the child recited. Each recited number is an integer between $1$ and $200$ (inclusive). They are listed in increasing order, and there are no duplicates.\n\n-----Output-----\nIf the child recited all the numbers between $1$ and the last number they recited, then print good job.\n\nIf the child missed any numbers between $1$ and the last number they recited, then print those missing numbers in increasing numeric order, one per line.\n\n-----Examples-----\nSample Input:\n9\n2\n4\n5\n7\n8\n9\n10\n11\n13\nSample Output:\n1\n3\n6\n12\nUse Standard Input format\nANSWER:\n"}}