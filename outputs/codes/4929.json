{"4929": {"code": ["the followingthe following rules:stringit isa password thatisinthe password.the password isaisaa:thethepassword.( ).(. length. length ; i ++) {; if (((", "itbebeofof$P$ isif $S$$P$beisbe$P$ is nota string, thenall$P$and $S$ areofa string $S$ is$P$thethe password $S$the password $P$ isa string, andthethe password $P$a string of", "the following rules are met:( $S$ isin thethe passwordcan bebeatheofa string $S$,$P$. Aa(is a string,theof $S$. Astring is thethethethe input isa string. Atothe stringa string,of all uppercase letters,and any other extr", "thethe following rules:isthe passwordto$S$orin the$P$thethe$S$the passwordto thebebethein the.theisin thethe password isthe passwordis theit is already in the", "thepassworda(a newit isto.) )) ))() ){ return}; }}.)) ;(( $S$ ) )= $S$. split) ;) ; } return}", "ofpassword$S$theof theof thethethe password isthethe password isthethe$S$, the stored password, and$P$ is theforthe$S$ isthe password(toaand $S$ is thein thethe password isthethe password $S$. This", "the following rules are metin theainput is astring of alltheisofthepasswordthe password$S$) ) { if ((; } else,{ if () { if (( ) )() { throw new( \"WARNING: password validation$S$ is not{ return (.)", "isbein the string $S$,the(if$P$will bebepassword isand:thethepassword, the passwordthe password isthe password is: //ifthe password is $P$in thethe password isto thethe string $S$, the storedthethe string $S$", "the following rules are metthe following rules are met:$P$ isandthe string $S$ isaa$P$ isaisof$S$ is thethetheinput isthe password $S$the password $P$.isthe password $S$the$P$ isthe passwordpassword to log inthe first line ofthe", "$S$ and $P$ are:$S$ andofatheandinput is thea password $S$, andthepassword, and$P$istheinput is thepassworda user has entered whilethethe input istheinput is thethe input isthein the string $S$,the passwordof the password"], "prompt": "\nQUESTION:\nYour favourite social media website is changing their policy on login password validation: a slight error when logging in is now acceptable! In particular, assuming the password you chose when creating the account is $S$, a password $P$ entered while logging in will be accepted if any of the following conditions are met:\n - $P$ and $S$ are identical;\n - $S$ can be formed from $P$ by prepending a single digit (0\u20139);\n - $S$ can be formed from $P$ by appending a single digit;\n - $S$ is equal to $P$ after reversing the case of all letters in $P$.\n\nTo reverse the case of a string, replace all uppercase letters with their equivalent lowercase letters, and all lowercase letters with their equivalent uppercase letters, while leaving all other characters the same. For example, the case-reversal of pa55WORD is PA55word.\n\nAny other attempted password $P$ will be rejected. So for example, if $S$ is c0deninja5, then c0deninja will be accepted, but not C0deninja5 or c0deninja51.\n\nWrite a program which, given alphanumeric strings $S$ and $P$, determines whether $P$ should be accepted.\n\n-----Input-----\nThe first line of the input is the string $S$, the stored password, and the second line of input is the password $P$ that a user has entered while attempting to log in. Each string consists of only digits 0\u20139, lowercase letters a\u2013z, and uppercase letters A\u2013Z. The strings won\u2019t contain spaces or any other extraneous characters, and will each contain at least one and at most $101$ characters.\n\n-----Output-----\nPrint Yes if $P$ should be accepted according to the above rules, and No otherwise.\n\n-----Examples-----\nSample Input:\n123\n123a\nSample Output:\nNo\nUse Standard Input format\nANSWER:\n"}}