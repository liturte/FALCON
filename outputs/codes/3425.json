{"3425": {"code": ["ofonebecanintheof aaan empty cell.theof thecell on one row ofthe chessboard. Theisan empty cell. Thethecell on theisof thebetheof theacell onof the chessboard.the first line has two", "onecanoneoneto attack a. #. #. #.in#. #. #. #.ofonchessboard.one row of the chessboard.thea broken cell.acell.theisinin thetheofon the chessboard.thethe firstone one. Zapray would", "onequeens.canthechessboard,.) ) {). append ( 1. append( 2 ) );, 0) ;:;) ) ). append (( 1,) ). append () ) ;, 1 ) ). append ( 1 ); }", "itone.thechessboard.//the first line hasof thechessboard. //thechessboard.oftheitsthat theison the chessboard.// theistheof the chessboard. //thechessboard. // The lastis a broken cell,of theone row of the chessboard.", "the chessboard. Theistoan.. #. #. #.istheoneonetwooneoneZapray cantheoneone. #. #. #of theit isthethe(m$). Thisof thea fewthe number of", "one of the followingbroken cells.of thecanbethecantheone of thetherow, column, orcaninthe samechessboard..2 ].....[ 2 ]..]. length. length ; i. length", "anacan place ona cell onthe(.)... split (. split (. split ( '.').. split ( '.' )]. split (split (] )=]1 ). splitsplit (. split ( '[ 0 ]) ; }[ 0 ]", "andchessboard, andin whichareaaoftheconventionalandof theof the=( n) ;output =( n= n;{ if ([{) {.;[ 1", "the chessboard.canin oneinthe chessboard, theisthetheZaprayacan placetheone ofthechessboard, and thecell ona brokencellcanbroken cell. The firstis the numberit isthebroken cell on thean empty cell, thean empty cell. The second", "theonetheinone of thethe(\u2018.\u2019) denotesa broken cell. Acellis a brokencell on aa broken cell. Ais a broken cell.a broken cell ona broken cell. Ais a broken cell. Aa broken cell onofof theisof thebean empty cell.is a broken"], "prompt": "\nQUESTION:\nThe $n$-queens problem is popular among computer science students. Its task is to place a maximum number of queens on an $n\\times n$ chessboard so that no two queens attack each other. Two queens attack each other if they share a row, column, or diagonal.\n\nOne day Zapray gets bored and extends the problem by loosening its constraint: It is allowed to have two queens attack each other, but no three queens can attack each other at the same time. In other words, there should not exist three queens $i$, $j$, and $k$ so that $i$ attacks $j$, $j$ attacks $k$, and $k$ attacks $i$.\n\nWith the new constraint, Zapray would like to know at most how many queens he can place on an $n \\times m$ chessboard, and in how many ways he can place a maximum number of queens. Additionally, some of the cells on the chessboard are broken, and queens cannot be placed on these broken cells. A broken cell between two queens does not prevent them from attacking each other.\n\n-----Input-----\nThe first line has two integers $n$ and $m$ ($1 \\leq n, m \\leq 50, n \\cdot m \\leq 50$), describing the size of the chessboard. Each of the next $n$ lines has $m$ characters describing the cells on one row of the chess board. A dot (\u2018.\u2019) denotes an empty cell, while a hash (\u2018#\u2019) denotes a broken cell. There is at least one usable cell on the chessboard.\n\n-----Output-----\nOutput two integers. The first is the maximum number of queens Zapray can place on the chessboard, and the second is the number of ways in which he can place that many queens.\n\n-----Examples-----\nSample Input:\n3 4\n....\n.#.#\n....\nSample Output:\n5 13\nUse Standard Input format\nANSWER:\n"}}