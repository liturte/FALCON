{"2399": {"code": ["move Alicecan movethemoveismoveAlice can movemove Alice canAlice canmove Bob canthe secondmust beAlice can moveAlice canmove Bob can movemove Bob canthe second query Bob cans_42.a$a$ \\le\\cdot 10^5$)we$s$ is", "themovecan bemove. $s$cans_2if$s_2 \\dots s_3$,\\dotsthes_2$s_2 \\dots s_5$.is assumed that there is$s_2 \\dots s_3$,$s_2 \\dots s_5$,$s_2\\dots", ".=).( ) ;( ) )( ) ;().) ;( ) ;) ) ; }...( ){{ var(=) ).( ). length( ) ; if () {[ 0 ]. length) ; } if (}", "(Alice cans_3 \\dots s_5$s_5$in$s_2$s_3 \\dots$s_3 \\dots s_5$. Ifis ais a stringa string $s_3\\dotsthes_n$ is) ; }s_5$ is() ;to()", ". () ; }() { if( )} else { if (( )if () {\")0 ; };) {( ) ; }=) ; }( ) ; }}.. length ;1 ] ;1 ; }}\" \" ) { if", "canAlicecanand $b\\cdot 10^5$)soit'sAlicemove, but Bob cana move, but.ifAliceAlice canmove, so theys_1,\\dots s_n$)thatbefor each querythe//that $s_3\\dots s_n$.there", "ofandthe.. X.. X. X. XX. X. X12. X. X.1. XX. X.3.. X. XX. X. XX. X. X.X. X.X. X. X. X. X.X. X. X. X... X. X", "$a$ and $b$is guaranteed that $a=$s =$...X..,$s = $$a$ and$b$$a$ and $b$ $s$s$ iss_3 \\dotstheto$s_2if $a = $$b$ $b$$a$ $b$$s_3 \\dots", "intheit is$s$ turns intoand$s_3$s_4,ofthetheisall ofof the$s_1 $s_2 $s_3 $s_4$s_4 $s_3 \\dots$s_5$ $s_7if the firstcan bes_7, $s_6$s", "Alicecaneven if themovesall(so, for example,$s_4$ can=$...X.X..Xisit cana move, butsuch asbetobea move, somove, soAlice can moveAlice cansothestring is amove, soneed to make a move,move, so"], "prompt": "\nQUESTION:\nAlice and Bob play a game. Initially they have a string $s_1, s_2, \\dots, s_n$, consisting of only characters . and X. They take alternating turns, and Alice is moving first. During each turn, the player has to select a contiguous substring consisting only of characters . and replaces each of them with X. Alice must select a substing of length $a$, and Bob must select a substring of length $b$. It is guaranteed that $a > b$.\n\nFor example, if $s =$ ...X.. and $a = 3$, $b = 2$, then after Alice's move string can turn only into XXXX... And if it's Bob's turn and the string $s =$ ...X.., then after Bob's move the string can turn into XX.X.., .XXX.. or ...XXX.\n\nWhoever is unable to make a move, loses. You have to determine who wins if they both play optimally.\n\nYou have to answer $q$ independent queries.\n\n\n-----Input-----\n\nThe first line contains one integer $q$ ($1 \\le q \\le 3 \\cdot 10^5$) \u2014 the number of queries.\n\nThe first line of each query contains two integers $a$ and $b$ ($1 \\le b < a \\le 3 \\cdot 10^5$).\n\nThe second line of each query contains the string $s$ ($1 \\le |s| \\le 3 \\cdot 10^5$), consisting of only characters . and X.\n\nIt is guaranteed that sum of all $|s|$ over all queries not exceed $3 \\cdot 10^5$.\n\n\n-----Output-----\n\nFor each test case print YES if Alice can win and NO otherwise.\n\nYou may print every letter in any case you want (so, for example, the strings yEs, yes, Yes and YES will all be recognized as positive answer).\n\n\n-----Example-----\nInput\n3\n3 2\nXX......XX...X\n4 2\nX...X.X..X\n5 3\n.......X..X\n\nOutput\nYES\nNO\nYES\n\n\n\n-----Note-----\n\nIn the first query Alice can select substring $s_3 \\dots s_5$. After that $s$ turns into XXXXX...XX...X. After that, no matter what move Bob makes, Alice can make the move (this will be her second move), but Bob can't make his second move.\n\nIn the second query Alice can not win because she cannot even make one move.\n\nIn the third query Alice can choose substring $s_2 \\dots s_6$. After that $s$ turns into .XXXXX.X..X, and Bob can't make a move after that.\nUse Standard Input format\nANSWER:\n"}}