{"4752": {"code": ["2+.[ 0, 1].* numstarget2 +target )target ]target ]] = nums [ 1[ target ]:( nums :0 ] + nums[ 0 ]0 ]] = targettargettarget ] ][ 0 ] ]] ) ) return[] ) :target ] = nums2[ 0 ]", "array of integers,targettarget =1,if target0,target]target ])): targettarget ] : target1 ]) : nums [ target2 ]2 ] [] ]] ] )0 ] ] )= target ][ target ] [] [ 0 ]] } def= nums []= nums [", "nums: List[int], target: int,target: int,) -> List[int]:\nANALYSIS], target: int,2, target:0,1]1][1]1][1] = nums[0] +target:], target )[]2 ]], target :[ 1 ] ):],]", "an array of+ nums[0]nums[1] + nums[2]target: inttarget)2, 1].\nclass Solution:\n   2+target: int):\nANSWER[0, 1].\nclass Solution:\nSuggestionlist of[1,]:[1, 2]nums[2]2] + nums[2]self,[0,", "( nums: List[int], target: int):( nums: List[int], target:len:nums[0],target: int) ->1][2,[1], target: int)::], target : target )return], target )) :) : return( nums, target( nums, nums( nums, targettarget) : return nums", "=target=9,\nANWER:( nums: List[int], target:return(nums: List[int], target: target)(nums: List[int], target:target)0]1]: return nums01 ]) return numstarget )[ 1 ], target][ 1 ] ]0 ] ]) )= nums [target ]", "( nums: List[int], target:target: int) ->list[int]:\nANSE #print nums[int]#print nums[1] #print nums[2], target#print nums[0], nums[1],#print nums[0], nums[1],target if targetreturn[target ]] ]if target!=return [ targettarget ][]]", "an array of[2,target: int]][1] ]=targettargettarget2 ]0[target, 0]target + nums[2] returntarget: target]][0]= nums[0],+ nums[1][1], target: target) ->[0], target )target, nums [targetreturn", ":nums: List[int]:\nANSWER[0, 1]2[1] + nums[0]= 1,target0 ] + nums[0][1]2 ] + nums[1]target: target,0][1][2] +]target: target) ->(=1 ][1]1 ][ 2 ]", "target=target: target,) -> List[int]:\nANSWER1] ::nums: List[int] return:( nums: List[int], target:target) ->if target >targettarget ) ->target:2 )( nums [ 0target + nums[1]target]( nums[0] + nums[1]target:="], "prompt": "\nQUESTION:\nGiven an array of integers, return indices of the two numbers such that they add up to a specific target.\n\nYou may assume that each input would have exactly one solution, and you may not use the same element twice.\n\nExample:\n\n\nGiven nums = [2, 7, 11, 15], target = 9,\n\nBecause nums[0] + nums[1] = 2 + 7 = 9,\nreturn [0, 1].\nclass Solution:\n    def twoSum(self, nums: List[int], target: int) -> List[int]:\n        \nUse Call-Based format\nANSWER:\n"}}