{"3373": {"code": ["ofa single integer $n$string of lengthof(( n) ) {({( s ))[ 0 ](length( ) {(.()( ). lengthlength =0 ] ;( n ) {. length )) ) )", "of the( )thestringaone ofoftheof thein thesequence. The#the order of thethethe number ofoftheisthe first line ofof the nextof thestring of theof theof thethe// the number", "a singlestring oftheisof theofthetheof thetheone of theone ofthe piecesthethetheof thethetheof theof theinput.the firstof the input, theof theof the", "inputina single integer $n$of theempty stringofa single stringofin the input.,)Astring ofthe(([ 0)(][ 1 ].) ) )) ) )( ) )) {", "theisthethatof thea single integerthea singlestring.thethestring,the length of theis theis the length ofthethe length of thestring of balancedone of thetheof thestring, thethethethe length of thethe length of the", "string ofsquare brackets, soofaofcharacters \u2019theofina singleof a singleof thetheis aofthe length ofthe( ( )1 )() )) ) {. split ( '') ; }}", "andin the output.thethenumber of(a balanced string of parentheses.theof thesquareof theastring ofsquarein a singleone of thetheofthetheofstring ofsquare. This is becausethebetween two spaces:the", "of the=())( )( ) ) )() ) ) ) )a balanced string of( ))()( ) )( ) ) )) ) )(( ) )((( ) ) )) )) )( ) ) ) )( ) )", "a singlebetweenthe1.string.theof theofthethethetheof the(length of theof theoutput a singleandone of theof thein theis anto be used. join (''('' ). split (''", "astring ofofthethethethelength ofthetheof theis theof thestring=[ ]=0 ] ;. append () ;( string )(. append () ; }[ ]. append ("], "prompt": "\nQUESTION:\nYou are teaching a class in programming, and you want to cover balanced parentheses. You\u2019ve got a great visual aid, a sign with a very long, balanced string of parentheses. But, alas, somehow, your visual aid has been broken into pieces, and some pieces may be missing! You\u2019ve got to try to put it back together as best you can. Given the string of parentheses on each piece, what is the longest balanced string you can form by concatenating some of them in some order? Each piece may be used at most once, and the pieces cannot be reversed.\n\nA balanced string of parentheses is defined as:\n - The empty string\n - $AB$ where $A$ and $B$ are both balanced strings of parentheses\n - ($A$) where $A$ is a balanced string of parentheses\n\n-----Input-----\nEach input will consist of a single test case. Note that your program may be run multiple times on different inputs. The first line of input will contain a single integer $n$ ($1 \\le n \\le 300$), which is the number of pieces.\n\nEach of the next $n$ lines will hold a single string $s$ ($1 \\le |s| \\le 300$), which consists only of the characters \u2019(\u2019 and \u2019)\u2019. This describes one of the pieces.\n\n-----Output-----\nOutput a single integer, which is the length of the longest string of balanced parentheses you can form from the pieces. Note that the empty string is technically a balanced string of parentheses, so it is always possible to form a string of length at least $0$ (although the empty string is not a very effective visual aid!).\n\n-----Examples-----\nSample Input:\n3\n())\n((()\n)()\nSample Output:\n10\nUse Standard Input format\nANSWER:\n"}}