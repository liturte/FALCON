{"456": {"code": ["the interview isaofstring s of lengthofof theof the(1 \u2264 n \u00a0\u2014of theof theof thethethe interview isof theinterview is \"a***\".is \"a***\".of the\"a***\".is aanother one to beanother one.theis", "a.a single.aanaword ogo, so theinterview is transformed tobe( \"a***b\", \"a**b\",\"a**b\", \"a**b\", \"a**b\"\"a**b\"\"a**b\",\"a**b\",\"a**b\", \"a**b\"\"a**", "a singleof theoftheofthethe interview isstringofthe interview.\"***gmg***\"is\"a***\"( \"a***\" )... format\"a***\" ). format\"a***\" )\"a***\" )= \"a***\"\"a***\"of the interview with a\"a**", "string s ofin Oleg's speech.areofofthethetheof theinterview, Polycarp hasisof the\"a***b\".\n\nOutputA***binterview isof thethe interview isthe interviewthe interview.thethe interview isthe interview is \"a***b\"..{ \" \"\"a", "\"a\" \u2264alength 1.isfor\"a\"\u2264 \"a\"\u2264 \"a\"\u00a0\u2014 thea \"a\"\u2264 \"a\"\u00a0\u2014 the\"a\"\"a\" \u2264\"a\" \u2264\"a\" \u2264 \"a\" \u2264 \"a\"\"a", "theand oneofwords arethe.1 ] ) ): \"a\"\"b\" ) )\"a\"\"b\" )0( ) ).] ) )int n =\"a\"] ) )) ) )( ); } else if () ) {(( ) ){ return \"a\" ; }0", "nto bea singleof thein the interview.isofof theone\"a***b\".of thethe interview is transformed tothe interview istheis \"a***\".the interview is transformedis \"a***\".aanotherin thethethe\"***\".a\"***\". Aof the", "int n =] ;input =( ) ;;if () { if (( )) {\"a***b\" ) ; }( ) ; }) {)( ) {) ; } } }( ) ;][) ; }( ) ; }( ) ;) ; } }( ) ; }.{ print ((", "aofthreeofn, consisting of lowercase Englishthe interview.aof onetheof the interviewa\"a***\"the interview\"a***\".\"\"a***\".\"\"a***\".\" ).\"a*\".\"\"a\"\"a\"\"a\" \"a\" \"a\" \"a\" \"a\"\"a\"", "a singleof theonethe interviewtheof thewordofthe..in thewordthe.wordin thethetheof thetheofthe input is(1 \u2264 ntheof the"], "prompt": "\nQUESTION:\nPolycarp has interviewed Oleg and has written the interview down without punctuation marks and spaces to save time. Thus, the interview is now a string s consisting of n lowercase English letters.\n\nThere is a filler word ogo in Oleg's speech. All words that can be obtained from ogo by adding go several times to the end of it are also considered to be fillers. For example, the words ogo, ogogo, ogogogo are fillers, but the words go, og, ogog, ogogog and oggo are not fillers.\n\nThe fillers have maximal size, for example, for ogogoo speech we can't consider ogo a filler and goo as a normal phrase. We should consider ogogo as a filler here.\n\nTo print the interview, Polycarp has to replace each of the fillers with three asterisks. Note that a filler word is replaced with exactly three asterisks regardless of its length.\n\nPolycarp has dealt with this problem in no time. Can you do the same? The clock is ticking!\n\n\n-----Input-----\n\nThe first line contains a positive integer n (1 \u2264 n \u2264 100)\u00a0\u2014 the length of the interview.\n\nThe second line contains the string s of length n, consisting of lowercase English letters.\n\n\n-----Output-----\n\nPrint the interview text after the replacement of each of the fillers with \"***\". It is allowed for the substring \"***\" to have several consecutive occurences.\n\n\n-----Examples-----\nInput\n7\naogogob\n\nOutput\na***b\n\nInput\n13\nogogmgogogogo\n\nOutput\n***gmg***\n\nInput\n9\nogoogoogo\n\nOutput\n*********\n\n\n\n-----Note-----\n\nThe first sample contains one filler word ogogo, so the interview for printing is \"a***b\".\n\nThe second sample contains two fillers ogo and ogogogo. Thus, the interview is transformed to \"***gmg***\".\nUse Standard Input format\nANSWER:\n"}}