{"4051": {"code": ["thethestack of height 2,thestack oftallerthestack of heightin the input array a_{i}=thetotheoutput array {2,3, 4, 4}.3, 4, 4,the1, 2, 2}.,) {}the)., 1 ] ) ;[Image] \n\nArmor =", "of theorder inthe firstthe arrayof the2, 2, 2, 2}for( 10,2, 2,2, 3,1, 1,the2,2, 2,0, 1, 2,\"YES\" if thearraythe firstof//1,2, 2, 2},theof2, 2,", "to the topa stack ofas thethetaller stack andthe stack of) {.....).().(..)).).)...., 0,", "the array with atheofof thethe1 2 3thethe array willtaller stackto thestack of heightthestacks of1 2 2the array112 2, 2, 2}.the2,2, 2, 2}.thestack of height 2,theinto the right of the", "the input array2, 2, 2,.the=+.+ 2; if..if0.0).0.0, 1.0,).] )if (...] = 2.2 ).2 ].] = 2 ;", "thetheand)the(2 \u22642 \u2264 1 \u22642theof3 \u22641 \u2264 2 \u2264thestack of height.a_i ] =a_i ].\"NA\" if it canthe firstthe first\"YES\" ifthe firsttaller stack", "the stack of22, 2,2,theto thethe1,the array isthe first stack oftheand thestack oftheto the right of thethe output arraytheof thestack of1, 2,thethe stack ofof the arrayof theofthe input array, the array", "theandof a_i, the1theis usedthethein the(1 \u2264 1 \u2264 2thein\"YES\" ifarray can be sorted usingbe sortedto thestack of0.the arrayto thetheof thestacks inthe1, 2, 2}.{2, 2, 2, 2", "ofthetheorderthe array isaof; for a_i instack ofthe array is{3, 1,2, 2}.the arrayfor a_i,of the arraytheof thea_i,thethat isthearrayof the arrayofthe array of thethe arrayand theof thearray of the", "outputin thethetheof thestack of2, 2,the(1 \u2264 n \u2264\"YES\" if the array canthe array can be sortediftheisthe stack ofthethethe arrayif thestack of height2, 2, 2}.the secondstack of2, 2, 2}.= 0) {"], "prompt": "\nQUESTION:\nEverybody knows of spaghetti sort. You decided to implement an analog sorting algorithm yourself, but as you survey your pantry you realize you're out of spaghetti! The only type of pasta you have is ravioli, but you are not going to let this stop you...\n\nYou come up with the following algorithm. For each number in the array a_{i}, build a stack of a_{i} ravioli. The image shows the stack for a_{i} = 4.\n\n [Image] \n\nArrange the stacks in one row in the order in which the corresponding numbers appear in the input array. Find the tallest one (if there are several stacks of maximal height, use the leftmost one). Remove it and add its height to the end of the output array. Shift the stacks in the row so that there is no gap between them. Repeat the procedure until all stacks have been removed.\n\nAt first you are very happy with your algorithm, but as you try it on more inputs you realize that it doesn't always produce the right sorted array. Turns out when two stacks of ravioli are next to each other (at any step of the process) and differ in height by two or more, the top ravioli of the taller stack slides down on top of the lower stack.\n\nGiven an input array, figure out whether the described algorithm will sort it correctly.\n\n\n-----Input-----\n\nThe first line of input contains a single number n (1 \u2264 n \u2264 10) \u2014 the size of the array.\n\nThe second line of input contains n space-separated integers a_{i} (1 \u2264 a_{i} \u2264 100) \u2014 the elements of the array.\n\n\n-----Output-----\n\nOutput \"YES\" if the array can be sorted using the described procedure and \"NO\" if it can not.\n\n\n-----Examples-----\nInput\n3\n1 2 3\n\nOutput\nYES\n\nInput\n3\n3 1 2\n\nOutput\nNO\n\n\n\n-----Note-----\n\nIn the second example the array will change even before the tallest stack is chosen for the first time: ravioli from stack of height 3 will slide on the stack of height 1, and the algorithm will output an array {2, 2, 2}.\nUse Standard Input format\nANSWER:\n"}}