{"2884": {"code": [":candidatecandidates\u00a0[2]candidatecandidate : int )target : inttarget )candidate : int )candidate : int )target : int )candidatecandidate: intcandidate : int: intint ))candidatecandidate : int )candidate )candidate ) ) {( candidates, target[ 1 ]candidate..( target )", "candidates :target : intcandidate numbers (candidates)candidate number (target)candidate numbers (candidates) is:[1,[2][2][1, 2,[1, 2]=list of(candidate: int)[2](candidate: int)candidates: List[int]list of:=candidates: List[int] target:list:", "candidate=candidates.=[1][2][2] =[1] =target[2] =[2][1] =[1]. split (candidates.join(', ') if targettarget = target.split(') [ 1 ]target) ) returncandidatecandidate =candidates\u00a0[candidate]candidate =candidate. split (", "candidates: List[int][1, 2],target: int]0:\nANANA solution set)candidateSum2(self, candidates: List[int]):\nANANA solutionset is:\n[\n [[1,]:\nANANA solution set is:\n[[1,]:\nANANA solution set is:\n[[1,2]:", "(candidates:) ->target: int) -> List[int][1,][1, 1,[2,[1,[1, 2,2:=[1,[1,[2,[2, 5]][2, 1]][2,[1, 1,[1,][1, 1] ] :", "candidates\u00a0targettarget: int) -> List[List[int]]:\nANALYSISlist oflist of=list ofcandidate numberstarget: int) ->target: int) -> List[List[int]]:candidate numbers(candidate: List[int]) ->int) ->candidates: List[int]:candidate: List[int]:\nANALYSIScandidate:[int", ", candidates: List[int], target: int):target,candidates, target) ->candidates, target) ->candidatecandidates\u00a0[1,2,2], target:list(list) ->List[int]]:candidates: List[int]:\nANCCOVERAGE:candidate number, target:[1,2,2], target:#[1,1,2],", "candidates\u00a0:candidates\u00a0:candidates\u00a0:target: int ) ->target: int2:\n\nInput: candidates =[1,2]candidate number (candidates\u00a0) ->candidates\u00a0:candidates\u00a0:candidates\u00a0:[1, 2][1, 2]list: List[int] defcandidates\u00a0:(self, candidates: List", "=[1,[2, 1],[2, 5],[1,[1,[2,[2]]candidateSum2(self, candidates: List[int], target: int):candidateSum2(self, candidates: List[int], target: int)::candidateSum2(self, candidates: List[int],target:candidates: List[int]:\nANSE", "target ==:] :,),, target: return, candidates, target:, target : target) :) :[] : return [,) :candidates, target]( self,candidates, target() )) : return [ ][ 0 ]"], "prompt": "\nQUESTION:\nGiven a collection of candidate numbers (candidates) and a target number (target), find all unique combinations in candidates\u00a0where the candidate numbers sums to target.\n\nEach number in candidates\u00a0may only be used once in the combination.\n\nNote:\n\n\n       All numbers (including target) will be positive integers.\n       The solution set must not contain duplicate combinations.\n\n\nExample 1:\n\n\nInput: candidates =\u00a0[10,1,2,7,6,1,5], target =\u00a08,\nA solution set is:\n[\n  [1, 7],\n  [1, 2, 5],\n  [2, 6],\n  [1, 1, 6]\n]\n\n\nExample 2:\n\n\nInput: candidates =\u00a0[2,5,2,1,2], target =\u00a05,\nA solution set is:\n[\n\u00a0 [1,2,2],\n\u00a0 [5]\n]\nclass Solution:\n    def combinationSum2(self, candidates: List[int], target: int) -> List[List[int]]:\n        \nUse Call-Based format\nANSWER:\n"}}