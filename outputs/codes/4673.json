{"4673": {"code": ["( ) :][1 ])\", sep = \"[ 2 ]1 ] = [])( ), sep =), sep = \") for i in rangei in], sep = \" \") )(), sep ='\\n'))( ) :[", "input] =[= [ ]= [ ] for0 ]in range (]=]0 ]) [ 1 ]] =] for[ 3 ] == \"F\"\"Mr. \".\"Ms.= \"Mr.\"Mary George\"[ 3 ] ==\"Ms. \" else \"Ms.[ 1 ][ 3", "the) )theformat (). split (].( \" \", sep =) print (), sep =) #. split ([ 2 ]. split(\" \"(\"Mr. \" if\"M\" else \"Ms.\"Mary George\" ) print\"Ms. \" if\"Ms. \" if person [\"", "( ) :. split ( ), sep( )( ), sep) #if) == \"F\" else \"Mr\"\"Ms. \" if person[2] ==\"M\" else \"Ms. \"+person in() forperson in, sep = '\\n'), sep =))])if) == \"M\" :", "n =n. split ( )person_lister ( f[1 ], n([ n ]] =[ n ]][ n ],],,], n, n ) )),, n )[ n ]( n )( n )[ n ], n= [ n]n [n [ 1 ]", "thethe first linethethe lastname, the number of people.(person):\nSECTIONperson_listerperson = [person[0] for)) # complete theperson_lister ( f )person =person =[ 3\"F\" ]person [] = \"F\" if\"M\" else\"F\" if person [else \"F\"person [", "[] ) forperson in [1,2,3]( )person in:) if[[ 3 ] == \"M\"else \"Ms.[ 3 ] == \"F\"][ 0 ][ 0\"Ms.\"Mr. \" if person\"\" + person [\" +person [)# complete the function# complete the function(", "];[ 'A' ]],)#() == \"M\" else\"F\" else \"Mr. \"\"[] )]]]1)( )(, 'N' )'N':: 'A' ),'N''F' ), 'F''H' ), 'M", "ofnames in( ). split ( ) for) ]=) )(= [ ]if) )= [)for i in range:] ) ifis[] = [,) ] for n in[ ]]:] = [ ]if n ==", "a[][ 1 ], \"M\"\"F\" ][\"F\" ][ 3 ] ==[ 2 ][ 1 ]= []([ 2 ]\"F\" ][ 2 ](:[for i in) ]] )], \"Mr. \") )"], "prompt": "\nQUESTION:\n=====Problem Statement=====\nLet's use decorators to build a name directory! You are given some information about N people. Each person has a first name, last name, age and sex ('M' or 'F'). Print their names in a specific format sorted by their age in ascending order i.e. the youngest person's name should be printed first. For two people of the same age, print them in the order of their input.\n\nFor Henry Davids, the output should be:\nMr. Henry Davids\n\nFor Mary George, the output should be:\nMs. Mary George\n\n=====Input Format=====\nThe first line contains the integer N, the number of people. N lines follow each containing the space separated values of the first name, last name, age and sex, respectively. \n\n=====Constraints=====\n1\u2264N\u226410\n\n=====Output Format=====\nOutput N names on separate lines in the format described above in ascending order of age.\nimport operator\n\ndef person_lister(f):\n    def inner(people):\n        # complete the function\n    return inner\n\n@person_lister\ndef name_format(person):\n    return (\"Mr. \" if person[3] == \"M\" else \"Ms. \") + person[0] + \" \" + person[1]\n\nif __name__ == '__main__':\n    people = [input().split() for i in range(int(input()))]\n    print(*name_format(people), sep='\\n')\nUse Standard Input format\nANSWER:\n"}}