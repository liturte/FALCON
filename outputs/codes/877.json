{"877": {"code": ["problembetween 2problemthethethein1forand....; } //if ( n( 2) ; }= n.= n.= n. mn.( 1) ; n.. add () ) { n", "problemsit's notais similar toproblem 2,problemthebetween twobetween two2,problemis0, 0,iproblem k, so itproblem j,a problema(1\u2264 k \u2264= 0 ;); if (m + 1,, m + 1,, m ) {; if ( m <", "problemtheaofis used(3and1,is similar to1, but 2 is. \n\nANO =,, m)if ( nn == n ) {) ; }( n)n,m ].; } else ifis similar toand)[ 0 ].", "between twomore thanof the inputthea number ofofthebetweenthe input containsdifferent fromthethetwothat ittoof theall possible casesbetweenproblems,the input isbetweenas the first sample,theseis similar to athattwo two sample, the two", "theis similar tobetweeniftheis similar tooneproblem) {} else if2 ) {) { if (] ) {( 2 ) ;[ ][ ] ) {=[[ 1 ] ;1 ] ) {[} } else ifn ] =n ] ;[ 2 ] )0 ] ) {", "in theinbetween twoproblems are similar.of theof theand) \u00a0\u2014the same problem.isafrom the input.the..problemto the(1 \u2264 n \u2264(1(1 \u2264 n \u2264) ).( 1 \u2264).(", "for).==inn.) {. splitProblem (if ( problem.. splitProblem ( problem{() { if ( problem. splitProblem ( problem)) {. splitProblem ( problem )the.) {.) ; }problem. splitProblem ( problem )", ".) ); if () {problems are1,2, buttoa problem, soproblems are similar toin aproblem i, andproblem j,inmnotin theproblems are similar to0,.,....) { // no other", "the number ofthe)problemisaproblemaa problem thatproblem 2,and amore thanproblem 2, andbeand 1 is similar to(2 \u2264 n \u2264aproblem 3, butis similar toproblemproblem 4, and 5that a problemof theasproblem 2.the number of", ".the. \n\nHorribletheisthe problemthebe used in.. \nn )..n =..... n =n.. n = nn. m =. n =n.n.. n ) )"], "prompt": "\nQUESTION:\nThere are n problems prepared for the next Codeforces round. They are arranged in ascending order by their difficulty, and no two problems have the same difficulty. Moreover, there are m pairs of similar problems. Authors want to split problems between two division according to the following rules:   Problemset of each division should be non-empty.  Each problem should be used in exactly one division (yes, it is unusual requirement).  Each problem used in division 1 should be harder than any problem used in division 2.  If two problems are similar, they should be used in different divisions. \n\nYour goal is count the number of ways to split problem between two divisions and satisfy all the rules. Two ways to split problems are considered to be different if there is at least one problem that belongs to division 1 in one of them and to division 2 in the other.\n\nNote, that the relation of similarity is not transitive. That is, if problem i is similar to problem j and problem j is similar to problem k, it doesn't follow that i is similar to k.\n\n\n-----Input-----\n\nThe first line of the input contains two integers n and m (2 \u2264 n \u2264 100 000, 0 \u2264 m \u2264 100 000)\u00a0\u2014 the number of problems prepared for the round and the number of pairs of similar problems, respectively.\n\nEach of the following m lines contains a pair of similar problems u_{i} and v_{i} (1 \u2264 u_{i}, v_{i} \u2264 n, u_{i} \u2260 v_{i}). It's guaranteed, that no pair of problems meets twice in the input.\n\n\n-----Output-----\n\nPrint one integer\u00a0\u2014 the number of ways to split problems in two divisions.\n\n\n-----Examples-----\nInput\n5 2\n1 4\n5 2\n\nOutput\n2\n\nInput\n3 3\n1 2\n2 3\n1 3\n\nOutput\n0\n\nInput\n3 2\n3 1\n3 2\n\nOutput\n1\n\n\n\n-----Note-----\n\nIn the first sample, problems 1 and 2 should be used in division 2, while problems 4 and 5 in division 1. Problem 3 may be used either in division 1 or in division 2.\n\nIn the second sample, all pairs of problems are similar and there is no way to split problem between two divisions without breaking any rules.\n\nThird sample reminds you that the similarity relation is not transitive. Problem 3 is similar to both 1 and 2, but 1 is not similar to 2, so they may be used together.\nUse Standard Input format\nANSWER:\n"}}