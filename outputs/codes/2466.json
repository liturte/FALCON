{"2466": {"code": ["[0,1],[1,2,3],[2,2,1],[1,2,3],[2,3,2],[1,2,3],[1,2,3],[2,3,1],[1,3,1],[1,2,3],[2,3,2], [3,1,2], [3,1,", "[1,2,3],[3,2,1],[2,3,2],[1,2,3],[2,3,1],[3,2,1],[2,3,2],[3,1,2],[3,1,2],[3,1,2],[3,1]\nAN:[3,2]\nAN:", "[0][1,2,3],[3,2,1],[1,2,3],[2,3,1],[2,3,2], [3,2,1],[3,3,2], [3,2,1][1,2,3], [3,1][3,2,1], [3,1,2],[1,", "[1,2,3],[1,2,1],[1,2,2],[1,2,3],[2,3,1],[3,1,2],[3,2,1],[2,1,2],[3,1,3],[1,2,3],[3,2,1],[3,1,2],[", "[ 1,2,3],[2,3,1],[2,1,2],[2,3,1],[2,3,2],[2,3,1],[3,2,1],[3,1,3], [2,2,3],[3,2,1], [3,2,1], [3,2,1],[3,1", "fornums: List[int]:list:( self, nums:self:: return)[1,2,3],[2,3,1],[3,2,1],[3,2,1],[3,1,2],[3,1,2],[3,2,1]][2,3][3,1,2],", "( nums: List[int])( nums] :: returnif nums{0 : return nums) if nums( nums ): return nums: return nums], 1 )[ 1 ]: return nums", "[:[::( nums: return nums} return nums= nums.( nums )): return nums= nums.= nums= nums..= nums [: return nums[ 0 ]( nums, nums", "( nums][1,2,3][2,1,2],[3,2,1],[3,2,3],[3,2,1],[3,1,2],[3,2,3],[1,2,3], [3,2,1],[3,2,1],[1,2,3],[1,2,", "=: return: return nums: return nums: return: return nums"], "prompt": "\nQUESTION:\nGiven a collection of distinct integers, return all possible permutations.\n\nExample:\n\n\nInput: [1,2,3]\nOutput:\n[\n  [1,2,3],\n  [1,3,2],\n  [2,1,3],\n  [2,3,1],\n  [3,1,2],\n  [3,2,1]\n]\nclass Solution:\n    def permute(self, nums: List[int]) -> List[List[int]]:\n        \nUse Call-Based format\nANSWER:\n"}}