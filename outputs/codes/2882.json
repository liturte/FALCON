{"2882": {"code": [":: return: return: return\"(()\", \"(())\", \"()()()\", \"\"()()()\", \"\"()()()()()\", \"\"()()()()\"] defn: int: return(self, n :(: return\"(())\", \"(\"()())\", \"(())\", \"\"(\"()())\",\"()()", "function generateParenthesis(self, n: int):List[str]:){ returnn.( ) ),( )\" \"(())\",\"()()()\",\"()()()\"]\"()()()\"]\"()()()\"] def\"()()\"] def generateParenthesis(self, n: int):List[str]\"()()()\"]#\"()()\"]", "n[(): return\"(())\"] def) :\"(())\",\n\"(()())\",\n\"()()()\",\n\"(()())\",\n\"(()())\",\n\"()())\",\n\"(()())\",\"(())\"] \"\"\"\"\"\" \"\"\"\"\"\" \"\"\"#\"\"\" \"\"\"\"\"\" \"\"\" \"\"\" \"\"\" \"\"\" \"\"\"", ":( ) :\"(())\",\"(()())\",\n\"()()()\",\"()()()\",\n\"()()()\",\n\"()()()\"] return\"()()\"( )\"(()())\"] def generateParenthesis(self, n: int):list:list:list:list:list:list:list:list:list:list:list:list:list", ":\nANSEn : int ]:([ ]) :: ()::(self:) ::) :: return( ) )( )\"(())()\"\"()()()\",\"()()()\",\"()()\"\"()()()\", \"()()())\", \"())()\"] defself: \"self: \"", "=( )\"(()())\",\n\"(())()()\"]n: int] \"\"\"\"\"\" \"\"\" \"\"\" \"\"\" \"\"\"\"\"\" \"\"\" \"\"\" \"\"\" \"\"\"\"\"\" \"\"\" \"\"\" \"\"\" \"\"\"\"\"\" \"\"\" \"\"\" \"\"\" \"\"\"\"\"\" \"\"\" \"\"\" \"\"\" \"\"\"\"\"\" \"\"\" \"\"\" \"\"\" \"\"\"\"\"\" \"\"\" \"\"\" \"\"\" \"\"\"\"\"\" \"\"\" \"\"\" \"\"\" \"\"\"\"\"\"\"\"\" \"\"\" \"\"\" \"\"\" \"\"\"\"\"\" \"\"\" \"\"\" \"\"\" \"\"\"\"\"\" \"\"\" \"\"\" \"\"\"\"\"\" \"\"\" \"\"\" \"\"\" \"\"\"", "n : int][] #])return self. generateParenthesis (. generateParenthesis () ): return self. generateParenthesisn) ),],:])] #(\")] =) ;##] =", ":\")\": returnn: int:tuple:# type:::,, n : n ):::\")\": ## type:# type:( )n ), self( )( )# type:n ]) : self.( ), selfn ] ))\")\":self. generateParenthesis (n ) )", "tuplen: int]=:return]str,, \" \", \" \"\"\"\" \", \"\", \" \", \"\"\" \", \" \"),], \" \"\"\" \",\" \",\" \", \" \"\" \",\" \","], "prompt": "\nQUESTION:\nGiven n pairs of parentheses, write a function to generate all combinations of well-formed parentheses.\n\n\n\nFor example, given n = 3, a solution set is:\n\n\n[\n  \"((()))\",\n  \"(()())\",\n  \"(())()\",\n  \"()(())\",\n  \"()()()\"\n]\nclass Solution:\n    def generateParenthesis(self, n: int) -> List[str]:\n        \nUse Call-Based format\nANSWER:\n"}}