{"273": {"code": ["in theone ofthenames andthe. \nMissingInputString. \nMissingOutputString..( )),).( )) ;(\"a\",a\"b\", \"ab\" )\"ab\"\"b\",\"ab\" ), \"ab\" )\"ab\" ) : \"ab\",", "a singleaor aabe atheis thea\"b\" or \"c\" are\"a\"is aisaa\"a\" or \"b\" isis a prefix of astringa stringa\"a\" and \"b\"\"c\" are\"c\"\"c\" are\"c\" are\"c\" are\"", "are giventhe first andthename of a user.) { return(\"A\" )...( \"A\" ).).( \"A\" ).( \"B\" ).).( \"A\" ).( \"A\" ).( \"B\" ).( \"A\" )\"B\" )( \"A\" ).", "ofthe firstand the last names(name in athenameall possible.the last.the first and thename of a user.the first and the last( 'a', 'ab',=if ()( 'a', 'ab',\"ab\", \"b\"\"ab\"\"ab\"\"ab\", \"ab\"", "of twocharactersinalength\"a\" and \"ab\" are.a singleaa singlea\"a\" and \"ab\" arearethethe same,a single string\u00a0\u2014the first name offor a user.first name ofuser.internationalizedstring,) )first name ofathe last name of", "thea singleof.: \"a\"\"b\"\"ab\" is\"bc\" isa prefix of a\"ab\" is\"ab\" is athe first and\"ab\" are\"ab\" is a prefix of\"ab\" is a prefix of\"ab\"\"ab\" is a prefix\"ab\"and \"ab\" are\"ab\"\"ab\"", "ofofone stringa: \"A\"\"B\", \"C\",\"B\", \"C\"\"A\"\"C\", \"C\",\"A\"\"C\", \"C\", \"C\"\"C\", \"C\",\"C\", \"C\"\"C\",\"C\", \"C\", \"C\",,", "a single string \u00a0\u2014.\"a\"\"ab\"\"ab\"\"ab\" is\"ab\" are\"ab\" are\"a\" arebebeand \"ab\"in the\"ab\" anda\"ab\" arein\"ab\"\"ab\" are\"ab\" and\"ab\" arethe\"ab\" are not in", "thealllast name of aaof the firstlast name\"a\" andistoa stringof the first name.aall possiblethe first name.and the last name.all possible logins arethe first name.thethe first namelast name. Ais aand thenames. Ais aand aa", "user.)a stringarethe last name\"a\" andandall names. Theisa singleonea singleoneanais ais atheandthe first nameandthe first name,the first name, andthe first name,the last name. The first"], "prompt": "\nQUESTION:\nThe preferred way to generate user login in Polygon is to concatenate a prefix of the user's first name and a prefix of their last name, in that order. Each prefix must be non-empty, and any of the prefixes can be the full name. Typically there are multiple possible logins for each person.\n\nYou are given the first and the last name of a user. Return the alphabetically earliest login they can get (regardless of other potential Polygon users).\n\nAs a reminder, a prefix of a string s is its substring which occurs at the beginning of s: \"a\", \"ab\", \"abc\" etc. are prefixes of string \"{abcdef}\" but \"b\" and 'bc\" are not. A string a is alphabetically earlier than a string b, if a is a prefix of b, or a and b coincide up to some position, and then a has a letter that is alphabetically earlier than the corresponding letter in b: \"a\" and \"ab\" are alphabetically earlier than \"ac\" but \"b\" and \"ba\" are alphabetically later than \"ac\".\n\n\n-----Input-----\n\nThe input consists of a single line containing two space-separated strings: the first and the last names. Each character of each string is a lowercase English letter. The length of each string is between 1 and 10, inclusive. \n\n\n-----Output-----\n\nOutput a single string\u00a0\u2014 alphabetically earliest possible login formed from these names. The output should be given in lowercase as well.\n\n\n-----Examples-----\nInput\nharry potter\n\nOutput\nhap\n\nInput\ntom riddle\n\nOutput\ntomr\nUse Standard Input format\nANSWER:\n"}}