{"3046": {"code": ["theofofline $n$ $1$one(n$in the input. The$r$ and column $c$$r_2$ and column $c_2$the$r_2$ and column $c_2$all$n$ lines containsthein$c$$r_2$ and column $c_2$ are$r_1", "thecorners. Thelines$n$the lineand columnthelinethe line$n$ linesthe first line of$r_1$ and column $c_1$the first line ofthe first line ofthe first lineof the input.ofthe first linethings thatthe first line ofthe first line ofcorners thatthat thea\ufffd", ".  public static( ) { for (inin({}(,$c$$r_2$ and column) ) {],{c) {ithe$c$, $r_1$ and $c_2$ aretheline $c$thea\u00a0bottom-right corner in the$c_1$", "a\u00a0syntactically correctcorners.theof(the outputthe program$n$ linesthe( $1$r_2$ or $c_1$ or $c_2$thethe abovetheof $r_2$ and $c_2$$c_2$( $r_1$,$r_2$ and $c_", ".theis{th}corners arethethethethecorners in the sametheinline$i$$j$ isa\u00a0border.thetheis a\u00a0border.thetheto be a\u00a0border. $j$the $i^{\\text {th}}$ bottom-rightin the input,thethe", "$r_2$ andtheitthe samein the input.$i$the$j$and the $i^{\\text {th}}$ bottom-right$j$ are thethetheto$i$$j$th$n$ lines thatthethea\u00a0n\u00a0thethe. split (= a\u00a0n\ufffd", "of the(nthethe first character ofthecorners. Thethe$r,$c$$r, c, $c_1$, and$r_2$ and $c_2$ arethethe $r_1$ and $r_2$arethe$r_2$ and $c_2$ areinonein theof the", "a\u00a0syntactically correct programthethe abovethe abovethebe$r_2$and$c_1$the $c_2$in thethe$r_2$, thethethe abovethe abovethe abovethe abovethe abovethethe above $c_2$ ofthe above $c_2$the abovethe above", "( onein thebeing a\u00a0borderthe$ctheof thea\u00a0bottom-rightthethe above line. Thewill bethethe following lines arethe next(onethe abovethe abovethe above line. Theof thethethe same$r_2$the above line.the abovetheof the above line. The", "theisthethethe$r_1$ and$c_1$ and $c_2$thethe$c_1$ and $c_2$ arethe$c_1$ and $c_2$of$r_1$ and column $c_2$$r_2$ and column $c_2$$c_1$ and column$"], "prompt": "\nQUESTION:\nIn the recently proposed Visual Python++ programming language, a\u00a0block of statements is represented as a\u00a0rectangle of characters with top-left corner in row $r_1$ and column $c_1$, and bottom-right corner in row $r_2$ and column $c_2$. All characters at locations $(r, c)$ with $r_1 \\leq r \\leq r_2$ and $c_1 \\leq c \\leq c_2$ are then considered to belong to that block. Among these locations, the ones with $r = r_1$ or $r = r_2$ or $c = c_1$ or $c = c_2$ are called a\u00a0border.\n\nStatement blocks can be nested (rectangles contained in other rectangles) to an arbitrary level. In a\u00a0syntactically correct program, every two statement blocks are either nested (one contained in the other) or disjoint (not overlapping). In both cases, their borders may not overlap.\n\nProgrammers are not expected to draw the many rectangles contained in a typical program \u2013 this takes too long, and Visual Python++ would not have a\u00a0chance to become the next ICPC programming language. So a programmer only has to put one character \u2018$\\ulcorner $\u2019 in the top-left corner of the rectangle and one character \u2018$\\lrcorner $\u2019 in the bottom-right corner. The parser will automatically match up the appropriate corners to obtain the nesting structure of the program.\n\nYour team has just been awarded a five-hour contract to develop this part of the parser.\n\n-----Input-----\nThe first line of the input contains an integer $n$ ($1 \\leq n \\leq 10^5$), the number of corner pairs. Each of the next $n$ lines contains two integers $r$ and $c$ ($1 \\leq r, c \\leq 10^9$), specifying that there is a top-left corner in row $r$ and column $c$ of the program you are parsing. Following that are $n$ lines specifying the bottom-right corners in the same way. All corner locations are distinct.\n\n-----Output-----\nDisplay $n$ lines, each containing one integer. A number $j$ in line $i$ means that the $i^{\\text {th}}$ top-left corner and the $j^{\\text {th}}$ bottom-right corner form one rectangle. Top-left and bottom-right corners are each numbered from $1$ to $n$ in the order they appear in the input. The output must be a\u00a0permutation of the numbers from $1$ to $n$ such that the matching results in properly nested rectangles. If there is more than one valid matching, any one will be accepted. If no such matching exists, display syntax error.\n\n-----Examples-----\nSample Input 1:\n2\n4 7\n9 8\n14 17\n19 18\nSample Output 1:\n2\n1\n\nSample Input 2:\n2\n4 7\n14 17\n9 8\n19 18\nSample Output 2:\n1\n2\n\nSample Input 3:\n2\n4 8\n9 7\n14 18\n19 17\nSample Output 3:\nsyntax error\nUse Standard Input format\nANSWER:\n"}}