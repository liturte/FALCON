{"14": {"code": ["theifthestack-sortables ) ).(1 )2 ),) ; } ) ;.) ;= 0 ; i <++ ) {; } }) ; } }array a is=.( ) ;=0 ; i <.k ) {k. length ; i ++", "array a is.a = [1, 2, 3;3 from(2 \u2264- k <array bthelength ofini <n.k < nofthe kk <p_1,..., p_{k} (1 \u2264p_2,...,p_{i}p_{k}n - k", "a isstack-sortable; ( int k)= 1if therenkk < nk < n )p_1, p_2,..., p_{k}of n, i < kk < np_{k} (1k < n)thenthearrayi > kthek < nof n, and", "thelistthein thearray bforthe top element ofp_1,..., p_{k} (1nkk < n \u2264k ==k == p_{i}thethek ==k == nthenk == np_{k}p_{i}= n - kk ==if ( p_k ==", "the array barray.)theif thereof thep< n \u2264 k)thethearraythe array bittheofp_1, p_2,..., p_{k}k < narrayof n and kp_{k}thethethein the order of the", "thatarray a is. a, s,= [ ] ; foriin a, si ] =.[[ 1 ] ;[] = [ ] ;= [ ] ;= [ ];= 0 ; i0 ;] ;i] = [ ]i ] ;( ) ;if ( i == k) {[ i", "the orderthestack-sortable.{,,k,, 200000,}.k,, p_1,,,::n-,: k,: k,: k, kk:k, p_1 : k", "in the middle ofa = [1,= [1, 2, 3] is1, 2, 3] isarrayif theof thearrayin thearrayarray p = [1,] ; for= 0 ; i << n ;], kk > n )in the) {],[ k ] =n - k ) ;[ k ]", "of the array s:1 to 3.nthe,=) ; if> n ) {.2 )( n ==) ; }=2, kk < n )n == n )( n ==) {).) ; }( n) ;the length of array", "thearray a is called.2 *the* andthethearray s isandif<n \u2264 p_{i}= p_1.k = p_2.n = p_1.k < n and p_{k}(n \u2264\u2014 the number of elementsarrayofifthethearray p"], "prompt": "\nQUESTION:\nLet's suppose you have an array a, a stack s (initially empty) and an array b (also initially empty).\n\nYou may perform the following operations until both a and s are empty:\n\n  Take the first element of a, push it into s and remove it from a (if a is not empty);  Take the top element from s, append it to the end of array b and remove it from s (if s is not empty). \n\nYou can perform these operations in arbitrary order.\n\nIf there exists a way to perform the operations such that array b is sorted in non-descending order in the end, then array a is called stack-sortable.\n\nFor example, [3, 1, 2] is stack-sortable, because b will be sorted if we perform the following operations:\n\n  Remove 3 from a and push it into s;  Remove 1 from a and push it into s;  Remove 1 from s and append it to the end of b;  Remove 2 from a and push it into s;  Remove 2 from s and append it to the end of b;  Remove 3 from s and append it to the end of b. \n\nAfter all these operations b = [1, 2, 3], so [3, 1, 2] is stack-sortable. [2, 3, 1] is not stack-sortable.\n\nYou are given k first elements of some permutation p of size n (recall that a permutation of size n is an array of size n where each integer from 1 to n occurs exactly once). You have to restore the remaining n - k elements of this permutation so it is stack-sortable. If there are multiple answers, choose the answer such that p is lexicographically maximal (an array q is lexicographically greater than an array p iff there exists some integer k such that for every i < k q_{i} = p_{i}, and q_{k} > p_{k}). You may not swap or change any of first k elements of the permutation.\n\nPrint the lexicographically maximal permutation p you can obtain.\n\nIf there exists no answer then output -1.\n\n\n-----Input-----\n\nThe first line contains two integers n and k (2 \u2264 n \u2264 200000, 1 \u2264 k < n) \u2014 the size of a desired permutation, and the number of elements you are given, respectively.\n\nThe second line contains k integers p_1, p_2, ..., p_{k} (1 \u2264 p_{i} \u2264 n) \u2014 the first k elements of p. These integers are pairwise distinct.\n\n\n-----Output-----\n\nIf it is possible to restore a stack-sortable permutation p of size n such that the first k elements of p are equal to elements given in the input, print lexicographically maximal such permutation.\n\nOtherwise print -1.\n\n\n-----Examples-----\nInput\n5 3\n3 2 1\n\nOutput\n3 2 1 5 4 \nInput\n5 3\n2 3 1\n\nOutput\n-1\n\nInput\n5 1\n3\n\nOutput\n3 2 1 5 4 \nInput\n5 2\n3 4\n\nOutput\n-1\nUse Standard Input format\nANSWER:\n"}}