{"2747": {"code": ["targettarget : int, target )[2,-1])0) return nums.)return [targettargettarget ) ): return [ ]( numstarget )target )( nums])( target ) ))target] ) return[", "- 1target: int):target: target =target = - 1]: target =- 1] return[ ][int target )target : targettarget = - 1]target is not found intarget = - 1]target = - 1#[target]] #target is[[target )[if ( target ==: return [ ]", "( nums: List[int], target: int):[2, -1]:int, target) -> List[int]:\n\nUseformat\nANSWER:=( nums:int, target:0:) ->[2, -1]2:( nums: List[int], target: int)2:\n\nInput: nums =[2,0,0]0", "target : inttarget= [5,7,7,8,8,10], nums = [5,7,7,8,8,10],target =]]0 ]) ): returntargettarget )target ]:returntarget ]target ]. append ( numstarget ] )) ) return target( numstarget ]", "target =(nums: List[int], target: int):List[int]:\n\nSolution:, target ) -> List[int]:, target ).( nums )( nums ) ).( numstarget( numstarget ) ) { returntarget) { return [target)( nums ) )return []) ) )target ) )if ( target", "( nums:target::-( nums:target: int):) ->: return]target ) ->target ), nums, target][ target ]= targetint]= nums [:]. split ([ target ][ target ][ target ] =target ])", "( nums: List[int],target: int) -> int0 : return< target >target > -)( numstarget ) )( numstarget :target )target ))( nums,target ) returntarget ) :[ target ]) ) returntarget ] )target ]( nums, target( nums, target) ) return)( numsnums", ".( nums )( numstargettarget)( numstarget )[ ] )target )len ( numslenlen ) )( nums [target ) ;)len ] =target ][ target ]] ) )) )] ) ) {target] ) )( nums [] )", "=int target : int[int]2:\n\nInput: nums =targettargettargettargettarget ) ->[targettarget ) ->target1:\nInput: nums =target ] returntarget ], numsif targettarget ]target ][ target ] = numstarget ]1:\nInput: nums = [5,7,7,8,8,10", "searchRange(self, nums:target:.( nums. append ( target) return [( nums( nums,target( target ) )self.( target ) ) returntarget )target ) )) )target )returniftarget) )target )[ 1: target) )return [ ] )return ["], "prompt": "\nQUESTION:\nGiven an array of integers nums sorted in ascending order, find the starting and ending position of a given target value.\n\nYour algorithm's runtime complexity must be in the order of O(log n).\n\nIf the target is not found in the array, return [-1, -1].\n\nExample 1:\n\n\nInput: nums = [5,7,7,8,8,10], target = 8\nOutput: [3,4]\n\nExample 2:\n\n\nInput: nums = [5,7,7,8,8,10], target = 6\nOutput: [-1,-1]\nclass Solution:\n    def searchRange(self, nums: List[int], target: int) -> List[int]:\n\nUse Call-Based format\nANSWER:\n"}}