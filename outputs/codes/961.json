{"961": {"code": ["a_11(23 )444 ][2, 4] 3 [2,5 ] 5, answer5 +6 ] 6] 7 [2, 5, 2]5 + 54 ]6 +76 + 766+ (24 ++ 3 = 9655 +5 + 4 =2 +", "of athethe.(1 \u2264 5.{ a_2[]].[ 2, 5,].[ 2,3 ].2 ].) [ 0 ].2 ].2 ].[ 2 ].[ 2 ][ 2 ].[ 2 ].[][ 3 ].5 ] [", "theandthethe..) ;.) ; } }.the..= new.= new int [.= new int [.. length] ;] = c. join () ; }] =] = c.", "they areof the{: [ 00 ]. concat[]. concat ([3 ](3)[2] 1 5 [2]5] 5, answer4 )4 + (25]3 + (23= 9.05.0 )2 ] = 1[2]4 ] 5, answer is4] [2", "a_n )a_23 ) {( 3 \u2264(2[5, 2] 5 [3]5 +4 =52 = 14= 14\n\nInputa_1,...,a_2,..., a_{n} (0 \u2264] {)[1,3 ] [4, 5, 2]2, 5", "thein the) ;1 ) ; }{;1 ) { if (is() {) ;() ; } } }( 1) {( 2 )] ) ;=) ; }) ; }0 ) { if) {( 1 )( 2 ) ;; } } else} } }", "theit is notaof a)thethe.the.)..(). length - 10 ]1 ](1 ].[[ 5 ] [ 345 ] [ 5 ]]3 ] [ 5 ][ 5 ] [ 5] [ 5 ]", "thethetheto theoftheof thetheofthe first test(1 \u2264 5(0 \u2264the first test case1 2 2 5[2, 4, 2]3,)47 +2 = 9.2=043 + (25) +", "the first test caseand) {}2+ 4 +] ; } }= 0 ; i <].(.( ) ; }) { if ()) {( ). length]) ; }0(([ 1 ] ;2)2 ] ; }", "inthe(1 \u2264 5000be in the sameofthethe first test case(1 \u22643 +) + 2 =(2 xor 5)4= 43 = 143 = 9.4 =4 = 9.4 = 4.4 = 5.5.4 =4 = 4.9.2 = 9."], "prompt": "\nQUESTION:\nVladik often travels by trains. He remembered some of his trips especially well and I would like to tell you about one of these trips:\n\nVladik is at initial train station, and now n people (including Vladik) want to get on the train. They are already lined up in some order, and for each of them the city code a_{i} is known (the code of the city in which they are going to).\n\nTrain chief selects some number of disjoint segments of the original sequence of people (covering entire sequence by segments is not necessary). People who are in the same segment will be in the same train carriage. The segments are selected in such way that if at least one person travels to the city x, then all people who are going to city x should be in the same railway carriage. This means that they can\u2019t belong to different segments. Note, that all people who travel to the city x, either go to it and in the same railway carriage, or do not go anywhere at all.\n\nComfort of a train trip with people on segment from position l to position r is equal to XOR of all distinct codes of cities for people on the segment from position l to position r. XOR operation also known as exclusive OR.\n\nTotal comfort of a train trip is equal to sum of comfort for each segment.\n\nHelp Vladik to know maximal possible total comfort.\n\n\n-----Input-----\n\nFirst line contains single integer n (1 \u2264 n \u2264 5000)\u00a0\u2014 number of people.\n\nSecond line contains n space-separated integers a_1, a_2, ..., a_{n} (0 \u2264 a_{i} \u2264 5000), where a_{i} denotes code of the city to which i-th person is going.\n\n\n-----Output-----\n\nThe output should contain a single integer\u00a0\u2014 maximal possible total comfort.\n\n\n-----Examples-----\nInput\n6\n4 4 2 5 2 3\n\nOutput\n14\n\nInput\n9\n5 1 3 1 5 2 4 2 5\n\nOutput\n9\n\n\n\n-----Note-----\n\nIn the first test case best partition into segments is: [4, 4] [2, 5, 2] [3], answer is calculated as follows: 4 + (2 xor 5) + 3 = 4 + 7 + 3 = 14\n\nIn the second test case best partition into segments is: 5 1 [3] 1 5 [2, 4, 2] 5, answer calculated as follows: 3 + (2 xor 4) = 3 + 6 = 9.\nUse Standard Input format\nANSWER:\n"}}