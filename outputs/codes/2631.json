{"2631": {"code": ["= numCourses>) { if::],, 2:::) : #\"C\" ] ) ;[)( self,[ ] ) ;} #to,{ return true }( self,[ ] ) {:) { return false}( self,", "[]] ) -> bool#{ return false#) -> bool:#0:( self,self.,[ 0, 1 ]self.( )self...if ( numCourses{ return( self) )=..( )", ":( selfnumCourses: int,:],( self, numCourses: int,:: int,: int,: int,: int,int ] : int,intint ] : int: int ],int ]= numCourses,, numCourses, numCourses,() { if ()) {", "::::( self, numCourses :) -> bool: return: return= 0: returnif ( numCourses >) ){ return.( self)(.) )) ).( ))self.(). length ; i", "number ofa total of0and then-1. self, numCourses ::) : return= self.) )= self.; return selfnumCourses, prerequisites( self, numCourses,( self, numCourses,) ;= self( self,( self,( selfnumCourses ) ))", "if you havecanof course 0,athatcourse#all the###for0self...[ 0[[ ] ).; } return) ;self.numCourses,( )( ) {", ":numCourses: int:::: int:[2][2] :0:[1] :::2] :1] :: int :: int: int ::::: int: int : intint :: int:: int : int", "( self,) -> bool): if ( numCourses) ==( )[( ).) : return( )() == 1return( ) ==)( )){ if ( numCourses)( ) == 1.( ) == 0)) == 1 )) == 2 ) {", "list of prerequisite pairsa total of() -> bool :: returnFalse([) ) : return. canFinish ( self) ) :)((,) { return[ 1 ]()) { return= self..),.(: [ ] )", "canFinish(self,, numCourses: int,) ->:]:.: if ( numCourses0) : return falsereturn true:.: return false( ) ->.( )=) )()) )( ). add( )self."], "prompt": "\nQUESTION:\nThere are a total of n courses you have to take, labeled from 0 to n-1.\n\nSome courses may have prerequisites, for example to take course 0 you have to first take course 1, which is expressed as a pair: [0,1]\n\nGiven the total number of courses and a list of prerequisite pairs, is it possible for you to finish all courses?\n\nExample 1:\n\n\nInput: 2, [[1,0]] \nOutput: true\nExplanation:\u00a0There are a total of 2 courses to take. \n\u00a0            To take course 1 you should have finished course 0. So it is possible.\n\nExample 2:\n\n\nInput: 2, [[1,0],[0,1]]\nOutput: false\nExplanation:\u00a0There are a total of 2 courses to take. \n\u00a0            To take course 1 you should have finished course 0, and to take course 0 you should\n\u00a0            also have finished course 1. So it is impossible.\n\n\nNote:\n\n\n       The input prerequisites is a graph represented by a list of edges, not adjacency matrices. Read more about how a graph is represented.\n       You may assume that there are no duplicate edges in the input prerequisites.\nclass Solution:\n    def canFinish(self, numCourses: int, prerequisites: List[List[int]]) -> bool:\n        \nUse Call-Based format\nANSWER:\n"}}