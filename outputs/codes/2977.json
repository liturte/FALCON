{"2977": {"code": ["the.thea particular,that isin ain ain aanswer tothe question..theanswer to the.the(the answer tothe questionin the current.answer...in the question. The nextline is the correct.question to be answered. The", "the.  publicquestion..question. question( ).( ).( )) { var answer.answer. question.. answer.(). answer.).). answer.).( ).( ).( ). answer). answer.answer.) ; } elseanswer. answer.", "thethethetheof themoreof the answer. The firstis the questionof thethethethe answer tothe last line is thethe answer toathethe first line is thethethethethe firstthe answer tothe first linethe first line contains oneone positive integerthe second line containsone positive integer.of the answers to", "andthethe;all theanswer. The secondthe questionincongruousity. Thethe answer that is easiestthethethe answer. Theare theofthequestion. The nextis the questionthetheof the answersbeingand a set ofthethethequestion. The second line contains", "theanothertheto bein theit in thethetheto thethetheof the questionthe question to be answered.the answerin theisthe question to bethequestion to beof thethe answer ofthe answer ofthe correct answer. Thethetheand the answer of the", "to answerthethethethe correct( )toanswer to theanswer to theof theone of thequestion. Theof thequestion, which isit is thethe answer to thetothein the question,the second lineofthe firstthe answer tothe oneisthe next line is the", "..a{.(question) { #ifansweraincongruousity of the.( )) { #if) { #if( ) { //. split (= split (. split (( ).( )) {split (,split ( ) {( ) ; }", "a(of a.the.to the.)the answer thattheaof theanswer (s)the same answer.the question tothe.question to be answered.theof theincongruousity of theincongruousity of thethe nexttheis the same as the", "thetothat isathe question to be answered.answering theansweringa single.ifanswering thethe).( ) ; if. is () {.).( )( )( ).(; }question ) ;=answer ( ) ; if", "theoftheforbeingin the questionathe next line containsthein thea specificincongruousity. The first lineis a singleof theis theof thethetheanthe number ofthat aretothe question isthe first line containsthe lastthe answer to the question.the number ofthe questionthe answer"], "prompt": "\nQUESTION:\nIn the intergalactic low budget streaming show \u201cFlag quiz!\u201d, contestants need to answer questions along the lines of \u201cWhat are the joint colors, symbols and shapes occurring on the flags of Empire $X$?\u201d. An empire in this context is simply some subset of entities on the same planet, or otherwise related, according to the fantasies of the Supreme Map Maker. For instance, according to the system set by the Supreme Map Maker, \u201cEmpire Earth Meridian 0\u201d are all nations cut by the zeroth meridian on Earth. This is not necessarily the same system used locally on each planet, for instance the zeroth meridian goes through Stockholm in this system. Knowledge of geography, politics or culture can actually be an obstacle on your way to victory in this challenge! \n\nHowever, sometimes (actually, most of the time) you can figure out the answer to a quiz question just by looking at the alternatives. Being a low budget show, the underpaid quiz question authors strive to minimize their effort in coming up with the alternatives for each question. They construct each alternative by making a small number of changes to the correct answer, where a change consists of replacing one part of the correct answer with something else. For example, transforming \u201cgreen, blue, stripes\u201d into \u201cgreen, yellow, stripes\u201d has one single change, while changing the same answer into \u201clife, universe, stripes\u201d has two changes. The question authors never permute the parts, so order matters. In other words, transforming \u201cgreen, blue, stripes\u201d into \u201cstripes, blue, green\u201d has two changes even though they are both technically the same answer. Note that the answers are case sensitive, so \u201cgreen, blue, stripes\u201d and \u201cGreen, Blue, Stripes\u201d need 3 changes.\n\nYour task is to write a program that automatically finds the most likely answers to questions constructed in this way. Define the incongruousity of an alternative as the maximum number of changes needed to transform that alternative into any of the other alternatives. We then seek the alternative(s) with the smallest incongruousity.\n\n-----Task-----\nGiven a question and a set of potential answers to it, find the answer that is easiest to change into any other answer.\n\n-----Input-----\nThe first line is the question to be answered. The next line contains one positive integer $1 \\leq N \\leq 100$, giving the number of answer alternatives. The next $N$ lines contain one alternative each. The alternatives are lists of parts, separated by a comma and a space. All answers have the same number of parts, at most 100. All parts are strings of letters a-z and A-Z, digits 0-9 and spaces. Each part doesn\u2019t contain leading or trailing spaces (except the space after a comma that separates 2 parts). The maximal length of a part is 50 characters.\n\n-----Output-----\nOutput the alternative that requires the smallest maximum amount of changes to be turned into any other answer. If there are several least incongruous alternatives, output them all in the same order as in the input.\n\n-----Examples-----\nSample Input:\nThe flag of the empire Angola?\n4\nGreen stripe, black stripe, yellow\nRed stripe, black stripe, yellow\nRed stripe, black stripe, white\nRed stripe, green stripe, yellow\nSample Output:\nRed stripe, black stripe, yellow\nUse Standard Input format\nANSWER:\n"}}