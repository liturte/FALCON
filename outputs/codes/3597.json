{"3597": {"code": [".  public,,,: 1.0, 1.0,: 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,, 1.0, 1.01.0, 2.0, 1.0,,, 0.0, 1.0, 0.0,0.0, 1.", ". Thethe=.[ 0 ] ;[ 1 ] ;= 0, 0; }.;=[ 1 ] ;= 0 ; i <[ 0; i ++i ] =i ] ; } }= 1 ; i.,;(:; i. length ; i ++", "tothe{::,,,,,,,, the, the, the new, new( Figure\u00a0H.3).- The.. add (. add (. add (. add (. add (( Figure\u00a0H.1). add (. add ( Figure\u00a0H.2", ".anda newaballthethe sameforthe, a, b ) {(, 1, 0.5,;, 0.5, 0.5,. 1, 0.5, 0.5, 0.5, 0.5, 0.50.5, 0.5(Figure\u00a0H.2),{,", "itthe. Afterthein theA\u2019sA\u2019s new velocity vector isthe.of thetheto theandtheto the top leftbeingthe leftball $3$the top rightball.theof the ballthe top lefttheball.the top right hole.thethe cue ball. if (", "..A\u2019s new velocity vectortoathe left side,abetheball.athethethe left side, andthe right side ofthethe(Figure\u00a0H.3), thethe bottomthe top left hole.isthe top lefttheand the leftof the leftthe right side of the", "offoratheitthe.thethethebeingto thetheball to the(Figure\u00a0H.2). The goalof thethethethethe ball, andthe top left hole.the left side,theball, and then ricochets intoand the right side,the left side. The- the ball", "the.  functionthetheballs.() ;..,{ return; }.[ \"billiards\" ].., \"w\", \"h\"\"d\", \"h\", \"h\"\"k\", \"h\"\"h\", \"h\", \"h\", \"h\",, \"h\",", "with ato-the cueballthebeingtothein thethe).( Figure\u00a0H.2), thethebeingto thethe.the last ball tobeingthe next ball,theand thebeing removed, the following eventsin theball, and then ricochets into ball", "the)aaaball.ball.()theof thethethethe.the abovethis method isthethethebeing(Figure\u00a0H.1), the bottom edge ofthe second ball.the cue ball, andthe top leftthe right side. Thisthe correct case isthe$2$, and"], "prompt": "\nQUESTION:\nYour game development studio, Ad Hoc Entertainment, is currently working on a billiards-based app they\u2019re calling Pool Shark. Players face a sequence of increasingly devious pool puzzles in which they need to carefully position and aim a single billiards shot to sink multiple pool balls.\n\nYou\u2019ve just done the first round of user testing and the feedback is terrible \u2014 players complain that the physics of your pool game is neither fun nor intuitive. After digging into it, you realize that the problem isn\u2019t that your physics code is bad, but rather that most people just don\u2019t have much intuition about how physics works. Fortunately, no one requires your physics to be realistic. After this liberating realization, your team experiments with a few models, eventually settling on the following rule for how to resolve pool-ball collisions:\n\nWhen a moving pool ball B hits a stationary ball A, A begins moving in the direction given by the vector from the center of B to the center of A at the time of the collision. Ball B\u2019s new velocity vector is B\u2019s original vector reflected across A\u2019s new vector (Figure H.1). Note that A\u2019s resulting vector is what real physics predicts, but B\u2019s is not (unless A is glued to the table or has infinite mass). For the purposes of this problem, the speed at which the balls move is irrelevant.\n\n\u00a0\n\n\nFigure H.1\u00a0\n\nFigure H.2\n\nThis actually allows for more interesting challenges, but requires new code to determine whether a particular level is feasible. You\u2019ve been tasked with solving a very particular case:\n\nThree balls labelled $1$, $2$, and $3$ are placed on a table with width $w$ and length $l$ (Figure\u00a0H.2). The player must place the cue ball somewhere on a dashed line lying $h$ units above the bottom edge of the table. The goal is to pick a distance $d$ from the left side, and an angle $\\theta $ such that when the cue ball is shot, the following events happen:\n - The cue ball strikes ball $1$, and then ricochets into ball $2$, sinking ball $2$ in the top left hole.\n - Ball $1$, having been struck by the cue ball, hits ball $3$, sinking ball $3$ in the top right hole.\n\nFor simplicity, assume that sinking a ball requires the center of the ball to pass directly over the center of the hole. Further assume that the table has no sides \u2014 a ball that goes out of the $w$-by-$l$ region simply falls into a digital abyss \u2014 and thus you don\u2019t need to worry about balls colliding with the table itself.\n\nYou need to write a program that, given values for $w$, $l$, $h$, the position of balls $1$\u2013$3$, and the radius $r$ of the balls, determines whether the trick shot is possible.\n\n-----Input-----\nThe input begins with a line containing two positive integers $w$ $l$, the width and length of the pool table, where $w, l \\leq 120$. The left hole is at location $(0,l)$ and the right hole is at location $(w,l)$.\n\nThe next line will contain 8 positive integers $r$ $x_1$ $y_1$ $x_2$ $y_2$ $x_3$ $y_3$ $h$, where $r \\leq 5$ is the radius of all the balls (including the cue ball), $x_ i$ $y_ i$ is the location of ball $i,1 \\leq i \\leq 3$, and $h$ is the distance the dashed line is from the front of the pool table (see the figure above, where $r \\leq h \\leq (1/2)l$). No two balls will ever overlap, though they may touch at a point, and all balls will lie between the dashed line and the back of the table. All balls will lie completely on the table, and the cue ball must also lie completely on the table (otherwise the shot is impossible).\n\n-----Output-----\nFor each test case, display the distance $d$ to place the ball on the dashed line and the angle $\\theta $ to shoot the ball, or the word \u201cimpossible\u201d if the trick shot cannot be done. Output $\\theta $ in degrees, and round both $d$ and $\\theta $ to the nearest hundredth. Always show two digits after the decimal point, even if the digits are zero.\n\n-----Examples-----\nSample Input:\n20 30\n2 10 20 2 24 18 28 10\nSample Output:\n12.74 127.83\nUse Standard Input format\nANSWER:\n"}}