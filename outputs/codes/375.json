{"375": {"code": ["the(thethemthewould bethewasn'tif ((() {; } }) ; } }the.) ; } }if) ; }() ; } }.) ; }.if (( ) ) ; }", "use theisoneS, T, andto bethe samewouldatogetheranaof theofif( ))=; if;> 0 )1 )( ) ;))) { if)", ") {.word \"treading\" (the deletedwordtory orword \"troy\" (the deletedword \"tory\" (the deleted lettersword \"troy\" (the deletedwordwordword \"tory\" or).theword \"tory\" (the deletedword \"tory\"word \"troy\".sample testtwo given words couldthe(the", "that theanumber of distinctthewordtory or troy.is thethecorresponding.=;.= 0 ; i <[ i ] ;] )[ i ] ;]]]}] ; }) { for (1 ; i <[ i ]) { if (", "the sameand aforof the samenofthe same=in the(i.e.for theis a.{a), a.\"treading\" ) ),((), a\"treading\" ), a: \"T\",,, a )", "thethe same wordtheisathetheofoftheword \"treading\"or word \"tory\"thecorrespondingwordsisin(,\"treading\"thethetheword \"treading\" (the deleted lettersin bold).to the", "the same word){=a single. split ( ')if () {0( 10}] =word \"sweet\"S and Ttheisthe. split ( '). split ( '] = \"S\"= \"T\") + \"S\" ; }( \"T\" )", "thetheseto useaword withwordandtreading.in\"treading\"\"treading\" (the deleted letters are\"tory\" or\"troy\".the\"tory\" or\"troy\".\nAnalyzing the\"treading\" or \"tory\".\nAnalyzingatypeain\"treading\"\"treading", ".Asuch as aintheistheisthetheif necessary.theaatheinput typein theofthethewordita word \"treading\".word \"tory\".theword \"troy\". //if(!(getWordFromToros()&&getWordFromToros())&&isWordFrom", "of theS and T.S and Tin the\"sweet\" or \"troy\".word \"tory\"wordS and Tword \"sweet\" (the deleted lettersis marked in bold).a singlefor aofthecorrespondingword \"tory\" (the\"tory\"a\"troy\"theisif ()"], "prompt": "\nQUESTION:\nAnalyzing the mistakes people make while typing search queries is a complex and an interesting work. As there is no guaranteed way to determine what the user originally meant by typing some query, we have to use different sorts of heuristics.\n\nPolycarp needed to write a code that could, given two words, check whether they could have been obtained from the same word as a result of typos. Polycarpus suggested that the most common typo is skipping exactly one letter as you type a word.\n\nImplement a program that can, given two distinct words S and T of the same length n determine how many words W of length n + 1 are there with such property that you can transform W into both S, and T by deleting exactly one character. Words S and T consist of lowercase English letters. Word W also should consist of lowercase English letters.\n\n\n-----Input-----\n\nThe first line contains integer n (1 \u2264 n \u2264 100 000) \u2014 the length of words S and T.\n\nThe second line contains word S.\n\nThe third line contains word T.\n\nWords S and T consist of lowercase English letters. It is guaranteed that S and T are distinct words.\n\n\n-----Output-----\n\nPrint a single integer \u2014 the number of distinct words W that can be transformed to S and T due to a typo.\n\n\n-----Examples-----\nInput\n7\nreading\ntrading\n\nOutput\n1\n\nInput\n5\nsweet\nsheep\n\nOutput\n0\n\nInput\n3\ntoy\ntry\n\nOutput\n2\n\n\n\n-----Note-----\n\nIn the first sample test the two given words could be obtained only from word \"treading\" (the deleted letters are marked in bold).\n\nIn the second sample test the two given words couldn't be obtained from the same word by removing one letter.\n\nIn the third sample test the two given words could be obtained from either word \"tory\" or word \"troy\".\nUse Standard Input format\nANSWER:\n"}}