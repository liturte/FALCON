{"3214": {"code": ["the wordof.  functionwordandis inin the input line containingtwocharacterof(,0 )of the0 ) ;<1 ).; } }+ 1 ) ; }>of the.. word,. word,. word.", "linethatalineisthein thein the input,aofbeing thein theof the word coresthe right of theline containingthe line containingin thein theof the word-twoand the nextin the input,theis thethe word", "and in thetheastringan...( ) ;) ; } }, \" \" )( )( ) ;() {( ) ;;=( ) ;( ) ;( ) ; }0{ return.., \" \" )", "thethe. {.. wordCore ; }. wordCore = (=. wordCore. wordCore.( ){. wordCore.).{. wordCore.) )if (). length > 0; }.wordCore. length > 0. wordCore. length). wordCore0 ) {", "of.  public class:inin thein the input,()the= word...{( ) ) {;( );; } }( ) {; for.[ ]. length[] ) ; } }} ) ; } }", ").  public:words in the( aofinin theword,to theinintext, followed by aword coresin the(athe line containing+theall-theone or more similarlythe word.( word ) ) ;word.", ". the samethe( )theof thecharacters. \u00a0istheoftheof a word coreforthe same as atothe sameword cores thatnota core ofwordif thethe wordandof the samethe wordof a wordline containing a core", ".  function.( ) ) {). split (). join () )) ). join ((. split () ). split ().[]) {.. split (,) ;( ) ;,. join () ). join (). join () ). join", "to use a{((theinanother wordline withthe stringa line containing thestringtheword cores thatin the input, printa line containingtheline containingandtheallall similarly spelledofstring( ).( ) ; for (", "by a) ;the word. \u00a0isthein the text thataofa single. \u00a0isof the line thatatheof theto thelinetheof theline that istheof theone or more similarly spelledof a wordof the(be"], "prompt": "\nQUESTION:\nBetter Documents Inc.\u00a0is contemplating the next generation of word processors. Now, nearly every word processor includes a Spell Checker. BDI, however, is looking forward to replacing that with a true Typo Checker. We\u2019ve all been caught, after relying on a spell checker, by typing mistakes (\u201ctypos\u201d) that just happen to wind up as a correctly spelled word, just not the word we intended. BDI hopes to use AI to determine when a word\u2019s context suggests that it is out of place and probably should have been a different, but similarly spelled, word.\n\nAs a first step in this process, they want to see how common such similar words really are in ordinary text. Write a program to read in paragraphs of text and to produce a list of similarly spelled words occurring in that text.\n\nFor the purpose of this program, a word is any maximal string of non-whitespace characters containing at least one alphabetic character. Whitespace can be either blanks or line terminators (\u201c\\r\u201d or \u201c\\n\u201d). The core of a word is what you have left after removing any non-alphabetic characters and replacing any upper-case alphabetic characters to their lower-case equivalents.\n\nTwo words are considered to be similarly spelled if the core of one word can be converted to the core of the other word by a single application of any one of the following transformations:\n - Delete a single character.\n - Insert a single alphabetic character.\n - Replace a single character by a different alphabetic character.\n - Transpose (exchange) any two adjacent characters.\n\n-----Input-----\nInput consists of $1$ to $100$ lines of text, followed by an end of input marker in the form of a line containing only the string \u201c***\u201d.\n\nEach line of text will contain $0$ to $80$ ASCII characters (not counting line terminators).\n\n-----Output-----\nFor each word core in the text that has one or more similarly spelled words, print a line consisting of\n - That word core\n - A colon (\u201c:\u201d) followed by a blank\n - A list of all similarly spelled word cores (with no duplicates and not containing the core to the left of the colons), in alphabetic order, separated by single spaces.\n\nThe lines printed should be in alphabetic order of the word cores to the left of the colon.\n\nIf there are no similarly spelled words in the input, print a single line containing the string \u201c***\u201d.\n\n-----Examples-----\nSample Input 1:\nLost is Close to Lose\n\n\"Better Documents Inc. wants to add Typo Checking in to the\nnext generation of word processors,\" he said.\n***\nSample Output 1:\nclose: lose\nhe: the\nin: inc is\ninc: in\nis: in\nlose: close lost\nlost: lose\nthe: he\n\nSample Input 2:\nThe fox said, \"When?\"\n\"Not till 12 o'clock\", replied the hen.\n\"That clock is stopped, it will never strike.\", he said.\n***\nSample Output 2:\nclock: oclock\nhe: hen the\nhen: he when\nis: it\nit: is\noclock: clock\nthe: he\ntill: will\nwhen: hen\nwill: till\nUse Standard Input format\nANSWER:\n"}}