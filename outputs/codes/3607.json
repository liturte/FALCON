{"3607": {"code": ["thethe followingthe=<PRINT_STATEMENT><PRINT_STATEMENT> is the<PRINT_STATEMENT> is thethe<PRINT_STATEMENT> is thein the input,thethe<PRINT_STATEMENT> is theof the<PRINT_STATEMENT> is the<PRINT_STATEMENT> istheaof thethethe\" + \"stringand thea", "= - 1 : C0.0 /- 1 \uff0c=<PRINT_STATEMENT>A<PRINT_STATEMENT>a-- 1* 32768AA =A =A =A = A= AA = AA= AA = A +AA = AA = A +A + A + A", "thethe label(A through Z) and= -1 / 2   =-0 \u00b0- 2147483648-- 1 /---- 2147483648-=A-Z, A-Z, A-Z, 0-9, A-Z,<PRINT_STATEMENT> isthe variable name(A through Z) andthe", ".;; if (<ARITHMETIC_STATEMENT><ARITHMETIC_STATEMENT> and<PRINT_STATEMENT> areanumber ofthe number ofthe<PRINT_STATEMENT> andof the variable<ARITHMETIC_STATEMENT> and <ARITHMETIC_STATEMENT> areof thethe(X, Y) arethe=<ARITHMETIC_", "thethe: -;-<ARITHMETIC_STATEMENT> is a singlethea string ofaa variable name;<ARITHMETIC_STATEMENT> is1 + AA +=X +XY+X/- X * X,X + X, XX, X +X, X, XX, X, X", "thethe number ofthe variabletheif the statementaaof theof=.<ARITHMETIC_STATEMENT> is anin thetype, and isarein theanda string with thetheof the variablein theof the variablethe(X, Y) aretheof the integer X,X, or Xa<", "/ 2 /A* 328 *<ARITHMETIC_STATEMENT>1* 328 */- 1 \u2212 111 +-- 1 \u2212 1------ 1 / 2- 1-- 1--) /- 1 - 1 -1 -", ".=1 \u00e0 <ARITHMETIC_STATEMENT<ARITHMETIC_STATEMENT>+ 1 \u00e0+ 1 \u00e0<ARITHMETIC_STATEMENT> is one of the- 1<ARITHMETIC_STATEMENT> is one of the= 1 \u00e0 <ARITHMETIC_STATEMENT> istheofof<ARITHMETIC_STATEMENT> is one", "thethe= 0 \u2212 11- 1 \u2212 1-<PRINT_STATEMENT> is<ARITHMETIC_STATEMENT> is one of--.>>= 0 \u2212 1><ARITHMETIC_STATEMENT> is one of the<ARITHMETIC_STATEMENT> is one of the<ARITHMETIC_STATEMENT>", "Aa: AAA == 1 \u2214 A == - 1 \u2214 A1 \u2214 AA =A ==a, A = -A = -A =A =A = -A =A =A = - 1A === 0= -1 \u2214A =A"], "prompt": "\nQUESTION:\nThe BASIC computer programming language has been popular for many years, and there have been dozens of \u2018dialects\u2019 of the language. It\u2019s considered a high-level language and is typically interpreted (rather than compiled). For this problem, write an interpreter for a restricted dialect of BASIC. Here is a description of the language.\n\nEach input line contains one statement. Each statement begins with a non-negative integer, which we will call its label. Following the label is a single space and one of the following commands (with explanations following):\n - LET X = <ARITHMETIC_STATEMENT>\n\n Assign the result of the arithmetic statement to variable X.\n - IF <CONDITION> THEN GOTO L\n\n If the boolean given is true, then go to the statement labeled L, where L is a valid label. (If the condition is not true, continue execution to the statement with the next lowest label.)\n - PRINT <PRINT_STATEMENT>\n\n Produce output, without an appended newline.\n - PRINTLN <PRINT_STATEMENT>\n\n Produce output, with an appended newline.\n\nHere are details on types, variables, and the terms <ARITHMETIC_STATEMENT>, <CONDITION>, and <PRINT_STATEMENT> used above.\n - All numeric values (in the input and for the variable representation) are signed 32-bit integers.\n - All variables are single uppercase characters (A through Z). They are all global in scope, and are all initialized to zero before program execution begins.\n - <ARITHMETIC_STATEMENT> is one of the following: X, X + Y, X - Y, X * Y, or X / Y. Here, X and Y each indicate either a variable or an integer.\n - <CONDITION> is one of the following: X = Y, X > Y, X < Y, X <> Y, X <= Y, or X >= Y. Again, X and Y each indicate either a variable or an integer. Here, <> indicates inequality.\n - <PRINT_STATEMENT> is either a variable name or a literal string delimited by double quotes. Inside the quotes, the string contains only alphanumeric characters (a-z, A-Z, 0-9) and spaces.\n\nIn the signed 32-bit arithmetic, the usual rules of truncation towards zero (for division) and overflow (for addition and multiplication) and underflow (for subtraction) apply. The following examples illustrate these conditions:\n\n5 / 2   = 2  65536 * 32768   = -2147483648\n-1 / 2  = 0  -65536 * 32768  = -2147483648\n2147483647 + 1  = -2147483648        -2147483648 * 2 = 0\n-2147483648 - 1 = 2147483647 2147483647 * 2  = -2\n\nFurther, division by zero will not occur.\n\nProgram execution begins with the statement having the smallest label, and proceeds with the statement having the next smallest label. (Unless a GOTO executes, in which case execution proceeds at the designated label.) The program halts after it has completed the statement with the largest label (which is guaranteed not to contain a GOTO).\n\n-----Input-----\nInput consists of a single program. Each line contains a single valid statement. Each pair of adjacent tokens in the input is separated by a single space. Integers in the input will all be in the range $-2^{31}$ to $2^{31}-1$. Input ends at end of file.\n\n-----Output-----\nGive the output (PRINT and PRINTLN statements) of the input program when it is executed.\n\n-----Examples-----\nSample Input:\n10 LET A = 1\n20 PRINT \"HELLO THERE \"\n30 PRINTLN A\n40 LET A = A + 1\n50 IF A <= 5 THEN GOTO 20\n60 PRINTLN \"DONE\"\nSample Output:\nHELLO THERE 1\nHELLO THERE 2\nHELLO THERE 3\nHELLO THERE 4\nHELLO THERE 5\nDONE\nUse Standard Input format\nANSWER:\n"}}